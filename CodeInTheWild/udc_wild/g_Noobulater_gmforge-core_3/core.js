// This is the segment of code for controls, key shortcuts etc
var _nextKey = 0;
var hotkeys = {};

function _keyTrans(keys) {
  var keyCodes = {};
  keyCodes[16] = "Shift";
  keyCodes[17] = "Ctrl";
  keyCodes[18] = "Alt";
  keyCodes[37] = "arrow-left";
  keyCodes[38] = "arrow-up";
  keyCodes[39] = "arrow-right";
  keyCodes[40] = "arrow-down";

  keyCodes[70] = "f";

  var str = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  for (var i=0; i<str.length; i++) {
    keyCodes[str.charCodeAt(i)] = str.charAt(i);
  }
  keyCodes[90] = "Z";

  var split = keys.split(",");
  var str = "";
  for (var key in split) {
    str = str + keyCodes[parseInt(split[key])] + "+";
  }
  return str.substring(0, str.length-1);
}

const _undo = "17,90";
hotkeys[_undo] = {
  name : "Undo",
  combo : _keyTrans(_undo),
  exe : function() {
    if (!($(':focus').is("input") || $(':focus').is("textarea"))) {
      //util.undo();
    }
  },
  override : false,
}


const _copy = "17,67";
hotkeys[_copy] = {
  name : "Copy Map Selection",
  combo : _keyTrans(_copy),
  exe : function() {
    if (Object.keys(boardApi.selections) && Object.keys(boardApi.selections).length) {
      if (!($(':focus').is("input") || $(':focus').is("textarea"))) {
        var numSelected = Object.keys(boardApi.selections).length;
        for (var i in boardApi.selections) {
          var selectData = boardApi.selections[i];
          var board = getEnt(selectData.board);
          if (board && hasSecurity(getCookie("UserID"), "Rights", board.data)) {
            var objectData = board.data.layers[selectData.layer][selectData.type][selectData.index];
            if (selectData.type == "t") {
              boardApi.addObject(duplicate(objectData), selectData.layer, selectData.type, board);
            }
            else if (selectData.type == "p") {
              // duplicate the entity
              var ent = getEnt(objectData.eID);
              if (ent && ent.data && ent.data._t == "c" && numSelected == 1) {
                function dupeReturn(ent, pieceData, boardIndex, layer) {
                  var lastKeys = Object.keys(game.entities.data);
                  var newChar = duplicate(ent.data);
                  var name = sync.rawVal(newChar.info.name) || "";
                  name = name.split("#")[0].trim();
                  var match = name.match("#(\\d+)");
                  var max = 0;
                  for (var key in game.entities.data) {
                    if (game.entities.data[key].data._t == "c" && sync.rawVal(game.entities.data[key].data.info.name).match("#(\\d+)")) {
                      if (max < sync.rawVal(game.entities.data[key].data.info.name).match("#(\\d+)")[1]) {
                        max = parseInt(sync.rawVal(game.entities.data[key].data.info.name).match("#(\\d+)")[1]);
                      }
                    }
                  }

                  sync.rawVal(newChar.info.name, name + " #" + (max + 1));

                  runCommand("createCharacter", newChar);
                  game.entities.listen["pieceCopy"] = function(rObj, newObj, target) {
                    var board = getEnt(boardIndex);
                    var change = true;
                    for (var key in game.entities.data) {
                      if (!util.contains(lastKeys, key)) {
                        pieceData.eID = key;
                        boardApi.addObject(pieceData, selectData.layer, selectData.type, board);
                        change = false;
                        break;
                      }
                    }
                    return change;
                  }
                }
                dupeReturn(ent, duplicate(objectData), selectData.board, selectData.layer);
                break;
              }
              else {
                boardApi.addObject(duplicate(objectData), selectData.layer, selectData.type, board);
              }
            }
            else if (selectData.type == "d") {
              boardApi.addObject(duplicate(objectData), selectData.layer, selectData.type, board);
            }
          }
        }
        sendAlert({text : "Duplicated"});
      }
    }
  },
  override : false,
}

const _quickSearch = "16,17,70";
hotkeys[_quickSearch] = {
  name : "Quick Search",
  combo : _keyTrans(_quickSearch),
  exe : function() {
    if (!$("#quick-search").length) {
      if (!game.locals["workshop"]) {
        var tempObj = sync.obj();
        tempObj.data = {};

      }
      else {
        var newApp = sync.newApp("ui_quickSearch");
        newApp.addClass("flex");
        newApp.css("border-color", "transparent");

        game.locals["quicksearch"] = game.locals["quicksearch"] || sync.obj();
        game.locals["quicksearch"].data = game.locals["quicksearch"].data || {filter : "c"};

        game.locals["quicksearch"].addApp(newApp);

        var pop = ui_popOut({
          target : $("body"),
          noCss : true,
          prompt : true,
          id : "quick-search",
          style : {width : "400px", "border-width" : "0px"}
        }, newApp);
        pop.removeClass("ui-popout")
        pop.draggable("destroy");
        pop.css("box-shadow", "none");
        pop.css("z-index", "100000000000000");
        pop.css("left", "20px");
        pop.css("top", "40px");
      }
    }
    else {
      $("#quick-search").toggle();
      if ($("#quick-search").is(":visible")) {
        $("#quick-search").addClass("prompt");
        $("#quick-search").find("input").focus();
      }
    }
  },
}

const _quickCalc = "17,90,67";
hotkeys[_quickCalc] = {
  name : "Quick Calc",
  combo : _keyTrans(_quickCalc),
  exe : function() {
    if (!$("#quick-calc").length) {
      var newApp = sync.newApp("ui_quickCalc");
      newApp.addClass("flex");

      game.locals["quickcalc"] = game.locals["quickcalc"] || sync.obj();
      game.locals["quickcalc"].data = game.locals["quickcalc"].data || {};

      game.locals["quickcalc"].addApp(newApp);

      ui_popOut({
        target : $("body"),
        id : "quick-calc",
        style : {width : "200px"}
      }, newApp);
    }
    else {
      if ($("#quick-calc").attr("faded")) {
        layout.coverlay("quick-calc");
      }
      else {
        $("#quick-calc").attr("faded", true);
        $("#quick-calc").css("opacity", "0.5");
        $("#quick-calc").hover(function(){
          $(this).css("opacity", "");
        },
        function(){
          $(this).css("opacity", "0.5");
        });
      }
    }
  },
}

const _hotkey = "16,90,72";
hotkeys[_hotkey] = {
  name : "Toggle HotKey List",
  combo : _keyTrans(_hotkey),
  exe : function() {
    toggleHotKeysDisplay();
  },
}

const _roll = "16,90,82";
hotkeys[_roll] = {
  name : "Roll Dice",
  combo : _keyTrans(_roll),
  exe : function() {
    var content = $("<div>");
    content.addClass("flex flexcolumn padding");

    game.locals["diceRoll"] = game.locals["diceRoll"] || sync.obj();
    game.locals["diceRoll"].data = game.locals["diceRoll"].data || {};

    var extraDice = sync.newApp("ui_dicePooler").appendTo(content);
    game.locals["diceRoll"].addApp(extraDice);

    var confirmWrap = $("<div>").appendTo(content);
    confirmWrap.addClass("flexrow");

    var checkWrap = $("<div>").appendTo(confirmWrap);
    checkWrap.addClass("flexcolumn lrmargin");

    var check = $("<div>").appendTo(checkWrap);
    check.addClass("flexmiddle");

    var close = genInput({
      parent : check,
      type : "checkbox",
      style : {"margin-top" : "0"},
    });
    close.prop("checked", true);
    check.append("<b class='subtitle lrpadding'>Close after rolling</b>");

    var check = $("<div>").appendTo(checkWrap);
    check.addClass("flexmiddle");

    var show = genInput({
      parent : check,
      type : "checkbox",
      style : {"margin-top" : "0"},
    });
    show.prop("checked", false);
    show.change(function(){
      if (show.prop("checked") == true) {
        extraDice.attr("show", "true");
      }
      else {
        extraDice.attr("show", "false");
      }
      game.locals["diceRoll"].update();
    });
    check.append("<b class='subtitle lrpadding'>Show all dice types</b>");

    var button = $("<button>").appendTo(confirmWrap);
    button.addClass("flex");
    button.append("Roll");
    button.click(function(){
      snd_diceRoll.play();
      var context = sync.defaultContext();

      var equation = "";
      for (var i in game.locals["diceRoll"].data.dice) {
        equation += game.locals["diceRoll"].data.dice[i]+"["+i+"]+";
      }
      equation = equation.substring(0, equation.length-1);

      var icon;
      var ic;
      util.processEvent("/r " + equation, "rolled", icon, ic);
      if (close.prop("checked") == true) {
        layout.coverlay("dice-popout-"+extraDice.attr("id"), 500);
      }
    });


    var button = $("<button>").appendTo(confirmWrap);
    button.addClass("subtitle background alttext");
    button.append("Private");
    button.click(function(){
      snd_diceRoll.play();
      var context = sync.defaultContext();

      var equation = "";
      for (var i in game.locals["diceRoll"].data.dice) {
        equation += game.locals["diceRoll"].data.dice[i]+"["+i+"]+";
      }
      equation = equation.substring(0, equation.length-1);

      var icon;
      var ic;
      var priv = {};
      priv[getCookie("UserID")] = true;
      util.processEvent("/r " + equation, "rolled", icon, ic, priv);
      if (close.prop("checked") == true) {
        layout.coverlay("dice-popout-"+extraDice.attr("id"), 500);
      }
    });


    var popout = ui_popOut({
      target : $("body"),
      title : "Dice Roller",
      align : "bottom",
      id : "dice-popout",
      style : {"width": "300px"},
    }, content);
    popout.resizable();
  },
}

/*
const _display = "16,90,68";
hotkeys[_display] = {
  name : "Force To Display",
  combo : _keyTrans(_display),
  exe : function() {
    sync.replaceApps({apps : ["ui_board"], newApp : "ui_display", all : true});
    runCommand("forceView", {apps : ["ui_board"], newApp : "ui_display", all : true});
  },
}
const _board = "16,90,66";
hotkeys[_board] = {
  name : "Force to map",
  combo : _keyTrans(_board),
  exe : function() {
    sync.replaceApps({apps : ["ui_display"], newApp : "ui_board", all : true});
    runCommand("forceView", {apps : ["ui_display"], newApp : "ui_board", all : true});
  },
}
*/

const _combat = "16,90,67";
hotkeys[_combat] = {
  name : "Toggle Combat",
  combo : _keyTrans(_combat),
  exe : function() {
    if (game.state && game.state.data.combat) {
      delete game.state.data.combat;
      game.state.sync("disableCombat");
    }
    else {
      if (game.locals["turnOrder"] && game.locals["turnOrder"].data && Object.keys(game.locals["turnOrder"].data.combat.engaged).length) {
        var compare = function (obj1, obj2) {
          return sync.eval(game.templates.initiative.compare, {i1 : obj1, i2 : obj2});
        }

        game.state.data.combat = duplicate(game.locals["turnOrder"].data.combat);
        var randomInit = duplicate(game.locals["turnOrder"].data.combat.current);
        // roll the randoms if it isn't a player
        var pEnts = {};
        for (var k in game.players.data) {
          if (game.players.data[k].entity && !hasSecurity(k, "Game Master")) {
             pEnts[game.players.data[k].entity] = k;
          }
        }
        for (var i in randomInit.e) {
          if (!pEnts[randomInit.e[i]] && compare(game.state.data.combat.engaged[randomInit.e[i]], {}) == 0) {
            var sp;
            var ok;
            if (game.state.data.combat.engaged[randomInit.e[i]]) {
              if (game.state.data.combat.engaged[randomInit.e[i]].sp) {
                sp = game.state.data.combat.engaged[randomInit.e[i]].sp;
              }
              if (game.state.data.combat.engaged[randomInit.e[i]].ok) {
                ok = game.state.data.combat.engaged[randomInit.e[i]].ok;
              }
            }
            game.state.data.combat.engaged[randomInit.e[i]] = calc.initiative(game.entities.data[randomInit.e[i]]);
            game.state.data.combat.engaged[randomInit.e[i]].sp = sp;
            game.state.data.combat.engaged[randomInit.e[i]].ok = ok;
          }
        }
        game.state.data.combat.current = {};

        for (var id in game.state.data.combat.engaged) {
          if (compare(game.state.data.combat.engaged[id], game.state.data.combat.current) > 0) {
            game.state.data.combat.current = duplicate(game.state.data.combat.engaged[id]);
          }
        }
        game.state.data.combat.round = sync.newValue("Round", 0);
        game.state.sync("updateState");
        runCommand("enableCombat");
      }
      else {
        sendAlert({text : "No Combat Configured"});
      }
    }
  },
}

const _media = "16,90,77";
hotkeys[_media] = {
  name : "Media Player",
  combo : _keyTrans(_media),
  exe : function() {
    if ($("#media-player").length) {
      if ($("#media-player").is(":visible")) {
        $("#media-player").hide();
      }
      else {
        $("#media-player").show();
        var max = util.getMaxZ(".ui-popout");
        $("#media-player").css("z-index", max+1);
      }
    }
    else {
      var newApp = sync.newApp("ui_media", true);

      var popOut = ui_popOut({
        target : $("body"),
        title : "Youtube Player",
        id : "media-player",
        close : function(ev, ui) {
          popOut.hide();
          return false;
        },
        style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
      }, newApp);
      popOut.resizable();
    }
  }
}

const _mediaplay = "16,90,83";
hotkeys[_mediaplay] = {
  name : "Play/Pause Media",
  combo : _keyTrans(_mediaplay),
  exe : function() {
    if (mediaPlayer && mediaPlayer.video) {
      if (mediaPlayer.isPlaying && !mediaPlayer.isPlaying()) {
        runCommand("media", {cmd : "play"});
      }
      else {
        mediaPlayer.pause();
      }
    }
  }
}

const _options = "16,90,79";
hotkeys[_options] = {
  name : "Game Configuration",
  combo : _keyTrans(_options),
  exe : function() {
    var frame = layout.page({title: "Game Configuration", prompt : "Change information on how this server", blur: 0.5, id : "gameOptions"});

    var newApp = sync.newApp("ui_gameCtrl", game.config);
    newApp.appendTo(frame);
  }
}

const _nextTurn = "16,90,39";
hotkeys[_nextTurn] = {
  name : "Next Turn",
  combo : _keyTrans(_nextTurn),
  exe : function() {
    var obj = game.state;
    var data = game.state.data;
    var compare = function (obj1, obj2) {
      return sync.eval(game.templates.initiative.compare, {i1 : obj1, i2 : obj2});
    }

    var inits = [];
    for (var i in data.combat.engaged) {
      var ref = Math.max(inits.length-1, 0);
      while (ref != null && ref >= 0) {
        if (ref == inits.length && inits.length == 0) {
          var added = duplicate(data.combat.engaged[i]);
          added.e = [i];
          inits.push(added);
          ref = null;
        }
        else {
          if (compare(data.combat.engaged[i], inits[ref]) > 0) {
            var added = duplicate(data.combat.engaged[i]);
            added.e = [i];
            if (ref == inits.length-1) {
              inits.push(added);
            }
            else {
              util.insert(inits, ref+1, added);
            }
            ref = null;
          }
          else if (compare(data.combat.engaged[i], inits[ref]) == 0) {
            inits[ref].e = inits[ref].e || [];
            if (!util.contains(inits[ref].e, i)) {
              inits[ref].e.push(i);
            }
            ref = null;
          }
        }
        if (ref != null) {
          ref--;
        }
      }
      if (ref != null && ref == -1) {
        var added = duplicate(data.combat.engaged[i]);
        added.e = [i];
        var newInit = [added];
        for (var j=0; j<inits.length; j++) {
          newInit.push(inits[j]);
        }
        inits = newInit;
      }
    }

    var turn;
    for (var j in inits) {
      if (compare(data.combat.current, inits[j]) == 0) {
        turn = parseInt(j);
        break;
      }
    }

    var newTurn = turn-1;
    function changeTurn() {
      if (turn == 0) {
        newTurn = inits.length-1;
        sync.val(data.combat.round, sync.val(data.combat.round) + 1);
        for (var key in data.combat.engaged) {
          delete data.combat.engaged[key].ok;
          delete data.combat.engaged[key].sp;
        }
      }
      else {
        for (var key in data.combat.engaged) {
          if (compare(inits[turn], data.combat.engaged[key]) == 0) {
            data.combat.engaged[key].ok = true;
          }
        }
      }
      data.combat.current = inits[newTurn];
      obj.sync("updateState");
    }
    for (var key in game.players.data) {
      var player = game.players.data[key];
      if (player.entity && data.combat.engaged[player.entity] && !data.combat.engaged[player.entity].ok) {
        if (compare(data.combat.engaged[player.entity], inits[turn]) == 0) {
          if ($("#confirm-skip-turn").length) {
            changeTurn();
            layout.coverlay("confirm-skip-turn");
          }
          else {
            var popOut = ui_prompt({
              target : $("body"),
              id : "confirm-skip-turn",
              confirm : "Skip Player(s)?",
              click : function(ev, inputs) {
                changeTurn();
              }
            });
          }
          return;
        }
      }
    }
    changeTurn();
  }
}
const _topTurn = "16,90,38";
hotkeys[_topTurn] = {
  name : "Last Round",
  combo : _keyTrans(_topTurn),
  exe : function() {
    var obj = game.state;
    var data = game.state.data;
    var compare = function (obj1, obj2) {
      return sync.eval(game.templates.initiative.compare, {i1 : obj1, i2 : obj2});
    }

    var inits = [];
    for (var i in data.combat.engaged) {
      var ref = Math.max(inits.length-1, 0);
      while (ref != null && ref >= 0) {
        if (ref == inits.length && inits.length == 0) {
          var added = duplicate(data.combat.engaged[i]);
          added.e = [i];
          inits.push(added);
          ref = null;
        }
        else {
          if (compare(data.combat.engaged[i], inits[ref]) > 0) {
            var added = duplicate(data.combat.engaged[i]);
            added.e = [i];
            if (ref == inits.length-1) {
              inits.push(added);
            }
            else {
              util.insert(inits, ref+1, added);
            }
            ref = null;
          }
          else if (compare(data.combat.engaged[i], inits[ref]) == 0) {
            inits[ref].e = inits[ref].e || [];
            if (!util.contains(inits[ref].e, i)) {
              inits[ref].e.push(i);
            }
            ref = null;
          }
        }
        if (ref != null) {
          ref--;
        }
      }
      if (ref != null && ref == -1) {
        var added = duplicate(data.combat.engaged[i]);
        added.e = [i];
        var newInit = [added];
        for (var j=0; j<inits.length; j++) {
          newInit.push(inits[j]);
        }
        inits = newInit;
      }
    }

    var turn;
    for (var j in inits) {
      if (compare(data.combat.current, inits[j]) == 0) {
        turn = parseInt(j);
        break;
      }
    }

    var newTurn = 0;
    sync.val(data.combat.round, sync.val(data.combat.round) - 1);
    data.combat.current = inits[newTurn];
    for (var key in data.combat.engaged) {
      data.combat.engaged[key].ok = true;
    }
    obj.sync("updateState");
  }
}
const _lastTurn = "16,90,37";
hotkeys[_lastTurn] = {
  name : "Last Turn",
  combo : _keyTrans(_lastTurn),
  exe : function() {
    var obj = game.state;
    var data = game.state.data;
    var compare = function (obj1, obj2) {
      return sync.eval(game.templates.initiative.compare, {i1 : obj1, i2 : obj2});
    }

    var inits = [];
    for (var i in data.combat.engaged) {
      var ref = Math.max(inits.length-1, 0);
      while (ref != null && ref >= 0) {
        if (ref == inits.length && inits.length == 0) {
          var added = duplicate(data.combat.engaged[i]);
          added.e = [i];
          inits.push(added);
          ref = null;
        }
        else {
          if (compare(data.combat.engaged[i], inits[ref]) > 0) {
            var added = duplicate(data.combat.engaged[i]);
            added.e = [i];
            if (ref == inits.length-1) {
              inits.push(added);
            }
            else {
              util.insert(inits, ref+1, added);
            }
            ref = null;
          }
          else if (compare(data.combat.engaged[i], inits[ref]) == 0) {
            inits[ref].e = inits[ref].e || [];
            if (!util.contains(inits[ref].e, i)) {
              inits[ref].e.push(i);
            }
            ref = null;
          }
        }
        if (ref != null) {
          ref--;
        }
      }
      if (ref != null && ref == -1) {
        var added = duplicate(data.combat.engaged[i]);
        added.e = [i];
        var newInit = [added];
        for (var j=0; j<inits.length; j++) {
          newInit.push(inits[j]);
        }
        inits = newInit;
      }
    }

    var turn;
    for (var j in inits) {
      if (compare(data.combat.current, inits[j]) == 0) {
        turn = parseInt(j);
        break;
      }
    }

    var newTurn = turn+1;
    if (turn == inits.length-1) {
      newTurn = 0;
      sync.val(data.combat.round, sync.val(data.combat.round) - 1);
      for (var key in data.combat.engaged) {
        data.combat.engaged[key].ok = true;
      }
    }
    else {
      for (var key in data.combat.engaged) {
        if (compare(inits[turn], data.combat.engaged[key]) == 0) {
          delete data.combat.engaged[key].ok;
        }
      }
    }
    data.combat.current = inits[newTurn];
    obj.sync("updateState");
  }
}
const _finalTurn = "16,90,40";
hotkeys[_finalTurn] = {
  name : "Next Round",
  combo : _keyTrans(_finalTurn),
  exe : function() {
    var obj = game.state;
    var data = game.state.data;
    var compare = function (obj1, obj2) {
      return sync.eval(game.templates.initiative.compare, {i1 : obj1, i2 : obj2});
    }

    var inits = [];
    for (var i in data.combat.engaged) {
      var ref = Math.max(inits.length-1, 0);
      while (ref != null && ref >= 0) {
        if (ref == inits.length && inits.length == 0) {
          var added = duplicate(data.combat.engaged[i]);
          added.e = [i];
          inits.push(added);
          ref = null;
        }
        else {
          if (compare(data.combat.engaged[i], inits[ref]) > 0) {
            var added = duplicate(data.combat.engaged[i]);
            added.e = [i];
            if (ref == inits.length-1) {
              inits.push(added);
            }
            else {
              util.insert(inits, ref+1, added);
            }
            ref = null;
          }
          else if (compare(data.combat.engaged[i], inits[ref]) == 0) {
            inits[ref].e = inits[ref].e || [];
            if (!util.contains(inits[ref].e, i)) {
              inits[ref].e.push(i);
            }
            ref = null;
          }
        }
        if (ref != null) {
          ref--;
        }
      }
      if (ref != null && ref == -1) {
        var added = duplicate(data.combat.engaged[i]);
        added.e = [i];
        var newInit = [added];
        for (var j=0; j<inits.length; j++) {
          newInit.push(inits[j]);
        }
        inits = newInit;
      }
    }

    var turn;
    for (var j in inits) {
      if (compare(data.combat.current, inits[j]) == 0) {
        turn = parseInt(j);
        break;
      }
    }

    data.combat.current = inits[inits.length-1];
    sync.val(data.combat.round, sync.val(data.combat.round) + 1);
    for (var key in data.combat.engaged) {
      delete data.combat.engaged[key].ok;
      delete data.combat.engaged[key].sp;
    }
    obj.sync("updateState");
  }
}

var _down = {};
var KEYCODE_ESC = 27;
function controlsKeyDown(e) {
  e.keyCode = e.keyCode || e.which;
  _down[e.keyCode] = true;

  if (!($(':focus').is("input") || $(':focus').is("textarea"))) {
    if (e.keyCode == KEYCODE_ESC && $("#splash-button").length) {
      if ($("#splash-screen").length) {
        layout.coverlay("splash-screen");
      }
      else {
        $("#splash-button").click();
      }
    }
    else {
      var updateList = {};
      var spliceData = {list : []};
      var deleteSelections = {};
      for (var i in boardApi.selections) {
        var selectData = boardApi.selections[i];
        var board = getEnt(selectData.board);
        if (board && board.data) {
          if (selectData.index != null) {
            if (selectData.type == "p") {
              var pieceData = board.data.layers[selectData.layer].p[selectData.index];
              if (pieceData) {
                var ent = getEnt(pieceData.eID);
                if (hasSecurity(getCookie("UserID"), "Rights", board.data) || (ent && hasSecurity(getCookie("UserID"), "Rights", ent.data))) {
                  var oldX = pieceData.x;
                  var oldY = pieceData.y;
                  var diffX = 0;
                  var diffY = 0;

                  var layer = selectData.layer;
                  var override = false;

                  if (e.keyCode == 46) { // delete
                    spliceData.target = board.data.layers[selectData.layer].p;
                    layout.coverlay($(".piece-quick-edit"));
                    if (hasSecurity(getCookie("UserID"), "Rights", board.data)) {
                      deleteSelections[i] = selectData;
                      boardApi.selections[i].selected.visible = false;
                      //boardApi.destroyObject(selectData.layer, selectData.type, selectData.index, board);
                    }
                  }
                  else if (e.keyCode == 37) {
                    pieceData.x = pieceData.x - (board.data.gridW || pieceData.w);
                    diffX = (board.data.gridW || pieceData.w) * -1;
                    selectData.wrap.update();
                    e.stopPropagation();
                    e.preventDefault();
                    //updateList[board.id()] = "updateAsset";
                  }
                  else if (e.keyCode == 38) {
                    pieceData.y = pieceData.y - (board.data.gridH || pieceData.h);
                    diffY = (board.data.gridH || pieceData.h) * -1;
                    selectData.wrap.update();
                    e.stopPropagation();
                    e.preventDefault();
                    //updateList[board.id()] = "updateAsset";
                  }
                  else if (e.keyCode == 39) {
                    pieceData.x = pieceData.x + (board.data.gridW || pieceData.w);
                    diffX = (board.data.gridW || pieceData.w);
                    selectData.wrap.update();
                    e.stopPropagation();
                    e.preventDefault();
                    //updateList[board.id()] = "updateAsset";
                  }
                  else if (e.keyCode == 40) {
                    pieceData.y = pieceData.y + (board.data.gridH || pieceData.h);
                    diffY = (board.data.gridH || pieceData.h);
                    selectData.wrap.update();
                    e.stopPropagation();
                    e.preventDefault();
                    //updateList[board.id()] = "updateAsset";
                  }
                  else if (e.keyCode == 32) { // space bar
                    boardApi.scrollTo($("#"+selectData.app), pieceData.x + pieceData.w/2, pieceData.y + pieceData.h/2);
                  }
                  if (diffX || diffY){
                    layout.coverlay($(".piece-quick-edit"));
                    selectData.wrap.move(e, diffX*-1, diffY*-1);
                    boardApi.scrollTo($("#"+selectData.app), pieceData.x + pieceData.w/2, pieceData.y + pieceData.h/2);
                    if (boardApi.fog[board.id()] && boardApi.fog[board.id()].length && pieceData.eID) {
                      var range;
                      if (pieceData.eID && pieceData.o && pieceData.o.Sight) {
                        var ent = getEnt(pieceData.eID);
                        var context = sync.defaultContext();
                        if (ent && ent.data) {
                          context[ent.data._t] = duplicate(ent.data);
                        }
                        var auraData = pieceData.o.Sight;
                        range = boardApi.scale(sync.eval(auraData.d, context), board, true);
                      }
                      boardApi.apps[selectData.app].views[selectData.layer+"-"+selectData.type+"-"+selectData.index] = boardApi.buildDynamicFog(board, $("#"+selectData.app), pieceData.x + pieceData.w/2, pieceData.y + pieceData.h/2, range);
                      boardApi.rebuildDynamicFog(board, $("#"+selectData.app));
                    }
                  }
                }
              }
            }
            else {
              var tileData = board.data.layers[selectData.layer][selectData.type][selectData.index];
              if (tileData) {
                if (e.keyCode == 46) { // delete
                  layout.coverlay($(".piece-quick-edit"));
                  spliceData.target = board.data.layers[selectData.layer][selectData.type];
                  if (hasSecurity(getCookie("UserID"), "Rights", board.data)) {
                    deleteSelections[i] = selectData;
                    boardApi.selections[i].selected.visible = false;
                  }
                }
                else if (e.keyCode == 37) {
                  tileData.x = tileData.x - (board.data.gridW || tileData.w);
                  diffX = (board.data.gridW || tileData.w) * -1;
                  selectData.wrap.update();
                  e.stopPropagation();
                  e.preventDefault();
                  //updateList[board.id()] = "updateAsset";
                }
                else if (e.keyCode == 38) {
                  tileData.y = tileData.y - (board.data.gridH || tileData.h);
                  diffY = (board.data.gridH || tileData.h) * -1;
                  selectData.wrap.update();
                  e.stopPropagation();
                  e.preventDefault();
                  //updateList[board.id()] = "updateAsset";
                }
                else if (e.keyCode == 39) {
                  tileData.x = tileData.x + (board.data.gridW || tileData.w);
                  diffX = (board.data.gridW || tileData.w);
                  selectData.wrap.update();
                  e.stopPropagation();
                  e.preventDefault();
                  //updateList[board.id()] = "updateAsset";
                }
                else if (e.keyCode == 40) {
                  tileData.y = tileData.y + (board.data.gridH || tileData.h);
                  diffY = (board.data.gridH || tileData.h);
                  selectData.wrap.update();
                  e.stopPropagation();
                  e.preventDefault();
                  //updateList[board.id()] = "updateAsset";
                }
                else if (e.keyCode == 32) { // space bar
                  boardApi.scrollTo($("#"+selectData.app), tileData.x + tileData.w/2, tileData.y + tileData.h/2);
                }
              }
            }
          }
        }
      }
      if (Object.keys(deleteSelections).length) {
        var rebuild = {};
        for (var i in deleteSelections) {
          var selectData = deleteSelections[i];
          if (selectData.type) {
            if (!rebuild[selectData.board]) {
              rebuild[selectData.board] = {};
            }
            var boardData = rebuild[selectData.board];
            if (!boardData[selectData.layer]) {
              boardData[selectData.layer] = {};
            }
            if (!boardData[selectData.layer][selectData.type]) {
              boardData[selectData.layer][selectData.type] = {indexs : []};
            }
            boardData[selectData.layer][selectData.type].indexs.push(Number(selectData.index));
            if (boardData[selectData.layer][selectData.type].rebuild == null || boardData[selectData.layer][selectData.type].rebuild > selectData.index) {
              boardData[selectData.layer][selectData.type].rebuild = Number(selectData.index);
            }
          }
        }
        //boardApi.destroyObject(selectData.layer, selectData.type, selectData.index, board);
        var undo = duplicate(board.data.layers);
        for (var bID in rebuild) {
          var boardData = rebuild[bID];
          var board = getEnt(bID);
          if (board && board.data) {
            for (var layer in boardData) {
              var layerData = boardData[layer];
              var update = {
                layer : layer,
                id : bID,
                cmd : "destroy",
                rebuild : {},
              };
              var last = duplicate(board.data.layers[layer]);
              for (var type in layerData) {
                var typeData = layerData[type];
                update.rebuild[type] = typeData.rebuild;

                typeData.indexs.sort();
                for (var idx=typeData.indexs.length-1; idx>=0; idx--) {
                  if (board.data.layers[layer][type][typeData.indexs[idx]] && board.data.layers[layer][type][typeData.indexs[idx]].eID) {
                    var delEnt = getEnt(board.data.layers[layer][type][typeData.indexs[idx]].eID);
                    if (delEnt && delEnt.data && delEnt.data._flags && delEnt.data._flags["temp"]) {
                      if (hasSecurity(getCookie("UserID"), "Owner", delEnt.data)) {
                        delEnt.sync("deleteAsset");
                      }
                    }
                  }
                  board.data.layers[layer][type].splice(typeData.indexs[idx], 1);
                }
              }
              update.result = duplicate(board.data.layers[layer]);
              boardApi.applyUpdate(getCookie("UserID"), update, last);
              runCommand("updateBoardLayer", update);
            }
          }
        }
        boardApi.selections = {};
      }
      for (var key in updateList) {
        if (game.entities.data[key]) {
          if (updateList[key]) {
            util.addUndo(game.entities.data[key], game.entities.data[key].data, updateList[key]);
          }
          else {
            util.addUndo(game.entities.data[key], game.entities.data[key].data);
          }
        }
      }
      spliceData.list.sort(function(a,b){return a-b;});
      for (var i=spliceData.list.length-1; i>=0; i--) {
        spliceData.target.splice(spliceData.list[i], 1);
      }
      spliceData = {list : []};

      if (e.keyCode == 32) { // space bar
        var pEnt = getPlayerCharacter();
        if (pEnt && pEnt.data) {
          $(".application[ui-name='ui_board']").each(function(){
            for (var i in boardApi.selections) {
              if (boardApi.selections[i].app == $(this).attr("id")) {
                return;
              }
            }
            var board = getEnt($(this).attr("index"));
            if (board && board.data) {
              for (var l in board.data.layers) {
                for (var p in board.data.layers[l].p) {
                  var pieceData = board.data.layers[l].p[p];
                  if (pieceData.eID == pEnt.id()) {
                    boardApi.scrollTo($(this), pieceData.x + pieceData.w/2, pieceData.y + pieceData.h/2);
                    return;
                  }
                }
              }
            }
          });
        }
     }

      for (var key in updateList) {
        if (game.entities.data[key]) {
          if (updateList[key]) {
            game.entities.data[key].sync(updateList[key]);
          }
          else {
            game.entities.data[key].update();
          }
        }
      }
    }
  }
  else if (e.keyCode == KEYCODE_ESC) {
    $(':focus').blur();
  }
  if (_nextKey < Date.now()) {
    for (var key in hotkeys) {
      var codes = key.split(",");
      var exec = key;
      for (var ci in codes) {
        if (!_down[parseInt(codes[ci])]) {
          exec = false;
          break;
        }
      }
      if (exec) {
        hotkeys[exec].exe(hotkeys[exec], exec);
        if (hotkeys[exec].override) {
          e.stopPropagation();
          e.preventDefault();
        }
        _nextKey = Date.now() + 300;
      }
    }
  }
}

function controlsKeyUp(e) {
  delete _down[e.keyCode];
  if (e.keyCode == "18" && (!($(':focus').is("input") || $(':focus').is("textarea")))) {
    e.preventDefault();
  }
}

function controlsKeyPress(e) {

}

function toggleHotKeysDisplay() {
  if (!$("#overlay-hotkeys").length) {
    var show = layout.overlay({target : $("#viewPort"), id : "overlay-hotkeys", style : {"background-color" : "rgba(0,0,0,0.5)"}});
    show.click(function(){
      layout.coverlay(show);
      layout.coverlay("overlay-hotkeys");
    });

    var list = $("<div>").appendTo(show);
    list.addClass("flexcolumn flexmiddle");
    list.css("width", "50%");
    list.css("width", "50%");
    list.css("margin", "auto");
    list.css("font-size", "0.6em");
    for (var key in hotkeys) {
      var hotkey = hotkeys[key];

      var hotkeyDiv = $("<div>").appendTo(list);
      hotkeyDiv.addClass("flexmiddle");

      var title = $("<div class='flexmiddle highlight2 outline smooth' style='padding : 0.2em'><b class='alttext'>"+hotkey.name+"</b></div>").appendTo(hotkeyDiv);
      hotkeyDiv.append("<div class='flexmiddle'><b class='alttext'>=</b></div>");

      var controls = hotkey.combo.split(":");
      for (var i in controls) {
        var controlDiv = $("<div>").appendTo(hotkeyDiv);
        controlDiv.addClass("flexmiddle");

        var combos = controls[i].split("+");
        for (var j in combos) {
          var control = combos[j];
          var icon = $("<div>").appendTo(controlDiv);
          icon.css("background-size", "contain");
          icon.css("background-repeat", "no-repeat");
          icon.css("background-position", "center");
          if (control == "mright") {
            icon.css("background-image", "url('/content/mouse_right.png')");
            icon.css("width", "3em");
            icon.css("height", "3em");
          }
          else if (control == "mleft") {
            icon.css("background-image", "url('/content/mouse_left.png')");
            icon.css("width", "3em");
            icon.css("height", "3em");
          }
          else if (control == "arrow-left") {
            icon.addClass("flexmiddle hardoutline");
            icon.css("background-color", "white");
            icon.css("padding", "0.2em");
            icon.css("font-weight", "bolder");
            icon.css("color", "black");
            icon.append(genIcon({raw : true, icon : "arrow-left"}));
          }
          else if (control == "arrow-up") {
            icon.addClass("flexmiddle hardoutline");
            icon.css("background-color", "white");
            icon.css("padding", "0.2em");
            icon.css("font-weight", "bolder");
            icon.css("color", "black");
            icon.append(genIcon({raw : true, icon : "arrow-up"}));
          }
          else if (control == "arrow-right") {
            icon.addClass("flexmiddle hardoutline");
            icon.css("background-color", "white");
            icon.css("padding", "0.2em");
            icon.css("font-weight", "bolder");
            icon.css("color", "black");
            icon.append(genIcon({raw : true, icon : "arrow-right"}));
          }
          else if (control == "arrow-down") {
            icon.addClass("flexmiddle hardoutline");
            icon.css("background-color", "white");
            icon.css("padding", "0.2em");
            icon.css("font-weight", "bolder");
            icon.css("color", "black");
            icon.append(genIcon({raw : true, icon : "arrow-down"}));
          }
          else {
            icon.addClass("flexmiddle hardoutline");
            icon.css("background-color", "white");
            icon.css("padding", "0.2em");
            icon.css("font-weight", "bolder");
            icon.css("color", "black");
            icon.text(control);
          }
          if (j < combos.length-1) {
            controlDiv.append("<b class='alttext'>+</b>");
          }
        }
      }
    }
  }
  else {
    layout.coverlay("overlay-hotkeys", 500);
  }
}
/*
const _channel1 = "16,17,49";
hotkeys[_channel1] = {
  name : "Voice Channel 1",
  combo : _keyTrans(_channel1),
  exe : function() {
    if ($("#media-channels-"+getCookie("UserID")).length) {
      if ($($("#media-channels-"+getCookie("UserID")).children()[0]).css("opacity") == "0.5") {
        sendAlert({text : "Entered Voice Channel 1", color : $($("#media-channels-"+getCookie("UserID")).children()[0]).css("background-color")});
      }
      else {
        sendAlert({text : "Left Voice Channel 1", color : $($("#media-channels-"+getCookie("UserID")).children()[0]).css("background-color")});
      }
      $($("#media-channels-"+getCookie("UserID")).children()[0]).click();
    }
  },
}

const _channel2 = "16,17,50";
hotkeys[_channel2] = {
  name : "Voice Channel 2",
  combo : _keyTrans(_channel2),
  exe : function() {
    if ($("#media-channels-"+getCookie("UserID")).length) {
      if ($($("#media-channels-"+getCookie("UserID")).children()[1]).css("opacity") == "0.5") {
        sendAlert({text : "Entered Voice Channel 2", color : $($("#media-channels-"+getCookie("UserID")).children()[1]).css("background-color")});
      }
      else {
        sendAlert({text : "Left Voice Channel 2", color : $($("#media-channels-"+getCookie("UserID")).children()[1]).css("background-color")});
      }
      $($("#media-channels-"+getCookie("UserID")).children()[1]).click();
    }
  },
}

const _channel3 = "16,17,51";
hotkeys[_channel3] = {
  name : "Voice Channel 3",
  combo : _keyTrans(_channel3),
  exe : function() {
    if ($("#media-channels-"+getCookie("UserID")).length) {
      if ($($("#media-channels-"+getCookie("UserID")).children()[2]).css("opacity") == "0.5") {
        sendAlert({text : "Entered Voice Channel 3", color : $($("#media-channels-"+getCookie("UserID")).children()[2]).css("background-color")});
      }
      else {
        sendAlert({text : "Left Voice Channel 3", color : $($("#media-channels-"+getCookie("UserID")).children()[2]).css("background-color")});
      }
      $($("#media-channels-"+getCookie("UserID")).children()[2]).click();
    }
  },
}
*/

var snd_diceRoll;

$(document).ready(function() {
  setupGame();
  if (!layout.webclient) {
    $.getJSON("https://api.ipify.org/?format=json", function(e) {
      setCookie("ExternalIP", e.ip);
    });

    document.addEventListener('dragover', function(ev){ev.preventDefault();});
    document.addEventListener('drop', function(ev){ev.preventDefault();});
  }


  $.ajax({
    url: '/getWhitelistedMods',
    error: function(code) {
      console.log(code);
    },
    dataType: 'json',
    success: function(modData) {
      $.ajax({
        url: '/getScripts',
        error: function(code) {
          console.log(code);
        },
        dataType: 'json',
        success: function(data) {
          sendAlert({text : "Loaded Custom Scripts", duration : 1000});
          for (var i in data) {
            if (!modData.mods || !data[i].mod || modData.mods[data[i].mod]) {
              if ((/.+\.js/.test(data[i].src))) {
                $("body").append("<script src='/scripts/"+data[i].src+"'></script>");
              }
            }
          }
        },
        type: 'GET'
      });
    }
  });

  $.ajax({
    url: '/getFonts',
    error: function(code) {
      console.log(code);
    },
    dataType: 'json',
    success: function(data) {
      for (var i in data) {
        if (!util.contains(util.fonts, data[i])) {
          util.fonts.push(data[i].split(".")[0]);
          $("body").append(`
            <style>
              @font-face {
                font-family: "`+data[i].split(".")[0]+`";
                src: url('/fonts/`+data[i]+`');
              }
            </style>`
          );
        }
      }
    }
  });

  snd_diceRoll = new Audio("/sounds/dice.mp3");
  // connect to local server

  if (getCookie("UserID") && getCookie("UserID") != "Sandboxer") {
    $.ajax({
      url: window.location.origin+"/retrieveUser?id="+getCookie("UserID"),
      error: function(code) {
        console.log(code);
      },
      dataType: 'json',
      success: function(resData) {
        game.user = resData;
        if (resData.membership) {
          if (parseInt(resData.membership) >= 50) {
            $("#upgrade").removeClass("outline smooth highlight alttext");
            $("#upgrade").addClass("dull");
          }
          if (parseInt(resData.membership) >= 200) {
            $("#upgrade").remove();
          }
        }
        else {
          $("#storage-editor").hide();
        }
        if (!game.user || (!game.user.membership && !game.user.points)) {
          $("#gmp-counter").hide();
        }
        else {
          $("#gmp-counter").text((game.user.points || 0).toLocaleString());
          $("#gmp-counter-wrap").fadeIn();
        }
      },
      type: 'GET'
    });
  }

  if ($("#upgrade").length) {
    $("#upgrade").click(function(){
      openSplash(true, "Support Us");
    });
  }
  global_init();
});

$(document).keypress(function(e){
  controlsKeyPress(e);
});

$(document).keydown(function(e) {
  controlsKeyDown(e);
});

$(document).keyup(function(e) {
  controlsKeyUp(e);
});

var _promptClicked;
$(document).mousedown(function(e) {
  if ($(".prompt").length && !_promptClicked) {
    $(".prompt").remove();
  }
  else {
    _promptClicked = null;
  }
});

$(document).mousemove(function(e) {

});

function _mouseupCleanup(e){
  setTimeout(function(){
    $(".ui-dropmenu-class").each(function(){
      if ($(this).attr("_createTime") && Date.now() > (Number($(this).attr("_createTime")) || 0) + 200) {
        $(".ui-dropmenu-class").remove();
      }
    });
  }, 100);
  if ($(".prompt").length && !_promptClicked) {
    $(".prompt").remove();
  }
  else {
    _promptClicked = null;
  }
}

var lastResize = 0;
var _supressResize = false;
function _resizeDelay() {
  if (lastResize+500 < Date.now()) {
    for (var app in _syncList) {
      //_syncList[app].update();
    }
  }
}

var resizeHooks = {};

$(window).resize(function() {
  $("#splash-screen").width($(window).width());
  $("#splash-screen").height($(window).height());
  $("#player-list").css("left", "");
  $("#player-list").css("right", "0");
  $("body").find(".application[ui-name='ui_board']").each(function(){
    $(this).removeAttr("divWidth");
    $(this).removeAttr("divHeight");
  });
  for (var index in resizeHooks) {
    resizeHooks[index]();
  }
  if (!_supressResize) {
    lastResize = Date.now();
    setTimeout(function(){
      _resizeDelay();
    }, 500);
  }
  $(".ui-popout").each(function(){
    if ($(this).attr("id") == "left-menu" || $(this).attr("id") == "right-menu") {
      return;
    }
    if (!$(this).hasClass("popup") && !$(this).attr("docked")) {
      var overlay = $(this);
      var x = overlay.offset().left;
      var y = overlay.offset().top;
      if (x+overlay.outerWidth() > $(window).outerWidth()) {
        x = x - ((x+overlay.outerWidth())-$(window).outerWidth());
      }
      if (x < 0) {
        x = 0;
      }
      if (y+overlay.outerHeight() > $(window).outerHeight()) {
        y = y - ((y+overlay.outerHeight())-$(window).outerHeight());
      }
      if (y < 0) {
        y = 0;
      }
      overlay.css("left", x);
      overlay.css("top", y);
    }
  });
  $(".main-dock").each(function(){
    if ($(this).attr("id") == "left-menu" || $(this).attr("id") == "right-menu") {
      return;
    }
    if (!$(this).attr("locked")) {
      $(this).css("opacity", "0");
      util.dockHide($(this));
    }
    else {
      $(this).css("opacity", "1");
      util.dockReveal($(this));
    }
  });
});

$(window).mousemove(function(ev) {
  if (boardApi.dragging) {
    boardApi.dragging.move(ev);
  }
});

$(window).mouseup(function(ev) {
  _mouseupCleanup(ev);
  if (boardApi.dragging) {
    var dragging = boardApi.dragging;
    boardApi.dragging.end(ev);
    if (dragging.followup) {
      dragging.followup(ev);
    }
  }
  $(".main-dock").css("pointer-events", "");
  $(".boardMenu").css("pointer-events", "auto");
  boardApi.objectClick = false;
});

var _winHasFocus = true;
window.onfocus = function(ev){
  _winHasFocus = true;
  for (var key in _down) {
    delete _down[key];
  }
};

window.onblur = function(ev){
  _winHasFocus = false;
};

var cursorInPage = false;

$(window).on('mouseout', function() {
  cursorInPage = false;
});

$(window).on('mouseover', function() {
  cursorInPage = true;
});

window.mobilecheck = function() {
  var check = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
  return check;
};

window.mobileAndTabletcheck = function() {
  var check = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
  return check;
};

function global_init() {
  util.initialize = [];
}

var connection = {alive : false, peers : {}, streams : {}};
// Game state, this is important
// Do NOT write to this, or you will break everything
var game = {
  locals : {}, // all local information
  //players : sync.newObj(), // userID as a key
  config : null, // game configurations
  entities : null,
  events : null, // All Events performed by the DM
  components : null, // list of all the ui components a player has access to
  templates : {}, // data structures specific to game
  commands : {},
  version : 4 // the version for the patcher to check against
};

function setupGame() {
  game.entities = game.entities || sync.obj();
  game.entities.data = game.entities.data || {};

  game.config = game.config || sync.obj();
  game.config.data = game.config.data ||{};

  game.events = game.events || sync.obj();
  game.events.data = game.events.data || {};

  game.state = game.state || sync.obj();
  game.state.data = game.state.data || {};

  game.display = game.display || sync.obj();
  game.display.data = game.display.data || {};

  game.players = game.players || sync.obj("players");
  game.players.data = game.players.data || {};

  game.logs = game.logs || sync.obj();
  game.logs.data = game.logs.data || {};

  game.locals["newAssetList"] = [];
}


game.components = [
  {name : "System Builder", ui : "ui_homebrew", basic : "Tweak and change the layout of your game, including how stats are calculated, what your character sheets look like and much more!", w : 100, h : 100, asTab : true},
  {name : "Character Importer", ui : "ui_charImporter", basic : "Import Characters in simple text or from XML files from OggDude's tool and PCGen", author : "Noobulater", w : 50, h : 50}, // first action is the default
];

hook = {
    _hooks:{},
    _calledHooks:{},
    add:function(name,uniq,func)
    {
        hook._hooks[name] = hook._hooks[name] || {};
        hook._hooks[name][uniq] = func;
    },
    call:function(name,...args)
    {
        var returns = true;
        hook._calledHooks[name] = true;
        if(hook._hooks[name])
        {
            for(var uniq in hook._hooks[name])
            {
                var ret = hook._hooks[name][uniq](...args);
                if(ret === false)
                {
                    returns = false;
                }
            }
        }
        return returns
    },
    remove:function(name,uniq)
    {
        if(hook._hooks[name])
        {
            delete hook._hooks[name][uniq]
        }
    }

}

var _dragTransfer = null;

function isChrome() {
  var isChromium = window.chrome,
      winNav = window.navigator,
      vendorName = winNav.vendor,
      isOpera = winNav.userAgent.indexOf("OPR") > -1,
      isIEedge = winNav.userAgent.indexOf("Edge") > -1,
      isIOSChrome = winNav.userAgent.match("CriOS");

  if(isIOSChrome){
     // is Google Chrome on IOS
     return true;
  } else if(isChromium !== null && isChromium !== undefined && vendorName === "Google Inc." && isOpera == false && isIEedge == false) {
     // is Google Chrome
     return true;
  } else {
     // not Google Chrome
     return false;
  }
}

String.prototype.formatTime = function(cull) {
  var sec_num = parseInt(this, 10); // don't forget the second param
  var hours   = Math.floor(sec_num / 3600);
  var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
  var seconds = sec_num - (hours * 3600) - (minutes * 60);

  if (hours < 10) {
    hours = "0"+hours;
    if (cull) {
      if (cull >= 2) {
        hours = hours;
        if (!hours) {
          hours = "";
        }
        else {
          hours = hours + ":";
        }
      }
      else {
        hours = "";
      }
    }
    else {
      hours = hours + ":";
    }
  }
  if (minutes < 10) {
    minutes = "0"+minutes;
    if (cull) {
      if (cull >= 1) {
        minutes = minutes;
        if (!minutes) {
          minutes = "";
        }
        else {
          minutes = minutes + ":";
        }
      }
      else {
        minutes = "";
      }
    }
    else {
      minutes = minutes + ":";
    }
  }
  else {
    minutes = minutes + ":";
  }
  if (seconds < 10) {seconds = "0"+seconds;}
  return hours+minutes+seconds;
}

String.prototype.valid = function() {
  if (this.length <= 0 || this.trim().length <= 0) {
    return;
  }
  return this.trim();
}

String.prototype.remove = function(valueToRemove) {
  if (!this.valid()) {
    return this.valid();
  }
  var arr = JSON.parse("[" + this + "]");

  for (var index in arr) {
    if (arr[index] == valueToRemove) {
      arr.splice(index, 1);
    }
  }
  return arr.toString();
}

String.prototype.push = function(value) {
  var arr;
  if (!this.valid()) {
    arr = [];
  }
  else {
    arr = JSON.parse("[" + this + "]");
  }
  arr.push(value);

  return arr.toString();
}

String.prototype.valid = function () {
  if (this.length <= 0 || this.trim().length <= 0) {
    return;
  }
  return this.trim();
}

var util = {};
util.lerp = function(start, end, amt){
  return (1-amt)*start+amt*end;
}

util.insert = function(array, index, value) {
  var spliced = [];
  for (var i=array.length-1; i>=index; i--) {
    spliced.push(array[i]);
    array.splice(i, 1);
  }
  array.push(value);
  for (var i=spliced.length-1; i>=0; i--) {
    array.push(spliced[i]);
  }
  return index;
}

util.contains = function(array, value) {
  for (var index in array) {
    if (array[index] == value) {
      return true;
    }
  }
  return false;
}

util.find = function(array, value) {
  for (var index in array) {
    if (array[index] == value) {
      return index;
    }
  }
  return false;
}

util.swap = function(array, index, newIndex) {
  var temp = array[index];
  array[index] = array[newIndex];
  array[newIndex] = temp;
}

util.remove = function(array, value) {
  for (var index in array) {
    if (array[index] == value) {
      return array.splice(index, 1);
    }
  }
}

util.hslToRgb = function(h, s, l){
  var r, g, b;

  if (s == 0){
    r = g = b = l; // achromatic
  }
  else{
    var hue2rgb = function hue2rgb(p, q, t){
      if(t < 0) t += 1;
      if(t > 1) t -= 1;
      if(t < 1/6) return p + (q - p) * 6 * t;
      if(t < 1/2) return q;
      if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
      return p;
    }

    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1/3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1/3);
  }
  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
}

util.HSL_RGB = function(h, s, l, a){
  var r, g, b;

  if (s == 0){
    r = g = b = l; // achromatic
  }
  else{
    var hue2rgb = function hue2rgb(p, q, t){
      if(t < 0) t += 1;
      if(t > 1) t -= 1;
      if(t < 1/6) return p + (q - p) * 6 * t;
      if(t < 1/2) return q;
      if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
      return p;
    }

    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1/3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1/3);
  }
  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a || 1];
}

util.RGB_HSL = function (r, g, b, a){
  r /= 255, g /= 255, b /= 255;
  var max = Math.max(r, g, b), min = Math.min(r, g, b);
  var h, s, l = (max + min) / 2;

  if(max == min){
    h = s = 0; // achromatic
  }
  else{
    var d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch(max){
        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
        case g: h = (b - r) / d + 2; break;
        case b: h = (r - g) / d + 4; break;
    }
    h /= 6;
  }

  return [h, s, l, a || 1];
}


util.HEX_TEXT = function(hexx){
  var hex = hexx.toString();//force conversion
  var str = '';
  for (var i = 0; (i < hex.length && hex.substr(i, 2) !== '00'); i += 2)
    str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
  return str;
}

util.RGB_HEX = function(rgb){
  rgb = (rgb || "#000000").match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
  var res = (rgb && rgb.length === 4) ? "" +
    ("0" + parseInt(rgb[1],10).toString(16)).slice(-2) +
    ("0" + parseInt(rgb[2],10).toString(16)).slice(-2) +
    ("0" + parseInt(rgb[3],10).toString(16)).slice(-2) : '';
  return parseInt(res, 16);
}

util.RGB_ALPHA = function(rgb){
  if (rgb == "transparent") {
    rgb = "rgba(0,0,0,0)";
  }
  rgb = (rgb || "rgba(0,0,0,0)").match(/(\(.*)\)/i);
  if (rgb && rgb[1].split(",").length == 4) {
    return Number(rgb[1].split(",")[3]);
  }
  return 1;
}

var _offset = 0;
function dateCorrected(padding) {
  // padding in milliseconds;
  var amt = Number(Date.now()-Math.floor(_offset));
  if (padding)
    return amt + Number(padding);
  return amt;
}

function getCookies() {
  var pairs = document.cookie.split(";");
  var cookies = {};
  for (var i=0; i<pairs.length; i++){
    var pair = pairs[i].split("=");
    cookies[pair[0]] = unescape(pair[1]);
  }
  return cookies;
}

function getCookie(cname) {
  var name = cname + "=";
  var ca = document.cookie.split(';');
  for(var i=0; i<ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0)==' ') c = c.substring(1);
      if (c.indexOf(name) == 0) return c.substring(name.length,c.length);
  }
  return "";
}

function setCookie(cname, cvalue, exdays) {
  var d = new Date();
  exdays = (exdays || 1);
  d.setTime(d.getTime() + (exdays*24*60*60*1000));
  var expires = "expires="+d.toUTCString();
  document.cookie = cname + "=" + cvalue + "; " + expires;
}

function easeNumber(obj, expected, speed, callback) {
  var points = expected;
  var amt = Number(obj.text());
  if (points != amt) {
    var diff = points-amt;
    var s = Math.sign(diff);

    diff = Math.abs(diff);

    if (diff < 50) {
      amt = amt + s * 1;
    }
    else if (diff/100 > 1) {
      for (var i = 0; i<Math.floor(Math.log10(diff)); i++) {
        amt = amt + s * Math.pow(speed, i);
      }
    }
    else {
      amt = amt + s * 5;
    }
    obj.text(amt);
    setTimeout(function(){easeNumber(obj, expected, speed, callback)}, 20);
    return;
  }
  else {
    if (callback) {
      callback();
    }
  }
  obj.text(points);
}

function duplicate(obj) {
  if (!obj) {
    return obj;
  }
  return JSON.parse(JSON.stringify(obj));
}

function merge(source, object, override) {
  for (var key in object) {
    if (object[key] instanceof Object) {
      if (source[key] instanceof Object) {
        merge(source[key], object[key], override);
      }
      else {
        if (override) {
          source[key] = object[key];
        }
        else {
          if (source[key] == null) {
            source[key] = object[key];
          }
        }
      }
    }
    else {
      if (override) {
        source[key] = object[key];
      }
      else {
        if (source[key] == null) {
          source[key] = object[key];
        }
      }
    }
  }
}

function combine(source, object) {
  for (var key in object) {
    if (object[key] instanceof Object) {
      if (source[key] instanceof Object) {
        if (Array.isArray(source[key])) {
          if (!Array.isArray(object[key])) {
            for (var index in object[key]) {
              combine(source[key][index], object[key][index]);
            }
          }
          else {
            source[key].concat(object[key]);
          }
        }
        else {
          combine(source[key], object[key]);
        }
      }
      else {
        if (source[key] == null) {
          source[key] = object[key];
        }
      }
    }
    else {
      source[key] = object[key];
    }
  }
}

function purge(str) {
  // clean from html injection
  var mrClean = /(<[^>]*>)/igm;
  var ex = mrClean.exec(str);
  while (ex) {
    str = str.replace(ex[1], "|#%#|"+ex[1].substring(1,ex[1].length-1)+"|#$#|");
    ex = mrClean.exec(str);
  }
  return str;
}

function unpurge(str) {
  // clean from html injection
  /*var mrClean = /(\|#%#\|([^`]]*)|#$#\|)/igm;
  var ex = mrClean.exec(str);
  while (ex) {
    if (ex[2] != "script") {
      str = str.replace(ex[1], "<"+ex[1].substring(1,ex[1].length-1)+">");
    }
    ex = mrClean.exec(str);
  }*/
  return replaceAll(replaceAll((str || "") ,"|#$#|", ">"), "|#%#|", "<");
}

function hasSecurity(userID, priv, obj) {
  if (game.players && game.players.data && !(game.config && game.config.data.offline)) {
    var players = game.players.data;
    if (!players[userID]) {
      players = game.config.data.players || {};
    }
    if (players[userID]) {
      if (priv != null && obj && obj["_s"] && (obj["_s"][userID] && obj["_s"][userID] <= game.templates.security.object[priv])) {
        return true;
      }
      if (priv != null && players[userID].rank <= game.templates.security.player[priv]) {
        return true;
      }
      if (obj && obj["_s"] && obj["_s"].default && obj["_s"].default != 0) {
        if (obj["_s"].default == 1) {
          return true;
        }
        var result = sync.eval(obj["_s"].default, sync.defaultContext());
        if (priv != null) {
          if (result && (result <= game.templates.security.object[priv]) || result <= game.templates.security.player[priv]) {
            return true;
          }
        }
        else if (result) {
          return true;
        }
      }
    }
  }
  else {
    return true;
  }
  return false;
}

function mergeName(ent, userID) {
  if (game.players) {
    var pData = game.players.data[userID];
    var name = pData.displayName;
    if (ent && hasSecurity(userID, "Rights", ent.data)) {
      name = sync.rawVal(ent.data.info.name) + "("+name+")";
    }
    return name;
  }
  return "";
}


function getPlayerCharacter(userID) {
  var userID = userID || getCookie("UserID");
  var pData = game.players.data[userID];
  if (pData && pData.entity && game.entities.data[pData.entity]) {
    return game.entities.data[pData.entity];
  }
  return {};
}

function getPlayerCharacterID(userID) {
  var userID = userID || getCookie("UserID");
  var pData = game.players.data[userID];
  return pData.entity;
}

function getPlayerCharacterName(userID) {
  var userID = userID || getCookie("UserID");
  var pData = game.players.data[userID];
  var name = "";
  if (pData && pData.entity && game.entities.data[pData.entity]) {
    name = sync.rawVal(game.entities.data[pData.entity].data.info.name);
  }
  return name || "";
}

function getPlayerName(userID) {
  var userID = userID || getCookie("UserID");
  var pData = game.players.data[userID];
  if (pData) {
    var name = pData.displayName;
    return name || "";
  }
  return "";
}

function getEnt(id) {
  // does all the comparisons to determine the origin of the entity
  if (id instanceof Object) {
    id = id[0];
  }
  if (id != null) {
    if (isNaN(id) && id.match("_") && id[0] != "_") {
      if (game.locals["storage"].data.s[id]) {
        return game.locals["storage"].data.s[id];
      }
      else {
        var split = id.split("_");
        // this is a cloud entity by the user
        if (split[0] == getCookie("UserID")) {
          for (var j in game.entities.data) {
            var sEnt = game.entities.data[j];
            if (sEnt.data._uid == split[1] && sEnt.data._c == getCookie("UserID")) {
              return game.entities.data[j];
            }
          }
          return game.locals["storage"].data.s[split[1]];
        }
        else {
          if (game.locals["storage"].data.s[id]) {
            return game.locals["storage"].data.s[id];
          }
          else {
            var placeholder = sync.obj(id);
            placeholder.data = {};

            function getAsset(id) {
              $.ajax({
                url: '/retrieveAsset?id='+id,
                error: function(code) {
                  console.log(code);
                },
                dataType: 'json',
                success: function(data) {
                  game.locals["storage"].data.s[id] = placeholder;
                  var storageData = game.locals["storage"].data;
                  var reg = /"_t"[ ]*:[ ]*"([\w]*)"/;
                  var match = data.data.match(reg);
                  if (match[1]) {
                    placeholder.update(JSON.parse(data.data));
                  }
                  game.locals["storage"].data.s[id] = placeholder;
                },
                type: 'GET'
              });
            }
            getAsset(id);
            return placeholder;
          }
        }
      }
    }
    else {
      return game.entities.data[id];
    }
  }
  return;
}

util.dockReveal = function(overlay) {
  if (overlay.attr("docked")) {
    var max = util.getMaxZ(".ui-popout");
    overlay.css("z-index", max+1);
    overlay.css("transition", "left 0.1s, top 0.1s, opacity 0.1s");
    if (overlay.attr("fadeHide")) {
      overlay.css("opacity", 1);
    }
    if (overlay.attr("docked") == "left") {
      overlay.css("left", 0);
    }
    else if (overlay.attr("docked") == "right") {
      overlay.css("left", $(window).width() - overlay.width());
    }
    else if (overlay.attr("docked") == "top") {
      overlay.css("top", 0);
    }
    else if (overlay.attr("docked") == "bottom") {
      overlay.css("top", $(window).height() - overlay.height());
    }
    if (overlay.attr("fadeHide")) {
      overlay.css("opacity", "1");
    }
  }
  else {
    overlay.css("transition", "opacity 0.1s");
  }
}

util.dockHide = function(overlay) {
  if (overlay.attr("docked") && !overlay.is(":hover")) {
    overlay.css("z-index", overlay.attr("docked-z"));
    overlay.css("transition", "left 0.1s, top 0.1s, opacity 0.1s");
    if (overlay.attr("docked") == "left") {
      overlay.css("left", -1 * overlay.width() + 20);
    }
    else if (overlay.attr("docked") == "right") {
      overlay.css("left", $(window).width() - 20);
    }
    else if (overlay.attr("docked") == "top") {
      overlay.css("top", -1 * overlay.height() + 20);
    }
    else if (overlay.attr("docked") == "bottom") {
      overlay.css("top", $(window).height() - 20);
    }
    if (overlay.attr("fadeHide")) {
      overlay.css("opacity", "0");
    }
  }
  else {
    overlay.css("transition", "opacity 0.1s");
  }
}

util.getMaxZ = function(selector){
  return Math.max.apply(null, $(selector).map(function(){
      var z;
      return isNaN(z = parseInt($(this).css("z-index"), 10)) ? 0 : z;
  }));
};

util.getMinZ = function(selector){
  return Math.min.apply(null, $(selector).map(function(){
      var z;
      return isNaN(z = parseInt($(this).css("z-index"), 10)) ? 0 : z;
  }));
};


// yea w.e its ugly, I didnt feel like thinking of my own solution.
// TY stack overflow
util.intersect = function(x1,y1,x2,y2, x3,y3,x4,y4) {
  var x=((x1*y2-y1*x2)*(x3-x4)-(x1-x2)*(x3*y4-y3*x4))/((x1-x2)*(y3-y4)-(y1-y2)*(x3-x4));
  var y=((x1*y2-y1*x2)*(y3-y4)-(y1-y2)*(x3*y4-y3*x4))/((x1-x2)*(y3-y4)-(y1-y2)*(x3-x4));
  if (isNaN(x)||isNaN(y)) {
      return false;
  } else {
      if (x1>=x2) {
          if (!(x2<=x&&x<=x1)) {return false;}
      } else {
          if (!(x1<=x&&x<=x2)) {return false;}
      }
      if (y1>=y2) {
          if (!(y2<=y&&y<=y1)) {return false;}
      } else {
          if (!(y1<=y&&y<=y2)) {return false;}
      }
      if (x3>=x4) {
          if (!(x4<=x&&x<=x3)) {return false;}
      } else {
          if (!(x3<=x&&x<=x4)) {return false;}
      }
      if (y3>=y4) {
          if (!(y4<=y&&y<=y3)) {return false;}
      } else {
          if (!(y3<=y&&y<=y4)) {return false;}
      }
  }
  return true;
}

util.sortPointO = function(x1, y1, x2, y2, ox, oy) {
  if (x1 - ox >= 0 && x2 - ox < 0)
      return true;
  if (x1 - ox < 0 && x2 - ox >= 0)
      return false;
  if (x1 - ox == 0 && x2 - ox == 0) {
      if (y1 - oy >= 0 || y2 - oy >= 0)
          return y1 > y2;
      return y2 > y1;
  }

  // compute the cross product of vectors (center -> a) x (center -> b)
  var det = (x1 - ox) * (y2 - oy) - (x2 - ox) * (y1 - oy);
  if (det < 0)
      return true;
  if (det > 0)
      return false;

  // points a and b are on the same line from the center
  // check which point is closer to the center
  var d1 = (x1 - ox) * (x1 - ox) + (y1 - oy) * (y1 - oy);
  var d2 = (x2 - ox) * (x2 - ox) + (y2 - oy) * (y2 - oy);
  return d1 > d2;
}

util.intersectRay = function(x1,x2,y1,y2, x,y,r_dx,r_dy) {
  var s_dx = x2-x1;
  var s_dy = y2-y1;

  var s_px = x1;
  var s_py = y1;

  var r_px = x;
  var r_py = y;

  var t2 = (r_dx*(s_py-r_py) + r_dy*(r_px-s_px))/(s_dx*r_dy - s_dy*r_dx);
  // Plug the value of T2 to get T1
  var t1 = (s_px+s_dx*t2-r_px)/r_dx;
  if (t1 >= 0 && t2 >= 0 && t2 <= 1) {
    return [s_px + s_dx * t2, s_py + s_dy * t2, t1, t2];
    // collision
  }
  return null;
}


util.intersectBox = function(x1,y1,x2,y2, x,y,w,h) {
  if (util.intersect(x1,y1,x2,y2, x, y, x + w, y)) {
    return true;
  }
  else if (util.intersect(x1,y1,x2,y2, x, y, x, y + h)) {
    return true;
  }
  else if (util.intersect(x1,y1,x2,y2, x + w, y, x + w, y + h)) {
    return true;
  }
  else if (util.intersect(x1,y1,x2,y2, x, y + h, x + w, y + h)) {
    return true;
  }
  return false;
}

util.intersectLine = function(x1,y1,x2,y2, x3,y3,x4,y4) {
  var x=((x1*y2-y1*x2)*(x3-x4)-(x1-x2)*(x3*y4-y3*x4))/((x1-x2)*(y3-y4)-(y1-y2)*(x3-x4));
  var y=((x1*y2-y1*x2)*(y3-y4)-(y1-y2)*(x3*y4-y3*x4))/((x1-x2)*(y3-y4)-(y1-y2)*(x3-x4));
  if (isNaN(x)||isNaN(y)) {
    return false;
  } else {
    if (x1>=x2) {
        if (!(x2<=x&&x<=x1)) {return false;}
    } else {
        if (!(x1<=x&&x<=x2)) {return false;}
    }
    if (y1>=y2) {
        if (!(y2<=y&&y<=y1)) {return false;}
    } else {
        if (!(y1<=y&&y<=y2)) {return false;}
    }
    if (x3>=x4) {
        if (!(x4<=x&&x<=x3)) {return false;}
    } else {
        if (!(x3<=x&&x<=x4)) {return false;}
    }
    if (y3>=y4) {
        if (!(y4<=y&&y<=y3)) {return false;}
    } else {
        if (!(y3<=y&&y<=y4)) {return false;}
    }
  }
  return true;
}

util.target = function(index){
  $(".application[ui-name='ui_board']").each(function(){
    var app = $(this);
    var board = getEnt(app.attr("index"));
    for (var lid in board.data.layers) {
      var layerData = board.data.layers[lid];
      for (var pInd in layerData.p) {
        var pieceData = layerData.p[pInd];
        if (pieceData.eID == index) {
          if (pieceData.x != null && pieceData.y != null) {
            boardApi.scrollTo(app, pieceData.x + pieceData.w/2, pieceData.y + pieceData.h/2);
          }
          var pieceWrap = boardApi.lookup(lid, "p", pInd, app);
          pieceWrap.select();
        }
      }
    }
  });
}

util.untarget = function(index){
  if (boardApi.selections) {
    for (var i in boardApi.selections) {
      boardApi.selections[i].selected.visible = false;
      delete boardApi.selections[i];
      // scroll to?
    }
  }
}

util.getTargets = function(noSelected) {
  var targetList = []; //list of IDs
  $(".card-selected").each(function(){
    var index = $(this).attr("index");
    if (index && ($(this).is(":visible") || layout.mobile)) {
      var ent = getEnt(index);
      if (ent && ent.data._t == "c") {
        if (!util.contains(targetList, index)) {
          targetList.push(index);
        }
      }
    }
  });
  if (!noSelected) {
    for (var i in boardApi.selections) {
      var selectData = boardApi.selections[i];
      var board = getEnt(selectData.board);
      if (board && board.data && selectData.type == "p" && board.data.layers[selectData.layer]) {
        var pieceData = board.data.layers[selectData.layer][selectData.type][selectData.index];
        if (pieceData && pieceData.eID && getEnt(pieceData.eID).data) {
          targetList.push(pieceData.eID);
        }
      }
    }
  }

  return targetList;
}

util.dist = function(x1, x2, y1, y2){
  return Math.sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1));
}

util.windowBound = function(overlay) {
  // keep within screen boundries
  var x = overlay.offset().left;
  var y = overlay.offset().top;
  if (x+overlay.outerWidth() > $(window).outerWidth()) {
    x = x - ((x+overlay.outerWidth())-$(window).outerWidth());
  }
  if (x < 0) {
    x = 0;
  }
  if (y+overlay.outerHeight() > $(window).outerHeight()) {
    y = y - ((y+overlay.outerHeight())-$(window).outerHeight());
  }
  if (y < 0) {
    y = 0;
  }
  overlay.css("left", x);
  overlay.css("top", y);
}

util.unSelectTargets = function(noSelected) {
  $(".card-selected").removeClass(".card-selected");
  if (!noSelected) {
    for (var uid in boardApi.selections) {
      if ($("#"+uid).is(":visible")) {
        // loop through
        for (var lid in boardApi.selections[uid]) {
          var piece = boardApi.selections[uid][lid];
          if (piece && piece.data && piece.data.board != null) {
            $(".board-"+piece.data.board).each(function(){
              boardApi.unselect($(this), lid);
            });
          }
        }
      }
    }
  }
}


// works out tags, and their effects, as well as calcdata
util.resolveCalc = function(calcList, ctx) {
  var result;
  if (Array.isArray(calcList)) {
    result = [];
    for (var calcID in calcList) {
      var calcData = duplicate(calcList[calcID]);
      if (calcData.cond == null || sync.eval(calcData.cond, ctx)) {
        delete calcData.cond;
        calcData.eq = sync.eval(calcData.eq, ctx);
        if (calcData.target.substring(0, Math.min(calcData.target.length, 4)) == "tags") {
          // apply/remove tag effects
          if (calcData.eq) {
            calcData.eq = 1;
            var val = calcData.target.split(".");
            if (val.length > 0 && val[1]) {
              val = val[1];
              // apply tag effects
              if (game.templates.tags[val]) {
                var effects = game.templates.tags[val].calc;
                // resolve effect
                for (var eid in effects) {
                  if (!effects[eid].cond || sync.eval(effects[eid].cond, ctx)) {
                    result.push({target : effects[eid].target, eq : sync.eval(effects[eid].eq, ctx), hide : true});
                  }
                }
              }
            }
          }
          else {
            // remove the tag
            calcData.eq = 0;
            var val = calcData.target.split(".");
            if (val.length > 0 && val[1]) {
              val = val[1];
              // apply tag effects
              if (game.templates.tags[val]) {
                var effects = game.templates.tags[val].calc;
                // resolve effect
                for (var eid in effects) {
                  if (effects[eid].target.match(".modifiers")) {
                    result.push({target : effects[eid].target, eq : ""});
                  }
                }
              }
            }
          }
        }
        result.push(calcData);
      }
    }
  }
  else if (calcData) {
    var calcData = duplicate(calcList);
    if (calcData.cond == null || sync.eval(calcData.cond, ctx)) {
      delete calcData.cond;
      calcData.eq = sync.eval(calcData.eq, ctx);
    }
    return calcData;
  }
  return result;
}

util.injectContext = function(str, ctx, options) {
  var final = "";
  var vMatch = variableRegex.exec(str);
  // save localVaribles
  var cmps = /([\/><\!\~\=])/;
  var context = sync.context(str, ctx, true);
  for (var key in options) {
    context.context[key] = sync.newValue(null, options[key]);
  }
  while (vMatch) {
    if (vMatch[2] && vMatch[4] && vMatch[4][0] == "=") {
      var stack = [0];
      for (var i=1; i<vMatch[4].length; i++) {
        if (vMatch[4][i] == "=" && !((vMatch[4][i-1] || "").match(cmps) || (vMatch[4][i+1] || "").match(cmps))) {
          stack.push(i);
        }
        else if (vMatch[4][i] == ";") {
          stack.pop();
          if (stack.length == 0) {
            stack = i+1; // record the successful index
            break;
          }
        }
      }
    }
    if (!(stack instanceof Object)) {
      var newStr = vMatch[1]+(vMatch[2] || "");
      if (context.context[vMatch[2]]) {
        newStr += "="+sync.val(context.context[vMatch[2]])+";"
      }
      else {
        newStr += vMatch[4].substring(0, stack);
      }
      final += newStr;
      vMatch[0] = (vMatch[1] || "") +(vMatch[2] || "") + (vMatch[3] || "") + vMatch[4].substring(0, stack);
    }
    str = str.replace(vMatch[0], "");
    vMatch = variableRegex.exec(str);
  }
  for (var i in context.context) {
    if (!final.match(i)) {
      final += "$"+i+"="+sync.val(context.context[i])+";";
    }
  }
  final += context.str;
  return final;
}

util.slideshow = function(media, title) {
  var applied = false;
  $(".application[ui-name='ui_display']").each(function(){
    if (!applied && $(this).attr("tabKey") != null) {
      applied = true;
      game.state.data.tabs[$(this).attr("tabKey")].data = game.state.data.tabs[$(this).attr("tabKey")].data || {};
      game.locals["imgHistory"] = game.locals["imgHistory"] || sync.obj();
      game.locals["imgHistory"].data = game.locals["imgHistory"].data || []
      var imgHistory = game.locals["imgHistory"].data;
      if (game.state.data.tabs[$(this).attr("tabKey")].data.media) {
        if (!util.contains(imgHistory, game.state.data.tabs[$(this).attr("tabKey")].data.media)) {
          imgHistory.push(game.state.data.tabs[$(this).attr("tabKey")].data.media);
        }
        else {
          var push;
          for (var i in imgHistory) {
            if (imgHistory[i] == game.state.data.tabs[$(this).attr("tabKey")].data.media) {
              push = imgHistory.splice(i, 1);
              break;
            }
          }
          imgHistory.push(game.state.data.tabs[$(this).attr("tabKey")].data.media);
        }
      }
      game.locals["imgHistory"].update();
      game.state.data.tabs[$(this).attr("tabKey")].data.media = media;
      game.state.sync("updateState");
    }
  });
  if (!applied) {
    if ($(".application[ui-name='ui_displayTabs']").length) {
      game.state.data.tabs.push({name : title || "Narrative Display", data : {media : media}});
      game.state.sync("updateState");
    }
    else {
      sendAlert({text : "No valid viewports"});
    }
  }
}

util.matchYoutube = function(link) {
  if (link && (link.match("youtu.be") || link.match("www.youtube.com"))) {
    var reg = /(v=)([^&]*)/;
    var reg1 = /[^\/]*([^&^?\/]*)$/;
    var time = /[^?]*t=([^&^?]*)$/;
    var list = /[^?]*list=([^&^?]*)$/;
    var index = /[^?]*index=([^&^?]*)$/;
    var returnData = {};
    var res = reg.exec(link);
    if (res) {
      returnData.video = res[2];
    }
    else {
      var res = reg1.exec(link);
      if (res) {
        returnData.video = res[0].split("?")[0];
      }
    }
    var timeReg = time.exec(link);
    if (timeReg) {
      returnData.time = timeReg[1];
    }
    /*var listReg = list.exec(video.val());
    console.log(listReg);
    if (listReg) {
      returnData.list = listReg[1];
    }
    returnData.list = "LFgquLnL59ak-4CpDgS6u0eXKtz_VgGfX";
    var indexReg = index.exec(video.val());
    console.log(indexReg);
    if (indexReg) {
      returnData.index = indexReg[1];
    }
    console.log(returnData);*/
    return returnData;
  }
  return false;
}

util.shareYoutube = function(link) {
  var matchYoutube = util.matchYoutube(link);
  if (matchYoutube && hasSecurity(getCookie("UserID"), "Assistant Master")) {
    runCommand("media", {cmd : "update", data : matchYoutube});
  }
}

util.art = {
  Tokens : [
    {src : "/content/bluesword/tokens/human.png"},
    {src : "/content/bluesword/tokens/abo.png"},
    {src : "/content/bluesword/tokens/abo_blue.png"},
    {src : "/content/bluesword/tokens/abo_demon.png"},
    {src : "/content/bluesword/tokens/abo_orange.png"},
    {src : "/content/bluesword/tokens/abomonination_green.png"},
    {src : "/content/bluesword/tokens/abomonination_red.png"},
    {src : "/content/bluesword/tokens/black_monster.png"},
    {src : "/content/bluesword/tokens/black_monster_demon.png"},
    {src : "/content/bluesword/tokens/blue_monster.png"},
    {src : "/content/bluesword/tokens/cyan_monster.png"},
    {src : "/content/bluesword/tokens/bop.png"},
    {src : "/content/bluesword/tokens/bop_demon.png"},
    {src : "/content/bluesword/tokens/hawk.png"},
    {src : "/content/bluesword/tokens/bug.png"},
    {src : "/content/bluesword/tokens/bug_cyan.png"},
    {src : "/content/bluesword/tokens/bug_green.png"},
    {src : "/content/bluesword/tokens/bug_pink.png"},
    {src : "/content/bluesword/tokens/bug_green.png"},
    {src : "/content/bluesword/tokens/bug_red.png"},
    {src : "/content/bluesword/tokens/bug_large_blue.png"},
    {src : "/content/bluesword/tokens/bug_large_cyan.png"},
    {src : "/content/bluesword/tokens/bug_large_green.png"},
    {src : "/content/bluesword/tokens/bug_large_pink.png"},
    {src : "/content/bluesword/tokens/bug_large_red.png"},
    {src : "/content/bluesword/tokens/caveinsert_cyan.png"},
    {src : "/content/bluesword/tokens/caveinsert_green.png"},
    {src : "/content/bluesword/tokens/caveinsert_pink.png"},
    {src : "/content/bluesword/tokens/caveinsert_red.png"},
    {src : "/content/bluesword/tokens/darkdragon.png"},
    {src : "/content/bluesword/tokens/demondragon.png"},
    {src : "/content/bluesword/tokens/emeralddragon.png"},
    {src : "/content/bluesword/tokens/flamedragon.png"},
    {src : "/content/bluesword/tokens/magmadragon.png"},
    {src : "/content/bluesword/tokens/saphiredragon.png"},
    {src : "/content/bluesword/tokens/stonedragon.png"},
    {src : "/content/bluesword/tokens/stonedragon_wyrm.png"},
    {src : "/content/bluesword/tokens/red_tribal_monster.png"},
    {src : "/content/bluesword/tokens/green_tribal_monster.png"},
    {src : "/content/bluesword/tokens/freybug.png"},
    {src : "/content/bluesword/tokens/freybug_fire.png"},
    {src : "/content/bluesword/tokens/freybugdemon.png"},
    {src : "/content/bluesword/tokens/freybugdemon_fire.png"},
    {src : "/content/bluesword/tokens/freybugspirit.png"},
    {src : "/content/bluesword/tokens/freybugspirit_fire.png"},
    {src : "/content/bluesword/tokens/frostgiant.png"},
    {src : "/content/bluesword/tokens/crystalgiant.png"},
    {src : "/content/bluesword/tokens/gemstonegiant.png"},
    {src : "/content/bluesword/tokens/frostyeti.png"},
    {src : "/content/bluesword/tokens/demonyeti.png"},
    {src : "/content/bluesword/tokens/mountaingoat.png"},
    {src : "/content/bluesword/tokens/worm_insert.png"},
    {src : "/content/bluesword/tokens/worm_insect_blue.png"},
    {src : "/content/bluesword/tokens/worm_insect_cyan.png"},
    {src : "/content/bluesword/tokens/worm_insect_green.png"},
    {src : "/content/bluesword/tokens/worm_insect_pink.png"},
    {src : "/content/bluesword/tokens/worm_insect_red.png"},
    {src : "/content/bluesword/tokens/lizard.png"},
    {src : "/content/bluesword/tokens/lizard2.png"},
    {src : "/content/bluesword/tokens/snake.png"},
    {src : "/content/bluesword/tokens/snake2.png"},
    {src : "/content/bluesword/tokens/scorpion.png"},
    {src : "/content/bluesword/tokens/scorpion2.png"},
    {src : "/content/bluesword/tokens/scorpion3.png"},
  ],
  Nouns : [
    {src : "/content/nouns/skull.png"},
    {src : "/content/nouns/demon.png"},
    {src : "/content/nouns/flag.png"},
    {src : "/content/nouns/house.png"},
    {src : "/content/nouns/castletower.png"},
    {src : "/content/nouns/gas.png"},
    {src : "/content/nouns/angel.png"},
    {src : "/content/nouns/chalice.png"},
    {src : "/content/nouns/cross.png"},
    {src : "/content/nouns/church.png"},
    {src : "/content/nouns/vatican.png"},
    {src : "/content/nouns/castle.png"},
    {src : "/content/nouns/pentagram.png"},
    {src : "/content/nouns/bank.png"},
    {src : "/content/nouns/library.png"},
    {src : "/content/nouns/bridge.png"},
    {src : "/content/nouns/factory.png"},
    {src : "/content/nouns/arch.png"},
    {src : "/content/nouns/obilisk.png"},
    {src : "/content/nouns/minecart.png"},
    {src : "/content/nouns/minecart_empty.png"},
    {src : "/content/nouns/track_paw.png"},
    {src : "/content/nouns/crate.png"},
    {src : "/content/nouns/gravestone.png"},
    {src : "/content/nouns/fire.png"},
    {src : "/content/nouns/leaf.png"},
    {src : "/content/nouns/rain.png"},
    {src : "/content/nouns/snow.png"},
    {src : "/content/nouns/thunder.png"},
    {src : "/content/nouns/d20.png"},
    {src : "/content/nouns/diamond.png"},
    {src : "/content/nouns/spacefighter1.png"},
    {src : "/content/nouns/spacefighter2.png"},
    {src : "/content/nouns/spacefighter3.png"},
    {src : "/content/nouns/squaretarget.png"},
    {src : "/content/nouns/jetfighter.png"},
    {src : "/content/nouns/jail.png"},
    {src : "/content/nouns/compass.png"},
    {src : "/content/nouns/tank.png"},
    {src : "/content/nouns/bike.png"},
    {src : "/content/nouns/boat.png"},
    {src : "/content/nouns/truck.png"},
    {src : "/content/nouns/flame.png"},
    {src : "/content/nouns/target.png"},
    {src : "/content/nouns/tree.png"},
    {src : "/content/nouns/conifer.png"},
    {src : "/content/nouns/satelite.png"},
    {src : "/content/nouns/car.png"},
    {src : "/content/nouns/jeep.png"},
    {src : "/content/nouns/plane.png"},
    {src : "/content/nouns/mountain.png"},
    {src : "/content/nouns/palm.png"},
    {src : "/content/nouns/port.png"},
    {src : "/content/nouns/island.png"},
    {src : "/content/nouns/clue.png"},
    {src : "/content/nouns/globe.png"},
    {src : "/content/nouns/bullseye.png"},
    {src : "/content/nouns/radar.png"},
    {src : "/content/nouns/turbine.png"},
    {src : "/content/nouns/drill.png"},
    {src : "/content/nouns/canister.png"},
    {src : "/content/nouns/paw.png"},
    {src : "/content/nouns/claw.png"},
    {src : "/content/nouns/coffin.png"},
    {src : "/content/nouns/pirate.png"},
  ],
  Effects : [
    {src : "/content/effects/skull.png"},
    {src : "/content/effects/cripple.png"},
    {src : "/content/effects/dazed.png"},
    {src : "/content/effects/flame.png"},
    {src : "/content/effects/bullseye.png"},
    {src : "/content/effects/flag.png"},
    {src : "/content/effects/pill.png"},
    {src : "/content/effects/power.png"},
    {src : "/content/effects/silence.png"},
    {src : "/content/effects/snare.png"},
    {src : "/content/effects/snow.png"},
    {src : "/content/effects/strength.png"},
    {src : "/content/effects/target.png"},
  ],
  Icons : [
    "Amulet1000p.png",
    "Anvil1000p.png",
    "Arrows1000p.png",
    "Axe1000p.png",
    "Backpack1000p.png",
    "BanditArmor1000p.png",
    "BattleAxe1000p.png",
    "Battlehammer1000p.png",
    "BeltPouch1000p.png",
    "blankchar.png",
    "Book1000p.png",
    "Bow1000p.png",
    "Bracelet1000p.png",
    "Chainmail1000p.png",
    "Chest1000p.png",
    "Cloak1000p.png",
    "Club1000p.png",
    "CommonClothes1000p.png",
    "Crossbow1000p.png",
    "Crowbar1000p.png",
    "Glaive1000p.png",
    "GrapplingHook1000p.png",
    "Halberd1000p.png",
    "Hammer1000p.png",
    "Key1000p.png",
    "Knife1000p.png",
    "Lance1000p.png",
    "Mace1000p.png",
    "MaceRounded1000p.png",
    "Maul1000p.png",
    "MedKit1000p.png",
    "PictureFrame1000p.png",
    "PlateMail1000p.png",
    "Pouch1000p.png",
    "QuarterStaff1000p.png",
    "Rapier1000p.png",
    "Ring1000p.png",
    "Robes1000p.png",
    "rpot_L1000p.png",
    "rpot_M1000p.png",
    "rpot_S1000p.png",
    "Scalemail1000p.png",
    "Scimitar1000p.png",
    "Scroll1000p.png",
    "Shield1000p.png",
    "ShieldOutline1000p.png",
    "Slingshot1000p.png",
    "Spear1000p.png",
    "SpikedClub1000p.png",
    "spot_L1000p.png",
    "spot_M1000p.png",
    "spot_S1000p.png",
    "Staff1000p.png",
    "Sword1000p.png",
    "Tent1000p.png",
    "Toolbox1000p.png",
    "Warhammer1000p.png",
  ],
  "Sci-fi" : [
    {src : "/content/peter/basement.png"},
    {src : "/content/peter/controlroom.png"},
    {src : "/content/peter/dockingbay.png"},
  ],
  "Area" : [
    {src : "/content/bluesword/island_cottage_gridless.jpg"},
    {src : "/content/bluesword/pyramid_gridless.jpg"},
    {src : "/content/bluesword/red_gridless_camp.jpg"},
    {src : "/content/bluesword/ash.png"},
    {src : "/content/bluesword/dirt.png"},
    {src : "/content/bluesword/grass.png"},
    {src : "/content/bluesword/plains.png"},
    {src : "/content/bluesword/snow.png"}
  ],
  "Dungeons" : [
    {src : "/content/etc/122abyssalengine-grid.jpg"},
    {src : "/content/etc/jinxedsapphire-grid.jpg"},
    {src : "/content/etc/sirhaggardscrypt-dm-grid.jpg"},
  ],
  "Worldmaps" : [
    {src : "/content/worldmap_full.jpg"}
  ]

};

util.mediaType = function(src) {
  var types = ["img", "video", "audio"];
  if (src) {
    if (util.matchYoutube(src)) {
      return util.matchYoutube(src);
    }
    for (var i in types) {
      var type = types[i];
      for (var j in assetTypes[type].files) {
        if (src.split(".").pop() == assetTypes[type].files[j]) {
          return type;
        }
      }
    }
    return src.split(".").pop();
  }
}

util.buildActions = function(roll) {
  var defContext = sync.defaultContext();
  var pChar = getPlayerCharacter(getCookie("UserID"));
  if (pChar && pChar.data) {
    defContext[pChar.data._t] = duplicate(pChar.data);
  }
  function buildActions(list) {
    var actionList;
    if (list) {
      actionList = [];
    }
    for (var i in list) {
      if (list[i].uCond == null || sync.eval(list[i].uCond, defContext)) {
        var fn;
        if (list[i].cCond == null || sync.eval(list[i].cCond, defContext)) {
          fn = function(ev, ui) {
            var targets = util.getTargets();
            if (!targets.length && pChar && pChar.data) {
              targets.push(pChar.id());
              sendAlert({text : "Targeting yourself"});
            }
            if (targets.length) {
              var targetData = {};
              var effID = ui.attr("index");
              var ctx = sync.defaultContext();
              if (roll) {
                ctx["pool"] = duplicate(roll.eventData.pool);
                ctx["loc"] = duplicate(roll.eventData.loc);
                ctx["var"] = duplicate(roll.eventData.var);
                delete ctx.location;
              }
              for (var i in targets) {
                var index = targets[i];
                var ent = getEnt(targets[i]);
                if (list[effID].cond == null || sync.eval(list[effID].cond, ctx)) {
                  ctx[ent.data._t] = duplicate(ent.data);
                  targetData[index] = util.resolveCalc(list[effID].calc, ctx);
                }
                else {
                  sendAlert({text : sync.rawVal(ent.data.info.name) + " is not eligible"});
                }
              }
              runCommand("applyCheck", {flavor : sync.eval((list[effID].msg || "0"), ctx), color : "rgb(235,235,228)", effects : targetData});
              util.unSelectTargets();
            }
            else {
              sendAlert({text : "Target a character by ctrl + clicking them or selecting their token"});
            }
            _dragTransfer = null;
          }
        }
        actionList.push({
          name : list[i].name,
          attr : {index : i},
          submenu : buildActions(list[i].submenu),
          click : fn
        });
      }
    }
    return actionList;
  }
  return buildActions(game.templates.effects) || [];
}

util.pages = {
  "White" : {},
  "Grey Parchement" : {
    "background-image": "url('/content/sheet1.png')",
    "background-size": "100% auto"
  },
  "Faded Parchment" : {
    "background-image": "url('/content/sheet2.png')",
    "background-size": "100% auto"
  },
  "Lively Parchment" : {
    "background-image": "url('/content/sheet3.png')",
    "background-size": "100% auto",
  },
}

util.processEvent = function(equation, overMessage, href, ic, whisper, eID){
  layout.coverlay("select-entity");
  var ctx = sync.defaultContext();
  if (ic) {
    var ent = getPlayerCharacter(getCookie("UserID"));
    if (ent && ent.data) {
      ctx[ent.data._t] = duplicate(ent.data);
    }
  }
  var eqs = equation.split("/r");
  var eqReg = /(~[^;]*~)? *(&[^;]*&)? *(%[^%]*%)? *(.+)/i;
  for (var i in eqs) {
    var match = eqReg.exec(eqs[i].trim());
    if (match) {
      var msg = match[1];
      if (msg) {
        msg = msg.substring(1, msg.length-1);
      }
      var ui = match[2];
      if (ui) {
        ui = ui.substring(1, ui.length-1);
      }
      var varTableStr = match[3];
      var varTable;
      if (varTableStr) {
        varTableStr = varTableStr.substring(1, varTableStr.length-1).split(";");
        varTable = {};
        var varMatchReg = /(\w*)=(.*)/
        for (var key in varTableStr) {
          var varMatch = varTableStr[key].match(varMatchReg);
          if (varMatch) {
            if (isNaN(varMatch[2])) {
              varTable[varMatch[1]] = varMatch[2];
            }
            else {
              varTable[varMatch[1]] = Number(varMatch[2]);
            }
          }
        }
      }
      var str = match[4];
      var evData = {
        icon : (ic!=null)?(href):(null),
        flavor : sync.eval(msg || overMessage || "@me.name+' rolled'", ctx),
        person : ic,
        eID : (ic!=null)?(eID || getPlayerCharacterID()):(eID),
        p : whisper,
        eventData : sync.executeQuery(str, ctx),
        color : game.players.data[getCookie("UserID")].color,
      }
      evData.eventData.var = varTable;
      evData.eventData.ui = ui;
      runCommand("chatEvent", evData);
    }
  }
}

var _lastChat = [];
var _lastIndex;

util.chatEvent = function(textInput, chatType, permissions, parentUI, href, ic, eID) {
  layout.coverlay("select-entity");
  var textArray = [textInput];
  for (var i in textArray) {
    var text = textArray[i];
    _lastChat.push(text);
    _lastIndex = null;
    if (text.length) {
      if (text.match("http") && text.match("http").index == 0) {
        if (!util.matchYoutube(text)) {
          ui_processLink(text, function(link, newLink, exists){
            runCommand("reaction", newLink);
          });
        }
        else {
          runCommand("reaction", text);
        }
      }
      else if (text.match("/r") && text.match("/r").index == 0) {
        var val = text.replace("/r", "").trim();

        util.processEvent(val, chatType, href, (ic != null)?(chatType):(null));
      }
      else if (text.match("/w") && text.match("/w").index == 0) {
        var content = $("<div>");
        content.addClass("flexcolumn");
        content.append("<b>Send Message To...</b>");
        content.css("width", parentUI.width());

        var playerList = $("<div>").appendTo(content);
        playerList.addClass("flexcolumn lrpadding outline subtitle");

        for (var i in game.players.data) {
          var button = $("<button>").appendTo(playerList);
          if (hasSecurity(i, "Assistant Master") || _whisperTargets[i]) {
            button.addClass("highlight alttext");
            _whisperTargets[i] = true;
          }
          button.attr("index", i);
          button.append(game.players.data[i].displayName);
          button.click(function(){
            if ($(this).hasClass("highlight")) {
              $(this).removeClass("highlight alttext");
              delete _whisperTargets[$(this).attr("index")];
            }
            else {
              $(this).addClass("highlight alttext");
              _whisperTargets[$(this).attr("index")] = true;
            }
          });
        }

        var whisper = $("<button>").appendTo(content);
        whisper.append("Send Whisper");
        whisper.click(function(){
          _whisperTargets[getCookie("UserID")] = true;
          var chatData = {
            text : text,
            person : chatType,
            eID : (ic!=null)?(eID || getPlayerCharacterID()):(eID),
            p : _whisperTargets,
            icon : href,
            color : game.players.data[getCookie("UserID")].color
          };
          runCommand("chatEvent", chatData);
          layout.coverlay("whisper-helper");
        });

        var pop = ui_popOut({
          target : parentUI,
          id : "whisper-helper",
        }, content);
        content.append("<div style='font-size:0.8em' class='flexmiddle'><i>Press Enter/Click to Send Message</i></div>");
        whisper.focus();
      }
      else {
        var chatData = {
          text : text,
          person : chatType,
          eID : (ic!=null)?(eID || getPlayerCharacterID()):(eID),
          icon : href,
          color : game.players.data[getCookie("UserID")].color
        };
        runCommand("chatEvent", chatData);
      }
    }
  }
}

util.hotIcons = {
  "ui_actions" : "warning-sign",
  "ui_roll" : "registration-mark",
  "ui_fullRoller" : "registration-mark",
  "ui_displayManager" : "modal-window",
  "ui_display" : "eye-open",
  "ui_board" : "globe",
  "ui_gameCtrl" : "wrench",
  "ui_boardListener" : "picture",
  "ui_homebrew" : "edit",
  "ui_textBox" : "list",
  "ui_boxes" : "inbox",
  "ui_planner" : "book",
  "ui_contentList" : "unchecked",
  "ui_pageList" : "duplicate",
  "ui_editPage" : "file",
  "ui_pdf" : "folder-open",
  "ui_assetManager" : "tasks",
  "ui_assetOrganizer" : "list-alt",
  "ui_characterList" : "user",
  "ui_combatManager" : "fire",
  "ui_library" : "envelope",
  "ui_fileBrowser" : "inbox",
  "ui_resourcePage" : "asterisk",
};

util.decks = {
  "Standard" : [
    {src : "/content/cards/cardclubs2.png"},
    {src : "/content/cards/carddiamonds2.png"},
    {src : "/content/cards/cardhearts2.png"},
    {src : "/content/cards/cardspades2.png"},

    {src : "/content/cards/cardclubs3.png"},
    {src : "/content/cards/carddiamonds3.png"},
    {src : "/content/cards/cardhearts3.png"},
    {src : "/content/cards/cardspades3.png"},

    {src : "/content/cards/cardclubs4.png"},
    {src : "/content/cards/carddiamonds4.png"},
    {src : "/content/cards/cardhearts4.png"},
    {src : "/content/cards/cardspades4.png"},

    {src : "/content/cards/cardclubs5.png"},
    {src : "/content/cards/carddiamonds5.png"},
    {src : "/content/cards/cardhearts5.png"},
    {src : "/content/cards/cardspades5.png"},

    {src : "/content/cards/cardclubs6.png"},
    {src : "/content/cards/carddiamonds6.png"},
    {src : "/content/cards/cardhearts6.png"},
    {src : "/content/cards/cardspades6.png"},

    {src : "/content/cards/cardclubs7.png"},
    {src : "/content/cards/carddiamonds7.png"},
    {src : "/content/cards/cardhearts7.png"},
    {src : "/content/cards/cardspades7.png"},

    {src : "/content/cards/cardclubs8.png"},
    {src : "/content/cards/carddiamonds8.png"},
    {src : "/content/cards/cardhearts8.png"},
    {src : "/content/cards/cardspades8.png"},

    {src : "/content/cards/cardclubs9.png"},
    {src : "/content/cards/carddiamonds9.png"},
    {src : "/content/cards/cardhearts9.png"},
    {src : "/content/cards/cardspades9.png"},

    {src : "/content/cards/cardclubs10.png"},
    {src : "/content/cards/carddiamonds10.png"},
    {src : "/content/cards/cardhearts10.png"},
    {src : "/content/cards/cardspades10.png"},

    {src : "/content/cards/cardclubsj.png"},
    {src : "/content/cards/carddiamondsj.png"},
    {src : "/content/cards/cardheartsj.png"},
    {src : "/content/cards/cardspadesj.png"},

    {src : "/content/cards/cardclubsq.png"},
    {src : "/content/cards/carddiamondsq.png"},
    {src : "/content/cards/cardheartsq.png"},
    {src : "/content/cards/cardspadesq.png"},

    {src : "/content/cards/cardclubsk.png"},
    {src : "/content/cards/carddiamondsk.png"},
    {src : "/content/cards/cardheartsk.png"},
    {src : "/content/cards/cardspadesk.png"},

    {src : "/content/cards/cardclubsa.png"},
    {src : "/content/cards/carddiamondsa.png"},
    {src : "/content/cards/cardheartsa.png"},
    {src : "/content/cards/cardspadesa.png"},
  ],
  "Jokers" : [
    {src : "/content/cards/cardclubs2.png"},
    {src : "/content/cards/carddiamonds2.png"},
    {src : "/content/cards/cardhearts2.png"},
    {src : "/content/cards/cardspades2.png"},

    {src : "/content/cards/cardclubs3.png"},
    {src : "/content/cards/carddiamonds3.png"},
    {src : "/content/cards/cardhearts3.png"},
    {src : "/content/cards/cardspades3.png"},

    {src : "/content/cards/cardclubs4.png"},
    {src : "/content/cards/carddiamonds4.png"},
    {src : "/content/cards/cardhearts4.png"},
    {src : "/content/cards/cardspades4.png"},

    {src : "/content/cards/cardclubs5.png"},
    {src : "/content/cards/carddiamonds5.png"},
    {src : "/content/cards/cardhearts5.png"},
    {src : "/content/cards/cardspades5.png"},

    {src : "/content/cards/cardclubs6.png"},
    {src : "/content/cards/carddiamonds6.png"},
    {src : "/content/cards/cardhearts6.png"},
    {src : "/content/cards/cardspades6.png"},

    {src : "/content/cards/cardclubs7.png"},
    {src : "/content/cards/carddiamonds7.png"},
    {src : "/content/cards/cardhearts7.png"},
    {src : "/content/cards/cardspades7.png"},

    {src : "/content/cards/cardclubs8.png"},
    {src : "/content/cards/carddiamonds8.png"},
    {src : "/content/cards/cardhearts8.png"},
    {src : "/content/cards/cardspades8.png"},

    {src : "/content/cards/cardclubs9.png"},
    {src : "/content/cards/carddiamonds9.png"},
    {src : "/content/cards/cardhearts9.png"},
    {src : "/content/cards/cardspades9.png"},

    {src : "/content/cards/cardclubs10.png"},
    {src : "/content/cards/carddiamonds10.png"},
    {src : "/content/cards/cardhearts10.png"},
    {src : "/content/cards/cardspades10.png"},

    {src : "/content/cards/cardclubsj.png"},
    {src : "/content/cards/carddiamondsj.png"},
    {src : "/content/cards/cardheartsj.png"},
    {src : "/content/cards/cardspadesj.png"},

    {src : "/content/cards/cardclubsq.png"},
    {src : "/content/cards/carddiamondsq.png"},
    {src : "/content/cards/cardheartsq.png"},
    {src : "/content/cards/cardspadesq.png"},

    {src : "/content/cards/cardclubsk.png"},
    {src : "/content/cards/carddiamondsk.png"},
    {src : "/content/cards/cardheartsk.png"},
    {src : "/content/cards/cardspadesk.png"},

    {src : "/content/cards/cardclubsa.png"},
    {src : "/content/cards/carddiamondsa.png"},
    {src : "/content/cards/cardheartsa.png"},
    {src : "/content/cards/cardspadesa.png"},

    {src : "/content/cards/cardJokerB.png"},
    {src : "/content/cards/cardJoker.png"},
  ],
};

util.settings = {
  time : {
    "Dawn" : "/content/weather/dawn.png",
    "Sunrise" : "/content/weather/sunrise.png",
    "Day" : "/content/weather/day.png",
    "Sunset" : "/content/weather/sunset.png",
    "Dusk"  : "/content/weather/dusk.png",
    "Night" : "/content/weather/night.png",
    "Full Moon" : "/content/weather/fullmoon.png",
  },
  weather : {
    //"Cloudy" : "/content/weather/cloudy.png",
    //"Windy" : "/content/weather/windy.png",
    "Snowy" : "/content/weather/snowy.png",
    "Light Rain" : "/content/weather/lightrain.png",
    "Rain"  : "/content/weather/rain.png",
    "Heavy Rain" : "/content/weather/heavyrain.png",
    //"Hail" : "/content/weather/hail.png",
    //"Foggy" : "/content/weather/foggy.png",
    //"Stormy" : "/content/weather/stormy.png",
    //"Tornado" : "/content/weather/tornado.png",
    //"Strange" : "/content/weather/strange.png"
  },
  temp : {
    "Hot" : "/content/weather/hot.png",
    "Warm" : "/content/weather/warm.png",
    "Cold" : "/content/weather/cold.png",
  }
}

util.nameBank = [
  "Lindon Bost",
  "Dilly Dally",
  "Ezekiel Khaine",
  "Lorhanna",
  "Karneck Glostenvele",
  "Anne Oldman",
  "Lord Alfonse Ignatius von Carmichael the Third",
  "Guiseppe Markhov",
  "Tyrius Arlyeon",
  "Miranda Stonehenge",
  "Fatih Carpathian",
  "Leonon Silentread",
  "Naivara Naïlo",
  "Kookens",
  "Mathazar Mundrarko",
  "Greg",
  "Hallam Storey",
  "Lograine Gentrillio",
  "Ashlein O'Buirns",
  "Irissa-Thallia Ra",
  "Mikahail Taldirseer",
  "Arthreas Darandis",
  "Verister Milkina",
  "Prescot of House Histle",
  "Lerissas D'Origna",
  "Swoops McGee",
  "Rosco McQueen",
  "Sir Pimpered Nickles",
  'Soyka "Molotov" Soleski',
  "Barinth Lockingjaw",
  "Danarhys Tobyn",
  "Enitos Tor'tulus",
  "Caol Dol Amroth",
  "Ralph B'begly",
  "Orrus Gargongheist",
  "Tyrannus Oculi",
  "Big McLargehuge",
  "Malkin Falimede",
  "Val Daro",
  "Ignatius Fignuton",
  "Malec Kurtwin",
  "Kaleb Charington",
  "Gurqarinnel Tinkenblaster",
  "Grogdar Hilden",
  "Stargin Donter",
  "Shyla Bluff",
  "Gordma Galeic",
  "Laura Mann",
  "Zalban Masset",
  "Ardwen Swifthammer",
  "Michael Ohl",
  "THE Donnie",
  "Thagmor Dankil",
  "Steinvith Lothbrok",
  "Heboric Shatterspear",
  "Kasuko Raza",
  "Lardo",
  "Margalit Kaufman",
  "Eborg",
  "Grax Waddik",
  "Moshi Chojiro",
  "Naesala Des Montagnes",
  "Bramimond",
  "Lora Mannn",
  "Arsheviere",
  "Vyros Osbyrn",
  "Lan Athrawes",
  "Felix Landstander",
  "Mani Droak",
  "The Precious One",
  'Elarith "Rekha" Glastim',
  "Xerxses the Spellborn",
  "Romeo",
  "Ulrin Lightbringer",
  "Farsat",
  "Mïorwen Saithseren",
  "Glorp-Glorp",
  "Jayne Corbec",
  "Franklin Cho"
];


util.parse = {
  character : function(str){
    var characterData = duplicate(game.templates.character || {});
    maxify(str, characterData, game.templates);
    return characterData;
  }
}


util.resourceTypes = {
  "Rich Text" : {},
  "Deck of Cards" : {
    edit : function(obj, app, scope, parent) {
      var tableData = [];

      if (sync.rawVal(obj.data.info.notes) && sync.rawVal(obj.data.info.notes)[0] == "[") {
        try {
          tableData = JSON.parse(sync.rawVal(obj.data.info.notes));
        }
        catch (e) {
          tableData = [];
        }
      }
      parent.addClass("flexmiddle");

      var cardList = $("<div>").appendTo(parent);
      cardList.addClass("flexrow flexwrap");
      cardList.sortable({
        connectWith : ".dropContent",
        update : function(){obj.update();}
      });

      var optionsBar = $("<div>").appendTo(parent);
      optionsBar.addClass("flexcolumn fit-x subtitle");

      var total = $("<b>").appendTo(optionsBar);
      total.text(tableData.length + " Cards");

      var newDeck = genIcon("plus", "Create Deck").appendTo(optionsBar);
      newDeck.click(function(){
        game.state.data.cards = game.state.data.cards || {}
        game.state.data.cards.decks = game.state.data.cards.decks || [];

        // shuffle
        var deckData = {type : tableData, pool : [], players : {}};
        var start = duplicate(deckData.type);
        while (start.length) {
          var index = Math.floor(Math.random() * start.length);
          var val = start.splice(index, 1)[0];
          deckData.pool.push(val);
        }
        game.state.data.cards.decks.push(deckData);

        game.state.sync("updateState");
      });

      var newCard = genIcon("", "Add Unique Card").appendTo(optionsBar);
      newCard.click(function(){
        var content = sync.render("ui_filePicker")(obj, app, {change : function(ev, ui, val){
          tableData.push({src : val});
          sync.rawVal(obj.data.info.notes, JSON.stringify(tableData));
          obj.sync("updateAsset");
          if (!down[17]) {
            layout.coverlay("image-selection");
          }
        }});

        var pop = ui_popOut({
          target : app,
          prompt : true,
          id : "image-selection",
          style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
        }, content);
        pop.resizable();
      });

      var unsorted = {};
      for (var i in tableData) {
        var cardData = duplicate(tableData[i]);
        unsorted[cardData.src] = unsorted[cardData.src] || 0;
        unsorted[cardData.src]++;
      }

      var uniqueTypes = {};
      Object.keys(unsorted).sort().forEach(function(key) {
        uniqueTypes[key] = unsorted[key];
      });

      for (var i in uniqueTypes) {
        var cardData = {src : i, flipped : true};

        var card = sync.render("ui_card")({data : cardData}, app, scope).appendTo(cardList);
        card.addClass("hover2");
        card.attr("key", i);
        card.click(function(){
          $(this).contextmenu();
        });
        card.contextmenu(function(){
          var cardID = $(this).attr("key");
          var src = $(this).attr("cardSrc");
          var actionsList = [
            {
              name : "Announce Card",
              click : function(){
                runCommand("reaction", src);
              }
            },
            {
              name : "View Card",
              click : function(ev, ui){
                assetTypes["img"].preview(ev, ui, src);
              }
            },
            {
              name : "DELETE CARDS",
              submenu : [
                {
                  name : "Confirm",
                  click : function(ev, ui){
                    for (var k=tableData.length-1; k>=0; k--) {
                      if (tableData[k].src == src) {
                        tableData.splice(k, 1);
                      }
                    }
                    sync.rawVal(obj.data.info.notes, JSON.stringify(tableData));
                    obj.sync("updateAsset");
                  }
                }
              ]
            }
          ];

          ui_dropMenu($(this), actionsList, {id : "card-menu"});
          return false;
        });

        var cardRow = genInput({
          parent : card,
          classes : "subtitle bold middle lrmargin",
          value : uniqueTypes[i],
          src : i,
          min : 1,
          style : {"width" : "40px", "color" : "#333"}
        });
        cardRow.click(function(ev){
          ev.stopPropagation();
        });
        cardRow.change(function(){
          for (var k=tableData.length-1; k>=0; k--) {
            if (tableData[k].src == $(this).attr("src")) {
              tableData.splice(k, 1);
            }
          }
          for (var k=0; k<parseInt($(this).val()); k++) {
            tableData.push({src : $(this).attr("src")});
          }
          sync.rawVal(obj.data.info.notes, JSON.stringify(tableData));
          obj.sync("updateAsset");
        });
      }
    },
    view : function(obj, app, scope, parent) {
      var tableData = [];

      if (sync.rawVal(obj.data.info.notes) && sync.rawVal(obj.data.info.notes)[0] == "[") {
        try {
          tableData = JSON.parse(sync.rawVal(obj.data.info.notes));
        }
        catch (e) {
          tableData = [];
        }
      }
      parent.addClass("flexmiddle");

      var cardList = $("<div>").appendTo(parent);
      cardList.addClass("flexrow flexwrap");
      cardList.sortable({
        connectWith : ".dropContent",
        update : function(){obj.update();}
      });

      var optionsBar = $("<div>").appendTo(parent);
      optionsBar.addClass("flexcolumn fit-x subtitle");

      var total = $("<b>").appendTo(optionsBar);
      total.text(tableData.length + " Cards");

      if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
        var newDeck = genIcon("plus", "Create Deck").appendTo(optionsBar);
        newDeck.click(function(){
          game.state.data.cards = game.state.data.cards || {}
          game.state.data.cards.decks = game.state.data.cards.decks || [];

          // shuffle
          var deckData = {type : tableData, pool : [], players : {}};
          var start = duplicate(deckData.type);
          while (start.length) {
            var index = Math.floor(Math.random() * start.length);
            var val = start.splice(index, 1)[0];
            deckData.pool.push(val);
          }
          game.state.data.cards.decks.push(deckData);

          game.state.sync("updateState");
        });
      }
      if (tableData.length) {
        var newDeck = genIcon("", "Random Card").appendTo(optionsBar);
        newDeck.click(function(){
          game.state.data.cards.players = game.state.data.cards.players || {};
          game.state.data.cards.players[getCookie("UserID")] = game.state.data.cards.players[getCookie("UserID")] || [];
          game.state.data.cards.players[getCookie("UserID")].push(duplicate(tableData[Math.floor(tableData.length * Math.random())]));

          game.state.sync("updateState");
        });
      }

      var cardData = {src : "null"};

      var card = sync.render("ui_card")({data : cardData}, app, scope).appendTo(cardList);
      card.addClass("hover2");
    }
  },
  "HTML" : {
    // edit is hard coded for the HTML + Rich Text editor
    view : function(obj, app, scope, parent) {
      var wrap = $("<div>").appendTo(parent);
      wrap.addClass("fit-xy flexcolumn scroll-xy").css("position", "relative");
      sync.render("ui_processUI")(obj, app, {display : sync.rawVal(obj.data.info.notes) || ""}).css("position", "absolute").appendTo(wrap);
      /*setTimeout(function(){
        if (parent.is(":visible")) {
          var newFrame = $("<iframe>").appendTo(parent);
          newFrame.attr("width", parent.width());
          newFrame.attr("height", parent.height());
          var str = sync.rawVal(obj.data.info.notes) || "";
          var reg = /{{{@(\w*)}}}/i;
          if (sync.modifier(obj.data.info.mode, "macro")) {
            var ctx = sync.defaultContext();
            merge(ctx, {c : duplicate(obj.data)});

            var context = sync.context(sync.modifier(obj.data.info.mode, "macro"), ctx).context;
            merge(context, ctx);
            var match = str.match(reg);
            var max = 1000;
            var count = 0;
            while (match) {
              str = replaceAll(str, match[0], (sync.rawVal(context[match[1]]) || ""));
              match = str.match(reg);
              count++;
              if (count > max) {
                break;
              }
            }
          }
          //str = replaceAll(str, "href=", "nolinks=");
          str = replaceAll(str, "iframe", "div");
          str = replaceAll(str, "alert(", "noalerts");
          newFrame.attr("sandbox", "");
          newFrame.css("border", "none");
          newFrame.css("outline", "none");
          var idocument = newFrame[0].contentDocument;
          idocument.open();
          idocument.write(str);
          idocument.close();
        }
      }, 1);*/
    }
  },
  "Image" : {
    edit : function(obj, app, scope, parent) {
      scope.lookup = "info.img";
      parent.addClass("smooth outline white");
      sync.render("ui_image")(obj, app, scope).appendTo(parent);
    },
    view : function(obj, app, scope, parent) {
      scope.lookup = "info.img";
      scope.viewOnly = true;
      parent.css("position", "relative");

      var imgContainer = $("<div>").appendTo(parent);
      imgContainer.addClass("flexcolumn flexmiddle flex scroll-xy");

      var media = $("<img>").appendTo(imgContainer);
      media.attr("src", sync.rawVal(obj.data.info.img) || "/content/icons/Scroll1000p.png");
      media.on("load", function(){
        console.log("Here");
        var aspect = this.naturalWidth/this.naturalHeight;

        var imageWidth = this.naturalWidth;
        var imageHeight = this.naturalHeight;
        var areaHeight = imgContainer.outerWidth();
        var areaWidth = imgContainer.outerHeight();

        if (aspect >= 1) { // landscape
          imageWidth = areaWidth;
          imageHeight = imageWidth / aspect;
          if (imageHeight > areaHeight) {
            imageHeight = areaHeight;
            imageWidth = areaHeight * aspect;
          }
        }
        else { // portrait
          imageHeight = areaHeight;
          imageWidth = imageHeight * aspect;
          if (imageWidth > areaWidth) {
            imageWidth = areaWidth;
            imageHeight = areaWidth / aspect;
          }
        }

        media.attr("width", imageWidth);
        media.attr("height", imageHeight);
      });
      media.contextmenu(function(ev){
        assetTypes["img"].contextmenu(ev, $(this), $(this).attr("srcImg"));
        ev.stopPropagation();
        ev.preventDefault();
        return false;
      });

      var zoom = 100;

      var zoomContainer = $("<div>").appendTo(parent);
      zoomContainer.addClass("flexcolumn flexmiddle");
      zoomContainer.css("width", "auto");
      zoomContainer.css("position", "absolute");
      zoomContainer.css("left", "10%");
      zoomContainer.css("bottom", "10%");

      var maxZoom = 200;
      var typeI = "range";
      if (layout.mobile) {
        maxZoom = 1000;
        typeI = "number";
      }
      var zoomRange = genInput({
        parent : zoomContainer,
        type : typeI,
        min : 25,
        value : 100,
        step : 5,
        style : {"width": "100px", color : "black"},
        max : maxZoom
      }, 1);
      zoomRange.val(zoom);
      zoomRange.bind("input", function(){
        zoom = $(this).val();
        media.css("zoom", zoom + "%");
        media.css("margin-top", "100px");
        media.css("margin-bottom", "100px");
      });
    }
  },
  "Roll Table" : {
    edit : function(obj, app, scope, parent) {
      var tableData;

      if (sync.rawVal(obj.data.info.notes) && sync.rawVal(obj.data.info.notes)[0] == "{") {
        try {
          tableData = JSON.parse(sync.rawVal(obj.data.info.notes));
        }
        catch (e) {
          tableData = {headers : [], contents : []};
        }
      }
      else {
        tableData = {headers : [], contents : []};
      }

      var tableOptions = $("<div>").appendTo(parent);
      tableOptions.addClass("flexcolumn foreground alttext");

      var tableConfig = $("<div>").appendTo(tableOptions);

      var headers = $("<div>").appendTo(tableOptions);
      headers.addClass("flexrow flexbetween");

      if (tableData.headers.length < 2) {
        tableData.headers = [{name : "d20"}, {name : "Rolled Value"}];
      }

      for (var i=0; i<tableData.headers.length; i++) {
        var headerData = tableData.headers[i];

        var headerWrap = $("<div>").appendTo(headers);
        headerWrap.addClass("flexcolumn flexmiddle flex");
        if (i == 0) {
          headerWrap.removeClass("flex");
          headerWrap.append("<b class='subtitle dull'>Dice to Roll</b>");
        }
        else {
          headerWrap.append("<b class='subtitle dull'>Description</b>");
        }

        var headerInput = genInput({
          parent : headerWrap,
          classes : "line middle lrmargin",
          value : headerData.name,
          index : i
        });
        headerInput.change(function(){
          tableData.headers[$(this).attr("index")].name = $(this).val();
          sync.rawVal(obj.data.info.notes, JSON.stringify(tableData));
          obj.sync("updateAsset");
        });
      }

      var tableContent = $("<div>").appendTo(parent);
      tableContent.addClass("flex");
      tableContent.css("overflow", "auto");

      for (var i=0; i<tableData.contents.length; i++) {
        var contentData = tableData.contents[i];

        var headerWrap = $("<div>").appendTo(tableContent);
        headerWrap.addClass("flexrow fit-x");

        var headerInput = genInput({
          parent : headerWrap,
          classes : "line middle lrmargin",
          value : contentData.name,
          placeholder : "Dice Range (ex. 32-46)",
          index : i
        });
        headerInput.change(function(){
          tableData.contents[$(this).attr("index")].name = $(this).val();
          sync.rawVal(obj.data.info.notes, JSON.stringify(tableData));
          obj.sync("updateAsset");
        });

        var valueInput = genInput({
          parent : headerWrap,
          classes : "line middle flex lrmargin",
          value : contentData.value,
          index : i
        });
        valueInput.change(function(){
          tableData.contents[$(this).attr("index")].value = $(this).val();
          sync.rawVal(obj.data.info.notes, JSON.stringify(tableData));
          obj.sync("updateAsset");
        });

        var remove = genIcon("remove").appendTo(headerWrap);
        remove.addClass("destroy");
        remove.attr("index", i);
        remove.click(function(){
          tableData.contents.splice($(this).attr("index"), 1);
          sync.rawVal(obj.data.info.notes, JSON.stringify(tableData));
          obj.sync("updateAsset");
        });
      }

      var newRow = genIcon("plus", "New Row("+tableData.contents.length+")");
      newRow.appendTo(parent);
      newRow.addClass("fit-x flexmiddle subtitle bold");
      newRow.click(function(){
        tableData.contents.push({});
        sync.rawVal(obj.data.info.notes, JSON.stringify(tableData));
        obj.update();
      });
    },
    view : function(obj, app, scope, parent) {
      var tableData;

      if (sync.rawVal(obj.data.info.notes) && sync.rawVal(obj.data.info.notes)[0] == "{") {
        try {
          tableData = JSON.parse(sync.rawVal(obj.data.info.notes));
        }
        catch (e) {
          tableData = {headers : [], contents : []};
        }
      }
      else {
        tableData = {headers : [], contents : []};
      }

      var tableContent = $("<div>").appendTo(parent);

      for (var i=0; i<tableData.contents.length; i++) {
        var contentData = tableData.contents[i];

        var headerWrap = $("<div>").appendTo(tableContent);
        headerWrap.addClass("flexrow fit-x outlinebottom");

        var rollButton = $("<button>").appendTo(headerWrap);
        rollButton.addClass("subtitle");
        rollButton.attr("index", i);
        rollButton.css("width", "100px");
        rollButton.text(contentData.name);
        rollButton.click(function(){
          var msg = "Selected "+tableData.contents[$(this).attr("index")].name+" on " + sync.rawVal(obj.data.info.name);
          sendAlert({text : msg});
          util.chatEvent(msg, null, null, $("<input>"), null, true);
          util.chatEvent(tableData.contents[$(this).attr("index")].value, null, null, $("<input>"), null, true);
          $("#chat-button").click();
        });

        headerWrap.append("<p class='flex spadding'>"+(contentData.value || "")+"</p>");
      }

      var tableOptions = $("<div>").appendTo(parent);
      tableOptions.addClass("flexrow subtitle fit-x flexmiddle");

      var rollButton = $("<button>").appendTo(tableOptions);
      rollButton.addClass("bold flexmiddle button spadding flex");
      rollButton.text("Roll");
      rollButton.click(function(){
        var result = sync.eval(tableData.headers[0].name, {});
        var rangeRegex = /(\d+)-(\d+)/i;
        for (var i=0; i<tableData.contents.length; i++) {
          var contentName = tableData.contents[i].name;
          var rangeMatch = contentName.match(rangeRegex);
          if (rangeMatch) {
            if (Number(rangeMatch[1]) > Number(rangeMatch[2])) {
              var temp = Number(rangeMatch[1]);
              rangeMatch[1] = Number(rangeMatch[2]);
              rangeMatch[2] = temp;
            }
            if (Number(rangeMatch[1]) <= result && Number(rangeMatch[2]) >= result) {
              var msg = "Rolled "+result+" on " + sync.rawVal(obj.data.info.name);
              sendAlert({text : msg});
              util.chatEvent(msg, null, null, $("<input>"), null, true);
              util.chatEvent(tableData.contents[i].value, null, null, $("<input>"), null, true);
              $("#chat-button").click();
              return;
            }
          }
          else if (!isNaN(contentName) && contentName == result) {
            var msg = "Rolled "+result+" on " + sync.rawVal(obj.data.info.name);
            sendAlert({text : msg});
            util.chatEvent(msg, null, null, $("<input>"), null, true);
            util.chatEvent(tableData.contents[i].value, null, null, $("<input>"), null, true);
            $("#chat-button").click();
            return;
          }
        }
      });

      var rollButton = $("<button>").appendTo(tableOptions);
      rollButton.addClass("bold flexmiddle background alttext spadding flex");
      rollButton.text("Roll Private");
      rollButton.click(function(){
        var result = sync.eval(tableData.headers[0].name, {});
        var rangeRegex = /(\d+)-(\d+)/i;
        for (var i=0; i<tableData.contents.length; i++) {
          var contentName = tableData.contents[i].name;
          var rangeMatch = contentName.match(rangeRegex);
          if (rangeMatch) {
            if (Number(rangeMatch[1]) > Number(rangeMatch[2])) {
              var temp = Number(rangeMatch[1]);
              rangeMatch[1] = Number(rangeMatch[2]);
              rangeMatch[2] = temp;
            }
            if (Number(rangeMatch[1]) <= result && Number(rangeMatch[2]) >= result) {
              var whisper = {};
              whisper[getCookie("UserID")] = 1;
              var msg = "Rolled "+result+" on " + sync.rawVal(obj.data.info.name);
              sendAlert({text : msg});
              util.chatEvent(msg, null, whisper, $("<input>"), null, true);
              util.chatEvent(tableData.contents[i].value, null, whisper, $("<input>"), null, true);
              $("#chat-button").click();
              return;
            }
          }
          else if (!isNaN(contentName) && contentName == result) {
            var whisper = {};
            whisper[getCookie("UserID")] = 1;
            var msg = "Rolled "+result+" on " + sync.rawVal(obj.data.info.name);
            sendAlert({text : msg});
            util.chatEvent(msg, null, whisper, $("<input>"), null, true);
            util.chatEvent(tableData.contents[i].value, null, whisper, $("<input>"), null, true);
            $("#chat-button").click();
            return;
          }
        }
      });
    }
  },
  "Website" : {
    edit : function(obj, app, scope, parent) {
      parent.addClass("smooth outline white");

      var urlInput = genInput({
        parent : parent,
        classes : "fit-x",
        placeholder : "Website URL",
        value : sync.rawVal(obj.data.info.notes),
      });
      urlInput.change(function(){
        sync.rawVal(obj.data.info.notes, $(this).val());
        obj.sync("updateAsset");
      });
    },
    view : function(obj, app, scope, parent) {
      setTimeout(function(){
        if (parent.is(":visible")) {
          var newFrame = $("<iframe>").appendTo(parent);
          newFrame.attr("width", parent.width());
          newFrame.attr("height", parent.height());
          newFrame.attr("src", sync.rawVal(obj.data.info.notes));
          newFrame.css("border", "none");
          newFrame.css("outline", "none");
          newFrame.css("border", "none");
        }
      }, 1);
    }
  },
}

util.processPage = function(pageData, obj, app, scope) {
  scope = scope || {};
  app = app || $("<div>");
  obj = obj || sync.dummyObj();
  obj.data = obj.data || {};

  var preview = $("<div>");

  var cols = {};
  var colCounter = 0;
  var colList = [
    "#00538A", // Strong Blue
    "#C10020", // Vivid Red
    "#CEA262", // Grayish Yellow
    "#817066", // Medium Gray
    "#007D34", // Vivid Green
    "#FFB300", // Vivid Yellow
    "#803E75", // Strong Purple
    "#FF6800", // Vivid Orange
    "#F6768E", // Strong Purplish Pink
    "#A6BDD7", // Very Light Blue
    "#FF7A5C", // Strong Yellowish Pink
    "#53377A", // Strong Violet
    "#FF8E00", // Vivid Orange Yellow
    "#B32851", // Strong Purplish Red
    "#F4C800", // Vivid Greenish Yellow
    "#7F180D", // Strong Reddish Brown
    "#93AA00", // Vivid Yellowish Green
    "#593315", // Deep Yellowish Brown
    "#F13A13", // Vivid Reddish Orange
    "#232C16", // Dark Olive Green
  ]

  /*for (var i in colList) {
    content.append("<div style='background-color:"+colList[i]+";' class='padding'><div>");
  }*/

  var textData = unpurge(pageData);
  var lineRegex = /(<p[^>]*?>)(.*?)(?=(<\/p>))/igm;
  var convoReg = /(.*)(&nbsp;)*\s*:\s*(&nbsp;)*(".*")/im;
  var noteReg = /\*\*\*([^\*]*)\*\*\*/im;
  var lines = lineRegex.exec(textData);
  while (lines) {
    var text = lines[2];
    var isConvo = text.match(convoReg);
    var isNote = text.match(noteReg);
    if (isConvo) {
      var correctedID = replaceAll(isConvo[1], "&nbsp;", "");
      if (!cols[correctedID]) {
        // register a new color
        cols[correctedID] = colList[colCounter];
        colCounter = colCounter + 1;
      }
      // use the color
      var sec1 = "<div class='chatName spadding smooth fit-x' style='font-size : 1.2em; background-color:"+cols[correctedID]+";'>"+isConvo[1]+"</div>";
      var sec2 = "<div class='chatCmd outline smooth white padding fit-x' style='border-bottom-left-radius : 8px; border-bottom-right-radius : 8px; color : #333; text-shadow : none;'>"+isConvo[4].substring(1,isConvo[4].length-1)+"</div>";
      var rep = "<div class='flexwrap alttext spadding smooth hover2 conversation'>"+sec1+sec2+"</div>";
      textData = textData.replace(text, rep);
    }
    if (isNote) {
      var rep = "<div class='subtitle padding' style='background-color: rgb(235,235,228);'><b style='display : block'>GM's Note : </b>"+isNote[1]+"</div>";
      if (!hasSecurity(getCookie("UserID"), "Assistant Master")) {
        rep = "";
      }
      textData = textData.replace(text, rep);
    }
    lines = lineRegex.exec(textData);
  }
  preview.append(textData);

  if (sync.modifier(obj.data.info.notes, "HR")) {
    preview.find("hr").css("background", sync.modifier(obj.data.info.notes, "HR"));
  }
  if (sync.modifier(obj.data.info.notes, "HR1")) {
    preview.find("hr.h1").css("background", sync.modifier(obj.data.info.notes, "HR1"));
  }
  if (sync.modifier(obj.data.info.notes, "HR2")) {
    preview.find("hr.h2").css("background", sync.modifier(obj.data.info.notes, "HR2"));
  }
  if (sync.modifier(obj.data.info.notes, "H1F")) {
    preview.find("h1").css("font-family", sync.modifier(obj.data.info.notes, "H1F"));
  }
  if (sync.modifier(obj.data.info.notes, "H1FS")) {
    preview.find("h1").css("font-size", sync.modifier(obj.data.info.notes, "H1FS")+"em");
  }
  if (sync.modifier(obj.data.info.notes, "H1C")) {
    preview.find("h1").css("color", sync.modifier(obj.data.info.notes, "H1C"));
  }
  if (sync.modifier(obj.data.info.notes, "H1S")) {
    preview.find("h1").css("text-shadow", sync.modifier(obj.data.info.notes, "H1S"));
  }
  if (sync.modifier(obj.data.info.notes, "H2F")) {
    preview.find("h2").css("font-family", sync.modifier(obj.data.info.notes, "H2F"));
  }
  if (sync.modifier(obj.data.info.notes, "H2FS")) {
    preview.find("h2").css("font-size", sync.modifier(obj.data.info.notes, "H2FS")+"em");
  }
  if (sync.modifier(obj.data.info.notes, "H2C")) {
    preview.find("h2").css("color", sync.modifier(obj.data.info.notes, "H2C"));
  }
  if (sync.modifier(obj.data.info.notes, "H2S")) {
    preview.find("h2").css("text-shadow", sync.modifier(obj.data.info.notes, "H2S"));
  }

  preview.find("table").each(function(){
    if (!$(this).attr("width")) {
      $(this).addClass("fit-x");
    }
    $(this).addClass("smooth");
    var alt = false;
    $(this).find("tr").addClass("outlinebottom lrpadding subtitle").each(function(){
      alt = !alt;
      if (alt) {
        $(this).addClass("inactive");
      }
    });
    $(this).find("tr").children().addClass("lrpadding lightoutline");
    $($(this).find("tr")[0]).addClass("bold").removeClass("subtitle lightoutline inactive");
    $($(this).find("tr")[0]).children().addClass("lrpadding outlinebottom smooth").removeClass("lightoutline").css("border-color", "rgba(0,0,0,0.2)");

    var tableContents = $(this).find("tr");
    var header = $(tableContents[0]);
    header.addClass("bold");
    var head = $(header.children()[0]);
    if (!scope.noInteractions) {
      if (head.text().match(diceRegex) && header.children().length == 2) {
        $(this).addClass("link");
        $(this).click(function(){
          $(this).contextmenu();
        });
        $(this).contextmenu(function(){
          var actionsList = [
            {
              name : "Roll",
              click : function(ev, ui){
                var result = sync.eval(head.text(), {});
                var rangeRegex = /(\d+)-(\d+)/i;
                for (var i=1; i<tableContents.length; i++) {
                  var contentName = $($(tableContents[i]).children()[0]).text();
                  var rangeMatch = contentName.match(rangeRegex);
                  if (rangeMatch) {
                    if (Number(rangeMatch[1]) > Number(rangeMatch[2])) {
                      var temp = Number(rangeMatch[1]);
                      rangeMatch[1] = Number(rangeMatch[2]);
                      rangeMatch[2] = temp;
                    }
                    if (Number(rangeMatch[1]) <= result && Number(rangeMatch[2]) >= result) {
                      var whisper = null
                      var msg = "Rolled "+result+" on " + sync.rawVal(obj.data.info.name);
                      sendAlert({text : msg});
                      util.chatEvent(msg, null, whisper, $("<input>"), null, true);
                      util.chatEvent($($(tableContents[i]).children()[1]).text(), null, whisper, $("<input>"), null, true);
                      $("#chat-button").click();
                      return;
                    }
                  }
                  else if (!isNaN(contentName) && contentName == result) {
                    var whisper = null
                    var msg = "Rolled "+result+" on " + sync.rawVal(obj.data.info.name);
                    sendAlert({text : msg});
                    util.chatEvent(msg, null, whisper, $("<input>"), null, true);
                    util.chatEvent($($(tableContents[i]).children()[1]).text(), null, whisper, $("<input>"), null, true);
                    $("#chat-button").click();
                    return;
                  }
                }
              }
            },
            {
              name : "Roll Private",
              click : function(ev, ui){
                var result = sync.eval(head.text(), {});
                var rangeRegex = /(\d+)-(\d+)/i;
                for (var i=1; i<tableContents.length; i++) {
                  var contentName = $($(tableContents[i]).children()[0]).text();
                  var rangeMatch = contentName.match(rangeRegex);
                  if (rangeMatch) {
                    if (Number(rangeMatch[1]) > Number(rangeMatch[2])) {
                      var temp = Number(rangeMatch[1]);
                      rangeMatch[1] = Number(rangeMatch[2]);
                      rangeMatch[2] = temp;
                    }
                    if (Number(rangeMatch[1]) <= result && Number(rangeMatch[2]) >= result) {
                      var whisper = {};
                      whisper[getCookie("UserID")] = 1;
                      var msg = "Rolled "+result+" on " + sync.rawVal(obj.data.info.name);
                      sendAlert({text : msg});
                      util.chatEvent(msg, null, whisper, $("<input>"), null, true);
                      util.chatEvent($($(tableContents[i]).children()[1]).text(), null, whisper, $("<input>"), null, true);
                      $("#chat-button").click();
                      return;
                    }
                  }
                  else if (!isNaN(contentName) && contentName == result) {
                    var whisper = {};
                    whisper[getCookie("UserID")] = 1;
                    var msg = "Rolled "+result+" on " + sync.rawVal(obj.data.info.name);
                    sendAlert({text : msg});
                    util.chatEvent(msg, null, whisper, $("<input>"), null, true);
                    util.chatEvent($($(tableContents[i]).children()[1]).text(), null, whisper, $("<input>"), null, true);
                    $("#chat-button").click();
                    return;
                  }
                }
              }
            }
          ];
          ui_dropMenu($(this), actionsList, {id : "roll-list"});
          return false;
        });
      }
    }
  });

  preview.find(".conversation").each(function(){
    var convo = $(this);
    $(this).contextmenu(function(ev){
      var convo = $(this);
      var name = $(this).find(".chatName").text();
      var chatText = $(this).find(".chatCmd").text();
      var actionsList = [
      {
        name : "As ...",
        submenu : [
          {
            name : "Custom",
            click : function(){
              ui_prompt({
                target : convo,
                inputs : {"Name" : ""},
                click : function(ev, ui){
                  convo.removeClass("alttext");
                  convo.addClass("dull");
                  convo.find(".chatCmd").css("color", "#333");
                  var href;
                  var entID;
                  convo.find(".chatName").find("a").each(function(){
                    var link = $(this);
                    var reg = /\|asset\|=([\w-\d]+)/;
                    var hreff = decodeURI(link.attr("href"));
                    var match = hreff.match(reg);
                    if (match) {
                      var ent = getEnt(match[1]);
                      if (ent && ent.data) {
                        entID = ent.id();
                        href = sync.rawVal(ent.data.info.img);
                      }
                    }
                  });
                  util.chatEvent(chatText, "Stranger", _whisperTargets, convo, href, true, entID);
                }
              });
            }
          },
          {
            name : "Stranger",
            click : function(){
              convo.removeClass("alttext");
              convo.addClass("dull");
              convo.find(".chatCmd").css("color", "#333");
              var href;
              var entID;
              convo.find(".chatName").find("a").each(function(){
                var link = $(this);
                var reg = /\|asset\|=([\w-\d]+)/;
                var hreff = decodeURI(link.attr("href"));
                var match = hreff.match(reg);
                if (match) {
                  var ent = getEnt(match[1]);
                  if (ent && ent.data) {
                    entID = ent.id();
                    href = sync.rawVal(ent.data.info.img);
                  }
                }
              });
              util.chatEvent(chatText, "Stranger", _whisperTargets, convo, href, true, entID);
            }
          },
          {
            name : "Anonymous",
            click : function(){
              convo.removeClass("alttext");
              convo.addClass("dull");
              convo.find(".chatCmd").css("color", "#333");
              util.chatEvent(chatText, "Anonymous", _whisperTargets, convo, null, true);
            }
          },
          {
            name : "Out of Character",
            click : function(){
              convo.removeClass("alttext");
              convo.addClass("dull");
              convo.find(".chatCmd").css("color", "#333");
              util.chatEvent(chatText, name, _whisperTargets, convo, null, true);
            }
          },
        ]
      },
      {
        name : "With Image",
        click : function(ev, ui){
          var content = sync.render("ui_filePicker")(obj, app, {change : function(ev, ui, val){
            convo.removeClass("alttext");
            convo.addClass("dull");
            convo.find(".chatCmd").css("color", "#333");
            util.chatEvent(chatText, name, _whisperTargets, convo, val, true);
            layout.coverlay("image-selection");
          }});

          var pop = ui_popOut({
            target : ui,
            prompt : true,
            id : "image-selection",
            style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
          }, content);
          pop.resizable();
        }
      }];

      if (!convo.hasClass("alttext")) {
        actionsList.push({
          name : "Refresh Command",
          click : function(){
            convo.addClass("alttext");
            convo.removeClass("dull");
            convo.find(".chatCmd").css("color", "#333");
          }
        });
      }
      else {
        actionsList.push({
          name : "Exhaust Command",
          click : function(){
            convo.removeClass("alttext");
            convo.addClass("dull");
            convo.find(".chatCmd").css("color", "#333");
          }
        });
      }

      ui_dropMenu($(this), actionsList, {id : "roll-menu"});
      ev.stopPropagation();
      ev.preventDefault();
      return false;
    });
    $(this).find(".chatName").find("a").each(function(){
      var link = $(this);
      var reg = /\|asset\|=([\w-\d]+)/;
      var hreff = decodeURI(link.attr("href"));
      var match = hreff.match(reg);
      if (match) {
        var ent = getEnt(match[1]);
        if (ent && ent.data) {
          var href = sync.rawVal(ent.data.info.img) || "/content/icons/blankchar.png";
          if (convo.find(".chatName").find("img").length == 0) {
            var img = $("<img>");
            img.addClass("round outline white");
            img.attr("width", "35px");
            img.attr("height", "35px");
            img.css("width", "35px");
            img.css("height", "35px");
            img.attr("src", href);

            convo.find(".chatName").prepend(img);
          }
        }
      }
    });
    if (!scope.noInteractions) {
      $(this).click(function(ev){
        if (!convo.hasClass("alttext")) {
          $(this).addClass("alttext");
          $(this).removeClass("dull");
        }
        else {
          $(this).removeClass("alttext");
          $(this).addClass("dull");
          var name = $(this).find(".chatName").text();
          var chatText = $(this).find(".chatCmd").text();
          var href;
          var entID;
          $(this).find(".chatName").find("a").each(function(){
            var link = $(this);
            var reg = /\|asset\|=([\w-\d]+)/;
            var hreff = decodeURI(link.attr("href"));
            var match = hreff.match(reg);
            if (match) {
              ent = getEnt(match[1]);
              if (ent && ent.data) {
                entID = ent.id();
                href = sync.rawVal(ent.data.info.img);
                if (convo.find(".chatName").find("img").length == 0) {
                  var img = $("<img>");
                  img.addClass("round outline white");
                  img.attr("width", "25px");
                  img.attr("height", "25px");
                  img.css("width", "25px");
                  img.css("height", "25px");
                  img.attr("src", href);

                  convo.find(".chatName").prepend(img);
                }
              }
            }
          });
          $(this).find(".chatName").find("img").each(function(){
            href = $(this).attr("src");
          });
          util.chatEvent(chatText, name, _whisperTargets, $(this), href, true, entID);
        }
        ev.stopPropagation();
        ev.preventDefault();
      });
    }
    $(this).find(".chatName").find("img").each(function(){
      $(this).addClass("round outline white lrmargin");
      $(this).attr("width", "25px");
      $(this).attr("height", "25px");
      $(this).css("width", "25px");
      $(this).css("height", "25px");
    });
  });
  preview.sortable({
    handle : ".charContent",
    connectWith : ".dropContent",
  });

  function enhancePage(page, margins) {
    var context = sync.defaultContext();
    var pc = getPlayerCharacter(getCookie("UserID"));
    if (pc && pc.data) {
      context[pc.data._t] = duplicate(pc.data);
    }


    preview.find("img").each(function(){
      var val = $(this).attr("src");
      if (!scope.noInteractions) {
        $(this).contextmenu(function(ev){
          assetTypes["img"].contextmenu(ev, $(this), val);
          ev.stopPropagation();
          ev.preventDefault();
          return false;
        });
      }
      $(this)[0].onload = function(){
        if (!$(this).attr("width") || $(this).attr("width") > preview.width()) {
          var width = $(this).attr("width") || $(this).width();
          var height = $(this).attr("height") || $(this).height();
          if ($(this).attr("width") == 0) {
            width = $(this).width();
          }
          if ($(this).attr("height") == 0) {
            height = $(this).height();
          }
          var aspect = width/height;
          width = Math.min(width, preview.width());
          height = Math.ceil(width/aspect);

          $(this).attr("width", width);
          $(this).css("width", width);

          $(this).attr("height", height);
          $(this).css("height", height);
        }
      }

    });

    setTimeout(function(){
      preview.find("audio").each(function(){
        if ($(this).attr("width") > preview.width()) {
          var width = $(this).attr("width") || $(this).width();
          var height = $(this).attr("height") || $(this).height();
          var aspect = width/height;
          width = Math.min(width, preview.width());
          height = Math.ceil(width/aspect);

          $(this).attr("width", width);
          $(this).css("width", width);

          $(this).attr("height", height);
          $(this).css("height", height);
        }
      });
      preview.find("video").each(function(){
        if ($(this).attr("width") > preview.width()) {
          var width = $(this).attr("width") || $(this).width();
          var height = $(this).attr("height") || $(this).height();
          var aspect = width/height;
          width = Math.min(width, preview.width());
          height = Math.ceil(width/aspect);

          $(this).attr("width", width);
          $(this).css("width", width);

          $(this).attr("height", height);
          $(this).css("height", height);
        }
      });
      preview.find("iframe").each(function(){
        if ($(this).attr("width") > preview.width()) {
          var width = $(this).attr("width") || $(this).width();
          var height = $(this).attr("height") || $(this).height();
          var aspect = width/height;
          width = Math.min(width, preview.width());
          height = Math.ceil(width/aspect);

          $(this).attr("width", width);
          $(this).css("width", width);

          $(this).attr("height", height);
          $(this).css("height", height);
        }
      });
    }, 10);

    preview.find("img").each(function(){
      $(this).addClass("hover2 lightoutline");
      var img = $(this);
      if (!scope.noInteractions) {
        $(this).click(function(ev){
          var applied = false;
          $(".application[ui-name='ui_display']").each(function(){
            if (!applied && $(this).attr("tabKey") != null) {
              applied = true;
            }
          });
          if (hasSecurity(getCookie("UserID"), "Assistant Master") && applied) {
            util.slideshow($(this).attr("src"));
          }
          else {
            assetTypes["img"].preview(ev, $(this), $(this).attr("src"));
          }
          if (!$(this).parent().parent().hasClass("conversation")) {
            ev.stopPropagation();
          }
          ev.preventDefault();
        });
      }
    });
    preview.find("div").each(function(){
      if (!$(this).attr("data") || ($(this).attr("data") && sync.eval($(this).attr("data"), context))) {
        $(this).show();
        if ($(this).attr("data")) {
          $(this).addClass("lpadding smooth");
          $(this).css("border", "1px dashed rgba(0,0,0,0.4)");
        }
      }
      else {
        $(this).hide();
      }
    });
    preview.find("video").each(function(){
      $(this).addClass("hover2 lightoutline");
      $(this).css("padding", "32px");
      if (!scope.noInteractions) {
        $(this).click(function(){
          util.slideshow($(this).attr("src"));
        });
      }
    });

    preview.find("iframe").each(function(){
      $(this).addClass("hover2 lightoutline");
      $(this).css("padding", "32px");
      if (!scope.noInteractions) {
        $(this).click(function(){
          var reg = /(embed\/)(.*)/;
          runCommand("media", {cmd : "update", data : {video : reg.exec($(this).attr("src"))[2], time : 0}});
        });
      }
    });
    preview.find("a").each(function(){
      var link = $(this);
      link.attr("target", "_");
      var reg = /\|asset\|=([\w-\d]+)/;
      var href = decodeURI(link.attr("href"));
      var match = href.match(reg);
      if (util.matchYoutube(href)) {
        link.addClass("alttext subtitle spadding background smooth");
        link.append(genIcon({raw : true, icon : "play"}).css("padding-left", "2px"));
        link.css("color", "white");
        link.attr("src", href);
        if (!scope.noInteractions) {
          link.click(function(ev){
          var reg = /(v=)([^&]*)/;
          var reg1 = /[^\/]*([^&^?\/]*)$/;
          var time = /[^?]*t=([^&^?]*)$/;
          var vid = $(this).attr("src");
          function getData() {
            var returnData = {};
            var res = reg.exec(vid);
            if (res) {
              returnData.video = res[2];
            }
            else {
              var res = reg1.exec(vid);
              if (res) {
                returnData.video = res[0].split("?")[0];
              }
            }
            var timeReg = time.exec(vid);
            if (timeReg) {
              returnData.time = timeReg[1];
            }

            return returnData;
          }
          runCommand("media", {cmd : "update", data : getData()});
          ev.stopPropagation();
          ev.preventDefault();
          return false;
        });
        }
        link.removeAttr("href");
      }
      else if (match) {
        var ent = getEnt(match[1]);
        if (!scope.noInteractions) {
          if (ent && ent.data) {
            link.attr("index", match[1]);
            link.append(genIcon({raw : true, icon : assetTypes[ent.data._t].i}).css("padding-left", "2px"));
            link.contextmenu(function(ev){
              var href = decodeURI($(this).attr("href"));
              var match = href.match(reg);
              var ent = getEnt(match[1]);
              assetTypes.contextmenu(ev, $(this), ent, app, scope);

              ev.preventDefault();
              ev.stopPropagation();
            });

            link.click(function(ev){
              var href = decodeURI(link.attr("href"));
              var match = href.match(reg);
              var ent = getEnt(match[1]);
              assetTypes[ent.data._t].preview(ent, $(this));
              ev.preventDefault();
              ev.stopPropagation();
            });
          }
          else {
            link.removeAttr("href");
          }
        }
      }
      else if (href.match("sound")) {
        link.addClass("alttext subtitle spadding background smooth");
        link.append(genIcon({raw : true, icon : "volume-up"}).css("padding-left", "2px"));
        link.css("color", "white");
        link.removeAttr("href");
        link.attr("src", href.replace("sound", ""));
        if (!scope.noInteractions) {
          link.click(function(ev){
            sendAlert({"text" : "Sharing Audio"});
            runCommand("music", {src : $(this).attr("src")});
          });
        }
      }
      else if (href.match("effect_")) {
        link.addClass("subtitle spadding smooth foreground alttext");
        link.append(genIcon({raw : true, icon : "sunglasses"}).css("padding-left", "2px"));
        link.removeAttr("href");
        link.attr("src", href.replace("effect_", ""));
        link.click(function(ev){
          var effect = $(this).attr("src");
          $(".displayApp").each(function(){
            runCommand("effect", {effect : effect, tab : $(this).attr("currentTab")});
          });
        });
      }
      else if (href.match("setting")) {
        var enablePlate = $("<div>");
        enablePlate.addClass("flexcolumn flexmiddle spadding background fit-x hover2");
        enablePlate.attr("data", href.replace("setting", ""));
        if (!scope.noInteractions) {
          enablePlate.click(function(){
            if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
              game.state.data.setting = JSON.parse($(this).attr("data")).setting;
              game.state.sync("updateState");
            }
          });
        }

        var settingObj = sync.dummyObj();
        settingObj.data = JSON.parse(href.replace("setting", ""));

        sync.render("ui_setting")(settingObj, enablePlate, {viewOnly : true}).appendTo(enablePlate);

        link.replaceWith(enablePlate);
      }
      else if (href.match("combat")) {
        var enablePlate = $("<div>");
        enablePlate.addClass("flexcolumn fit-x hover2");
        enablePlate.attr("data", href.replace("combat", ""));
        if (!scope.noInteractions) {
          enablePlate.click(function(){
            game.locals["turnOrder"] = game.locals["turnOrder"] || sync.obj();
            game.locals["turnOrder"].update(JSON.parse($(this).attr("data")));

            $("#combat-button").click();

            for (var index in game.players.data) {
              if (game.players.data[index].entity) {
                game.locals["turnOrder"].data.combat.engaged[game.players.data[index].entity] = {};
              }
            }
            game.locals["turnOrder"].update();
            game.state.update();
          });
        }

        var enableWrap = $("<div>").appendTo(enablePlate);
        enableWrap.addClass("flexcolumn flexmiddle fit-x");
        enableWrap.append(genIcon("fire", "Combat"));

        var combatObj = sync.dummyObj();
        combatObj.data = JSON.parse(href.replace("combat", ""));

        var newApp = sync.newApp("ui_combat").appendTo(enablePlate);
        newApp.addClass("smooth subtitle");
        newApp.attr("viewOnly", true);
        newApp.attr("minimized", true);
        newApp.css("color", "#333");
        combatObj.addApp(newApp);

        link.replaceWith(enablePlate);
      }
      else if (href.match("macro")) {
        var button = $("<button>");
        button.addClass("highlight alttext subtitle flexrow");
        button.attr("macro", link.text());
        button.attr("title", link.text());
        button.text(link.text());

        function loadWrap(button, macro) {
          setTimeout(function(){
            button.append(sync.render("ui_diceVisual")(obj, app, {eq : macro, diceSize : button.height() || "15px", classes : "flexrow flexwrap"}).css("font-size", "0.6em"));
          }, 100);
        }
        loadWrap(button, link.text());
        if (!scope.noInteractions) {
          button.click(function(ev){
            var context = sync.defaultContext();
            var pc = getPlayerCharacter(getCookie("UserID"));
            if (pc && pc.data) {
              context[pc.data._t] = duplicate(pc.data);
            }
            context[obj.data._t] = duplicate(obj.data);
            var macro = $(this).attr("macro");
            var actionsList = [
              {
                name : "Roll",
                click : function(){
                  util.processEvent(macro);
                }
              },
              {
                name : "Roll private",
                click : function(){
                  var priv = {};
                  priv[getCookie("UserID")] = true;
                  util.processEvent(macro, null, null, null, priv);
                }
              }
            ];

            ui_dropMenu($(this), actionsList, {id : "macro-roll"});

            ev.stopPropagation();
            ev.preventDefault();
            return false;
          });
        }
        link.replaceWith(button);
      }
    });
  }
  enhancePage(preview, true);

  return preview;
}

util.effects = {
  "Lightning" : true,
  "Shake" : true,
  "Black" : true,
  "Fade In" : true,
  "Fade Out" : true,
  "Invert" : true,
  "Reset" : true,
}

util.playEffect = function(cmd) {
  var target = $(".displayApp[currentTab='"+cmd.tab+"']");
  var effects = {};
  if (cmd.tab) {
    game.state.data.tabs[cmd.tab].data = game.state.data.tabs[cmd.tab].data || {};
    game.state.data.tabs[cmd.tab].data.options = game.state.data.tabs[cmd.tab].data.options || {};
    game.state.data.tabs[cmd.tab].data.options.effects = game.state.data.tabs[cmd.tab].data.options.effects = {};
    game.state.data.tabs[cmd.tab].data.options.effects = game.state.data.tabs[cmd.tab].data.options.effects || {};
    effects = game.state.data.tabs[cmd.tab].data.options.effects;
  }

  if (cmd.effect == "Lightning") {
    if (target.length) {
      target.css("transition", "filter 0.1s");
      target.css("filter", "brightness(100)");
      setTimeout(function(){target.css("filter", "brightness(0)");}, 100);
      setTimeout(function(){target.css("filter", "brightness(10)");}, 250);
      setTimeout(function(){target.css("filter", "brightness(0)");}, 350);
      setTimeout(function(){target.css("filter", "");}, 450);
    }
    effects = {};
  }
  else if (cmd.effect == "Shake") {
    if (target.length) {
      target.css("transition", "transform 0.1s");
      target.css("transform", "translateX(0px)");
      setTimeout(function(){target.css("transform", "translateX(-50px)");}, 100);
      setTimeout(function(){target.css("transform", "translateX(50px)");}, 150);
      setTimeout(function(){target.css("transform", "translateX(-50px)");}, 200);
      setTimeout(function(){target.css("transform", "translateX(50px)");}, 250);
      setTimeout(function(){target.css("transform", "translateX(-50px)");}, 300);
      setTimeout(function(){target.css("transform", "translateX(50px)");}, 350);
      setTimeout(function(){target.css("transform", "translateX(-50px)");}, 400);
      setTimeout(function(){target.css("transform", "");}, 450);
    }
    effects = {};
  }
  else if (cmd.effect == "Black") {
    if (target.length) {
      target.css("transition", "");
      target.css("filter", "brightness(0)");
    }
    effects["brightness"] = 0;
  }
  else if (cmd.effect == "Fade In") {
    if (target.length) {
      target.css("transition", "filter 3.0s");
      target.css("filter", "brightness(0)");
      setTimeout(function(){target.css("filter", "brightness(1)");}, 100);
    }
    delete effects["Brightness"];
  }
  else if (cmd.effect == "Fade Out") {
    if (target.length) {
      target.css("transition", "filter 3.0s");
      target.css("filter", "brightness(1)");
      setTimeout(function(){target.css("filter", "brightness(0)");}, 100);
    }
    effects["Brightness"] = 0;
  }
  else if (cmd.effect == "Invert") {
    if (target.length) {
      target.css("transition", "filter 0.1s");
      target.css("filter", "invert(1)");
      setTimeout(function(){target.css("filter", "invert(0)");}, 150);
      setTimeout(function(){target.css("filter", "invert(1)");}, 450);
      setTimeout(function(){target.css("filter", "invert(0)");}, 550);
      setTimeout(function(){target.css("filter", "");}, 650);
    }
    effects = {};
  }
  else {
    if (target.length) {
      target.css("transition", "");
      target.css("filter", "");
    }
    effects = {};
  }
}

util._undo = [];
util._maxUndo = 10;
util._redo = [];
util.addUndo = function(obj, data, cmd){
  util._undo.push({obj : obj, data : duplicate(data), cmd : cmd});
  if (util._undo.length > util._maxUndo) {
    util._undo.splice(0, 1);
  }
}

util.undo = function(cmd){
  var undoData = util._undo.splice(util._undo.length-1, 1)[0];
  if (undoData) {
    undoData.obj.data = undoData.data;
    if (cmd || undoData.cmd) {
      undoData.obj.sync(cmd || undoData.cmd);
    }
    else {
      undoData.obj.update();
    }
  }
  sendAlert({text : "Undone"});
}

util.fonts = [
  '"Arial Black", Gadget, sans-serif',
  '"Comic Sans MS", cursive, sans-serif',
  'Columbus',
  'Celestia',
  'Impact, Charcoal, sans-serif',
  '"Lucida Sans Unicode", "Lucida Grande", sans-serif',
  'Tahoma, Geneva, sans-serif',
  '"Trebuchet MS", Helvetica, sans-serif',
  'Verdana, Geneva, sans-serif',
  '"Courier New", Courier, monospace',
  '"Lucida Console", Monaco, monospace',
  '"Times New Roman", Times, serif',
  'LifeCraft',
  'StarJedi',
  'Bookinsanity',
  'Nodesto Caps Condensed',
  'Scaly Sans',
  'Zatanna Misdirection',

];

util.pageSamples = [
  {
    H1F : "Nodesto Caps Condensed",
    H1FS : 2.7,
    H2C : "rgba(51,1,0,1)",
    H2F : "Nodesto Caps Condensed",
    H2FS : 2.1,
    H2S : null,
    HR : "rgba(190,4,15,1.0)",
    HR2 : "rgba(91,1,0,1)",
    style : {
      "background-image": "url('/content/sheet3.png')",
      "background-size": "100% auto",
      "font-family": "Bookinsanity",
      "font-size": "1.15em"
    },
    bgStyle : {

    }
  },
  {
    HR : "rgba(5,200,5,1)",
    style : {
      "font-family": "\"Lucida Sans Unicode\", \"Lucida Grande\", sans-serif",
      "background": "linear-gradient(rgba(0,255,0,0.2),  rgba(0,0,0,0.0), rgba(0,255,0,0.2))",
      "background-size": "100% 4px",
      "font-size": "1.0em",
      "color": "rgb(5, 200, 5)",
      "text-shadow": "0 0 8px rgb(5, 200, 5)",
      "font-weight": "bolder",
      "padding": "3em"
    },
    bgStyle : {
      "background": "radial-gradient(rgb(35,65,35), rgb(0,30,0))"
    }
  },
  {
    HR : "rgb(0, 115, 130)",
    style : {
      "padding": "2em",
      "margin-top": "43px",
      "margin-bottom": "73px",
      "margin-left": "2.75em",
      "margin-right": "3em",
      "color": "rgb(0, 230, 230)",
      "text-shadow": "0em 0em 4px rgb(0, 230, 230)",
      "overflow": "auto",
      "max-height": "640px",
      "display": "block"
    },
    bgStyle : {
      "background-image": "url('/content/tablet.png')",
      "background-size": "contain",
      "background-repeat": "no-repeat",
      "background-position": "center",
      "font-size": "1.2em"
    }
  }

];

util.interfaces = {
  "Organization" : {
    "Column" : {
      content : {
        classes : "flexcolumn flex flexbetween flexcontainer",
        display : [],
      },
    },
    "Row" : {
      content : {
        classes : "flexrow flex flexbetween flexcontainer",
        display : [],
      },
    },
  },
  "Inputs" : {
    "Field" : {
      content : {
        classes : "flexrow",
        target : "%Target%",
        edit : {classes : "line lrmargin"}
      },
      arguments : {
        "%Target%" : {
          datalist : "character",
        }
      }
    },
    "Min-Max Field" : {
      content : {
        classes : "flexrow flexaround bold flexcontainer", display : [
          {classes : "bold", name : "R@c.%Target%.name"},
          {classes : "flexrow flexaround flexcontainer", display : [
            {name : "", target : "%Target%", edit : {classes : "line", style : {width : "24px", "text-align" : "center"}}},
            {classes : "lrmargin bold", value : "/"},
            {name : "", target : "%Target%", edit : {classes : "line", style : {width : "24px", "text-align" : "center"}, raw : "max"}},
          ]}
        ]
      },
      arguments : {
        "%Target%" : {
          datalist : "character",
        }
      }
    },
    "Bar" : {
      content : {
        classes : "flexrow",
        target : "%Target%",
        ui : "ui_progressBar"
      },
      arguments : {
        "%Target%" : {
          datalist : "character",
        }
      }
    },
    "Image" : {
      content : {
        classes : "flexcolumn flex flexcontainer smooth outline white margin",
        style : {"position" : "relative"},
        display : [
          {
            classes : "flexcolumn flex",
            ui : "ui_image",
            target : "info.img",
            style : {"min-width" : "100px", "min-height" : "100px"},
          },
          {style : {"position" : "absolute", "right" : "0", "bottom" : "0"}, title : "Map Token", target : "info.img", ui : "ui_token", scope : {classes : "smooth outline white"}}
        ]
      },
    },
    "Label" : {
      content : {
        classes : "bold flexmiddle",
        value : "%Value%",
      },
      arguments : {
        "%Value%" : {
          value : "Label",
        }
      }
    },
    "Notes" : {
      content : {
        classes : "flexcolumn flex padding white smooth outline",
        ui : "ui_rawNotes",
      }
    },
  },
  "Lists" : {
    "Stat List" : {
      content : {
        classes : "flexrow flexaround flexwrap flex",
        target : "stats",
        datalist : {
          classes : "spadding flexcolumn flexmiddle lrmargin bold outline inactive flex",
          display : [
            {classes : "flexrow flexmiddle subtitle", display : [
              {classes : "flexmiddle", ui : "ui_link", scope : {name : "@c.%dataTarget%.name", icon : "'list-alt'", click : "ui_modifiers", lookup : "@applyTarget", attr : {"modsOnly" : true}}},
            ]},
            {classes : "flexrow flexmiddle lrmargin bold", display : [
              {
                name : "", target : "%dataTarget%", edit : {classes : "bold white outline flexmiddle fit-x", style : {"width" : "70px", "height" : "40px"}, raw : "1"},
              },
            ]},
          ]
        }
      },
    },
    "Inventory" : {
      content : {
        classes : "flexcolumn flex padding", display : [
          {classes : "flexrow underline", style : {"font-size" : "1.4em"}, display : [
            {classes : "bold lrmargin", name : "Inventory"},
            {
              classes : "bold flexmiddle create subtitle lrmargin",
              style : {"cursor" : "pointer"},
              icon : "plus",
              click : {create : "inventory"}
            }
          ]},
          {
            classes : "flex spadding white outline smooth",
            style : {"text-align" : "left", "overflow-y" : "auto"},
            scrl : "inv",
            ui : "ui_entryList",
            scope : {
              drop : "inventoryDrop",
              connectWith : ".inventoryDrop",
              reposition : true,
              lookup : "inventory",
              applyUI : {classes : "flexrow flex subtitle", display : [
                {
                  classes : "flexcolumn",
                  ui : "ui_image",
                  target : "@applyTarget.info.img",
                  style : {"width" : "15px", "height" : "15px"},
                  scope : {def : "/content/icons/Backpack1000p.png"},
                },
                {name : "", target : "@applyTarget.info.quantity", edit : {classes : "lrmargin line middle", title : "Quantity", style : {"width" : "24px"}, raw : "1"}},
                {classes : "flex lrpadding", name : "", target : "@applyTarget.info.name", edit : {classes : "lrpadding line flex", style : {"min-width" : "70px"}, raw : "1"}},
                {classes : "bold hover2 spadding white outline smooth flexrow flexmiddle subtitle",
                  value : "(@c.@applyTarget.tags.equipped==0)?('Equip'):('Un-equip')", style : {"white-space" : "nowrap"},
                  click : {calc : [{target : "@applyTarget.tags.equipped", cond : "@c.@applyTarget.tags.equipped==0", eq : "1"},{target : "@applyTarget.tags.equipped", cond : "@c.@applyTarget.tags.equipped==1", eq : "0"}]}
                },
                {name : "", target : "@applyTarget.info.weight", edit : {classes : "lrmargin line middle",title : "Weight", style : {"width" : "24px"}, raw : "1"}},
                {
                  classes : "flexmiddle",
                  name : "",
                  link : "edit",
                  target : "@applyTarget",
                  click : {edit : "@applyTarget"}
                },
                {
                  classes : "flexmiddle destroy lrmargin",
                  name : "",
                  link : "trash",
                  click : {delete : true, target : "@applyTarget"}
                },
              ]}
            }
          },
        ]
      },
    },
    "Spellbook" : {
      content : {
        classes : "flexcolumn flex padding", display : [
          {classes : "flexrow underline", style : {"font-size" : "1.4em"}, display : [
            {classes : "bold lrmargin", name : "Spellbook"},
            {
              classes : "bold flexmiddle create subtitle lrmargin",
              style : {"cursor" : "pointer"},
              icon : "plus",
              click : {create : "spellbook"}
            }
          ]},
          {
            classes : "flex spadding white outline smooth",
            style : {"text-align" : "left", "overflow-y" : "auto"},
            scrl : "spl",
            ui : "ui_entryList",
            scope : {
              drop : "spellbookDrop",
              connectWith : ".spellbookDrop",
              reposition : true,
              lookup : "spellbook",
              applyUI : {classes : "flexrow flex subtitle", display : [
                {
                  classes : "flexcolumn",
                  ui : "ui_image",
                  target : "@applyTarget.info.img",
                  style : {"width" : "15px", "height" : "15px"},
                  scope : {def : "/content/icons/Backpack1000p.png"},
                },
                {name : "", target : "@applyTarget.info.quantity", edit : {classes : "lrmargin line middle", title : "Quantity", style : {"width" : "24px"}, raw : "1"}},
                {classes : "flex lrpadding", name : "", target : "@applyTarget.info.name", edit : {classes : "lrpadding line flex", style : {"min-width" : "70px"}, raw : "1"}},
                {name : "", target : "@applyTarget.info.weight", edit : {classes : "lrmargin line middle",title : "Weight", style : {"width" : "24px"}, raw : "1"}},
                {
                  classes : "flexmiddle",
                  name : "",
                  link : "edit",
                  target : "@applyTarget",
                  click : {edit : "@applyTarget"}
                },
                {
                  classes : "flexmiddle destroy lrmargin",
                  name : "",
                  link : "trash",
                  click : {delete : true, target : "@applyTarget"}
                },
              ]}
            }
          },
        ]
      },
    },
    "Talents" : {
      content : {
        classes : "flexcolumn flex spadding",
        display : [
          {
            "classes": "flexcolumn lrmargin",
            "display": [
              {
                "classes": "flexrow outlinebottom lrpadding",
                "display": [
                  {
                    "classes": "bold",
                    "name": "New Talent"
                  },
                  {
                    "classes": "bold flexmiddle create lrmargin",
                    "style": {
                      "cursor": "pointer"
                    },
                    "icon": "plus",
                    "click": {
                      "create": "talents"
                    }
                  }
                ]
              },
              {
                "target": "talents",
                "classes" : "spadding scroll-y",
                "scrl" : "tlnt",
                "datalist": {
                  "classes": "flexrow flexbetween",
                  "display": [
                    {
                      "classes": "link flex",
                      "title": "@%dataTarget%",
                      "name": "",
                      "target": "%dataTarget%",
                      "value": "@c.%dataTarget%.name",
                      "click": {
                        "view": "talents"
                      }
                    },
                    {
                      "classes": "flexmiddle",
                      "name": "",
                      "target": "%dataTarget%",
                      "link": "edit",
                      "click": {
                        "edit": "talents"
                      }
                    },
                    {
                      "classes": "flexmiddle destroy",
                      "name": "",
                      "link": "trash",
                      "click": {
                        "delete": true,
                        "target": "%dataTarget%"
                      }
                    }
                  ]
                }
              },
            ]
          }
        ]
      }
    },
    "Special Rules" : {
      content : {
        classes : "flexcolumn flex spadding",
        display : [
          {
            "classes": "flexcolumn lrmargin",
            "display": [
              {
                "classes": "flexrow outlinebottom lrpadding",
                "display": [
                  {
                    "classes": "bold",
                    "name": "Special rules"
                  },
                  {
                    "classes": "bold flexmiddle create lrmargin",
                    "style": {
                      "cursor": "pointer"
                    },
                    "icon": "plus",
                    "click": {
                      "create": "specials"
                    }
                  }
                ]
              },
              {
                "target": "specials",
                "classes" : "spadding scroll-y",
                "scrl" : "spcl",
                "datalist": {
                  "classes": "flexrow flexbetween",
                  "display": [
                    {
                      "classes": "link flex",
                      "title": "@%dataTarget%",
                      "name": "",
                      "target": "%dataTarget%",
                      "value": "@c.%dataTarget%.name",
                      "click": {
                        "view": "specials"
                      }
                    },
                    {
                      "classes": "flexmiddle",
                      "name": "",
                      "target": "%dataTarget%",
                      "link": "edit",
                      "click": {
                        "edit": "specials"
                      }
                    },
                    {
                      "classes": "flexmiddle destroy",
                      "name": "",
                      "link": "trash",
                      "click": {
                        "delete": true,
                        "target": "%dataTarget%"
                      }
                    }
                  ]
                }
              }
            ]
          }
        ]
      }
    },
    "Trained Skills" : {
      content : {
        "classes": "flexcolumn",
        "display": [
          {
            "classes": "flexrow flexmiddle underline bold",
            "style": {
              "font-size": "1.4em"
            },
            "display": [
              {
                "name": "Skills"
              },
              {
                "classes": "bold flexmiddle create subtitle lrmargin",
                "style": {
                  "cursor": "pointer"
                },
                "icon": "plus",
                "click": {
                  "create": "skills"
                }
              }
            ]
          },
          {
            "classes": "flexcolumn flex padding white outline smooth scroll-y",
            "scrl" : "skls",
            "ui": "ui_skillList",
            "scope": {
              "lookup": "skills",
              "applyUI": {
                "classes": "flexrow flexaround flex subtitle smooth",
                "display": [
                  {
                    "classes": "flexrow flexmiddle",
                    "display": [
                      {
                        "title": "Trained?",
                        "target": "skills.@skillKey",
                        "ui": "ui_checkbox",
                        "scope": {
                          "saveInto": "skills.@skillKey",
                          "cond": "R@c.skills.@skillKey==1",
                          "checked": "1",
                          "unchecked": "0"
                        }
                      },
                      {
                        "style": {
                          "width": "150px",
                          "text-align": "left"
                        },
                        "title": "@skillKey",
                        "classes": "lrpadding bold subtitle",
                        "ui": "ui_link",
                        "scope": {
                          "name": "@c.skills.@skillKey.name",
                          "click": "ui_modifiers",
                          "lookup": "skills.@skillKey",
                          "attr": {
                            "modsOnly": true
                          }
                        }
                      },
                      {
                        "cond": "R@c.skills.@skillKey<1",
                        "name": "",
                        "title": "Rank Modifier",
                        "target": "skills.@skillKey",
                        "edit": {
                          "classes": "line middle lrmargin",
                          "mod": "rank",
                        }
                      },
                      {
                        "cond": "R@c.skills.@skillKey>0",
                        "name": "",
                        "title": "Rank Modifier",
                        "target": "skills.@skillKey",
                        "edit": {
                          "classes": "line middle lrmargin",
                          "mod": "rank",
                          "style": {
                            "width": "50px"
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            }
          }
        ]
      },
    }
  },
  "Interactive" : {
    "Equation Button" : {
      content : {
        classes : "bold hover2 spadding white outline smooth flexmiddle",
        value : "%Macro%",
        click : {action : "%Action%"}
      },
      arguments : {
        "%Action%" : {
          value : "",
        },
        "%Macro%" : {
          value : "",
        }
      }
    },
  }
}

util.premadeSheets = {};

util.customSheets = function(obj, app, scope, sheet){
  return [
    {
      name : "Blank Notes",
      click : function(){
        var style = sheet.style || {};
        obj.data._d = {
          style : style,
          content : {classes : "flexcolumn flex lpadding flexcontainer", display : [
            {classes : "flexrow flexbetween", display : [
              {classes : "flexcolumn flex padding",
                display : [
                  {
                    classes : "flexcolumn smooth outline flex white",
                    ui : "ui_image",
                    target : "info.img",
                    style : {"min-width" : "100px", "min-height" : "100px"},
                  }
                ]
              },
              {classes : "flexcolumn flex2", display : [
                {classes : "flexrow lrmargin spadding", target : "info.name", edit : {classes : "line fit-x lrmargin"}},
                {
                  classes : "flexcolumn flex2",
                  ui : "ui_characterNotes",
                  scope : {style : {"min-height" : "200px"}}
                },
              ]},
            ]}
          ]},
        }
        obj.sync("updateSheet");
      }
    },
    {
      name : "Container",
      click : function(){
        var style = sheet.style || {};
        merge(style, {padding : "1em"});
        obj.data._d = {
          style : style,
          content : {classes : "flexrow flexbetween flex flexcontainer", display : [
              {classes : "flexcolumn flex padding",
                display : [
                  {
                    classes : "flexcolumn smooth outline flex white",
                    ui : "ui_image",
                    target : "info.img",
                    style : {"min-width" : "100px", "min-height" : "100px"},
                  }
                ]
              },
              {classes : "flexcolumn flex2 lrmargin", display : [
                {classes : "flexrow fit-x spadding lrmargin", target : "info.name", edit : {classes : "line fit-x lrmargin"}},
                {
                  classes : "flexcolumn flex",
                  ui : "ui_characterNotes",
                  scope : {style : {"min-height" : "200px"}}
                },
                {classes : "flexcolumn padding flex", display : [
                  {style : {"font-size" : "1.6em"}, classes : "flexrow underline", display : [
                    {classes : "bold subtitle", name : "Inventory"},
                    {
                      classes : "bold create subtitle lrmargin",
                      style : {"cursor" : "pointer"},
                      icon : "plus",
                      click : {create : "inventory"}
                    },
                    {classes : "flex"},
                    {classes : "flexrow lrmargin", style : {"font-size" : "0.6em"}, name : "Max Weight", target : "stats.weight", edit : {classes : "line fit-x middle lrmargin", raw : "1", type : "number", style : {"width" : "80px"}}},
                  ]},
                  {classes : "flexrow fit-x flexbetween", display : [
                    {classes : "bold subtitle flex", name : "Name"},
                    {classes : "lrpadding lrmargin bold subtitle middle", name : "Quantity", style : {"width" : "50px"}},
                    {classes : "lrpadding lrmargin bold subtitle middle", name : "Weight", style : {"width" : "50px"}},
                    {
                      classes : "flexmiddle",
                      name : "",
                      icon : "edit",
                      style : {"color" : "transparent"},
                    },
                    {
                      classes : "flexmiddle",
                      name : "",
                      icon : "trash",
                      style : {"color" : "transparent"},
                    },
                  ]},
                  {
                    classes : "flex spadding white outline smooth",
                    style : {"text-align" : "left", "overflow-y" : "auto"},
                    scrl : "inv",
                    ui : "ui_entryList",
                    scope : {
                      drop : "inventoryDrop",
                      connectWith : ".inventoryDrop",
                      reposition : true,
                      lookup : "inventory",
                      applyUI : {classes : "flexrow flex subtitle", display : [
                        {
                          classes : "flexcolumn",
                          ui : "ui_image",
                          target : "@applyTarget.info.img",
                          style : {"width" : "20px", "height" : "20px"},
                          scope : {def : "/content/icons/Pouch1000p.png"},
                        },
                        {classes : "lrpadding flex", name : "", target : "@applyTarget.info.name", edit : {classes : "lrpadding line flex2", style : {"min-width" : "70px"}, raw : "1"}},
                        {classes : "lrpadding", name : "", target : "@applyTarget.info.quantity", edit : {classes : "lrpadding line middle", style : {"width" : "50px"}}},
                        {classes : "lrpadding", name : "", target : "@applyTarget.info.weight", edit : {classes : "lrpadding line middle", style : {"width" : "40px"}}},
                        {
                          classes : "flexmiddle",
                          name : "",
                          link : "edit",
                          target : "@applyTarget",
                          click : {edit : "@applyTarget"}
                        },
                        {
                          classes : "flexmiddle destroy lrmargin",
                          name : "",
                          link : "trash",
                          click : {delete : true, target : "@applyTarget"}
                        },
                      ]},
                    }
                  },
                  {classes : "flexrow", cond : "R@c.stats.weight>0", display : [
                    {classes : "bold subtitle lrmargin", name : "Weight (@:weight()lbs)"},
                    {classes : "spadding lrmargin flex", ui : "ui_progressBar", scope : {percentage : "@:weight()", max : "R@c.stats.weight", col : "rgb(@:int(@percentage*200),@:int(200-(@percentage*200)),0)"}},
                    {cond : "R@c.stats.weight>0", classes : "bold subtitle lrmargin", title : "Str*15", value : "@:int((@:weight()/(R@c.stats.weight))*100)+'%'"}
                  ]},
                ]}
              ]},
            ]
          },
        }
        obj.sync("updateSheet");
      }
    },
    {
      name : "Empty",
      click : function(){
        var style = sheet.style || {};
        merge(style, {padding : "1em"});
        obj.data._d = {
          style : style,
          content : {classes : "flexcolumn flex flexcontainer", display : []},
        }
        obj.sync("updateSheet");
      }
    },
    {
      name : "Notes Only",
      click : function(){
        var style = sheet.style || {};
        merge(style, {padding : "1em"});
        obj.data._d = {
          style : style,
          content : {classes : "flexrow flexbetween flex flexcontainer", display : [
              {classes : "flexcolumn flex padding",
                display : [
                  {
                    classes : "flexcolumn smooth outline flex white",
                    ui : "ui_image",
                    target : "info.img",
                    style : {"min-width" : "100px", "min-height" : "100px"},
                  }
                ]
              },
              {classes : "flexcolumn flex2 lrmargin", display : [
                {classes : "flexrow spadding lrmargin", target : "info.name", edit : {classes : "line fit-x lrmargin"}},
                {
                  classes : "flexcolumn flex2",
                  ui : "ui_characterNotes",
                  scope : {style : {"min-height" : "200px"}}
                },
              ]},
            ]
          },
        }
        obj.sync("updateSheet");
      }
    },
    {
      name : "Shop",
      submenu : [
        {
          name : "Inventory",
          click : function(){
            var style = sheet.style || {};
            merge(style, {padding : "1em"});
            obj.data._d = {
              style : style,
              content : {classes : "flexcolumn flex flexcontainer", display : [
                  {classes : "flexrow flexbetween", display : [
                    {classes : "flexcolumn flex padding",
                      display : [
                        {
                          classes : "flexcolumn smooth outline flex white",
                          ui : "ui_image",
                          target : "info.img",
                          style : {"min-width" : "100px", "min-height" : "100px"},
                        }
                      ]
                    },
                    {classes : "flexcolumn flex2 lrmargin", display : [
                      {classes : "flexrow lrmargin spadding", target : "info.name", edit : {classes : "line fit-x lrmargin"}},
                      {
                        classes : "flexcolumn flex2",
                        ui : "ui_characterNotes",
                        scope : {style : {"min-height" : "200px"}}
                      },
                    ]},
                  ]},
                  {classes : "flexcolumn padding", display : [
                    {style : {"font-size" : "1.6em"}, classes : "flexrow underline", display : [
                      {classes : "bold subtitle", name : "Shop"},
                      {
                        classes : "bold create subtitle lrmargin",
                        style : {"cursor" : "pointer"},
                        icon : "plus",
                        click : {create : "inventory"}
                      },
                    ]},
                    {classes : "flexrow fit-x flexbetween", display : [
                      {classes : "bold flex", name : "Name"},
                      {classes : "bold", name : "Quantity", style : {"width" : "80px"}},
                      {classes : "bold", name : "Price", style : {"width" : "70px"}},
                      {
                        classes : "flexmiddle",
                        name : "",
                        icon : "edit",
                        style : {"color" : "transparent"},
                      },
                      {
                        classes : "flexmiddle lrmargin",
                        name : "",
                        icon : "trash",
                        style : {"color" : "transparent"},
                      },
                    ]},
                    {
                      classes : "flex padding white outline smooth",
                      style : {"text-align" : "left", "overflow-y" : "auto"},
                      scrl : "inv",
                      ui : "ui_entryList",
                      scope : {
                        drop : "inventoryDrop",
                        connectWith : ".inventoryDrop",
                        reposition : true,
                        lookup : "inventory",
                        applyUI : {classes : "flexrow flex", display : [
                          {
                            classes : "flexcolumn",
                            ui : "ui_image",
                            target : "@applyTarget.info.img",
                            style : {"width" : "20px", "height" : "20px"},
                            scope : {def : "/content/icons/Pouch1000p.png"},
                          },
                          {classes : "lrpadding flex", name : "", target : "@applyTarget.info.name", edit : {classes : "lrpadding line flex2", style : {"min-width" : "70px"}, raw : "1"}},
                          {classes : "lrpadding", name : "", target : "@applyTarget.info.quantity", edit : {classes : "lrpadding line middle flex", style : {"width" : "60px"}}},
                          {classes : "lrmargin lrpadding white smooth outline bold flexmiddle", name : "", target : "@applyTarget.info.price", edit : {classes : "line middle", style : {"width" : "65px"}}},
                          {
                            classes : "flexmiddle",
                            name : "",
                            link : "edit",
                            target : "@applyTarget",
                            click : {edit : "@applyTarget"}
                          },
                          {
                            classes : "flexmiddle destroy lrmargin",
                            name : "",
                            link : "trash",
                            click : {delete : true, target : "@applyTarget"}
                          },
                        ]},
                      }
                    }
                  ]}
                ]
              },
            }
            obj.sync("updateSheet");
          }
        },
        {
          name : "Spells",
          click : function(){
            var style = sheet.style || {};
            merge(style, {padding : "1em"});
            obj.data._d = {
              style : style,
              content : {classes : "flexcolumn flex flexcontainer", display : [
                  {classes : "flexrow flexbetween", display : [
                    {classes : "flexcolumn flex padding",
                      display : [
                        {
                          classes : "flexcolumn smooth outline flex white",
                          ui : "ui_image",
                          target : "info.img",
                          style : {"min-width" : "100px", "min-height" : "100px"},
                        }
                      ]
                    },
                    {classes : "flexcolumn flex2 lrmargin", display : [
                      {classes : "flexrow spadding lrmargin", target : "info.name", edit : {classes : "line fit-x lrmargin"}},
                      {
                        classes : "flexcolumn flex2",
                        ui : "ui_characterNotes",
                        scope : {style : {"min-height" : "200px"}}
                      },
                    ]},
                  ]},
                  {classes : "flexcolumn padding", display : [
                    {style : {"font-size" : "1.6em"}, classes : "flexrow underline", display : [
                      {classes : "bold subtitle", name : "Shop"},
                      {
                        classes : "bold create subtitle lrmargin",
                        style : {"cursor" : "pointer"},
                        icon : "plus",
                        click : {create : "inventory"}
                      },
                    ]},
                    {classes : "flexrow fit-x flexbetween", display : [
                      {classes : "bold flex", name : "Name"},
                      {classes : "bold", name : "Quantity", style : {"width" : "80px"}},
                      {classes : "bold", name : "Price", style : {"width" : "70px"}},
                      {
                        classes : "flexmiddle",
                        name : "",
                        icon : "edit",
                        style : {"color" : "transparent"},
                      },
                      {
                        classes : "flexmiddle lrmargin",
                        name : "",
                        icon : "trash",
                        style : {"color" : "transparent"},
                      },
                    ]},
                    {
                      classes : "flex padding white outline smooth",
                      style : {"text-align" : "left", "overflow-y" : "auto"},
                      scrl : "inv",
                      ui : "ui_entryList",
                      scope : {
                        drop : "spellDrop",
                        connectWith : ".spellDrop",
                        reposition : true,
                        lookup : "spellbook",
                        applyUI : {classes : "flexrow flex", display : [
                          {
                            classes : "flexcolumn",
                            ui : "ui_image",
                            target : "@applyTarget.info.img",
                            style : {"width" : "20px", "height" : "20px"},
                            scope : {def : "/content/icons/Pouch1000p.png"},
                          },
                          {classes : "lrpadding flex", name : "", target : "@applyTarget.info.name", edit : {classes : "lrpadding line flex2", style : {"min-width" : "70px"}, raw : "1"}},
                          {classes : "lrpadding", name : "", target : "@applyTarget.info.quantity", edit : {classes : "lrpadding line middle flex", style : {"width" : "60px"}}},
                          {classes : "lrmargin lrpadding white smooth outline subtitle bold flexmiddle", name : "", target : "@applyTarget.info.price", edit : {classes : "line middle", style : {"width" : "65px"}}},
                          {
                            classes : "flexmiddle",
                            name : "",
                            link : "edit",
                            target : "@applyTarget",
                            click : {edit : "@applyTarget"}
                          },
                          {
                            classes : "flexmiddle destroy lrmargin",
                            name : "",
                            link : "trash",
                            click : {delete : true, target : "@applyTarget"}
                          },
                        ]},
                      }
                    }
                  ]}
                ]
              },
            }
            obj.sync("updateSheet");
          }
        }
      ]
    }
  ]
}

util.commands = {
  "forceToPoint" : function(data, userID){
    $(".application[ui-name='ui_board']").each(function(){
      var app = $(this);
      var board = getEnt(app.attr("index"));
      if (data.id == board.id() && !data.userID || data.userID == getCookie("UserID")) {
        boardApi.scrollTo(app, data.x, data.y, true);
        $("#"+app.attr("id")+"-zoom-range-"+data.id).val(data.zoom);
        $("#"+app.attr("id")+"-zoom-range-"+data.id).change();
      }
    });
  }
};

util.events = {
  "1" : {
    name : "Hide Layer",
    load : function(obj, app, scope, newValue) {
      // make changes to the data on selection
      obj.data = {target : "layers.0.h", eq : "1", e : newValue};
    },
    interface : function(obj, app, scope, board, pieceData) {
      var targetDiv = $("<div>");
      targetDiv.addClass("flexcolumn flex spadding");
      targetDiv.append("<b class='subtitle'>Target Layer</b>");

      var layers = $("<select>").appendTo(targetDiv);
      layers.addClass("smooth");
      for (var lid=0; lid<board.data.layers.length; lid++) {
        layers.append("<option value='"+lid+"'>"+board.data.layers[lid].n+"</option>");
      }

      layers.children().each(function(){
        obj.data.target = obj.data.target || "layers.0.h";
        if ($(this).attr("value") == obj.data.target.split(".")[1]) {
          $(this).attr("selected", true);
        }
      });
      layers.change(function(){
        obj.data = {target : "layers."+$(this).val()+".h", eq : "1", e : 1};
        obj.update();
      });

      return targetDiv;
    }
  },
  "2" : {
    name : "Reveal Layer",
    load : function(obj, app, scope, newValue) {
      obj.data = {target : "layers.0.h", eq : "0", e : newValue};
    },
    interface : function(obj, app, scope, board, pieceData) {
      var targetDiv = $("<div>");
      targetDiv.addClass("flexcolumn flex spadding");

      var layers = $("<select>").appendTo(targetDiv);
      layers.addClass("smooth");
      for (var lid=0; lid<board.data.layers.length; lid++) {
        layers.append("<option value='"+lid+"'>"+board.data.layers[lid].n+"</option>");
      }
      layers.children().each(function(){
        obj.data.target = obj.data.target || "layers.0.h";
        if ($(this).attr("value") == obj.data.target.split(".")[1]) {
          $(this).attr("selected", true);
        }
      });
      layers.change(function(){
        obj.data = {target : "layers."+$(this).val()+".h", eq : "0", e : 2};
        obj.update();
      });

      return targetDiv;
    }
  },
  "3" : {
    name : "Toggle Layer",
    load : function(obj, app, scope, newValue) {
      obj.data = {target : "layers.0.h", eq : "(@b.layers.0.h == 1)?(0):(1)", e : newValue};
    },
    interface : function(obj, app, scope, board, pieceData) {
      var targetDiv = $("<div>");
      targetDiv.addClass("flexcolumn flex spadding");

      var layers = $("<select>").appendTo(targetDiv);
      layers.addClass("smooth");

      for (var lid=0; lid<board.data.layers.length; lid++) {
        layers.append("<option value='"+lid+"'>"+board.data.layers[lid].n+"</option>");
      }
      layers.children().each(function(){
        obj.data.target = obj.data.target || "layers.0.h";
        if ($(this).attr("value") == obj.data.target.split(".")[1]) {
          $(this).attr("selected", true);
        }
      });
      layers.change(function(){
        obj.data = {target : "layers."+$(this).val()+".h", eq : "(@b.layers."+$(this).val()+".h == 1)?(0):(1)", e : 3};
        obj.update();
      });

      return targetDiv;
    }
  },
  "4" : {
    name : "Roll Dice",
    load : function(obj, app, scope, newValue) {
      obj.data = {e : newValue, msg : "Activated Trap!", data : game.templates.dice.defaults[0]};
    },
    interface : function(obj, app, scope, board, pieceData) {
      var targetDiv = $("<div>");
      targetDiv.addClass("flexcolumn flex spadding");

      var flavor = genInput({
        parent : targetDiv,
        classes : "line flex",
        value : obj.data.msg,
        placeholder : "Flavor Text (Optional)",
      });
      flavor.change(function(){
        obj.data.msg = $(this).val();
      });

      targetDiv.append("<b class='subtitle smargin'>Equation to Roll</b>");

      var equation = $("<textarea>").appendTo(targetDiv);
      equation.addClass("smooth");
      equation.attr("placeholder", "Enter a macro equation here");
      equation.text(obj.data.data || "");
      equation.change(function(){
        obj.data.data = $(this).val();
      });

      targetDiv.append("<b class='subtitle smargin'>Extra Options</b>");

      var optionsBar = $("<div>").appendTo(targetDiv);
      optionsBar.addClass("flexrow flexaround flexwrap fit-x subtitle");

      var gmOnly = $("<button>").appendTo(optionsBar);
      gmOnly.addClass("flexmiddle alttext");
      if (obj.data.p && obj.data.p.default) {
        gmOnly.addClass("highlight");
      }
      else {
        gmOnly.addClass("background");
      }
      gmOnly.text("GM Only?");
      gmOnly.click(function(){
        obj.data.p = obj.data.p || {};
        if (obj.data.p.default) {
          delete obj.data.p;
        }
        else {
          obj.data.p.default = "@:gm()";
        }
        obj.update();
      });

      var dataList = Object.keys(game.templates.display.ui);

      var ui = genInput({
        parent : optionsBar,
        classes : "line lrmargin",
        type : "list",
        list : dataList,
        value : obj.data.ui,
        placeholder : "Dice Display (Optional)",
      });
      ui.val(obj.data.ui);
      ui.change(function(){
        obj.data.ui = $(this).val();
      });

      var cond = genInput({
        parent : optionsBar,
        classes : "line flex lrmargin",
        value : obj.data.cond,
        placeholder : "Condition Macro",
      });
      cond.val(obj.data.cond);
      cond.change(function(){
        obj.data.cond = $(this).val();
      });

      return targetDiv;
    },
    fire : function(obj, app, calcData, pieceData, ctx) {
      var evData = {
        icon : calcData.data.href,
        eID : obj.id(),
        flavor : sync.eval(calcData.msg, ctx),
        p : calcData.p,
        eventData : sync.executeQuery(calcData.data, ctx),
      }
      evData.eventData.ui = calcData.ui;
      runCommand("chatEvent", evData);
    }
  },
  "5" : {
    name : "Focus on Token",
    load : function(obj, app, scope, newValue) {
      obj.data = {e : newValue};
    },
    interface : function(obj, app, scope, board, pieceData) {
      var targetDiv = $("<div>");
      targetDiv.addClass("flexcolumn flex spadding");

      return targetDiv;
    },
    fire : function(obj, app, calcData, pieceData, ctx) {
      runCommand("command", {cmd : "forceToPoint", id : obj.id(), x : pieceData.x + pieceData.w/2, y : pieceData.y + pieceData.h/2, zoom : app.attr("zoom")});
    }
  },
  "6" : {
    name : "Sound Effect",
    load : function(obj, app, scope, newValue) {
      obj.data = {e : newValue};
    },
    interface : function(obj, app, scope, board, pieceData) {
      var targetDiv = $("<div>");
      targetDiv.addClass("flexcolumn flex flexmiddle spadding");

      var soundPath = obj.data.s;

      var pickButton = $("<button>").appendTo(targetDiv);
      pickButton.addClass("background alttext subtitle");
      if (soundPath) {
        pickButton.text(soundPath);
      }
      else {
        pickButton.text("Pick Sound File");
      }
      pickButton.click(function(){
        var content = sync.render("ui_filePicker")(obj, app, {change : function(ev, ui, val){
          obj.data.s = val;
          layout.coverlay("sound-selection");
          obj.update();
        }});

        var pop = ui_popOut({
          target : app,
          prompt : true,
          id : "sound-selection",
          style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
        }, content);
        pop.resizable();
      });

      return targetDiv;
    },
    fire : function(obj, app, calcData, pieceData, ctx) {
      runCommand("music", {src : calcData.s});
    },
  },
  "7" : {
    name : "Ping Beacon",
    load : function(obj, app, scope, newValue) {
      obj.data = {e : newValue};
    },
    interface : function(obj, app, scope, board, pieceData) {
      var targetDiv = $("<div>");
      targetDiv.addClass("flexcolumn flex flexmiddle spadding");

      return targetDiv;
    },
    fire : function(obj, app, calcData, pieceData, ctx) {
      runCommand("updateBoardCursor", {id : obj.id(), data : {x : pieceData.x + pieceData.w/2, y : pieceData.y + pieceData.h/2, l : app.attr("layer"), b : true}});
    }
  },
  "8" : {
    name : "Enable Combat",
    load : function(obj, app, scope, newValue) {
      obj.data = {combat : {engaged : {}, current : {}}, e : newValue};
    },
    interface : function(obj, app, scope, board, pieceData) {
      return sync.render("ui_turnOrder")(obj, app, scope).css("height", "400px").addClass("scroll-y");
    },
    fire : function(obj, app, calcData, pieceData, ctx) {
      var compare = function (obj1, obj2) {
        return sync.eval(game.templates.initiative.compare, {i1 : obj1, i2 : obj2});
      }

      game.state.data.combat = duplicate(calcData.combat);
      var randomInit = duplicate(calcData.combat);
      // roll the randoms if it isn't a player
      var pEnts = {};
      for (var k in game.players.data) {
        if (game.players.data[k].entity && !hasSecurity(k, "Game Master")) {
           pEnts[game.players.data[k].entity] = k;
        }
      }
      for (var i in randomInit.e) {
        if (!pEnts[randomInit.e[i]] && compare(game.state.data.combat.engaged[randomInit.e[i]], {}) == 0) {
          var sp;
          var ok;
          if (game.state.data.combat.engaged[randomInit.e[i]]) {
            if (game.state.data.combat.engaged[randomInit.e[i]].sp) {
              sp = game.state.data.combat.engaged[randomInit.e[i]].sp;
            }
            if (game.state.data.combat.engaged[randomInit.e[i]].ok) {
              ok = game.state.data.combat.engaged[randomInit.e[i]].ok;
            }
          }
          var context = sync.defaultContext();
          context[game.entities.data[randomInit.e[i]].data._t] = duplicate(game.entities.data[randomInit.e[i]].data);
          game.state.data.combat.engaged[randomInit.e[i]] = sync.executeQuery(game.templates.initiative.query, context).pool;
          game.state.data.combat.engaged[randomInit.e[i]].sp = sp;
          game.state.data.combat.engaged[randomInit.e[i]].ok = ok;
        }
      }
      game.state.data.combat.current = {};

      for (var id in game.state.data.combat.engaged) {
        if (compare(game.state.data.combat.engaged[id], game.state.data.combat.current) > 0) {
          game.state.data.combat.current = duplicate(game.state.data.combat.engaged[id]);
        }
      }
      game.state.data.combat.round = sync.newValue("Round", 0);
      game.state.sync("updateCombatState");
      runCommand("enableCombat");
    }
  },
  "9" : {
    name : "View Media",
    load : function(obj, app, scope, newValue) {
      obj.data = {e : newValue};
    },
    interface : function(obj, app, scope, board, pieceData) {
      var targetDiv = $("<div>");
      targetDiv.addClass("flexcolumn flex flexmiddle spadding");

      var filePath = obj.data.src;

      var pickButton = $("<button>").appendTo(targetDiv);
      pickButton.addClass("background alttext subtitle");
      if (filePath) {
        pickButton.text(filePath);
      }
      else {
        pickButton.text("Pick File");
      }
      pickButton.click(function(){
        var content = sync.render("ui_filePicker")(obj, app, {change : function(ev, ui, val){
          obj.data.src = val;
          layout.coverlay("sound-selection");
          obj.update();
        }});

        var pop = ui_popOut({
          target : app,
          prompt : true,
          id : "sound-selection",
          style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
        }, content);
        pop.resizable();
      });

      return targetDiv;
    },
    fire : function(obj, app, calcData, pieceData, ctx) {
      assetTypes[util.mediaType(calcData.src)].preview({}, app, calcData.src);
    },
  },
  "10" : {
    name : "Move Token",
    load : function(obj, app, scope, newValue) {
      obj.data = {e : newValue};
    },
    interface : function(obj, app, scope, board, pieceData) {
      var targetDiv = $("<div>");
      targetDiv.addClass("flexcolumn flex flexmiddle spadding");

      var selectWrap = $("<div>").appendTo(targetDiv);
      selectWrap.addClass("flexrow fit-x flexbetween");
      selectWrap.append("<b class='flex'>Movement Type</b>");

      var select = genInput({
        parent : selectWrap,
        select : {
          "None" : null,
          "Relative" : "Relative",
          "Specific Point" : "Specific Point"
        },
        value : obj.data.mv
      });
      select.change(function(){
        obj.data.mv = $(this).val();
        obj.update();
      });

      if (!obj.data.mv) {

      }
      else {
        if (obj.data.mv == "Relative") {
          var inputWrap = $("<div>").appendTo(targetDiv);
          inputWrap.addClass("flexrow flexaround fit-x subtitle");
          inputWrap.append("<b class='flex'>Move Horizonally (Negative = Left, Positive = Right)</b>");

          var x = genInput({
            parent : inputWrap,
            value : boardApi.scale(obj.data.x, board),
            style : {"width" : "50px"},
          });
          x.change(function(){
            obj.data.x = boardApi.scale(Number($(this).val()), board, true);
            obj.update();
          });

          var inputWrap = $("<div>").appendTo(targetDiv);
          inputWrap.addClass("flexrow flexaround fit-x subtitle");
          inputWrap.append("<b class='flex'>Move Vertically (Negative = Up, Positive = Down)</b>");

          var y = genInput({
            parent : inputWrap,
            value : boardApi.scale(obj.data.y, board),
            style : {"width" : "50px"},
          });
          y.change(function(){
            obj.data.y = boardApi.scale(Number($(this).val()), board, true);
            obj.update();
          });
        }
        else {
          var inputWrap = $("<div>").appendTo(targetDiv);
          inputWrap.addClass("flexrow flexaround fit-x subtitle");
          inputWrap.append("<b class='flex'>Move To X</b>");

          var x = genInput({
            parent : inputWrap,
            value : boardApi.scale(obj.data.x, board),
            style : {"width" : "50px"},
          });
          x.change(function(){
            obj.data.x = boardApi.scale(Number($(this).val()), board, true);
            obj.update();
          });

          var inputWrap = $("<div>").appendTo(targetDiv);
          inputWrap.addClass("flexrow flexaround fit-x subtitle");
          inputWrap.append("<b class='flex'>Move to Y</b>");

          var y = genInput({
            parent : inputWrap,
            value : boardApi.scale(obj.data.y, board),
            style : {"width" : "50px"},
          });
          y.change(function(){
            obj.data.y = boardApi.scale(Number($(this).val()), board, true);
            obj.update();
          });
        }

        var clear = genIcon("trash", "Reset").appendTo(selectWrap);
        clear.addClass("destroy subtitle lrmargin");
        clear.click(function(){
          delete obj.data.x;
          delete obj.data.y;
          delete obj.data.mv;
          obj.update();
        });
        var button = $("<div>").appendTo(targetDiv);
        button.addClass("background alttext flexmiddle spadding subtitle hover2 smooth outline");
        button.text("Select Point");
        button.click(function(){
          var hasGrid = (board.data.gridW && board.data.gridH);
          if (hasGrid) {
            sendAlert({text : "Select Grid (Shift+Click for Exact)"});
          }
          else {
            sendAlert({text : "Select Point"});
          }

          boardApi.newDragEvent({
            move : function(ev){},
            end : function(ev) {
              var appid;
              var stage;
              for (var i in boardApi.apps) {
                if (boardApi.apps[i].board == board.id()) {
                  stage = boardApi.apps[i].stage;
                  appid = i;
                  break;
                }
              }
              var focal = stage.toLocal({x : ev.pageX, y : ev.pageY});
              var xPos = focal.x;
              var yPos = focal.y;
              if (!_down[16] && hasGrid) {
                xPos = Math.floor((focal.x-(board.data.gridX || 0)) / board.data.gridW) * board.data.gridW + (board.data.gridX || 0);
                yPos = Math.floor((focal.y-(board.data.gridY || 0)) / board.data.gridH) * board.data.gridH + (board.data.gridY || 0);
              }
              if (obj.data.mv == "Relative") {
                obj.data.x = xPos-pieceData.x;
                obj.data.y = yPos-pieceData.y;
              }
              else {
                obj.data.x = xPos;
                obj.data.y = yPos;
              }
              boardApi.scrollTo($("#"+appid), focal.x, focal.y);
              obj.update();
              delete boardApi.dragging;
            }
          });
        });

      }
      return targetDiv;
    },
    fire : function(obj, app, calcData, pieceData, ctx) {
      for (var key in boardApi.selections) {
        var selectData = boardApi.selections[key];
        if (selectData.app == app.attr("id") && selectData.type == "p") {
          if (calcData.mv == "Relative") {
            obj.data.layers[selectData.layer].p[selectData.index].x += calcData.x;
            obj.data.layers[selectData.layer].p[selectData.index].y += calcData.y;
          }
          else {
            obj.data.layers[selectData.layer].p[selectData.index].x = calcData.x;
            obj.data.layers[selectData.layer].p[selectData.index].y = calcData.y;
          }
          boardApi.updateObject(selectData.layer, "p", selectData.index, obj);
          runCommand("boardMove", {id : obj.id(), layer : selectData.layer, type : "p", index : selectData.index, data : obj.data.layers[selectData.layer].p[selectData.index]});
        }
      }
      if (calcData.mv == "Relative") {
        boardApi.scrollTo(app, pieceData.x + pieceData.w/2 + calcData.x, pieceData.y + pieceData.h/2 + calcData.y);
      }
      else {
        boardApi.scrollTo(app, pieceData.w/2 + calcData.x, pieceData.h/2 + calcData.y);
      }
    },
  },
}

util.calcAPI = {
  sign : function(args, targets){
    var val = (Number(sync.eval(args[0], targets))>=0)?("+"+Number(sync.eval(args[0], targets))):(Number(sync.eval(args[0], targets)));
    return "'"+val+"'";
  },
  int : function(args, targets){
    return parseInt(sync.eval(args[0], targets));
  },
  num : function(args, targets){
    return parseFloat(sync.eval(args[0], targets));
  },
  str : function(args, targets) {
    return String(args[0]);
  },
  raw : function(args, targets) {
    return String(sync.reduce(args[0], targets, true, true));
  },
  eval : function(args, targets) {
    return sync.eval(args[0], targets);
  },
  gm : function(args, targets){
    if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
      return "1";
    }
    return "0";
  },
  armor : function(args, targets) {
    if (!targets || !game.templates || !game.templates.display) {return "0"}
    if (targets["c"] && !args[1]) {
      var val;
      if (game.templates.display.sheet && game.templates.display.sheet.rules && game.templates.display.sheet.rules.baseArmor) {
        val = duplicate(sync.rawVal(game.templates.display.sheet.rules.baseArmor)) || 0;
      }
      else {
        val = sync.eval(game.templates.constants.basearmor, targets) || 0;
      }
      if (val instanceof Object) {
        for (var k in val) {
          val[k] = sync.eval(val[k], targets);
        }
      }
      else {
        val = sync.eval(val, targets);
      }
      if (targets["c"].inventory) {
        for (var index in targets["c"].inventory) {
          var itemData = targets["c"].inventory[index];
          itemData.tags = itemData.tags || {};
          var itemArmor = duplicate(sync.rawVal(itemData.equip.armor)) || 0;
          if (itemData.tags["equipped"] && itemArmor) {
            var armorBonus = 0;
            for (var i in itemData.equip.armor.modifiers) {
              armorBonus += sync.eval(itemData.equip.armor.modifiers[i], targets);
            }
            if (itemArmor instanceof Object) {
              for (var k in val) {
                if (itemArmor[k]) {
                  val[k] += sync.eval(itemArmor[k], targets) + armorBonus;
                }
                else {
                  val[k] += armorBonus;
                }
              }
            }
            else {
              val += sync.eval(itemArmor, targets) + armorBonus;
            }
          }
        }
      }
      if (args[0]){
        return val[args[0]];
      }
      else {
        return val;
      }
    }
    if (targets["i"]) {
      var itemData = targets["i"];
      var itemArmor = duplicate(sync.rawVal(itemData.equip.armor)) || 0;
      if (itemArmor) {
        if (args[1]) {
          itemArmor = 0;
        }
        var armorBonus = 0;
        for (var i in itemData.equip.armor.modifiers) {
          armorBonus += sync.eval(itemData.equip.armor.modifiers[i], targets);
        }
        if (itemArmor instanceof Object) {
          for (var k in itemArmor) {
            itemArmor[k] = sync.eval(itemArmor[k], targets) + armorBonus;
          }
        }
        else {
          itemArmor = sync.eval(itemArmor, targets) + armorBonus;
        }
        return itemArmor;
      }
      return 0;
    }
    return 0;
  },
  weight : function(args, targets) {
    if (!targets || !game.templates || !game.templates.display) {return "0"}
    if (targets["c"]) {
      var weight = 0;
      for (var index in targets["c"].inventory) {
        weight += (sync.rawVal(targets["c"].inventory[index].info.quantity) || 0) * (sync.rawVal(targets["c"].inventory[index].info.weight) || 0);
      }
      return weight;
    }
  },
  equip : function(args, targets) {
    if (!targets || !game.templates || !game.templates.display) {return "0"}
    if (targets["c"]) {
      if (game.templates.display.sheet && game.templates.display.sheet.rules && game.templates.display.sheet.rules[args[0]]) {
        val = duplicate(sync.rawVal(game.templates.display.sheet.rules[args[0]])) || 0;
      }
      else {
        val = sync.eval(game.templates.constants[args[0]], targets) || 0;
      }
      if (val instanceof Object) {
        for (var k in val) {
          val[k] = sync.eval(val[k], targets);
        }
      }
      else {
        val = sync.eval(val, targets);
      }
      if (targets["c"].inventory) {
        for (var index in targets["c"].inventory) {
          var itemData = targets["c"].inventory[index];
          itemData.tags = itemData.tags || {};
          var itemArmor = duplicate(sync.rawVal(itemData.equip[args[1]])) || 0;
          if (itemData.tags["equipped"] && itemArmor) {
            var armorBonus = 0;
            for (var i in itemData.equip[args[1]].modifiers) {
              armorBonus += sync.eval(itemData.equip[args[1]].modifiers[i], targets);
            }
            if (itemArmor instanceof Object) {
              for (var k in val) {
                if (itemArmor[k]) {
                  val[k] += sync.eval(itemArmor[k], targets) + armorBonus;
                }
                else {
                  val[k] += armorBonus;
                }
              }
            }
            else {
              val += sync.eval(itemArmor, targets) + armorBonus;
            }
          }
        }
      }
      return val;
    }
    if (targets["i"]) {
      var itemData = targets["i"];
      var itemArmor = duplicate(sync.rawVal(itemData.equip[args[0]])) || 0;
      if (itemArmor) {
        var armorBonus = 0;
        for (var i in itemData.equip[args[0]].modifiers) {
          armorBonus += sync.eval(itemData.equip[args[0]].modifiers[i], targets);
        }
        if (itemArmor instanceof Object) {
          for (var k in itemArmor) {
            itemArmor[k] = sync.eval(itemArmor[k], targets) + armorBonus;
          }
        }
        else {
          itemArmor = sync.eval(itemArmor, targets) + armorBonus;
        }
        return itemArmor;
      }
      return 0;
    }
    return 0;
  },
  t : function(args, targets) {
    if (!targets) {return "0"}
    if (targets["c"] && !args[1]) {
      if (targets["c"].tags[args[0]]) {
        return 1;
      }
      else {
        return 0;
      }
    }
    if (targets[args[1]]) {
      if (targets[args[1]].tags[args[0]]) {
        return 1;
      }
      else {
        return 0;
      }
    }
  },
  "explode" : function(args, targets) {
    var maxLoop = 1000;
    var loop = 0;
    var cachedTargets = duplicate(targets);
    var expVal = sync.eval(args[0], cachedTargets);
    cachedTargets.val = expVal;
    var cond = sync.eval(args[1], cachedTargets);
    while (cond) {
      cachedTargets.val = sync.eval(args[0], cachedTargets);
      expVal = expVal + cachedTargets.val;
      cond = sync.eval(args[1], cachedTargets);
      loop++;
      if (loop > maxLoop) {
        sendAlert({text : "Error Processing Equation"});
        console.log(equation);
        return "0";
      }
    }
    return expVal;
  },
  total : function(args, targets) {
    var maxLoop = 1000;
    var loop = 0;
    var expVal = sync.eval(args[0], targets);
    var cond = sync.eval(args[1], targets);
    while (loop < cond) {
      expVal = expVal + sync.eval(args[0], targets);
      cond = sync.eval(args[1], targets);
      loop++;
      if (loop > maxLoop) {
        sendAlert({text : "Error Processing Equation"});
        console.log(equation);
        return "0";
      }
    }
    return expVal;
  },
  /*roll : function(args, targets) {
    setTimeout(function(){
      util.processEvent(args[0]);
    }, 100);
  },
  chat : function(args, targets) {
    setTimeout(function(){
      util.chatEvent(args[0], sync.eval(args[1] || "@me.name", targets));
    }, 100);
  },*/
  rand : function(args, targets) {
    if (Number(args[0]) >= Math.random()) {
      return 1;
    }
    return 0;
  },
  table : function(args, targets) {
    var maxLoop = 1000;
    var loop = 0;
    var expVal = sync.eval(args[0], targets);
    var cond = sync.eval(args[1], targets);

    if (game.templates.tables[expVal]) {
      if (game.templates.tables[expVal][cond]) {
        return sync.eval(game.templates.tables[expVal][cond], targets);
      }
      else {
        var reg = /(\d*)-(\d*)/i;
        var keys = Object.keys(game.templates.tables[expVal]);
        for (var i in keys) {
          var val = keys[i];
          var match = val.match(reg);
          if (match) {
            if (match[1] <= cond && cond <= match[2]) {
              return sync.eval(game.templates.tables[expVal][val], targets);
            }
            loop++;
            if (loop > maxLoop) {
              sendAlert({text : "Error Processing Equation"});
              console.log(equation);
              return "0";
            }
          }
        }
      }
    }
    return "0";
  },
  constant : function(args, targets) {
    var key = sync.eval(args[0], targets);
    if (game.templates.constants && (game.templates.constants[key] || game.templates.constants[String(key).toLowerCase()])) {
      return sync.eval(game.templates.constants[key] || game.templates.constants[String(key).toLowerCase()], targets);
    }
    return "0";
  },
  valid : function(args, targets) {
    var key = sync.reduce(args[0], targets, true).trim();
    if (key != null) {
      return 1;
    }
    return "0";
  },
};

util.trimCanvas = function(ctx) { // removes transparent edges
    var x, y, w, h, top, left, right, bottom, data, idx1, idx2, found, imgData;
    w = ctx.canvas.width;
    h = ctx.canvas.height;
    if (!w && !h) { return false }
    imgData = ctx.getImageData(0, 0, w, h);
    data = new Uint32Array(imgData.data.buffer);
    idx1 = 0;
    idx2 = w * h - 1;
    found = false;
    // search from top and bottom to find first rows containing a non transparent pixel.
    for (y = 0; y < h && !found; y += 1) {
        for (x = 0; x < w; x += 1) {
            if (data[idx1++] && !top) {
                top = y + 1;
                if (bottom) { // top and bottom found then stop the search
                    found = true;
                    break;
                }
            }
            if (data[idx2--] && !bottom) {
                bottom = h - y - 1;
                if (top) { // top and bottom found then stop the search
                    found = true;
                    break;
                }
            }
        }
        if (y > h - y && !top && !bottom) { return false } // image is completely blank so do nothing
    }
    top -= 1; // correct top
    found = false;
    // search from left and right to find first column containing a non transparent pixel.
    for (x = 0; x < w && !found; x += 1) {
        idx1 = top * w + x;
        idx2 = top * w + (w - x - 1);
        for (y = top; y <= bottom; y += 1) {
            if (data[idx1] && !left) {
                left = x + 1;
                if (right) { // if left and right found then stop the search
                    found = true;
                    break;
                }
            }
            if (data[idx2] && !right) {
                right = w - x - 1;
                if (left) { // if left and right found then stop the search
                    found = true;
                    break;
                }
            }
            idx1 += w;
            idx2 += w;
        }
    }
    left -= 1; // correct left
    if(w === right - left + 1 && h === bottom - top + 1) { return true } // no need to crop if no change in size
    w = right - left + 1;
    h = bottom - top + 1;
    ctx.canvas.width = w;
    ctx.canvas.height = h;
    ctx.putImageData(imgData, -left, -top);
    return true;
}

var _alertCount = 0;
function sendAlert(options) {
  if (getCookie("disableAlerts") == "true") {
    return false;
  }
  if (options instanceof String) {
    options = {text : options};
  }
  _alertCount++;

  if (options.p && !options.p[getCookie("UserID")]) {
    return;
  }

  var alert = $("<div>");
  alert.addClass("ui-popout padding");
  alert.attr("_alertCount", _alertCount);
  alert.css("position", "relative");
  alert.css("padding-left", "1em");
  alert.css("padding-right", "1em");
  alert.css("pointer-events", "auto");
  alert.css("max-width", "90vw");
  if (options.id && $("#"+options.id).length) {
    $("#"+options.id).remove();
  }
  alert.attr("id", options.id);

  var close = genIcon("remove").appendTo(alert);
  close.css("position", "absolute");
  close.css("right", "0");
  close.css("z-index", "100000000");
  close.click(function(){
    layout.coverlay(alert, (options.fadeTime || 500));
  });
  var chatContainer = $("<div>").appendTo(alert);
  chatContainer.addClass("flexrow fit-x outlinebottom");

  if (options.color) {
    alert.css("background-color", options.color);
  }
  else {
    alert.css("background-color", "white");
  }

  var textContainer = $("<div>").appendTo(chatContainer);
  textContainer.addClass("flexbetween");
  textContainer.css("width", "100%");

  if (options.classes) {
    alert.addClass(options.classes);
  }

  var chatDiv = $("<p>").appendTo(textContainer);
  chatDiv.css("margin-bottom", "0");
  var postType = {};

  var chatIcon = $("<span>");
  if (options.href) {
    chatIcon.append("<img style='width : auto; max-width : 6em; height: 2em; border-radius:10%; border: 1px solid black;' src='"+options.href+"'></img>");
  }
  if (options.user && !options.evID) {
    chatIcon.append("<b>"+options.user+"</b>");
    chatDiv.append(chatIcon);
    if (options.text) {
      chatIcon.append("<text style='word-break:break-all;'> : "+options.text+"</text>");
      chatDiv.append(chatIcon);
    }
  }
  else if (options.text) {
    chatIcon.append("<b style='font-size:0.8em' title='"+(options.user || "")+"'>"+options.text+"</b>");
    chatDiv.append(chatIcon);
  }

  if (options.media) {
    chatContainer.addClass("outline");

    var mediaContainer = $("<div>").appendTo(chatContainer);
    mediaContainer.addClass("flexmiddle");

    var mediaLink = $("<a>").appendTo(mediaContainer);
    mediaLink.addClass("flexcolumn flexmiddle");
    mediaLink.attr("href", options.media);
    mediaLink.attr("target", "_");
    mediaLink.text(options.media.substring(0, 50));

    var media = ui_processMedia(options.media);
    media.appendTo(mediaLink);
    media.css("width", "auto");
    media.css("max-width", "100%");
    media.css("height", "100px");
    if (!media.is("img")) {
      media[0].pause();
    }
  }
  if (options.evID) {
    function hasAccess(eventID) {
      var ev = game.events.data[eventID];
      if (ev && hasSecurity(getCookie("UserID"), "Visible", ev.data)){
        return true;
      }
      return false;
    }
    if (hasAccess(options.evID)) {
      var display;
      if (game.templates.display.ui && game.templates.display.ui[options.ui || game.templates.dice.ui]) {
        display = game.templates.display.ui[options.ui || game.templates.dice.ui];
      }
      var diceRes = sync.render("ui_newDiceResults")(game.events.data[options.evID], alert, {display : display});
      diceRes.appendTo(chatContainer);
    }
  }
  function coverAlert(alertPanel, fade, duration, alertCount) {
    setTimeout(function(){
      if (alertPanel.attr("_alertCount") == alertCount) {
        layout.coverlay(alertPanel, fade);
      }
    }, duration);
  }

  if (options.player) {
    if ($("#main-menu").length && $("#main-menu").css("opacity") == 0 && $("#main-menu").attr("docked") && !$("#main-menu").attr("locked")) {
      util.dockReveal($("#main-menu"));
      $("#chat-button").click();
    }
    else {
      $("#chat-button").addClass("highlight");
    }

    return alert;
    alert.css("padding", "0");
    alert.css("background-color", "white");

    chatContainer.empty();
    chatContainer.addClass("padding flexcolumn");
    chatContainer.removeClass("outlinebottom");
    chatContainer.css("max-width", "280px");

    var contentPlate = $("<div>").appendTo(chatContainer);
    contentPlate.addClass("bold flex subtitle");
    contentPlate.text(options.text);
    contentPlate.css("overflow-wrap", "break-word");

    if (options.f) {
      if (options.text && options.text.match("/me") && options.text.match("/me").index == 0) {
        if (options.f == options.user) {
          contentPlate.addClass("flexmiddle");
        }
        contentPlate.css("font-style", "italic");
        contentPlate.text(contentPlate.text().replace("/me", ""));
      }
      else {
        if (options.text && options.text.match("/w") && options.text.match("/w").index == 0) {
          contentPlate.css("background-color", "rgba(66,108,66,0.2)");
          contentPlate.css("font-style", "italic");
          contentPlate.css("font-size", "0.9em");
          contentPlate.text(contentPlate.text().replace("/w", ""));
        }

        if (options.evID) {
          contentPlate.addClass("padding");
          contentPlate.text("");
          function hasAccess(eventID) {
            var ev = game.events.data[eventID];
            if (ev && hasSecurity(getCookie("UserID"), "Visible", ev.data)){
              return true;
            }
            return false;
          }
          if (hasAccess(options.evID)) {
            var display;
            if (game.templates.display.ui && game.templates.display.ui[options.ui || game.templates.dice.ui]) {
              display = game.templates.display.ui[options.ui || game.templates.dice.ui];
            }
            var diceRes = sync.render("ui_newDiceResults")(game.events.data[options.evID], alert, {display : display});
            diceRes.addClass("flex");
            diceRes.appendTo(chatContainer);
          }
        }
        else {
          contentPlate.addClass("lpadding");
        }
        if (options.text && options.text.match("/y") && options.text.match("/y").index == 0) {
          contentPlate.removeClass("lpadding");
          alert.css("background-color", "rgb(255,232,204)");

          contentPlate.css("-webkit-text-stroke-width", "1px");
          contentPlate.css("font-style", "italic");
          contentPlate.css("font-size", "1.4em");
          contentPlate.text(contentPlate.text().replace("/y", ""));
        }
      }
    }
    else if (options.user) {
      if (options.text && options.text.match("/me") && options.text.match("/me").index == 0) {
        contentPlate.css("font-style", "italic");
        contentPlate.text(contentPlate.text().replace("/me", ""));
      }
      else if (options.text && options.text.match("/w") && options.text.match("/w").index == 0) {
        contentPlate.css("background-color", "rgba(66,108,66,0.2)");
        contentPlate.css("font-style", "italic");
        contentPlate.css("font-size", "0.9em");
        contentPlate.text(contentPlate.text().replace("/w", ""));
      }
      else if (options.text && options.text.match("/y") && options.text.match("/y").index == 0) {
        contentPlate.css("-webkit-text-stroke-width", "1px");
        contentPlate.css("font-style", "italic");
        contentPlate.css("font-size", "1.4em");
        alert.css("background-color", "rgb(255,232,204)");

        contentPlate.text(contentPlate.text().replace("/y", ""));
      }

      if (options.evID) {
        function hasAccess(eventID) {
          var ev = game.events.data[eventID];
          if (ev && hasSecurity(getCookie("UserID"), "Visible", ev.data)){
            return true;
          }
          return false;
        }
        if (hasAccess(options.evID)) {
          contentPlate.text(options.text);
          var display;
          if (game.templates.display.ui && game.templates.display.ui[options.ui || game.templates.dice.ui]) {
            display = game.templates.display.ui[options.ui || game.templates.dice.ui];
          }
          var diceRes = sync.render("ui_newDiceResults")(game.events.data[options.evID], alert, {display : display});
          diceRes.addClass("flex");
          diceRes.appendTo(chatContainer);
        }
      }
      else {
        contentPlate.addClass("subtitle");
      }
    }
    else {
      contentPlate.addClass("flexmiddle subtitle lpadding");
      contentPlate.removeClass("bold");

      chatContainer.css("background", options.color);
    }

    if (options.media) {
      var mediaContainer = $("<div>").appendTo(contentPlate);
      mediaContainer.addClass("flexmiddle flex");

      mediaContainer.append("<a class='flex spadding fit-x' target='_blank'>"+options.media+"</a>");

      var mediaLink = $("<a>").appendTo(mediaContainer);
      mediaLink.addClass("flexcolumn flexmiddle");
      mediaLink.attr("href", options.media);
      mediaLink.attr("target", "_");
      mediaLink.attr("title", options.media);
      //mediaLink.text(options.media.substring(0, 50) + "...");
      //mediaLink.css("word-break", "break-all");

      var media = ui_processMedia(options.media);
      media.appendTo(mediaLink);
      media.css("width", "auto");
      media.css("max-width", "100%");
      media.css("height", "100px");
      if (!media.is("img")) {
        media[0].pause();
      }
    }

    if (!layout.mobile) {
      $(".playerPlate").each(function(){
        if ($(this).attr("UserID") == options.player) {
          close.remove();
          alert.addClass("flex flexmiddle");
          alert.css("font-size", "");

          var target = $(this);
          if ($(".player-alert-"+options.player).length) {
            target = $($(".player-alert-"+options.player)[$(".player-alert-"+options.player).length-1]);
          }
          var pop = ui_popOut({
            target : target,
            id : "popout-alert-player-"+options.player+"-"+$(".player-alert-"+options.player).length,
            _alertCount : _alertCount,
            align : "top",
            title : (getPlayerCharacterName(options.player) || getPlayerName(options.player)),
            style : {"min-width" : Math.max($(this).outerWidth(), 150), "max-width" : Math.max($(this).outerWidth(), 300), "box-shadow" : "inset 0 0 1em " + (options.color || "transparent"), "min-height" : Math.max($(this).outerHeight(), 100)}
          }, alert).addClass("player-alert-"+options.player);
          if (options.duration != -1) {
            coverAlert($("#"+pop.attr("id")), options.fadeTime || 500, options.duration || 6000, _alertCount);
          }
        }
      });
    }
    else {
      $("#alertList").empty();
      alert.appendTo($("#alertList"));
      if (options.duration != -1) {
        coverAlert(alert, options.fadeTime || 500, options.duration || 4000, _alertCount);
      }
    }
  }
  else {
    alert.addClass("bounce");
    alert.appendTo($("#alertList"));
    if (options.duration != -1) {
      coverAlert(alert, options.fadeTime || 500, options.duration || 4000, _alertCount);
    }
  }

  return alert;
}

//sendAlert({text : "Test Alert", duration : 3000});

//cb callback
function genIcon(options, name, reverse) {
  if (!(options instanceof Object)) {
    options = {icon : options, text : name, reverse : reverse};
  }
  var link = $('<a>');
  link.css("white-space", "nowrap");
  var icon;
  if (options.reverse || reverse) {
    icon = $('<span>').appendTo(link);
    icon.addClass("glyphicon glyphicon-" + options.icon);
    if (options.text) {
      if (options.icon) {
        icon.css("padding-right", "0.25em");
      }
      link.append(options.text);
    }
  }
  else {
    if (options.text) {
      link.append(options.text);
    }
    icon = $('<span>');
    icon.addClass("glyphicon glyphicon-" + options.icon);
    if (options.text && options.icon) {
      icon.css("padding-left", "0.25em");
    }
  }
  if (options.raw) {
    link = icon;
  }
  else if (!options.reverse && !reverse) {
    icon.appendTo(link);
  }
  link.changeIcon = function(newIcon) {
    icon.removeClass(icon.attr("class"));
    icon.addClass("glyphicon glyphicon-" + newIcon);
  }

  return link;
}

function _mw_canChange(ui, delay, callback) {
  if (ui && !ui.prop("disabled")) {
    var diff = Date.now()-Number(ui.attr("_last_change"));
    if (diff > delay) {
      ui.removeAttr("_last_change");
      callback(ui);
      return true;
    }
    else {
      setTimeout(function(){_mw_canChange(ui, delay, callback)}, delay);
    }
  }
  return false;
}

var _inputUpdates;
function _stageUpdate(obj, cmd, target){
  _inputUpdates = {obj : obj, cmd : cmd, target : target, focused : document.activeElement};
  _inputSync(obj);
}
function _inputSync(obj) {
  setTimeout(function(){
    if (!$(document.activeElement).is(":input") || $(document.activeElement).attr("obj") != obj.id() || (!_inputUpdates || document.activeElement == _inputUpdates.focused)) {
      if (_inputUpdates) {
        if (_inputUpdates.cmd) {
          _inputUpdates.obj.sync(_inputUpdates.cmd, _inputUpdates.target);
        }
        else {
          _inputUpdates.obj.update();
        }
      }
      _inputUpdates = null;
    }
  }, 50);
}

function genInput(options, delay, inputOverride) {
  var input;

  if (!inputOverride) {
    input = $("<input>");
    if (options.select) {
      input = $("<select>");
      for (var key in options.select) {
        var optionInput = $("<option>").appendTo(input);
        optionInput.attr("value", options.select[key]);
        optionInput.text(key);
        if (sync.rawVal(options.value) == options.select[key]) {
          optionInput.attr("selected", "selected");
        }
      }
    }
    if (options.type == "textarea") {
      input = $("<textarea>");
    }
  }
  else {
    input = inputOverride;
  }

  if (options.paste) {
    input.bind("paste", function(ev){
      input.val(ev.originalEvent.clipboardData.getData('text') || "");
      input.change();
      input.blur();
    });
  }
  if (options.value != null) {
    input.click(function(ev){
      if (_down["16"]) {
        // increment the field
        $(this).attr("title", "Add a # to this field");
        $(this).tooltip({
          content : "Add to value",
          position: { my: "center bottom", at: "top center" }
        });
        $(this).tooltip("show");
        $(this).attr("relative", $(this).val());
        $(this).val("");
      }
    });
    input.blur(function(){
      if ($(this).attr("relative") != null) {
        $(this).val($(this).attr("relative"));
        $(this).tooltip("destroy");
        $(this).removeAttr("relative");
        $(this).removeAttr("title");
      }
    });
    if (options.type == "number" || options.type == "range") {
      input.bind('mousewheel', function(e) {
        if ($(this).prop("disabled") || (!$(this).is(':focus') && options.type != "range")) {return;}
        if (e.originalEvent.wheelDelta/120 > 0) {
          var val = (Number($(this).val()) || 0) + (Number(input.attr("step")) || 1);
          if ($(this).attr("max") != null) {
            val = Math.min(val, $(this).attr("max"));
          }
          $(this).val(val);
          $(this).attr("_last_change", Date.now());
          $(this).trigger("input");
          _mw_canChange($(this), delay || 500, function(ui){
            ui.change();
          });

          return false;
        }
        else if (e.originalEvent.wheelDelta/120 < 0) {
          var val = (Number($(this).val()) || 0) - (Number(input.attr("step")) || 1);
          if ($(this).attr("min") != null) {
            val = Math.max(val, $(this).attr("min"));
          }
          $(this).val(val);
          $(this).attr("_last_change", Date.now());
          $(this).trigger("input");
          _mw_canChange($(this), delay || 500, function(ui){
            ui.change();
          });
          return false;
        }
      });
    }

    if (options.value instanceof Object) {
      var value = options.value;
      if (value.max) {
        input.attr("max", value.max);
      }
      if (value.min) {
        input.attr("min", value.min);
      }
      if (options.raw) {
        if (options.raw == "min") {
          input.val(value.min);
        }
        else if (options.raw == "max") {
          input.val(value.max);
        }
        else {
          input.val(sync.rawVal(value));
        }
      }
      else if (options.mod) {
        input.val(sync.modifier(value, options.mod));
      }
      else if (options.name) {
        input.val(value.name);
      }
      else {
        if (sync.rawVal(value) != null) {
          input.val(sync.rawVal(value));
        }
      }

      if (options.type == "checkbox" || options.type == "radio") {
        if (input.val() == options.checked) {
          input.prop("checked", true);
        }
        else {
          input.prop("checked", false);
        }
      }
      // decide once, not everytime click is run
      if (options.obj) {
        input.attr("obj", options.obj.id());
        input.blur(function(){
          _inputSync(options.obj);
        });
        if (options.cmd) {
          input.change(function() {
            var newVal = $(this).val();
            if ($(this).attr("relative") != null) {
              var ctx = sync.defaultContext();
              if (options.obj.data) {
                ctx[options.obj.data._t] = duplicate(options.obj.data);
              }
              if (options.mod) {
                newVal = Number(sync.modifier(value, options.mod) || 0) + Number(sync.eval(newVal, ctx));
              }
              else {
                newVal = Number(sync.rawVal(value) || 0) + Number(sync.eval(newVal, ctx));
              }
              $(this).removeAttr("relative");
            }
            if (options.type == "checkbox" || options.type == "radio") {
              if ($(this).prop("checked") == false || $(this).prop("checked") == "false") {
                newVal = options.unchecked || "";
              }
              else {
                newVal = options.checked;
              }
            }
            if (options.raw) {
              if (options.raw == "min") {
                value.min = newVal;
              }
              else if (options.raw == "max") {
                value.max = newVal;
              }
              else {
                sync.rawVal(value, newVal);
              }
            }
            else if (options.mod) {
              sync.modifier(value, options.mod, newVal);
            }
            else if (options.name) {
              value.name = newVal;
            }
            else {
              sync.rawVal(value, newVal);
            }
            _stageUpdate(options.obj, options.cmd, options.target);
          });
        }
        else {
          input.change(function() {
            var newVal = $(this).val();
            if ($(this).attr("relative") != null) {
              var ctx = sync.defaultContext();
              if (options.obj.data) {
                ctx[options.obj.data._t] = duplicate(options.obj.data);
              }
              if (options.mod) {
                newVal = Number(sync.modifier(value, options.mod) || 0) + Number(sync.eval(newVal, ctx));
              }
              else {
                newVal = Number(sync.rawVal(value) || 0) + Number(sync.eval(newVal, ctx));
              }
              $(this).removeAttr("relative");
            }
            if (options.type == "checkbox" || options.type == "radio") {
              if ($(this).prop("checked") == false || $(this).prop("checked") == "false") {
                newVal = options.unchecked || "";
              }
              else {
                newVal = options.checked;
              }
            }
            if (options.raw) {
              if (options.raw == "min") {
                value.min = newVal;
              }
              else if (options.raw == "max") {
                value.max = newVal;
              }
              else {
                sync.rawVal(value, newVal);
              }
            }
            else if (options.mod) {
              sync.modifier(value, options.mod, newVal);
            }
            else if (options.name) {
              value.name = newVal;
            }
            else {
              sync.rawVal(value, newVal);
            }
            _stageUpdate(options.obj, options.cmd, options.target);
          });
        }
      }
      else {
        input.change(function() {
          var newVal = $(this).val();
          if ($(this).attr("relative") != null) {
            if (options.mod) {
              newVal = Number(sync.modifier(value, options.mod) || 0) + Number(newVal);
            }
            else {
              newVal = Number(sync.rawVal(value) || 0) + Number(newVal);
            }
            $(this).removeAttr("relative");
          }
          if (options.type == "checkbox" || options.type == "radio") {
            if ($(this).prop("checked") == false || $(this).prop("checked") == "false") {
              newVal = options.unchecked || "";
            }
            else {
              newVal = options.checked;
            }
          }
          if (options.raw) {
            if (options.raw == "min") {
              value.min = newVal;
            }
            else if (options.raw == "max") {
              value.max = newVal;
            }
            else {
              sync.rawVal(value, newVal);
            }
          }
          else if (options.mod) {
            sync.modifier(value, options.mod, newVal);
          }
          else if (options.name) {
            value.name = newVal;
          }
          else {
            sync.rawVal(value, newVal);
          }
        });
      }
    }
    else {
      input.val(options.value);
      if (options.type == "range" && options.value) {
        setTimeout(function(){input.val(options.value);}, 10);
      }
      // can't do anything here, javascript only passes references on objects
    }
  }

  if (options.disabled) {
    input.attr("disabled", "true");
  }

  for (var key in options) {
    var data = options[key];
    if (key == "parent") {
      input.appendTo(data);
    }
    else if (key == "classes") {
      input.addClass(data);
    }
    else if (key == "style") {
      if (options[key]) {
        for (var cssKey in data) {
          input.css(cssKey, data[cssKey]);
        }
      }
    }
    else if (key != "value" && key != "obj" && key != "cmd"){
      input.attr(key, data);
    }
  }

  if (options.list && !options.select) {
    input.removeAttr("list");
    var listWrap;
    if (options.parent) {
      listWrap = $("<div>").appendTo(options.parent);
      listWrap.addClass("flexrow");
      listWrap.css("position", "relative");

      if (options.classes && options.classes.match("fit-x")) {
        listWrap.addClass("fit-x");
      }

      listWrap.append(input);

      var carret = genIcon({raw : true, icon : "triangle-bottom"}).appendTo(listWrap);
      carret.addClass("link");
      if (options.classes && options.classes.match("subtitle")) {
        carret.addClass("subtitle");
      }
      input.css("margin-right", "15px");
      carret.css("color", "#333");
      carret.css("position", "absolute");
      carret.css("right", "0");
      carret.css("top", "25%");
      carret.click(function(){
        input.trigger("focus");
        input.autocomplete('widget').css('z-index', util.getMaxZ("ui-popout")+1);
        input.autocomplete("search");
      });
    }

    var availableTags = [];
    if (options.list instanceof Object) {
      availableTags = options.list;
    }
    else {
      $("#"+options.list).children().each(function(){
        availableTags.push($(this).attr("value") || $(this).text());
      });
    }

    input.autocomplete({
      source: availableTags,
      minLength: 0,
      change : function(){input.change();}
    });

    if (options.parent) {
      return input;
    }
  }

  return input;
}

function genNavBar(navAlign, contentClass, padding) {
  var container = $("<div>");
  container.addClass("flexcolumn");

  var navDiv = $("<div>").appendTo(container);
  navDiv.addClass("flexrow flexwrap background alttext");
  navDiv.addClass(navAlign);

  var content = $("<div>").appendTo(container);
  content.addClass("flexcolumn");
  content.addClass(contentClass);

  container.generateTab = function(tabName, tabIcon, clickFunction) {
    var item = $("<div>").appendTo(navDiv);
    item.addClass("hover2 smooth");
    if (padding) {
      item.css("padding", padding);
    }
    else {
      item.css("padding", "8px");
    }

    item.click(function(e) {
      content.empty();
      navDiv.children().each(function() {
        $(this).removeClass("highlight2 outline");
      });
      $(this).addClass("highlight2 outline");
      clickFunction(content, e, $(this));
    });

    var link = genIcon(tabIcon, tabName).appendTo(item);
    link.css("color", "inherit");
    return item;
  }

  container.clean = function() {
    content.empty();
  }
  container.removeTabs = function() {
    navBar.empty();
  }
  container.selectTab = function(tabName) {
    navDiv.children().each(function() {
      if ($(this).html().search(tabName) > 0) {
        $(this).click();
      }
    });
  }
  container.displayContent = function(contentToShow) {
    content.empty();
    content.append(contentToShow);
  }

  return container;
}


function ui_dropMenuOption(parent, data, options) {
  var div = $("<div>");
  div.addClass("outlinebottom flexrow spadding ui-dropoption ui-dropmenu-class");
  div.attr("id", parent.attr("_children"));
  div.attr("_parent", parent.attr("id"));
  div.attr("_root", parent.attr("_root"));
  div.appendTo(parent);
  parent.addClass("outline");
  var max = util.getMaxZ(".ui-popout");
  div.css("z-index", max+1);

  if (data.disabled) {
    icon.css("color", "inherit");
    div.css("color", "inherit");
    div.addClass("ui-dropoption-disabled");
  }
  else {
    div.addClass("ui-dropoption");
  }

  for (var cssIndex in options.style) {
    div.css(cssIndex, options.style[cssIndex]);
  }
  for (var cssIndex in data.style) {
    div.css(cssIndex, data.style[cssIndex]);
  }
  var icon = genIcon(data.icon, data.name).appendTo(div);
  icon.addClass("flex flexbetween");

  if (data.style && data.style["color"] == "transparent") {
    icon.css("text-shadow", "0em 0em 8px transparent");
  }

  div.attr("ui-name", data.ui);
  for (var key in data.attr) {
    div.attr(key, data.attr[key]);
  }
  if (data.hover) {
    div.hover(function(ev) {
      if (data.hover) {
        data.hover.in(ev, $(this));
      }
    },
    function(ev) {
      if (data.hover) {
        data.hover.out(ev, $(this));
      }
    });
  }
  if (data.submenu) {
    if (!data.hideSub) {
      var submenu = genIcon("triangle-bottom").appendTo(div);
      submenu.css("color", "black");
      submenu.css("float", "right");
      submenu.css("margin-left", "4px");
    }
    div.attr("_children", div.attr("id") + "_c");
    div.hover(function(ev) {
      if (data.align == "match") {
        ui_dropMenu(div, data.submenu, {id : div.attr("id") + "_c", _root : div.attr("_root"), _parent : parent.attr("id"), child : true, style : options.style, match : parent});
      }
      else {
        ui_dropMenu(div, data.submenu, {id : div.attr("id") + "_c", _root : div.attr("_root"), _parent : parent.attr("id"), child : true, style : options.style});
      }
    },
    function(ev){
    });
  }
  else {
    div.hover(function(ev) {
      if ($("#"+div.attr("id") + "_c").length) {
        layout.coverlay(div.attr("id") + "_c");
      }
    },
    function(ev){
      if ($("#"+div.attr("id") + "_c").length) {
        layout.coverlay(div.attr("id") + "_c");
      }
    });
  }
  if (!data.command && !data.click) {
    div.click(function() {
      layout.coverlay(parent);
    });
  }
  if (data.click) {
    div.click(function(ev) {
      if (data.click(ev, $(this), data) != "false") {
        layout.coverlay($("#"+$(this).attr("_root")));
      }
      ev.stopPropagation();
      ev.preventDefault();
    });
  }
  return div;
}

var rootMenu;
function ui_dropMenu(target, options, style) {
  if (rootMenu && !style.child) {
    $(".ui-dropoption").remove();
    $(".ui-dropoption-disabled").remove();
  }

  var overlay = $("<div>").appendTo($("body"));
  overlay.addClass("ui-dropmenu highlight smooth ui-dropmenu-class");
  overlay.css("background-color", "white");
  overlay.css("overflow-y", "auto");
  overlay.css("overflow-x", "hidden");
  overlay.css("max-height", "80vh");
  var max = Math.max(util.getMaxZ(".ui-popout"), util.getMaxZ(".main-dock"));
  overlay.css("z-index", max+1);

  if (style) {
    if ($("#"+style.id)) {
      layout.coverlay($("#"+style.id));
    }
    for (var index in style) {
      if (index == "style") {
        for (var cssIndex in style[index]) {
          if (!layout.mobile || cssIndex != "font-size") {
            overlay.css(cssIndex, style[index][cssIndex]);
          }
        }
      }
      else {
        overlay.attr(index, style[index]);
      }
    }
  }
  if (!style.child) {
    overlay.attr("_root", overlay.attr("id"));
    overlay.attr("_createTime", Date.now());
    rootMenu = overlay.attr("id");
  }
  overlay.attr("_children", overlay.attr("id") + "_c");
  for (var index in options) {
    var div = ui_dropMenuOption(overlay, options[index], {style : style.style});
    div.addClass("white");
  }
  if ((!target || !target.hasClass("ui-dropoption")) && !style.hideClose) {
    var div = ui_dropMenuOption(overlay, {icon: "remove", name: "Close"}, {style : style.style});
    div.addClass("highlight alttext");
  }
  if (style.match) {
    target = style.match;
  }
  if (target) {
    if (style.align) {
      var offsets = target.offset();

      var max = util.getMaxZ(".ui-popout");
      overlay.css("z-index", max+1);
      overlay.css("position", "fixed");

      var x = offsets.left + target.width()/2 - overlay.outerWidth()/2;
      var y = offsets.top + target.height()/2 - overlay.outerHeight()/2;

      if (style.align) {
        if (style.align.match("right")) {
          x = offsets.left + target.outerWidth();
        }
        else if (style.align.match("left")) {
          x = offsets.left - overlay.outerWidth();
        }
        if (style.align.match("top")) {
          y = offsets.top - overlay.outerHeight();
        }
        else if (style.align.match("bottom")) {
          y = offsets.top + target.outerHeight();
        }
      }
      // keep within screen boundries
      x = x - (Number($("body").scrollLeft()) || 0);
      y = y - (Number($("body").scrollTop()) || 0);
      if (x+overlay.outerWidth() > $(window).outerWidth()) {
        x = x - ((x+overlay.outerWidth())-$(window).outerWidth());
      }
      if (x < 0) {
        x = 0;
      }
      if (y+overlay.outerHeight() > $(window).outerHeight()) {
        y = y - ((y+overlay.outerHeight())-$(window).outerHeight());
      }
      if (y < 0) {
        y = 0;
      }
      overlay.css("left", x);
      overlay.css("top", y);
    }
    else {
      var offsets = target.offset();
      if (target.css("z-index") == "auto") {
        overlay.css("z-index", 500);
      }
      else {
        overlay.css("z-index", Number(target.css("z-index"))+1);
      }
      var x = offsets.left + target.outerWidth();
      var y = offsets.top;

      overlay.css("position", "fixed");
      var height = offsets.top + overlay.outerHeight();
      if (height > $(window).outerHeight()) {
        overlay.css("top", offsets.top + ($(window).outerHeight()-height));
      }
      else {
        overlay.css("top", offsets.top);
      }
      var width = offsets.left + target.outerWidth() + overlay.outerWidth();
      if (width > $(window).outerWidth()) {
        overlay.css("left", offsets.left + target.outerWidth() + ($(window).outerWidth()-width));
      }
      else {
        overlay.css("left", offsets.left + target.outerWidth());
      }

      if (!style.child) {
        x = cursorX-10;
        y = cursorY-10;
      }

      if (x+overlay.outerWidth() > $(window).outerWidth()) {
        x = x - ((x+overlay.outerWidth())-$(window).outerWidth());
      }
      if (x < 0) {
        x = 0;
      }
      if (y+overlay.outerHeight() > $(window).outerHeight()) {
        y = y - ((y+overlay.outerHeight())-$(window).outerHeight());
      }
      if (y < 0) {
        y = 0;
      }
      overlay.css("left", x);
      overlay.css("top", y);
    }
  }
  return overlay;
}

var cursorX;
var cursorY;
// hacky way of doing this, but i'm not updating everything
document.onmousemove = function(e){
  cursorX = e.pageX;
  cursorY = e.pageY;
}

function ui_popOut(options, content) {
  var overlay = $("<div>").appendTo($("body"));
  overlay.addClass("boxshadow ui-popout flexcolumn");
  if (options.resizable) {
    overlay.resizable();
  }
  if (options.prompt) {
    overlay.addClass("prompt");
    overlay.mousedown(function(ev){
      overlay.removeClass("prompt");
      _promptClicked = true;
    });
  }
  var pin;

  overlay.hover(function(){
    if ($(this).attr("locked") && $(this).hasClass("main-dock")) {
      var max = util.getMaxZ(".main-dock");
      $(".main-dock").css("z-index", 10);
      $(this).css("z-index", 11);
    }
    else if ($(this).attr("docked")) {
      var max = Math.max(util.getMaxZ(".ui-popout"), util.getMaxZ(".main-dock"));
      if (!$(this).attr("locked")) {
        $(this).css("z-index", max+1);
      }
      if (overlay.attr("fadeHide")) {
        overlay.css("opacity", "1.0");
      }
      $(this).css("transition", "width 0.0s, height 0.0s, left 0.0s, top 0.0s, opacity 0.0s");
      if ($(this).attr("docked") == "left") {
        $(this).css("left", 0);
      }
      else if ($(this).attr("docked") == "right") {
        $(this).css("left", $(window).width() - $(this).width());
      }
      else if ($(this).attr("docked") == "top") {
        $(this).css("top", 0);
      }
      else if ($(this).attr("docked") == "bottom") {
        $(this).css("top", $(window).height() - $(this).height());
      }
    }
    else {
      $(this).css("transition", "");
    }
    $(".prompt").css("z-index", Math.max(util.getMaxZ(".main-dock"), util.getMaxZ(".ui-popout")) + 1);
  },
  function(){
    var overlay = $(this);
    if (!$(this).attr("locked") && !$(".ui-dropmenu-class").length && !$(".prompt").length) {
      overlay.attr("lastHoverOut", Date.now());
      setTimeout(function(){
        if (Date.now() - overlay.attr("lastHoverOut") < 500) {
          return;
        }
        if (!overlay.attr("locked") && overlay.attr("docked") && cursorInPage && !overlay.is(":hover") && !$(".prompt").length) {
          overlay.css("z-index", overlay.attr("docked-z"));
          if (overlay.attr("fadeHide")) {
            overlay.css("opacity", "0");
          }
          overlay.css("transition", "width 0.35s, height 0.35s, left 0.35s, top 0.35s, opacity 0.35s");
          if (overlay.attr("docked") == "left") {
            overlay.css("left", -1 * overlay.width() + 20);
          }
          else if (overlay.attr("docked") == "right") {
            overlay.css("left", $(window).width() - 20);
          }
          else if (overlay.attr("docked") == "top") {
            overlay.css("top", -1 * overlay.height() + 20);
          }
          else if (overlay.attr("docked") == "bottom") {
            overlay.css("top", $(window).height() - 20);
          }
        }
        else {
          overlay.css("transition", "opacity 0.35s");
        }
      }, (overlay.hasClass("main-dock"))?(1000):(600));
    }
  });
  if (!options.noCss) {
    overlay.addClass("inactives snapCss");
    overlay.css("overflow", "hidden");
    overlay.draggable({
      containment : "window",
      stack : ".ui-popout.snapCss",
      snap : ".ui-popout.snapCss",
      snapMode : "Outer",
      handle : ".dragcontrol",
      start : function(ev, ui) {
        if (overlay.attr("docked")) {
          overlay.css("transition", "");
          overlay.removeAttr("docked");
          if(pin) {pin.hide(); }
          overlay.removeAttr("_dockStartX");
          overlay.removeAttr("_dockStartY");
          overlay.removeAttr("docked-z");
        }
      },
      drag : function(ev, ui) {
        var offset = overlay.offset();
        var xPos = offset.left;
        var yPos = offset.top;

        if (xPos <= 1 || yPos <= 1 || xPos + overlay.width() >= $(window).width()-5 || yPos + overlay.height() >= $(window).height()-5) {
          var lastX = overlay.attr("_dockStartX") || ev.screenX;
          var lastY = overlay.attr("_dockStartY") || ev.screenY;

          var velX = ev.screenX - lastX;
          var velY = ev.screenY - lastY;

          if ((velX < $(window).width()*-0.10 || ev.offsetX < 10) && xPos <= 1) {
            ui.position.left -= 50;
          }
          else if ((velX > $(window).width()*0.10 || ev.offsetX > $(window).width()-10) && xPos+overlay.width() >= $(window).width()-5) {
            ui.position.left += 50;
          }
          else if ((velY < $(window).height()*-0.05) && yPos <= 1) {
            ui.position.top -= 50;
          }
          else if ((velY > $(window).height()*0.15 || ev.offsetY > $(window).height()-2) && yPos+overlay.height() >= $(window).height()-5) {
            ui.position.top += 50;
          }
          if (!overlay.attr("_dockStartX") && !overlay.attr("_dockStartY")) {
            overlay.attr("_dockStartX", ev.screenX);
            overlay.attr("_dockStartY", ev.screenY);
          }
        }
        else {
          overlay.removeAttr("_dockStartX");
          overlay.removeAttr("_dockStartY");
        }
      },
      stop : function(ev, ui){
        overlay.attr("_lastDrag", Date.now());
        var offset = overlay.offset();
        var xPos = offset.left;
        var yPos = offset.top;
        if (xPos <= 1 || yPos <= 1 || xPos + overlay.width() >= $(window).width()-5 || yPos + overlay.height() >= $(window).height()-5) {
          var lastX = overlay.attr("_dockStartX") || ev.screenX;
          var lastY = overlay.attr("_dockStartY") || ev.screenY;

          var velX = ev.screenX - lastX;
          var velY = ev.screenY - lastY;

          if ((velX < $(window).width()*-0.10 || ev.offsetX < 10) && xPos <= 1) {
            overlay.attr("docked", "left");
            overlay.css("left", -1 * overlay.width() + 20);
            overlay.css("transition", "width 0.35s, height 0.35s, left 0.35s, top 0.35s");
            overlay.attr("docked-z", overlay.attr("docked-z") || overlay.css("z-index"));
          }
          else if ((velX > $(window).width()*0.10 || ev.offsetX > $(window).width()-10) && xPos+overlay.width() >= $(window).width()-5) {
            overlay.attr("docked", "right");
            overlay.css("left", $(window).width() - 20);
            overlay.css("transition", "width 0.35s, height 0.35s, left 0.35s, top 0.35s");
            overlay.attr("docked-z", overlay.attr("docked-z") || overlay.css("z-index"));
          }
          else if ((velY < $(window).height()*-0.05) && yPos <= 1) {
            overlay.attr("docked", "top");
            overlay.css("top", -1 * overlay.height() + 20);
            overlay.css("transition", "width 0.35s, height 0.35s, left 0.35s, top 0.35s");
            overlay.attr("docked-z", overlay.attr("docked-z") || overlay.css("z-index"));
          }
          else if ((velY > $(window).height()*0.15 || ev.offsetY > $(window).height()-2) && yPos+overlay.height() >= $(window).height()-5) {
            overlay.attr("docked", "bottom");
            overlay.css("top", $(window).height() - 20);
            overlay.css("transition", "width 0.35s, height 0.35s, left 0.35s, top 0.35s");
            overlay.attr("docked-z", overlay.attr("docked-z") || overlay.css("z-index"));
          }

          if(overlay.attr("docked"))
          {
            if(pin) { pin.show(); }
          }
        }

        overlay.removeAttr("_dockStartX");
        overlay.removeAttr("_dockStartY");
        if (options.moved) {
          options.moved(ev, overlay, ui);
        }
      }
    });
  }
  else {
    overlay.css("background-color", "none");
    if (options.allowDock) {
      overlay.draggable({
        containment : "window",
        stack : ".ui-popout.snapCss",
        snap : ".ui-popout.snapCss",
        snapMode : "Outer",
        handle : ".dragcontrol",
        start : function(ev, ui) {
          if (overlay.attr("docked")) {
            overlay.css("transition", "");
            overlay.removeAttr("docked");
            overlay.removeAttr("_dockStartX");
            overlay.removeAttr("_dockStartY");
            overlay.removeAttr("docked-z");
          }
        },
        drag : function(ev, ui) {
          var offset = overlay.offset();
          var xPos = offset.left;
          var yPos = offset.top;

          if (xPos <= 1 || yPos <= 1 || xPos + overlay.width() >= $(window).width()-5 || yPos + overlay.height() >= $(window).height()-5) {
            var lastX = overlay.attr("_dockStartX") || ev.screenX;
            var lastY = overlay.attr("_dockStartY") || ev.screenY;

            var velX = ev.screenX - lastX;
            var velY = ev.screenY - lastY;

            if ((velX < $(window).width()*-0.10 || ev.offsetX < 10) && xPos <= 1) {
              ui.position.left -= 50;
            }
            else if ((velX > $(window).width()*0.10 || ev.offsetX > $(window).width()-10) && xPos+overlay.width() >= $(window).width()-5) {
              ui.position.left += 50;
            }
            else if ((velY < $(window).height()*-0.05) && yPos <= 1) {
              ui.position.top -= 50;
            }
            else if ((velY > $(window).height()*0.15 || ev.offsetY > $(window).height()-2) && yPos+overlay.height() >= $(window).height()-5) {
              ui.position.top += 50;
            }
            if (!overlay.attr("_dockStartX") && !overlay.attr("_dockStartY")) {
              overlay.attr("_dockStartX", ev.screenX);
              overlay.attr("_dockStartY", ev.screenY);
            }
          }
          else {
            overlay.removeAttr("_dockStartX");
            overlay.removeAttr("_dockStartY");
          }
        },
        stop : function(ev, ui){
          overlay.attr("_lastDrag", Date.now());
          var offset = overlay.offset();
          var xPos = offset.left;
          var yPos = offset.top;
          if (xPos <= 1 || yPos <= 1 || xPos + overlay.width() >= $(window).width()-5 || yPos + overlay.height() >= $(window).height()-5) {
            var lastX = overlay.attr("_dockStartX") || ev.screenX;
            var lastY = overlay.attr("_dockStartY") || ev.screenY;

            var velX = ev.screenX - lastX;
            var velY = ev.screenY - lastY;

            if ((velX < $(window).width()*-0.10 || ev.offsetX < 10) && xPos <= 1) {
              overlay.attr("docked", "left");
              overlay.css("left", -1 * overlay.width() + 20);
              overlay.css("transition", "width 0.35s, height 0.35s, left 0.35s, top 0.35s");
              overlay.attr("docked-z", overlay.attr("docked-z") || overlay.css("z-index"));
            }
            else if ((velX > $(window).width()*0.10 || ev.offsetX > $(window).width()-10) && xPos+overlay.width() >= $(window).width()-5) {
              overlay.attr("docked", "right");
              overlay.css("left", $(window).width() - 20);
              overlay.css("transition", "width 0.35s, height 0.35s, left 0.35s, top 0.35s");
              overlay.attr("docked-z", overlay.attr("docked-z") || overlay.css("z-index"));
            }
            else if ((velY < $(window).height()*-0.05) && yPos <= 1) {
              overlay.attr("docked", "top");
              overlay.css("top", -1 * overlay.height() + 20);
              overlay.css("transition", "width 0.35s, height 0.35s, left 0.35s, top 0.35s");
              overlay.attr("docked-z", overlay.attr("docked-z") || overlay.css("z-index"));
            }
            else if ((velY > $(window).height()*0.15 || ev.offsetY > $(window).height()-2) && yPos+overlay.height() >= $(window).height()-5) {
              overlay.attr("docked", "bottom");
              overlay.css("top", $(window).height() - 20);
              overlay.css("transition", "width 0.35s, height 0.35s, left 0.35s, top 0.35s");
              overlay.attr("docked-z", overlay.attr("docked-z") || overlay.css("z-index"));
            }
          }

          overlay.removeAttr("_dockStartX");
          overlay.removeAttr("_dockStartY");
          if (options.moved) {
            options.moved(ev, overlay, ui);
          }
        }
      });
    }
    else {
      overlay.draggable({
        containment : "window",
        stack : ".ui-popout.snapCss",
        snap : ".ui-popout.snapCss",
        snapMode : "Outer",
        stop : function(ev, ui){
          overlay.attr("_lastDrag", Date.now());
          if (options.moved) {
            options.moved(ev, overlay, ui);
          }
        }
      });
    }
  }

  if (options) {
    if ($("#"+options.id)) {
      $("#"+options.id).remove();
    }
    for (var index in options) {
      if (index == "style") {
        for (var cssIndex in options[index]) {
          overlay.css(cssIndex, options[index][cssIndex]);
        }
      }
      else if (index != "target" && index != "title" && index != "align" && index != "close" && index != "moved"){
        overlay.attr(index, options[index]);
      }
    }
  }

  var removeWrapper = $("<text>");
  removeWrapper.addClass("padding alttext flexrow fit-x subtitle");
  removeWrapper.css("position", "absolute");
  removeWrapper.css("font-family", "Scaly Sans");
  removeWrapper.css("top", "0");
  removeWrapper.css("right", "0");
  removeWrapper.css("pointer-events", "none");
  removeWrapper.hover(function(){
    $(this).css("opacity", "");
  },
  function(){

  });
  if(options.pin == undefined) {
    options.pin = true;
  }
  if (options.pin) {
    pin = genIcon("pushpin").appendTo(removeWrapper);
    pin.addClass("flexrow lrpadding subtitle flexmiddle middle");
    pin.attr("title", "Lock this menu down");
    pin.css("pointer-events", "auto");
    pin.css("text-shadow", "0px 0px 4px white");
    pin.css("margin-left","-4px");
    pin.click(function(){
      if (overlay.attr("locked")) {
        overlay.removeAttr("locked");
        pin.removeClass("highlight");
      }
      else {
        pin.addClass("highlight");
        overlay.attr("locked", true);
      }
    });
    setTimeout(function(){
      if (overlay.attr("locked")) {
        pin.addClass("highlight");
      }
      else {
        pin.removeClass("highlight");
      }

      if (overlay.attr("docked")) {
        pin.show();
      }
      else {
        pin.hide();
      }
    }, 0);
  }
  var title = $("<b>").appendTo(removeWrapper);
  title.css("pointer-events", "auto");
  title.css("overflow", "hidden");
  title.css("white-space", "nowrap");
  if (options.title) {
    if (options.title instanceof Object) {
      title.append(options.title);
    }
    else {
      title.attr("contenteditable", "true");
      title.text(options.title);
    }
  }
  else
  {
    title.prepend("&nbsp;");
  }
  if(options.noCss){
    title.css("pointer-events","none");
  }


  removeWrapper.append("<div class='flex'></div>");
  var minimize
  if (options.minimize) {
    minimize = genIcon("minus");
    minimize.addClass("lrmargin");
    minimize.attr("title", "minimize");
    minimize.appendTo(removeWrapper);
    minimize.css("text-shadow", "0px 0px 4px white");
    minimize.css("pointer-events", "auto");
    minimize.click(function(evt) {
      if ($(this).attr("resized") == "mini") {
        if (options.maximize) {
          maximize.show();
        }
        contentContainer.show();
        overlay.css("width", overlay.attr("_lastWidth"));
        overlay.css("height", overlay.attr("_lastHeight"));
        var oldX = overlay.attr("_lastX")+"px";
        var oldY = overlay.attr("_lastY")+"px";
        overlay.attr("_lastX", overlay.offset().left);
        overlay.attr("_lastY", overlay.offset().top);
        overlay.css("left", oldX);
        overlay.css("top", oldY);
        removeWrapper.css("font-size", "");
        if (title) {
          title.attr("contenteditable", "true");
          title.text(title.text().trim());
          title.unbind('click');
        }
        if (options.resizable) {
          overlay.resizable();
        }
        minimize.changeIcon("minus");
        $(this).removeAttr("resized");
        setTimeout(function() {
          var offsets = overlay.offset();
          var x = offsets.left;
          var y = offsets.top;
          if (x+overlay.outerWidth() > $(window).outerWidth()) {
            x = x - ((x+overlay.outerWidth())-$(window).outerWidth());
          }
          if (x < 0) {
            x = 0;
          }
          if (y+overlay.outerHeight() > $(window).outerHeight()) {
            y = y - ((y+overlay.outerHeight())-$(window).outerHeight());
          }
          if (y < 0) {
            y = 0;
          }
          overlay.css("left", x);
          overlay.css("top", y);
        }, 10);
      }
      else {
        if (options.maximize) {
          maximize.hide();
        }
        contentContainer.hide();
        overlay.attr("_lastWidth", overlay.width());
        overlay.attr("_lastHeight", overlay.height());
        var oldX = overlay.attr("_lastX")+"px";
        var oldY = overlay.attr("_lastY")+"px";
        overlay.attr("_lastX", overlay.offset().left);
        overlay.attr("_lastY", overlay.offset().top);
        overlay.css("left", oldX);
        overlay.css("top", oldY);
        overlay.css("width", removeWrapper.width() + 36);
        overlay.css("height", "1.8em");
        if (title) {
          title.removeAttr("contenteditable");
          title.text(title.text().trim());
          title.click(function(ev){
            minimize.click();
          });
        }
        minimize.changeIcon("new-window");
        $(this).attr("resized", "mini");
        if (options.resizable || !overlay.resizable('option', 'disabled')) {
          options.resizable = true;
          overlay.resizable("destroy");
        }
      }
      evt.stopPropagation();
      return false;
    });
  }
  var maximize;
  if (options.maximize) {
    maximize = genIcon("resize-full");
    maximize.attr("title", "maximize");
    maximize.css("pointer-events", "auto");
    maximize.appendTo(removeWrapper);
  }

  var removeIcon = genIcon("remove").appendTo(removeWrapper);
  removeIcon.attr("title", "Close Window");
  removeIcon.css("text-shadow", "0px 0px 4px white");
  removeIcon.css("pointer-events", "auto");
  removeIcon.click(function(ev) {
    if (options.close) {
      var cont = options.close(ev, $(this));
      if (cont === false) {
        ev.stopPropagation();
        return false;
      }
    }
    ev.stopPropagation();
    layout.coverlay(overlay);
    return false;
  });

  if (options.hideclose) {
    removeIcon.hide();
  }
  var contentContainer;
  if (!options.noCss) {
    var subOverlay = $("<div>").appendTo(overlay);
    subOverlay.addClass("flexcolumn flex");

    var dcTop = $("<div>").appendTo(subOverlay);
    dcTop.addClass("dragcontrol foreground");
    dcTop.css("width", "auto");
    dcTop.css("min-height", "1.8em");
    dcTop.css("cursor", "pointer");
    if (options.minimize) {
      dcTop.attr("title", "Left click to minimize, right click to remove");
      dcTop.click(function(){
        if (!overlay.attr("_lastDrag") || (Date.now()-Number(overlay.attr("_lastDrag"))) > 500) {
          overlay.attr("_lastDrag", Date.now());
          minimize.click();
        }
      });
    }
    dcTop.contextmenu(function(){
      if (!overlay.attr("_lastDrag") || (Date.now()-Number(overlay.attr("_lastDrag"))) > 500) {
        overlay.attr("_lastDrag", Date.now());
        if(!options.hideclose)
        {
          removeIcon.click();
        }
      }
      return false;
    });

    contentContainer = $("<div>").appendTo(subOverlay);
    contentContainer.addClass("flexrow flex");
    contentContainer.css('max-height', "100%");

    var dcLeft = $("<div>").appendTo(contentContainer);
    dcLeft.addClass("dragcontrol");
    dcLeft.css("min-width", "0px");
    dcLeft.css("cursor", "pointer");
    if (content) {
      contentContainer.append(content.addClass("white"));
      content.css("outline", "none");
    }

    var dcRight = $("<div>").appendTo(contentContainer);
    dcRight.addClass("dragcontrol");
    dcRight.css("min-width", "0px");
    dcRight.css("cursor", "pointer");

    var dcBot = $("<div>").appendTo(subOverlay);
    dcBot.addClass("dragcontrol");
    dcBot.css("width", "auto");
    dcBot.css("min-height", "0px");
    dcBot.css("cursor", "pointer");
  }
  else {
    overlay.append(content);
  }

  if (options.maximize) {
    maximize.css("text-shadow", "0px 0px 4px white");
    maximize.click(function(evt) {
      removeWrapper.css("font-size", "");
      contentContainer.show();
      if ($(this).attr("resized") == "max") {
        removeWrapper.css("opacity", "");
        if (options.minimize) {
          minimize.show();
        }
        overlay.css("border", "");
        overlay.css("border-radius", "");
        contentContainer.find(".application[ui-name='ui_board']").each(function(){
          $(this).removeAttr("noOptions");
        });
        if (!options.noCss) {
          dcTop.css("min-height", "1.8em");
          removeWrapper.removeClass("hardoutline");
        }
        overlay.css("width", overlay.attr("_lastWidth"));
        overlay.css("height", overlay.attr("_lastHeight"));
        var oldX = overlay.attr("_lastX")+"px";
        var oldY = overlay.attr("_lastY")+"px";
        overlay.attr("_lastX", overlay.offset().left);
        overlay.attr("_lastY", overlay.offset().top);
        overlay.css("left", oldX);
        overlay.css("top", oldY);
        maximize.changeIcon("resize-full");
        $(this).removeAttr("resized");
      }
      else {
        setTimeout(function(){removeWrapper.css("opacity", "0.2");}, 50);
        if (options.minimize) {
          minimize.hide();
        }
        overlay.css("border", "none");
        overlay.css("border-radius", "0");
        contentContainer.find(".application[ui-name='ui_board']").each(function(){
          $(this).attr("noOptions", true);
        });
        if (!options.noCss) {
          dcTop.css("min-height", "1.8em");
          removeWrapper.addClass("hardoutline");
        }
        overlay.attr("_lastWidth", overlay.width());
        overlay.attr("_lastHeight", overlay.height());
        overlay.attr("_lastX", overlay.offset().left);
        overlay.attr("_lastY", overlay.offset().top);
        overlay.css("width", "100vw");
        overlay.css("height", "100vh");
        overlay.css("left", 0);
        overlay.css("top", 0);
        overlay.css("max-width", "100vw");
        overlay.css("max-height", "100vh");
        maximize.changeIcon("resize-small");
        $(this).attr("resized", "max");
      }
      $(document).resize();
      evt.stopPropagation();
      return false;
    });
  }
  removeWrapper.appendTo(overlay);

  if (layout.mobile) {
    overlay.css("position", "fixed");
    overlay.css("top", "10vh");
    overlay.css("left", "10vw");
    overlay.css("max-width", "80vw");
    overlay.css("max-height", "80vh");
  }
  else {
    if (options.target) {
      var offsets = options.target.offset();

      /*function recurse(target) {
        if (target.parent() && target.parent().hasClass("ui-popout")) {
          overlay.css("z-index", Number(target.parent().css("z-index"))+1);
        }
        else if (target.parent().length && !target.parent().is("body") && !target.parent().hasClass("ui-dropoption")) {
          recurse(target.parent());
        }
      }
      recurse(options.target); // asisgn z-index*/
      var max = Math.max(util.getMaxZ(".ui-popout"), util.getMaxZ(".main-dock"));
      overlay.css("z-index", max+1);
      overlay.css("position", "fixed");

      var x = offsets.left + options.target.width()/2 - overlay.outerWidth()/2;
      var y = offsets.top + options.target.height()/2 - overlay.outerHeight()/2;

      if (options.align) {
        if (options.align.match("right")) {
          x = offsets.left + options.target.width();
        }
        else if (options.align.match("left")) {
          x = offsets.left - overlay.outerWidth();
        }
        if (options.align.match("top")) {
          y = offsets.top - overlay.outerHeight();
        }
        else if (options.align.match("bottom")) {
          y = offsets.top + options.target.height();
        }
      }
      // keep within screen boundries
      x = x - (Number($("body").scrollLeft()) || 0);
      y = y - (Number($("body").scrollTop()) || 0);
      if (x+overlay.outerWidth() > $(window).outerWidth()) {
        x = x - ((x+overlay.outerWidth())-$(window).outerWidth());
      }
      if (x < 0) {
        x = 0;
      }
      if (y+overlay.outerHeight() > $(window).outerHeight()) {
        y = y - ((y+overlay.outerHeight())-$(window).outerHeight());
      }
      if (y < 0) {
        y = 0;
      }
      overlay.css("left", x);
      overlay.css("top", y);
    }

    setTimeout(function(){
      $(overlay.find("input,textarea")[0]).focus();
      $(overlay.find("input,textarea")[0]).scrollTop(0);
    },0);
  }
  overlay.mousedown(function(){
    var max = Math.max(util.getMaxZ(".ui-popout"), util.getMaxZ(".main-dock"));
    $(this).css("z-index", max+1);
  });
  $(window).resize(function() { overlay.mouseenter(); });
  hook.call("DrawWindow", overlay, options, content);
  return overlay;
}

function ui_calender(available, clickFunc) {
  var days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
  var frame = $("<div>");

  var title = $("<b>Weekly Availablity</b>").appendTo(frame);
  title.addClass("flexmiddle");

  var table = $("<table>").appendTo(frame);
  table.addClass("outline");

  var row = $("<tr>").appendTo(table);

  for (var i in days) {
    var day = days[i];

    var dayBox = $("<td>").appendTo(row);
    dayBox.addClass("outline subtitle");
    dayBox.attr("index", i);
    dayBox.css("width", (100/days.length)+"%");
    dayBox.css("background-color", "rgba(0,0,0,0.2)");
    dayBox.css("padding", "4px");
    dayBox.append($("<b>"+day+"</b>").addClass("flexmiddle"));

    var label = $("<b>").appendTo(dayBox);
    label.addClass("flexmiddle");

    var text = "Unavailable";
    if (available[day]) {
      text = available[day];
      dayBox.css("background-color", "rgba(0,0,0,0)");
    }
    label.text(text);

    if (clickFunc) {
      dayBox.css("cursor", "pointer");
      dayBox.click(function() {
        clickFunc($(this).attr("index"), $(this));
      });
      dayBox.append($("<i>Click to Change</i>").addClass("flexmiddle"));
    }
  }
  return frame;
}

function ui_processLink(link, callback) {
  if (link) {
    var data = link;
    var extensionReg = /\/([^\/]*)\.([^\/]*)$/;
    var matched = data.match(extensionReg);
    var ext;
    if (data.match(".gifv")) {
      data = data.replace(".gifv", ".mp4");
    }
    if (data.match("https://gfycat.com/") && !data.match(".webm")) {
      data = data.replace("https://gfycat.com/", "https://zippy.gfycat.com/") + ".webm";
    }
    if (data.match("imgur") && !data.match("i.imgur")) {
      data = data.replace("imgur", "i.imgur");
      data = data.replace("gallery/", "");
    }

    var extReg = /[^\/]*\.([^\.^\/]*)$/;
    var extMatch = data.match(extReg);
    if (!extMatch) {
      // look for a PNG or JPG
      var img = new Image();
      img.src = data + ".jpg";
      img.onload = function() {callback(link, data + ".jpg");};
      img.onerror = function() {
        callback(link, data + ".png");
      };
    }
    else {
      callback(link, data);
    }
  }
  else {
    callback(null, null);
  }
}

function ui_processMedia(data, options) {
  var id;
  var parent;
  if (options) {
    id = options.id;
    parent = options.parent;
  }

  if (data && (data.match(".webm") || data.match(".mp4") || data.match(".ogg"))) {
    // no audio
    var content = $("<video>");
    content.attr('height', "auto");
    if (parent) {
      content.appendTo(parent);
      content[0].onloadeddata = function() {
        if (parent.outerWidth() < parent.outerHeight()) {
          content.attr('width', parent.outerWidth());
          content.attr('height', "auto");
        }
        else {
          content.attr('height', parent.outerHeight());
          content.attr('width', "auto");
        }
      }
    }

    content.attr("muted", true);
    content.attr("autoplay", true);
    content.attr('src', data);
    content.attr("id", id);

    if (options && options.disabled) {
      content.css("pointer-events", "none");
      content.css("-webkit-touch-callout", "none");
      content.css("-webkit-user-select", "none");
      content.css("-khtml-user-select", "none");
      content.css("-moz-user-select", "none");
      content.css("-ms-user-select", "none");
      content.css("user-select", "none");
      content.attr("autoplay", false);
    }

    return content;
  }

  var content = $("<img>");
  if (parent) {
    content.appendTo(parent)
    content.on("load", function() {
      content.css('width', parent.outerWidth());
    });
  }

  content.attr('src', data);
  content.attr("id", id);
  return content;
}

function ui_prompt(options) {
  var inputs = {};

  var content = $("<div>");
  content.addClass("spadding");
  for (var title in options.inputs) {
    var inputDiv = $("<div>").appendTo(content);
    inputDiv.append("<b>"+title+"</b>");
    var input;
    if (options.inputs[title] instanceof Object && !options.inputs[title].length) {
      var newInput = duplicate(options.inputs[title]);
      newInput.parent = inputDiv;
      newInput.style = newInput.style || {"display" : "block", width : "100%"}
      input = genInput(newInput);
    }
    else if (options.inputs[title] instanceof Object && options.inputs[title].length) {
      input = options.inputs[title];
      options.inputs[title].appendTo(inputDiv);
    }
    else {
      input = genInput({
        parent : inputDiv,
        value : options.inputs[title],
        style : {"display" : "block", width : "100%"}
      });
    }
    /*if (options.inputs[title] instanceof Object) {
      var newInput = JSON.parse(JSON.stringify(options.inputs[title]));
      newInput.parent = content;
      newInput.style = newInput.style || {"display" : "block"}
      var input = genInput(newInput);
    }
    else {
      var input = genInput({
        parent : content,
        value : options.inputs[title],
        style : {"display" : "block"}
      });
    }*/

    inputs[title] = input;
  }

  var confirm = $("<button>").appendTo(content);
  confirm.addClass("fit-x");
  confirm.append(options.confirm || "Confirm");
  confirm.click(function(ev){
    options.click(ev, inputs);
    layout.coverlay((options.id || "prompt-popout"));
  });

  var popout = ui_popOut({
    target : options.target || $("body"),
    id : (options.id || "prompt-popout"),
    style : (options.style || {}),
    align : options.align,
    close : options.close,
    noCss : options.noCss,
    hideclose : options.hideclose,
    prompt : (options.prompt == null)?(true):(options.prompt)
  }, content);
}

function ui_modified(options, content) {
  var statUI = $("<div>");
  if (options.parent) {
    statUI.appendTo(options.parent);
  }

  statUI.addClass("ui-stat outline smooth");
  var statUITitle = $("<div>").appendTo(statUI);
  statUITitle.addClass("flexmiddle");

  if (options.title) {
    statUITitle.append("<b>"+options.title+"</b>");
  }
  if (options.modify) {
    var plus = genIcon("plus");
    plus.addClass("subtitle");
    plus.addClass("create");
    plus.attr("title", "Add a modifier");
    plus.appendTo(statUITitle);
    plus.click(function(){
      var popOut = ui_prompt({
        target : statUI,
        id : "stat-mod-add",
        inputs : {
          "Modifier Name" : {},
          "Value" : {
            value : 5,
            type : "number",
            step : 5,
          },
        },
        click : function(ev, inputs) {
          if (options.modify) {
            options.modify(ev, inputs, options);
          }
        }
      });
    });
  }

  if (content) {
    statUI.append(content);
  }

  if ((options.value && options.value.modifiers) || options.diceable || options.total) {
    var statTotal = $("<div>").appendTo(statUI);
    statTotal.addClass("flexcolumn flexmiddle");

    var total = $("<b>").appendTo(statTotal);
    if (options.diceable) {
      total.addClass("fit-x flexmiddle hover2 outlinebottom");
      total.click(function(ev) {
        var context = sync.defaultContext();
        merge(context, options.context);
        _diceable(ev, $(this), options.diceable, context);
      });
    }
    if (options.totalClick) {
      total.addClass("fit-x flexmiddle hover2 outlinebottom");
      total.click(function(ev) {
        options.totalClick(ev, $(this), options);
      });
    }

    if (options.total) {
      total.text(options.total);
    }
    else {
      total.text(sync.val(options.value));
    }
  }

  var statModifiers = $("<div>").appendTo(statUI);
  statModifiers.addClass("flexcolumn flexmiddle");
  if (options.reveal) {
    var frame = $("<div>").appendTo(statModifiers);
    frame.addClass("flexcolumn flexmiddle subtitle");

    for (var key in options.value.modifiers) {
      var statMod = $("<a>").appendTo(frame);
      statMod.attr("index", key);
      var val = options.value.modifiers[key];
      if (val > 0) {
        val = "+" + options.value.modifiers[key];
      }
      statMod.append(key + " : " + val);
      statMod.click(function(e) {
        if (options.click) {
          options.click(e, $(this), options);
        }
      });
    }
  }
  else {
    statUI.hover(function(){
      statModifiers.empty();
      if (options.hover) {
        options.hover($(this), options);
      }
      else {
        var frame = $("<div>").appendTo(statModifiers);
        frame.addClass("flexcolumn flexmiddle subtitle");

        for (var key in options.value.modifiers) {
          var statMod = $("<a>").appendTo(frame);
          statMod.attr("index", key);
          var val = options.value.modifiers[key];
          if (val > 0) {
            val = "+" + options.value.modifiers[key];
          }
          statMod.append(key + " : " + val);
          statMod.click(function(e) {
            if (options.click) {
              options.click(e, $(this), options);
            }
          });
        }
      }
    },
    function() {
      statModifiers.empty();
    });
  }

  return statUI;
}

function ui_controlForm(options) {
  var inputs = {};
  var content = $("<div>");
  content.addClass("flexcolumn outline smooth");
  for (var title in options.inputs) {
    var inputDiv = $("<div>").appendTo(content);
    inputDiv.addClass("flexrow flexbetween subtitle outlinebottom");
    if (title.trim()) {
      var label = $("<text class='flex spadding'>"+title+"</text>").appendTo(inputDiv);
      if (options.lblStyle instanceof Object) {
        for (var key in options.lblStyle) {
          label.css(key, options.lblStyle[key]);
        }
      }
      else {
        label.attr("style", options.lblStyle);
      }
    }
    var input;
    if (options.inputs[title] instanceof Object && !options.inputs[title].length) {
      var newInput = duplicate(options.inputs[title]);
      newInput.parent = inputDiv;
      input = genInput(newInput);
    }
    else if (options.inputs[title] instanceof Object && options.inputs[title].length) {
      input = options.inputs[title];
      options.inputs[title].appendTo(inputDiv);
    }
    else {
      input = genInput({
        parent : inputDiv,
        value : options.inputs[title],
      });
    }

    inputs[title] = input;
  }
  if (options.click) {
    var confirm = $("<button>").appendTo(content);
    confirm.addClass("fit-x");
    confirm.css("color", "#333");
    confirm.css("text-shadow", "none");
    confirm.append(options.confirm || "Confirm");
    confirm.click(function(ev){
      options.click(ev, inputs, $(this));
      layout.coverlay((options.id || "prompt-popout"));
    });
  }

  return content;
}

function ui_controlHint(str, notes) {
  var controlContainer = $("<div>");
  controlContainer.addClass("flexcolumn");

  var controlRow = $("<div>").appendTo(controlContainer);
  controlRow.addClass("flexrow lightoutline");

  if (notes) {
    var div = $("<div>").appendTo(controlRow);
    div.addClass("flexmiddle");
    div.css("width", "100px");
    div.append("<text>"+notes+"</text>");
  }

  var controls = str.split(":");
  for (var i in controls) {
    var controlDiv = $("<div>").appendTo(controlRow);
    controlDiv.addClass("flexrow flex");

    var combos = controls[i].split("+");
    for (var j in combos) {
      var control = combos[j];
      var icon = $("<div>").appendTo(controlDiv);
      icon.css("background-size", "contain");
      icon.css("background-repeat", "no-repeat");
      icon.css("background-position", "center");
      if (control == "mright") {
        icon.css("background-image", "url('/content/mouse_right.png')");
        icon.css("width", "32px");
        icon.css("height", "32px");
      }
      else if (control == "mouse") {
        icon.css("background-image", "url('/content/mouse.png')");
        icon.css("width", "32px");
        icon.css("height", "32px");
      }
      else if (control == "middle") {
        icon.css("background-image", "url('/content/mouse_middle.png')");
        icon.css("width", "32px");
        icon.css("height", "32px");
      }
      else if (control == "mleft") {
        icon.css("background-image", "url('/content/mouse_left.png')");
        icon.css("width", "32px");
        icon.css("height", "32px");
      }
      else {
        icon.css("background-image", "url('/content/button.png')");
        icon.css("width", "48px");
        icon.css("height", "32px");
        icon.addClass("flexmiddle");
        icon.css("font-weight", "bolder");
        icon.css("color", "black");
        icon.text(control);
      }
      if (j < combos.length-1) {
        var icon = $("<div>").appendTo(controlDiv);
        icon.addClass("flexmiddle");
        var icon = $("<b>").appendTo(icon);
        icon.css("color", "#333333");
        icon.text("+");
      }
    }
  }
  return controlContainer;
}

/*
var nav = ui_tabs([{t: "D3"}, {t: "D4"}, {t: "D5"}, {t: "D6"}, {t: "D8"}, {t: "D12"}, {t: "D20"}, {t: "D100"}, {t: "Custom"}]);
function clear() {
  for (var v in nav.tabs) {
    nav.tabs[v].css("color", "#9d9d9d");
  }
}

for (var v in nav.tabs) {
  var tab = nav.tabs[v];
  tab.click(function() {
    clear();
    $(this).css("color", "white");
    console.log($(this).attr("tab-index"));
  });
}
*/

var layout = {};

layout.overlay = function(options) {
  var overlay = $("<div>").appendTo($("body"));

  if ($("#"+options.id)) {
    $("#"+options.id).remove();
  }

  for (var index in options) {
    if (index == "style") {
      for (var cssIndex in options[index]) {
        overlay.css(cssIndex, options[index][cssIndex]);
      }
    }
    else if (index != "target") {
      overlay.attr(index, options[index]);
    }
  }

  if (options.target) {
    var offsets = options.target.offset();
    var width = options.target.outerWidth();
    var height = options.target.outerHeight();

    overlay.css("width", width);
    overlay.css("height", height);

    var max = util.getMaxZ(options.target);
    overlay.css("z-index", max+1);

    overlay.css("position", "absolute");
    overlay.css("top", offsets.top);
    overlay.css("left", offsets.left);
    overlay.css("bottom", offsets.bottom);
    overlay.css("right", offsets.right);
  }

  overlay.css("font-size", "2em");

  return overlay;
}

layout.coverlay = function(id, fadeOut) {
  function recurse(elem, fadeOut) {
    elem.css("pointer-events", "none");
    elem.children().each(function() {
      recurse($(this));
    });
    if (elem.attr("_children")) {
      $("[id="+elem.attr("_children")+"]").each(function(){
        recurse($(this));
      });
      if (fadeOut) {
        $("[id="+elem.attr("_children")+"]").fadeTo(fadeOut, 0);
        setTimeout(function(){
          $("[id="+elem.attr("_children")+"]").each(function(){
            $(this).remove();
          });
        }, fadeOut);
      }
      else {
        $("[id="+elem.attr("_children")+"]").each(function(){
          $(this).remove();
        });
      }
    }
  }

  var overlay;
  if (id instanceof Object) {
    overlay = id;
  }
  else {
    overlay = $("#"+id);
  }
  if (fadeOut) {
    recurse(overlay, fadeOut);
    overlay.fadeOut(fadeOut, 0);
    setTimeout(function(){overlay.remove()}, fadeOut);
  }
  else {
    recurse(overlay);
    overlay.remove();
  }
}

layout.dropout = function(target, options) {
  var overlay = $("<div>").appendTo($("body"));
  overlay.css("background-color", "rgba(0,0,0,0.5)");
  overlay.css("border", "1px black solid");
  if (options) {
    if ($("#"+options.id)) {
      $("#"+options.id).remove();
    }
    for (var index in options) {
      if (index == "style") {
        for (var cssIndex in options[index]) {
          overlay.css(cssIndex, options[index][cssIndex]);
        }
      }
      else {
        overlay.attr(index, options[index]);
      }
    }
  }

  if (target) {
    var offsets = target.offset();

    overlay.css("z-index", Number(target.css("z-index"))+1);
    overlay.css("position", "absolute");

    overlay.css("top", offsets.top+1);
    overlay.css("left", offsets.left+2);
    overlay.css("bottom", offsets.bottom);
    overlay.css("right", offsets.right);
  }

  return overlay;
}

layout.page = function(options, content) {
  var frame = $("<div>").appendTo("body");
  frame.addClass("viewPort");
  //frame.css("z-index", 59);
  if (options) {
    if ($("#"+options.id)) {
      $("#"+options.id).remove();
      frame.attr("id", options.id);
    }
    for (var cssIndex in options.style) {
      frame.css(cssIndex, options.style[cssIndex]);
    }
  }

  frame.css("position", "absolute");
  frame.css("top", "0");
  frame.css("left", "0");
  frame.css("right", "0");
  frame.css("bottom", "0");
  frame.css("pointer-events", "none");
  frame.css("background-color", "rgba(0,0,0,0)");
  frame.addClass("flexmiddle");

  var div = $("<div>").appendTo(frame);
  div.addClass("popup ui-popout");
  div.css("width", options.width || "30%");
  div.css("margin", "auto");
  div.css("pointer-events", "auto");
  div.css("max-height", "90vh");
  div.css("max-width", "80vw");
  div.css("z-index", 100);

  if (!options.hideclose) {
    var removeWrapper = $("<b>").appendTo(div);
    removeWrapper.css("position", "absolute");
    removeWrapper.css("top", "0");
    removeWrapper.css("right", "0");
    removeWrapper.css("width", "auto");
    removeWrapper.css("pointer-events", "none");

    var removeIcon = genIcon("remove").appendTo(removeWrapper);
    removeIcon.css("text-shadow", "0px 0px 4px white");
    removeIcon.css("pointer-events", "auto");
    removeIcon.click(function(ev) {
      if (options.close) {
        options.close(ev, div);
      }
      ev.stopPropagation();
      ev.preventDefault();
      layout.coverlay(frame, 500);
      return false;
    });
  }

  if (options) {
    if (options.title) {
      div.append("<div style='text-align:center;'><text style='font-size:2em; -webkit-text-stroke-width: 2px;'>"+options.title+"</text></div>");
    }
    if (options.prompt) {
      div.append("<div style='text-align:center; margin-bottom: 1em;'><b>"+options.prompt+"</b></div>");
    }
    if (options.blur) {
      frame.css("background-color", "rgba(0,0,0,"+options.blur+")");
      frame.css("pointer-events", "auto");
      frame.hide();
      frame.fadeIn();
    }
    if (options.align) {
      if (options.align.match("right")) {
        div.css("margin-left", "auto");
        div.css("margin-right", "1%");
      }
      else if (options.align.match("left")) {
        div.css("margin-right", "auto");
        div.css("margin-left", "1%");
      }
      if (options.align.match("top")) {
        div.css("margin-top", "1%");
        div.css("margin-bottom", "auto");
      }
      else if (options.align.match("bottom")) {
        div.css("margin-top", "auto");
        div.css("margin-bottom", "1%");
      }
    }
  }
  if (content) {
    content.appendTo(div);
  }
  setTimeout(function(){
    $(frame.find("input")[0]).focus();
  },0);
  return div;
}

layout.newData = function(){
  var dataContainer = $("<div>");
  dataContainer.addClass("layout-row-data flexcolumn");
  dataContainer.css("min-width", "200px");
  dataContainer.css("height", "100%");
  return dataContainer;
}

layout.newRow = function(createData) {
  var table = $("<div>");
  table.addClass("layout-table flexrow fit-x");
  table.css("min-height", "100px");

  if (createData) {
    var item = layout.newData().appendTo(table);
  }

  return table;
}

layout.hideControls = function() {
  $(".overlay-table-control").each(function() {
    layout.coverlay($(this).attr("id"), 2.0);
  });
}

layout.removeControls = function() {
  $(".overlay-table-control").each(function() {
    $(this).remove();
  });
}

layout.save = function(saveName) {
  function search(obj, array) {
    var result = array || [];
    obj.children().each(function() {
      if ($(this).hasClass("layout-row-data") || $(this).hasClass("layout-table") || $(this).hasClass("layout-list")) {
        var res = {
          w: Math.round(($(this).width()/obj.width())*100),
          h: Math.round(($(this).height()/obj.height())*100),
          class: $(this).attr("class"),
          a: []
        }
        if ($(this).hasClass("layout-list")) {
          //res.w = "100";
          console.log(res.w);
        }
        $(this).children().each(function() {
          if ($(this).hasClass("application")) {
            res.app = $(this).attr("ui-name");
          }
        });
        search($(this), res.a);
        if (res.a.length == 0) {
          delete res.a;
        }
        result.push(res);
      }
      else if (!$(this).hasClass("application")){
        obj.children().each(function() {
          result = search($(this), array);
        });
      }
    });
    return result;
  }
  var table = search($("#viewPort"), table);
  if (saveName && saveName.valid()) {
    setCookie("table_save-" + (saveName), JSON.stringify(table), 900000000);
  }
  else {
    setCookie("table_save", JSON.stringify(table));
  }
}

layout.load = function() {
  $("#viewPort").empty();
  $(".layoutHide").remove();
  function build(array, focus) {
    for (var index in array) {
      var data = array[index];
      if (data.class.match("layout-table")) {
        var table = layout.newRow().appendTo(focus);
        table.css("height", (data.h || 100) + "%");
        build(data.a, table);
      }
      else if (data.class.match("layout-row-data") || data.class.match("layout-list")) {
        var td = layout.newData().appendTo(focus);
        if (data.class.match("layout-list")) {
          td.removeClass("layout-row-data");
          td.addClass("layout-list");
          td.css("width", (data.w || 100) + "%");
        }
        else {
          td.css("width", (data.w || 100) + "%");
        }
        build(data.a, td);
        if (data.app) {
          var newApp = sync.newApp(data.app);
          newApp.css("flex", "1"); // firefox specific fix
          newApp.appendTo(td);
          // render it all
          newApp.append(sync.render(data.app)(null, newApp));
        }
      }
    }
  }
  //var layoutStorage = localStorage.getItem("layouts")
  if (getCookie("table_save") && getCookie("table_save").trim() && getCookie("table_save") != "none") {
    build(JSON.parse(getCookie("table_save")), $("#viewPort"));
  }
  else {
    setCookie("table_save", '[{"w":100,"h":100,"class":"layout-table","a":[{"w":100,"h":100,"class":"layout-row-data","app":"ui_primaryView"}]}]', 90000000);
    layout.load();
  }
}

layout.showControls = function() {
  var counter = 1;
  $(".layout-table").each(function() {
    var rowOverlay = layout.overlay({target: $(this), id: "overlay-table-control"+counter});
    rowOverlay.addClass("overlay-table-control");
    rowOverlay.css("position", "fixed");
    rowOverlay.css("overflow", "hidden");
    rowOverlay.css("background-color", "rgba(0,"+counter * 8+",0,0.5)");
    $(this).attr("id", "layout-row-"+counter);
    rowOverlay.attr("target", "layout-row-"+counter);

    var container = $("<div>").appendTo(rowOverlay);
    container.addClass("fit-xy flexrow");
    container.css("position", "relative");
    container.css("color", "#ff8a42");
    if (counter == 1) {
      var icon = genIcon("plus").appendTo(container);
      icon.css("position", "absolute");
      icon.css("top", "10%");
      icon.css("color", "white");
      icon.attr("target", rowOverlay.attr("target"));
      icon.attr("title", "New Row");
      icon.click(function() {
        var target = $("#"+$(this).attr("target"));
        var td = layout.newRow();
        td.append(layout.newData());
        target.after(td);

        layout.rebuildControls();
      });
    }

    var icon = genIcon("plus").appendTo(container);
    icon.css("position", "absolute");
    icon.css("bottom", "10%");
    icon.css("color", "white");
    icon.attr("target", rowOverlay.attr("target"));
    icon.attr("title", "New Row");
    icon.click(function() {
      var target = $("#"+$(this).attr("target"));
      var td = layout.newRow();
      td.append(layout.newData());
      target.after(td);

      layout.rebuildControls();
    });

    var counterID = "overlay-table-control"+counter+"-v";

    counter = counter + 1;

    $(this).children().each(function() {
      var subCountID = "overlay-table-control"+counter+"-h";

      var overlay = layout.newData().appendTo(container);
      overlay.addClass("flexrow flexmiddle hardoutline focus");
      overlay.css("border", "1px solid #ff8a42");
      overlay.css("position", "relative");
      overlay.css("pointer-events", "none");
      overlay.css("flex", $(this).css("flex"));
      overlay.css("width", $(this).width());
      if (!$(this).hasClass("layout-row-data")) {return}
      overlay.attr("id", "overlay-table-control"+counter);
      $(this).attr("id", "layout-data-"+counter);
      overlay.attr("target", "layout-data-"+counter);

      var ctrls = $("<div>").appendTo(overlay);
      ctrls.addClass("flexcolumn flexmiddle alttext");
      ctrls.css("pointer-events", "none");
      ctrls.css("width", "80%");
      ctrls.css("height", "80%");
      ctrls.css("color", "#ff8a42");
    /*var icon = genIcon("plus").appendTo(ctrls);
      icon.css("pointer-events", "auto");
      icon.attr("target", overlay.attr("target"));
      icon.click(function() {
        var target = $("#"+$(this).attr("target"));
        var td = layout.newRow();
        td.append(layout.newData());
        target.parent().before(td);

        layout.rebuildControls();
      });*/

      var middle = $("<div>").appendTo(ctrls);
      middle.addClass("flexrow flexaround fit-x");
      middle.css("pointer-events", "none");

      var icon = genIcon("plus").appendTo(middle);
      icon.css("pointer-events", "auto");
      icon.attr("target", overlay.attr("target"));
      icon.click(function() {
        var target = $("#"+$(this).attr("target"));
        var td = layout.newData();
        target.parent().prepend(td);

        layout.rebuildControls();
      });
      var isViewPort = ($(this).parent().parent().attr("id") == "viewPort");
      if ((isViewPort && ($("#viewPort").children().length > 1 || ($(this).parent().children().length > 1))) || (!isViewPort)) {
        var icon = genIcon("remove").appendTo(middle);
        icon.addClass("destroy");
        icon.css("pointer-events", "auto");
        icon.attr("target", overlay.attr("target"));
        icon.click(function() {
          var target = $("#"+$(this).attr("target"));
          if (target.parent().children().length > 1) {
            target.remove();
          }
          else if (target.parent().children().length == 1) {
            if (target.parent().parent().children().length <= 1 && target.parent().parent().attr("id") != "viewPort") {
              target.parent().parent().remove();
            }
            else {
              target.parent().remove();
            }
          }
          layout.rebuildControls();
        });
      }

      var icon = genIcon("th", "APP").appendTo(middle);
      icon.css("pointer-events", "auto");
      icon.attr("target", overlay.attr("target"));
      icon.click(function() {
        //TODO :  FIX THIS SHIT MAKE IT BETTEER HAVE TREE
        var buildList = [];
        //options
        var target = $("#"+$(this).attr("target"));
        function recurse(data, source) {
          for (var index in data) {
            if (index == "_ui") {
              for (var ind in data[index]) {
                data[index][ind].click = function(ev, self) {
                  target.empty();
                  var app = sync.newApp(self.attr("ui-name")).appendTo(target);
                  sync.render(self.attr("ui-name"))(null, app).appendTo(app);
                  layout.coverlay("layout-control-popup");
                }
                source.push(data[index][ind]);
              }
            }
            else {
              var addObj = {name : index, submenu : []};
              recurse(data[index], addObj.submenu);
              source.push(addObj);
            }
          }
        }

        recurse(game.components, buildList);
        var dropMenu = ui_dropMenu($(this),
          buildList,
          {
            id: "layout-control-popup",
            style: {
            "background-color": "rgb(255, 255, 255)",
          }
        });
      });

      var icon = genIcon("plus").appendTo(middle);
      icon.css("pointer-events", "auto");
      icon.attr("target", overlay.attr("target"));
      icon.click(function() {
        var target = $("#"+$(this).attr("target"));
        var td = layout.newData();
        target.after(td);

        layout.rebuildControls();
      });

      if (isViewPort && (($(this).parent().children().length > 1))) {
        var icon = genIcon("plus").appendTo(ctrls);
        icon.addClass("create");
        icon.css("pointer-events", "auto");
        icon.attr("target", overlay.attr("target"));
        icon.click(function() {
          var target = $("#"+$(this).attr("target"));
          var td = layout.newRow();
          td.append(layout.newData().addClass("fit-x"));

          target.removeClass("layout-row-data");
          target.addClass("layout-list");
          target.empty();
          target.append(td);

          layout.rebuildControls();
        });
      }
      console.log($(this).css("flex"));
      if ($(this).css("flex") == "1 1 0%") {
        var isfilling = $("<b class='subtitle dull'>Filling Empty Space</b>").appendTo(ctrls);
      }
      var icon = genIcon({raw : true, icon : "resize-horizontal"});
      icon.appendTo(overlay);
      icon.addClass("flexmiddle ui-resizeable ui-resizeable-handle ui-resizable-e");
      icon.css("color", "white");
      icon.css("pointer-events", "auto");
      icon.attr("id", subCountID);

      var total = $(this).parent().width();
      $(this).parent().children().each(function() {
        total = total - $(this).width();
      });
      total = total + $(this).width();
      //if ($(this).parent().children().length > 1) {

      //}
      overlay.resizable({
        ghost : true,
        minHeight : 100,
        minWidth : 100,
        maxWidth : total,
        handles : {
          'e': "#"+subCountID,
        },
        stop : function(ev, ui) {
          var target = $("#"+$(ui.element).attr("target"));

          var total = target.parent().width();
          target.parent().children().each(function() {
            total = total - $(this).width();
          });
          total = total + target.width();

          target.css("flex", "");
          if (ui.size.width >= total) {
            target.css("flex", "1");
          }
          else {
            target.css("width", Math.floor((Math.min(ui.size.width, total)/target.parent().width())*100)+"%");
          }

          for (var key in _syncList) {
            _syncList[key].update();
          }

          layout.rebuildControls();
        }
      });
      counter = counter + 1;
    });

    var icon = genIcon({raw : true, icon : "resize-vertical"});
    icon.appendTo(rowOverlay);
    icon.addClass("flexmiddle ui-resizeable ui-resizeable-handle ui-resizable-s");
    icon.css("color", "white");
    icon.css("pointer-events", "auto");
    icon.css("font-size", "2em");
    icon.attr("id", counterID);

    var total = $(this).parent().height();
    $(this).parent().children().each(function() {
      total = total - $(this).height();
    });
    total = total + $(this).height();

    rowOverlay.resizable({
      ghost : true,
      minHeight : 100,
      maxHeight : total,
      minWidth : 100,
      maxWidth : $(this).parent().width(),
      handles : {
        's': "#"+counterID,
      },
      stop : function(ev, ui) {
        var target = $("#"+$(ui.element).attr("target"));

        var total = target.parent().height();
        target.parent().children().each(function() {
          total = total - $(this).height();
        });
        total = total + target.height();

        target.css("flex", "");
        if (ui.size.height >= total) {
          target.css("flex", "1");
        }
        else {
          target.css("height", Math.floor((Math.min(ui.size.height, total)/target.parent().height())*100)+"%");
        }

        for (var key in _syncList) {
          _syncList[key].update();
        }
        layout.rebuildControls();
      }
    });
  });
}

layout.rebuildControls = function() {
  layout.removeControls();
  layout.showControls();
}

layout.anchorInit = function() {
  $(".main-dock").remove();
  $("#bottombar").show();
  $("#bottombar").empty();

  var layoutControls = $("<div>").appendTo($("#bottombar"));
  layoutControls.addClass("flexrow flexmiddle dull");

  var reactions = genIcon("menu-hamburger").appendTo(layoutControls);
  reactions.addClass("lrpadding");
  reactions.attr("id", "splash-button");
  reactions.css("font-size", "2.0em");
  reactions.click(function(){
    openSplash(true);
  });

  var layoutCtrls = $("<div>").appendTo(layoutControls);
  layoutCtrls.addClass("flexcolumn");

  var layoutCtrl = $("<div>").appendTo(layoutCtrls);
  layoutCtrl.addClass("flexrow fit-x");

  var cmbt = $("<div>").appendTo(layoutCtrls);
  cmbt.attr("id", "navControls");

  var reactions = genIcon("cog").appendTo(layoutCtrl);//$("<div>").appendTo($("#bottombar"));
  reactions.attr("title", "Options");
  reactions.click(function(){
    if ($("#game-options-popout").length) {
      layout.coverlay("game-options-popout");
      return;
    }

    var content = $("<div>");
    content.addClass("flexcolumn padding");

    var community = genIcon("user", "Community", true).appendTo(content);
    community.attr("href", "https://www.reddit.com/r/gamemasterapp");
    community.attr("target", "_blank");

    var feedback = genIcon("info-sign", "Feedback", true).appendTo(content);

    var news = genIcon("bullhorn", "News", true).appendTo(content);

    var wiki = genIcon("book", "Wiki", true).appendTo(content);
    wiki.attr("href", "http://wiki.gmforge.io");
    wiki.attr("target", "_blank");

    var hotkeyCtrl = $("<div>").appendTo(content);
    hotkeyCtrl.addClass("spadding");

    var hotkeyCtrl = $("<div>").appendTo(content);
    hotkeyCtrl.addClass("flexcolumn");

    var hotKeys = genIcon("link", "Show HotKey List", true).appendTo(hotkeyCtrl);
    hotKeys.attr("title", "Show HotKey List");
    hotKeys.click(function(){
      toggleHotKeysDisplay();
    });

    var floatingApp = genIcon("plus", "Temporary App", true).appendTo(content);
    floatingApp.attr("title", "Temporary App");
    floatingApp.click(function() {
      var buildList = [];
      //options
      function recurse(data, source) {
        for (var index in data) {
          if (index == "_ui") {
            for (var ind in data[index]) {
              data[index][ind].click = function(ev, self) {
                var content = sync.newApp(self.attr("ui-name"), null, {});

                var popout = ui_popOut({
                  title : self.attr("ui-name"),
                  target : floatingApp,
                  align : "bottom",
                  minimize : true,
                  maximize : true,
                  dragThickness : "0.5em",
                  resizable : true,
                  style : {"max-width" : "none"},
                }, content);
                popout.css("padding", "0px");
                popout.addClass("floating-app");
              }
              source.push(data[index][ind]);
            }
          }
          else {
            var addObj = {name : index, submenu : []};
            recurse(data[index], addObj.submenu);
            source.push(addObj);
          }
        }
      }

      recurse(game.components, buildList);
      var dropMenu = ui_dropMenu($(this), buildList, {id: "layout-control-popup"}).css("z-index", "100000000000");
    });

    var gameOptCtrl = $("<div>").appendTo(content);
    gameOptCtrl.addClass("flexcolumn");

    var label = genIcon("log-in", "Game Invite", true).appendTo(gameOptCtrl);
    label.css("pointer-events", "auto");
    label.click(function(){
      var input = genInput({
        parent : $(this),
        id : "copy-url",
        value : window.location.href,
      });

      if (game.config.data.password) {
        input.val(encodeURI(input.val()+"?password="+game.config.data.password));
      }
      if (getCookie("ExternalIP")) {
        input.val(getCookie("ExternalIP")+":"+getCookie("PublicPort")+"/join");
      }
      input.focus();
      input.get(0).setSelectionRange(0, input.val().length);

      document.execCommand("copy");
      input.remove();
      sendAlert({text : "Invitation Copied!"});
    });



    /*var gameOptions = genIcon("wrench", "Game Options", true).appendTo(gameOptCtrl);
    gameOptions.attr("title", "Game Options");
    gameOptions.click(function() {
      if (getCookie("UserID") == game.owner) {
        var frame = layout.page({title: "Game Configuration", prompt : "Change information on how this server", blur: 0.5, id : "gameOptions", width : "50%"});

        var newApp = sync.newApp("ui_gameCtrl", game.config);
        newApp.appendTo(frame);
      }
      else if (hasSecurity(getCookie("UserID"), "Trusted Player")){
        var frame = layout.page({title: "Assistant Master", prompt : "what do you want to do", blur: 0.5, id: "save-as-session-prompt"});

        var buttonDiv = $("<div>").appendTo(frame);
        buttonDiv.addClass("flexaround");

        var yes = $("<button>").appendTo(buttonDiv);
        yes.append("Give me Anytime Access to this Game");
        yes.click(function(){
          runCommand("grantAccess");
          layout.coverlay("save-as-session-prompt");
        });

        var no = $("<button>").appendTo(buttonDiv);
        no.append("Continue to Game Controls");
        no.click(function(){
          var frame = layout.page({title: "Game Configuration", prompt : "Change information on how this server", blur: 0.5, id : "gameOptions", width : "50%"});

          var newApp = sync.newApp("ui_gameCtrl", game.config);
          newApp.appendTo(frame);
          layout.coverlay("save-as-session-prompt");
        });
      }
      layout.coverlay("game-options-popout");
    });
    */

    var reactionsCtrl = $("<div>").appendTo(content);
    reactionsCtrl.addClass("flexcolumn");

    var reactions = genIcon("comment", "Reactions Enabled", true);
    if (getCookie("disableReactions") == "true") {
      reactions = genIcon("comment", "Reactions Disabled", true);
      reactions.css("color", "rgb(170, 130, 130)");
    }
    reactions.appendTo(reactionsCtrl);
    reactions.click(function() {
      if (getCookie("disableReactions") == "true") {
        setCookie("disableReactions", "");
      }
      else {
        setCookie("disableReactions", "true");
      }
      layout.coverlay("game-options-popout");
    });

    var alertsCtrl = $("<div>").appendTo(content);
    alertsCtrl.addClass("flexcolumn");

    var alerts = genIcon("bell", "Alerts Enabled", true);
    if (getCookie("disableAlerts") == "true") {
      alerts = genIcon("bell", "Alerts Disabled", true);
      alerts.css("color", "rgb(170, 130, 130)");
    }
    alerts.appendTo(alertsCtrl);
    alerts.click(function() {
      if (getCookie("disableAlerts") == "true") {
        setCookie("disableAlerts", "");
      }
      else {
        setCookie("disableAlerts", "true");
      }
      layout.coverlay("game-options-popout");
    });

    var alerts = genIcon("film", "Media Enabled", true);
    if (mediaPlayer.disabled) {
      alerts = genIcon("film", "Media Disabled", true);
      alerts.css("color", "rgb(170, 130, 130)");
    }
    alerts.appendTo(alertsCtrl);
    alerts.click(function() {
      if (mediaPlayer.disabled) {
        delete mediaPlayer.disabled;
      }
      else {
        mediaPlayer.disabled = true
      }
      layout.coverlay("game-options-popout");
    });

    var popout = ui_popOut({
      target : $(this),
      id : "game-options-popout",
      align : "top",
    }, content);
    popout.removeClass("boxshadow");
    var max = util.getMaxZ(".ui-popout");
    popout.css("z-index", max+1);
  });


  var layoutControls = genIcon("th-large").appendTo(layoutCtrl);
  layoutControls.addClass("lrpadding");
  layoutControls.attr("title", "Change screen layout");
  layoutControls.click(function(){
    var cookies = getCookies();
    var choices = [];
    for (var key in cookies) {
      if (key.match("table_save-") && getCookie(key.trim()) && getCookie(key.trim()) != "") {
        choices.push({
          name : key.replace("table_save-", ""),
          attr : {key : key},
          submenu : [
            {
              name : "DELETE",
              click : function(){
                setCookie($(this).attr("key").trim(), "", 10);
                layout.coverlay("add-hot-app");
                $(this).parent().remove();
                ev.stopPropagation();
                ev.preventDefault();
              }
            }
          ],
          click : function(ev, ui){
            setCookie("table_save", getCookie(ui.attr("key").trim()));

            layout.load();
            layout.coverlay("add-hot-app");
          }
        });
      }
    }

    var layouts = [
      {
        name : "Map Only",
        icon : "globe",
        click : function(){
          setCookie("table_save", '[{"w":100,"h":100,"class":"layout-table","a":[{"w":100,"h":100,"class":"layout-row-data","app":"ui_displayManager"}]}]');

          layout.load();
        }
      },
      {
        name : "Tabletop Layout",
        icon : "th-large",
        click : function(){
          setCookie("table_save", '[{"w":100,"h":100,"class":"layout-table","a":[{"w":77,"h":100,"class":"layout-row-data","app":"ui_displayManager"},{"w":23,"h":100,"class":"layout-row-data","app":"ui_textBox"}]}]');

          layout.load();
        }
      },
      {
        name : "World Editor",
        icon : "globe",
        click : function(){
          setCookie("table_save", '[{"w":100,"h":100,"class":"layout-table flexrow fit-x","a":[{"w":77,"h":100,"class":"layout-row-data flexcolumn","app":"ui_displayManager"},{"w":23,"h":100,"class":"flexcolumn layout-list","a":[{"w":100,"h":75,"class":"layout-table flexrow fit-x","a":[{"w":100,"h":100,"class":"layout-row-data flexcolumn","app":"ui_boardListener"}]},{"w":100,"h":25,"class":"layout-table flexrow fit-x","a":[{"w":100,"h":100,"class":"layout-row-data flexcolumn fit-x","app":"ui_assetManager"}]}]}]}]', 90000000);
          layout.load();
        }
      },
    ];

    var layouts = [
      {
        name : "Default Layouts",
        submenu : layouts,
      },
      {
        name : "Custom Layouts",
        submenu : choices,
      },
      {
        name : "Save Layout",
        click : function(){
          var frame = layout.page({title: "Save Layout", blur: 0.5, id : "saveLayout"});

          var newName = genInput({
            parent: frame,
            placeholder: "Enter New Layout Name",
            style: {"width": "100%"},
          });

          var button = $("<button>").appendTo(frame);
          button.css("width", "100%");
          button.attr("counter-ref", $(this).attr("counter-ref"));
          button.text("Submit");
          button.click(function() {
            layout.save(newName.val());
            layout.coverlay(frame.parent(), 500);
            layout.hideControls();
          });

          frame.append(button);
        }
      },
      {
        name : "Save Default",
        click : function(){
          layout.save();
        }
      },
      {
        name : "Toggle Layout Controls",
        click : function(){
          if ($(".overlay-table-control").length == 0) {
            layout.showControls();
          }
          else {
            layout.hideControls();
          }
        }
      },
    ];

    var actionList = [
      {
        name : "Layouts",
        submenu : layouts
      },
    ];


    util.insert(actionList, 0, {
      name : "Exit Anchor Mode",
      click : function(){
        setCookie("table_save", '[{"w":100,"h":100,"class":"layout-table","a":[{"w":100,"h":100,"class":"layout-row-data","app":"ui_primaryView"}]}]', 9000000000000);
        layout.init();
      }
    });

    ui_dropMenu($(this), actionList, {id : "layout-list", align : "top", style : {"z-index" : "10000000000000000000"}});
  });

  if (hasSecurity(getCookie("UserID"), "Assistant Master") && !game.config.data.offline && Object.keys(game.players.data).length > 1) {
    var label = genIcon("log-in").appendTo(layoutCtrl);
    label.css("margin-right", "4px");
    label.attr("title", "Copies an invite to clipboard");
    label.click(function(){
      var input = genInput({
        parent : $(this),
        id : "copy-url",
        value : window.location.href.split("?password")[0],
      });

      if (game.config.data.password) {
        input.val(encodeURI(input.val()+"?password="+game.config.data.password));
      }

      input.focus();
      input.get(0).setSelectionRange(0, input.val().length);

      document.execCommand("copy");
      input.remove();
      sendAlert({text : "Invitation Copied!"});
    });
  }

  var commsChat = genIcon("facetime-video").appendTo(layoutCtrl);
  commsChat.addClass("lrpadding");
  commsChat.attr("title", "Voice/Video Chat");
  commsChat.click(function(){
    if (!comms.ready) {
      initializeCamera();
    }
    else {
      //$("#web-cam-"+playerID).show();
      comms.shutdown();
    }
  });

  if (getCookie("UserID") && getCookie("UserID") != "Sandboxer") {
    var media = genIcon("folder-open").appendTo(layoutCtrl);
    media.addClass("lrpadding create");
    media.attr("title", "Cloud file manager");
    media.click(function() {
      if ($("#cloud-files").length) {
        if ($("#cloud-files").is(":visible")) {
          $("#cloud-files").hide();
        }
        else {
          $("#cloud-files").show();
        }
      }
      else {
        var newApp = sync.newApp("ui_fileBrowser", null, {cloud : true});

        var popOut = ui_popOut({
          target : $(this),
          align : "top",
          title : "Cloud Files",
          id : "cloud-files",
          close : function(ev, ui) {
            popOut.hide();
            return false;
          },
          style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
        }, newApp);
        popOut.resizable();
      }
    });
  }

  if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
    var media = genIcon("film").appendTo(layoutCtrl);
    media.addClass("lrpadding create");
    media.attr("title", "Media Player");
    media.click(function() {
      if ($("#media-player").length) {
        if ($("#media-player").is(":visible")) {
          $("#media-player").hide();
        }
        else {
          $("#media-player").show();
          var max = util.getMaxZ(".ui-popout");
          $("#media-player").css("z-index", max+1);
        }
      }
      else {
        var newApp = sync.newApp("ui_media", true);

        var popOut = ui_popOut({
          target : $(this),
          align : "right",
          title : "Youtube Player",
          id : "media-player",
          close : function(ev, ui) {
            popOut.hide();
            return false;
          },
          style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
        }, newApp);
        popOut.resizable();
      }
    });

    var media = genIcon("music").appendTo(layoutCtrl);
    media.addClass("lrpadding create");
    media.attr("title", "Audio Player");
    media.click(function() {
      if ($("#audio-player").length) {
        if ($("#audio-player").is(":visible")) {
          $("#audio-player").hide();
        }
        else {
          $("#audio-player").show();
        }
      }
      else {
        var newApp = sync.newApp("ui_audioPlayer");
        game.config.addApp(newApp);
        var popOut = ui_popOut({
          target : $(this),
          align : "top",
          title : "Audio Player",
          id : "audio-player",
          close : function(ev, ui) {
            popOut.hide();
            return false;
          },
          style : {"width" : "400px", "height" : "400px"}
        }, newApp);
        popOut.resizable();
      }
    });
  }

  if (getCookie("UserID") && getCookie("UserID") != "Sandboxer" && game.templates.initiative && game.templates.initiative.query) {
    var text = "Setup Combat";
    if (!hasSecurity(getCookie("UserID"), "Assistant Master")) {
      text = "Show Combat";
    }
    var setupcombat = genIcon("resize-small", text).appendTo($("#navControls"));
    setupcombat.addClass("bold");
    setupcombat.click(function(){
      if ($("#quick-combat").length == 0) {
        var charList = sync.newApp("ui_combatControls");
        charList.addClass("white");
        game.state.addApp(charList);
        var pop = ui_popOut({
          align : "top-left",
          target : $("#bottombar"),
          id : "quick-combat",
          title : "Combat",
          minimize : true,
          maximize : true,
          close : function(){
            pop.hide();
          },
          style : {"width" : "400px", "height" : "300px"}
        }, charList);
        pop.resizable();
      }
      else if ($("#quick-combat").is(":visible")) {
        $("#quick-combat").hide();
      }
      else {
        $("#quick-combat").show();
        var max = util.getMaxZ(".ui-popout");
        $("#quick-combat").css("z-index", max+1);
      }
    });
  }

  if (!game.config.data.restricted) {
    var button = genIcon("camera");//.appendTo($("#navControls"));
    button.addClass("lrpadding create");
    button.click(function(){
      var content = $("<div>");
      content.addClass("flexcolumn");

      var rows = $("<div>").appendTo(content);
      rows.addClass("flexrow");

      var boardWrap = $("<div>").appendTo(rows);
      boardWrap.append("<b>Boards</b>");

      var boardList = $("<div>").appendTo(boardWrap);
      var dummyObj = sync.dummyObj();
      var entList = sync.render("ui_entList")(dummyObj, content, {
        filter : "b",
        draw : function(ui, ent) {
          var optionsBar = $("<div>").appendTo(ui);
          optionsBar.addClass("background alttext outline");

          var zoom = genIcon("zoom-in", "100% zoom").appendTo(optionsBar);
          zoom.click(function(ev){
            if (ui.hasClass("highlight2")) {
              ui.removeClass("highlight2");
            }
            else {
              ui.addClass("highlight2");
            }
            var reg = /(.*)session\/([^\?]*)/i;
            var sessionURL = window.location.href.match(reg);
            var redirectWindow = window.open(sessionURL[1]+'printing?sessionURL='+sessionURL[2]+"&eID="+ent.id()+"&zoom=100", '_blank');
            redirectWindow.location;
            ev.preventDefault();
            ev.stopPropagation();
          });
          var zoom = genIcon("picture", "Without Grid").appendTo(optionsBar);
          zoom.click(function(ev){
            if (ui.hasClass("highlight2")) {
              ui.removeClass("highlight2");
            }
            else {
              ui.addClass("highlight2");
            }
            var reg = /(.*)session\/([^\?]*)/i;
            var sessionURL = window.location.href.match(reg);
            var redirectWindow = window.open(sessionURL[1]+'printing?sessionURL='+sessionURL[2]+"&eID="+ent.id()+"&nogrid=1", '_blank');
            redirectWindow.location;
            ev.preventDefault();
            ev.stopPropagation();
          });

          var zoom = genIcon("search", "100% Zoom Without Grid").appendTo(optionsBar);
          zoom.click(function(ev){
            if (ui.hasClass("highlight2")) {
              ui.removeClass("highlight2");
            }
            else {
              ui.addClass("highlight2");
            }
            var reg = /(.*)session\/([^\?]*)/i;
            var sessionURL = window.location.href.match(reg);
            var redirectWindow = window.open(sessionURL[1]+'printing?sessionURL='+sessionURL[2]+"&eID="+ent.id()+"&zoom=100&nogrid=1", '_blank');
            redirectWindow.location;
            ev.preventDefault();
            ev.stopPropagation();
          });
        },
        click : function(ev, ui, ent){
          if (ui.hasClass("highlight2")) {
            ui.removeClass("highlight2");
          }
          else {
            ui.addClass("highlight2");
          }
          var reg = /(.*)session\/([^\?]*)/i;
          var sessionURL = window.location.href.match(reg);
          var redirectWindow = window.open(sessionURL[1]+'printing?sessionURL='+sessionURL[2]+"&eID="+ent.id(), '_blank');
          redirectWindow.location;
        }
      });
      entList.appendTo(boardList);

      /*var charWrap = $("<div>").appendTo(rows);
      charWrap.append("<b>Characters</b>");

      var charList = $("<div>").appendTo(charWrap);
      var dummyObj = sync.dummyObj();
      var entList = sync.render("ui_entList")(dummyObj, content, {
        filter : "c",
        draw : function(plate, ent) {
          plate.removeClass("flexcolumn");
          plate.addClass("flexrow");
          genInput({parent : plate, type : "checkbox"});
          genInput({parent : plate, type : "checkbox"});
        },
        click : function(ev, ui, ent){
          if (ui.hasClass("highlight2")) {
            ui.removeClass("highlight2");
          }
          else {
            ui.addClass("highlight2");
          }
        }
      });
      entList.appendTo(charList);

      var pageWrap = $("<div>").appendTo(rows);
      pageWrap.append("<b>Pages</b>");

      var pageList = $("<div>").appendTo(pageWrap);
      var dummyObj = sync.dummyObj();
      var entList = sync.render("ui_entList")(dummyObj, content, {
        filter : "p",
        click : function(ev, ui, ent){
          if (ui.hasClass("highlight2")) {
            ui.removeClass("highlight2");
          }
          else {
            ui.addClass("highlight2");
          }
        }
      });
      entList.appendTo(pageList);

      var vehWrap = $("<div>").appendTo(rows);
      vehWrap.append("<b>Vehicles</b>");

      var vehList = $("<div>").appendTo(vehWrap);
      var dummyObj = sync.dummyObj();
      var entList = sync.render("ui_entList")(dummyObj, content, {
        filter : "v",
        click : function(ev, ui, ent){
          if (ui.hasClass("highlight2")) {
            ui.removeClass("highlight2");
          }
          else {
            ui.addClass("highlight2");
          }
        }
      });
      entList.appendTo(vehList);*/

      var popOut = ui_popOut({
        target : $(this),
        id : "printing-selection",
      }, content);
    });
  }
  if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
    var button = genIcon("calendar").appendTo(layoutCtrl);
    button.addClass("lrpadding create");
    button.attr("title", "Calendar");
    button.click(function(){
      if ($("#calendar").length) {
        if ($("#calendar").is(":visible")) {
          $("#calendar").hide();
        }
        else {
          $("#calendar").show();
        }
      }
      else {
        var content = sync.newApp("ui_calendar");
        game.state.addApp(content)

        var popOut = ui_popOut({
          target : $(this),
          id : "calendar",
          align : "top",
          minimze : true,
          title : " ",
          close : function(ev, ui) {
            popOut.hide();
            return false;
          },
          style : {"width" : Math.min(820, $(window).width())+"px", "height" : "650px"}
        }, content);
      }
    });

    var button = genIcon("sunglasses").appendTo(layoutCtrl);
    button.addClass("lrpadding create");
    button.attr("title", "Special Effects");
    button.click(function(){
      if ($("#special-effects").length) {
        if ($("#special-effects").is(":visible")) {
          $("#special-effects").hide();
        }
        else {
          $("#special-effects").show();
          var max = util.getMaxZ(".ui-popout");
          $("#special-effects").css("z-index", max+1);
        }
      }
      else {
        var content = $("<div>");
        content.addClass("alttext flexcolumn foreground");
        for (var i in util.effects) {
          var effect = $("<button>").appendTo(content);
          effect.addClass("background");
          effect.text(i);
          effect.click(function(){
            var effect = $(this).text();
            $(".displayApp").each(function(){
              runCommand("effect", {effect : effect, tab : $(this).attr("currentTab") || 0});
            });
          });
        }

        var popOut = ui_popOut({
          target : $(this),
          id : "special-effects",
          align : "top",
          minimze : true,
          title : "SFX",
          close : function(ev, ui) {
            popOut.hide();
            return false;
          },
        }, content);
        popOut.resizable();
      }
    });
  }

  var app = sync.newApp("ui_setting").appendTo(layoutCtrl);
  app.addClass("lrmargin");
  app.css("height", "auto");
  app.css("width", "auto");
  game.state.addApp(app);


  var media = genIcon("user", "Actors").appendTo(layoutCtrl);
  media.addClass("lrpadding alttext");
  media.attr("title", "Asset Manager");
  media.click(function() {
    var newApp = sync.newApp("ui_assetManager", null, {});
    if ($("#asset-manager").length) {
      if ($("#asset-manager").is(":visible")) {
        $("#asset-manager").hide();
      }
      else {
        $("#asset-manager").show();
      }
    }
    else {
      var pop = ui_popOut({
        target : $(this),
        align : "top",
        title : "Asset Manager",
        id : "asset-manager",
        minimze : true,
        close : function(ev, ui) {
          pop.hide();
          return false;
        },
        style : {"width" : "400px", "height" : "600px"}
      }, newApp);
      pop.resizable();
    }
  });

  // fill the height
  function resize() {
    var height = $("#navbar").outerHeight();
    if ($("#bottombar").length) {
      height = height + $("#bottombar").outerHeight();
    }
    $("#viewPort").css("height", $(window).height() - height);
  }
  resize();
  resizeHooks["layout"] = function() {
    resize();
  }

  if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
    var cardWrap = $("<div>").appendTo($("#bottombar"));
    cardWrap.addClass("flexrow flexmiddle");

    var newApp = sync.newApp("ui_deck").appendTo(cardWrap);
    newApp.addClass("flexmiddle lrpadding");
    newApp.removeClass("application");
    newApp.css("overflow", "hidden");
    newApp.css("height", $("#bottombar").height());
    game.state.addApp(newApp);
  }

  var app = sync.newApp("ui_players");
  app.appendTo($("#bottombar"));
  app.css("height", "auto");
  app.css("width", "auto");
  app.attr("size", "50");
  app.css("overflow-y", "hidden");
  app.css("pointer-events", "none");
  game.players.addApp(app);

  var cardWrap = $("<div>").appendTo($("#bottombar"));
  cardWrap.addClass("flexrow flexmiddle");

  var newApp = sync.newApp("ui_hand").appendTo(cardWrap);
  newApp.attr("UserID", getCookie("UserID"));
  newApp.css("overflow-y", "hidden");
  newApp.css("height", $("#bottombar").height());
  newApp.css("margin-top", "4px");
  newApp.css("max-width", "30vw");
  game.state.addApp(newApp);
  if (!game.config.data.restricted || game.user.membership) {
    var outline = $("<div>").appendTo($("#bottombar"));

    var app = sync.newApp("ui_hotApps", null, {});
    app.appendTo(outline);
    app.addClass("flexmiddle spadding");
    app.css("height", "auto");
    app.css("width", "auto");
    app.css("overflow-y", "hidden");
    app.css("padding-top", "4px");
    app.css("padding-right", "4px");
    $("#bottombar").bind("paste", function(e) {
      // access the clipboard using the api
      // firefox won't call this if ctrl shift + v
      if (hasSecurity(getCookie("UserID"), "Trusted Player")) {
        if (getCookie("disableReactions") != "true") {
          ui_processLink(e.originalEvent.clipboardData.getData('text'), function(link, newLink, exists){
            runCommand("reaction", newLink);
          });
        }
      }
    });
  }
}

var mediaPlayer = mediaPlayer || {iframe : null, width : '400', height : '200'};

function media_init() {
  if (mediaPlayer.disabled) {
    return false;
  }
  mediaPlayer.iframe = null;
  var contentCC = $("<div>");
  contentCC.bind("paste", function(e) {
    if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
      var reg = /([v][=])([\S]*)/;
      var ex = reg.exec(e.originalEvent.clipboardData.getData('text'));
      if (ex) {
        runCommand("media", {cmd : "update", data : {video : ex[2]}});
      }
    }
  });

  contentCC.on("dragover", function(ev) {
    ev.preventDefault();
    ev.stopPropagation();
    if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
      if (!$("#media-drag-overlay").length) {
        var olay = layout.overlay({
          target : contentCC,
          id : "media-drag-overlay",
          style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
        });
        olay.addClass("flexcolumn flexmiddle alttext");
        olay.css("font-size", "2em");
        olay.append("<b>Drop to Load Video</b>");
      }
    }
  });
  contentCC.on('drop', function(ev){
    ev.preventDefault();
    ev.stopPropagation();
    var dt = ev.originalEvent.dataTransfer;
    if (dt.getData("Text")) {
      if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
        var reg = /([v][=])([\S]*)/;
        var ex = reg.exec(dt.getData("Text"));
        if (ex) {
          runCommand("media", {cmd : "update", data : {video : ex[2]}});
        }
      }
    }
    layout.coverlay("media-drag-overlay");
  });

  contentCC.on("dragleave", function(ev) {
    ev.preventDefault();
    ev.stopPropagation();
    layout.coverlay("media-drag-overlay");
  });

  var content = $("<div>").appendTo(contentCC);
  content.attr("id", "media");

  var frame = ui_popOut({
    id : "dragMedia",
    noCss : true,
    close : function(){
      runCommand("media", {cmd : "watching", video : ""});
    },
    style : {"position": "fixed", "min-width": "", "min-height": "", "z-index" : "2000", "background-color" : "white"}
  }, contentCC).removeClass("ui-popout").addClass("smooth");


  var seekingWrap = $("<div>").appendTo(contentCC);
  seekingWrap.addClass("flexrow flexbetween");

  var seeking = genInput({
    parent : seekingWrap,
    type: "range",
    min : 0,
    max : 0, // update this with
    style : {"padding" : "0px"}
  }).addClass("fit-x");
  // So messy, but hey it works
  seeking.hover(function(){
    mediaPlayer.manual = true;
  },
  function() {
    mediaPlayer.manual = false;
    mediaPlayer.update();
  });
  seeking.click(function() {
    mediaPlayer.manual = true;
    setTimeout(function(){mediaPlayer.manual = false;},10);
  });
  seeking.change(function() {
    if (mediaPlayer.iframe) {
      runCommand("media", {cmd : "update", data : {video : mediaPlayer.video, list : mediaPlayer.list, time : parseInt($(this).val())/100}});
      $(this).attr("disabled", "disabled");
    }
  });

  seekingWrap.append($("<div id='mediaControls' class='flexaround' style='font-size: 2em;'></div>"));

  var seekingLabel = $("<div>").appendTo($("#mediaControls"));
  seekingLabel.css("font-size", "12px");
  seekingLabel.addClass("flexmiddle lrmargin");
  seekingLabel.text("0:00/0:00");

  var div = $("<div>").appendTo($("#mediaControls"));
  div.addClass("flexmiddle");
  div.css("pointer-events", "auto");

  var volumeIcon = genIcon({icon : "volume-up", raw : true});
  volumeIcon.addClass("hover2 subtitle");
  volumeIcon.appendTo(div);
  volumeIcon.click(function(){
    var volumeContent = $("<div>");
    var volume = genInput({
      parent : volumeContent,
      type: "range",
      min : 0,
      value : 100,
      max : 400,
      style : {"padding": "0", "pointer-events" : "auto", "width" : "100px"},
    });

    volume.val(parseInt((getCookie("volume") || 100)));
    mediaPlayer.volume = parseInt((getCookie("volume") || 100));
    volume.change(function() {
      mediaPlayer.setVolume(Math.ceil($(this).val()/4));
      setCookie("volume", Math.ceil($(this).val()/4));
      mediaPlayer.volume = Math.ceil($(this).val()/4);
      if ($(this).val() == 0) {
        volumeIcon.changeIcon("volume-off");
      }
      else if ($(this).val() < 50) {
        volumeIcon.changeIcon("volume-down");
      }
      else {
        volumeIcon.changeIcon("volume-up");
      }
      $("#media-volume-label").text(" " + $(this).val() + "%");
    });

    ui_popOut({
      target : $(this),
      align : "top",
    }, volumeContent);
  });

  var value = $("<div class='flexmiddle'><b id='media-volume-label' style='font-size: 14px;'> "+(getCookie("volume") || 100)+"%</b></div>");
  value.addClass("hover2");
  value.click(function(){
    volumeIcon.click();
  });
  value.appendTo(div);

  var userCountDiv = $("<div>").appendTo(("#mediaControls"));
  userCountDiv.addClass("flexmiddle lrmargin");

  var userCount = genIcon({icon : "user", raw : true}).appendTo(userCountDiv);
  userCount.css("font-size", "12px");

  var userLabel = $("<div>").appendTo(userCountDiv);
  userLabel.attr("id", "mediausercount");
  userLabel.css("font-size", "12px");
  userLabel.addClass("flexmiddle");
  userLabel.text("x1");

  //var nextIcon = genIcon("forward").appendTo($("#mediaControls"));
  // states
  // 0 NO VIDEO
  // 1 LOADING
  // 2 READY
  // 3 PLAYING
  // 4 OUT OF SYNC
  function onYouTubeIframeAPIReady() {

  }

  function onPlayerReady(event) {
    mediaPlayer.play(); // prime the video for playing
    mediaPlayer.update();
    mediaPlayer.volume = mediaPlayer.volume || parseInt((getCookie("volume") || 100));
    mediaPlayer.setVolume(Math.ceil((mediaPlayer.volume)/4));
    mediaPlayer.update();
  }

  // 5. The API calls this function when the player's state changes.
  //    The function indicates that when playing a video (state=1),
  //    the player should play for six seconds and then stop.
  mediaPlayer.think = function() {
    if (mediaPlayer.iframe.getCurrentTime() < mediaPlayer.iframe.getDuration() && mediaPlayer.iframe.getPlayerState() == YT.PlayerState.PLAYING) {
      mediaPlayer.update(true);
      setTimeout(mediaPlayer.think, 100);
    }
  }

  function onPlayerStateChange(event) {
    if (!mediaPlayer.executing) {
      if (event.data == YT.PlayerState.PLAYING) {
        // changed state to playing, better execute it
        mediaPlayer.executing = {cmd : "waiting"};
        mediaPlayer.pause(); // counter the last action
      }
      else if (event.data == YT.PlayerState.PAUSED) {
        runCommand("media", {cmd : "update", data : {video : mediaPlayer.video, list : mediaPlayer.list, time : mediaPlayer.iframe.getCurrentTime()}});
      }
    }
    else if (mediaPlayer.executing.cmd == "play") {
      if (event.data == YT.PlayerState.PLAYING) {
        mediaPlayer.think();
        delete mediaPlayer.executing;
      }
      else {
        mediaPlayer.play(); // get this shit playing
      }
    }
    else if (mediaPlayer.executing.cmd == "update") {
      if (event.data == YT.PlayerState.PLAYING) {
        mediaPlayer.pause(); // get this shit paused
      }
      else if (event.data == YT.PlayerState.PAUSED) {
        // all ready
        if (mediaPlayer.executing.time != null) {
          mediaPlayer.iframe.seekTo(mediaPlayer.executing.time || 0);
        }
        delete mediaPlayer.executing;
        //once it is all complete send ack
        runCommand("media", {cmd : "update-ack", data : {state : 2}});
      }
      else {
        mediaPlayer.play(); // get this shit playing to start buffering
      }
    }
    else if (mediaPlayer.executing.cmd == "waiting") {
      if (event.data == YT.PlayerState.PAUSED) {
        runCommand("media", {cmd : "play"});
        delete mediaPlayer.executing;
      }
      else {
        mediaPlayer.executing = {cmd : "waiting"};
        mediaPlayer.pause(); // counter the last action
      }
    }
    mediaPlayer.lastState = event.data;
  }

  mediaPlayer.update = function(update) {
    if (mediaPlayer.iframe != null) {
      seeking.attr("max", mediaPlayer.iframe.getDuration() * 100);

      if (!mediaPlayer.manual || update) {
        seeking.val(Math.floor(mediaPlayer.iframe.getCurrentTime() * 100));
      }
      seekingLabel.empty();
      seekingLabel.text(String(mediaPlayer.iframe.getCurrentTime()).formatTime(1)+"/"+String(mediaPlayer.iframe.getDuration()).formatTime(1));
    }
  }

  mediaPlayer.setVolume = function(amt) {
    if (mediaPlayer.iframe && mediaPlayer.iframe.setVolume) {
      return mediaPlayer.iframe.setVolume(amt);
    }
  }

  mediaPlayer.play = function(time) {
    if (mediaPlayer.iframe && mediaPlayer.iframe.playVideo) {
      return mediaPlayer.iframe.playVideo();
    }
  }

  mediaPlayer.pause = function(time) {
    if (mediaPlayer.iframe && mediaPlayer.iframe.pauseVideo) {
      return mediaPlayer.iframe.pauseVideo();
    }
  }

  mediaPlayer.isPlaying = function(time) {
    if (mediaPlayer.iframe) {
      return mediaPlayer.getState() == 3;
    }
    return false;
  }

  mediaPlayer.getState = function() {
    if (mediaPlayer.iframe) {
      var state = mediaPlayer.iframe.getPlayerState();
      if (state == YT.PlayerState.PLAYING) {
        return 3;
      }
      else if (state == YT.PlayerState.PAUSED) {
        return 2;
      }
      return 1;
    }
    return 0;
  }
  var _watching = {};
  mediaPlayer.command = function(data) {
    if (mediaPlayer.disabled) {
      return false;
    }
    if (data.cmd == "watching") {
      // live count of who's watching what
      if (data.userID) {
        if (data.video) {
          _watching[data.userID] = data.video;
        }
        else {
          delete _watching[data.userID];
        }
      }
      var count = 0;
      for (var key in _watching) {
        if (_watching[key] == mediaPlayer.video) {
          count = count + 1;
        }
      }
      $("#mediausercount").text("x"+count);
      return;
    }
    if (data.cmd == "play") {
      // if the server is sending this command we are OK to play the video
      mediaPlayer.executing = data;
      mediaPlayer.play();
    }
    else if (data.cmd == "update") {
      if (!mediaPlayer.iframe) {
        console.log(data.data.list);
        mediaPlayer.iframe = new YT.Player('media', {
          width: mediaPlayer.width,
          height: mediaPlayer.height,
          videoId: data.data.video,
          playerVars: {controls: 0, disablekb: 1, fs: 0, showinfo: 0, iv_load_policy: 3, rel: 0, start : (data.data.time || 0)},
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
        $("#dragMedia").css("left", $(window).outerWidth()/2 - $("#dragMedia").outerWidth()/2);
        $("#dragMedia").css("top", $(window).outerHeight() - $("#dragMedia").outerHeight());
      }
      else {
        if (data.data.video != mediaPlayer.video) {
          mediaPlayer.iframe.cueVideoById({videoId : data.data.video, startSeconds : (data.data.time || 0)});
        }
        else if (data.data.time != null && mediaPlayer.iframe.getCurrentTime() != (data.data.time || 0)) {
          mediaPlayer.iframe.seekTo(data.data.time || 0);
        }
        seeking.removeAttr("disabled");
        setTimeout(function() {mediaPlayer.update(true);}, 100);
      }
      mediaPlayer.video = data.data.video;
      //mediaPlayer.list = data.data.list;
      //mediaPlayer.index = data.data.index;
      mediaPlayer.executing = data;

      mediaPlayer.play();
    }
    runCommand("media", {cmd : "watching", video : mediaPlayer.video});
  }
}


layout.init = function() {
  /*var community = genIcon("cloud-download").appendTo(layoutCtrl);
  community.addClass("lrpadding create");
  community.attr("title", "Community Chest");
  community.click(function() {
    var frame = layout.page({title: "Community Chest", prompt : "This is currently under construction, but feel free to use what assets are available", blur : 0.5, width: "90%", id: "community-chest"});
    if (layout.mobile) {
      frame.css("width", "95vw");
    }
    var beta = $("<b>");
    beta.addClass("lrpadding outline smooth highlight");
    beta.css("color", "white");
    beta.css("position", "absolute");
    beta.css("font-size", "1.5em");
    beta.css("left", "1em");
    beta.css("top", "1em");
    beta.append("Beta");

    frame.prepend(beta);

    var newApp = sync.newApp("ui_newMarket", null, {});
    newApp.appendTo(frame);
    newApp.css("height", "80vh");
  });*/
  $("#bottombar").hide();
  setCookie("table_save", '[{"w":100,"h":100,"class":"layout-table","a":[{"w":100,"h":100,"class":"layout-row-data","app":"ui_primaryView"}]}]', 9000000000000);
  layout.load();


  //layout.menu();
  layout.nav();
  //layout.players();
  //layout.hotbar();
}

layout.menu = function() {
  var rightContentWrap = $("<div>");
  rightContentWrap.addClass("flexcolumn flex");
  rightContentWrap.css("position", "relative");
  
  var rightContent = $("<div>").appendTo(rightContentWrap);
  rightContent.addClass("flexcolumn fit-x alttext");
  rightContent.css("position", "relative");

  var configOptions = $("<div>").appendTo(rightContent);
  configOptions.addClass("flexrow outlinebottom dragcontrol");
  configOptions.css("font-family", "Scaly Sans");

  var div = $("<div>").appendTo(configOptions);
  div.addClass("flex");
  configOptions.append("<a href='https://discord.gg/usy4ByN' target='_' class='lrmargin' title='Join the Discord Channel'><img width=16 height=16 src='/content/Discord-Logo-White.png'></img></a>");

  if (game.owner == getCookie("UserID") && !getCookie("PublicPort")) {
    var label = genIcon("cloud-download").appendTo(configOptions);
    label.attr("title", "Community Forge");
    label.click(function(){
      openSplash(true);
      $("#community-forge").click();
    });
  }

  var gameOptions = genIcon("cog", "Options").appendTo(configOptions);
  gameOptions.addClass("lrpadding subtitle spadding");
  gameOptions.attr("title", "Options");
  gameOptions.click(function(){
    menuContent.children().hide();
    mediaOptions.children().removeClass("outline highlight");
    mediaOptions.children().children().addClass("dull");
    if ($("#game-options").length) {
      $("#game-options").show();
      return;
    }
    else {
      var content = $("<div>").appendTo(menuContent);
      content.attr("id", "game-options");
      content.addClass("flexcolumn padding");

      var button = $("<button>").appendTo(content);
      button.addClass("fit-x");
      button.append("Change/Update Templates");
      button.click(function(){
        var choices = $("<div>");
        choices.addClass("flexcolumn fit-x");

        for (var i in game.locals["gameList"]) {
          if (game.locals["gameList"][i] && game.locals["gameList"][i].build == game.templates.build) {
            var option = $("<button>").appendTo(choices);
            option.addClass("fit-x");
            option.attr("index", i);
            option.text(sync.rawVal(game.locals["gameList"][i].info.name));
            option.click(function(){
              runCommand("updateTemplate", duplicate(game.locals["gameList"][$(this).attr("index")]));
              layout.coverlay("restore");
            });
          }
        }

        ui_popOut({
          target : $("body"),
          id : "restore",
          title : "Select Template",
          style : {"width" : "400px", "max-height" : "600px"}
        }, choices);
      });

      var hotkeyCtrl = $("<div>").appendTo(content);
      hotkeyCtrl.addClass("spadding");

      var hotkeyCtrl = $("<div>").appendTo(content);
      hotkeyCtrl.addClass("flexcolumn");

      var hotKeys = genIcon("link", "Show HotKey List", true).appendTo(hotkeyCtrl);
      hotKeys.attr("title", "Show HotKey List");
      hotKeys.click(function(){
        toggleHotKeysDisplay();
      });

      var floatingApp = genIcon("plus", "Temporary App", true).appendTo(content);
      floatingApp.attr("title", "Temporary App");
      floatingApp.click(function() {
        var buildList = [];
        //options
        function recurse(data, source) {
          for (var index in data) {
            if (index == "_ui") {
              for (var ind in data[index]) {
                data[index][ind].click = function(ev, self) {
                  var content = sync.newApp(self.attr("ui-name"), null, {});

                  var popout = ui_popOut({
                    title : self.attr("ui-name"),
                    target : floatingApp,
                    align : "bottom",
                    minimize : true,
                    maximize : true,
                    dragThickness : "0.5em",
                    resizable : true,
                    style : {"max-width" : "none"},
                  }, content);
                  popout.css("padding", "0px");
                  popout.addClass("floating-app");
                }
                source.push(data[index][ind]);
              }
            }
            else {
              var addObj = {name : index, submenu : []};
              recurse(data[index], addObj.submenu);
              source.push(addObj);
            }
          }
        }

        recurse(game.components, buildList);
        var dropMenu = ui_dropMenu($(this), buildList, {id: "layout-control-popup"}).css("z-index", "100000000000");
      });

      var gameOptCtrl = $("<div>").appendTo(content);
      gameOptCtrl.addClass("flexcolumn");

      var label = genIcon("log-in", "Internal Network Game Invite", true).appendTo(gameOptCtrl);
      label.css("pointer-events", "auto");
      label.click(function(){
        var input = genInput({
          parent : $(this),
          id : "copy-url",
          value : window.location.href,
        });

        if (game.config.data.password) {
          input.val(encodeURI(input.val()+"?password="+game.config.data.password));
        }
        if (getCookie("InternalIP")) {
          input.val(getCookie("InternalIP")+":30000/join");
        }
        input.focus();
        input.get(0).setSelectionRange(0, input.val().length);

        document.execCommand("copy");
        input.remove();
        sendAlert({text : "Invitation Copied!"});
      });

      var label = genIcon("log-in", "Game Invite (UPnP)", true).appendTo(gameOptCtrl);
      label.css("pointer-events", "auto");
      label.click(function(){
        var input = genInput({
          parent : $(this),
          id : "copy-url",
          value : window.location.href,
        });

        if (game.config.data.password) {
          input.val(encodeURI(input.val()+"?password="+game.config.data.password));
        }
        if (getCookie("ExternalIP")) {
          input.val(getCookie("ExternalIP")+":"+getCookie("PublicPort")+"/join");
        }
        input.focus();
        input.get(0).setSelectionRange(0, input.val().length);

        document.execCommand("copy");
        input.remove();
        sendAlert({text : "Invitation Copied!"});
      });

      var label = genIcon("log-in", "Game Invite (Port Forwarding)", true).appendTo(gameOptCtrl);
      label.css("pointer-events", "auto");
      label.click(function(){
        var input = genInput({
          parent : $(this),
          id : "copy-url",
          value : window.location.href,
        });

        if (game.config.data.password) {
          input.val(encodeURI(input.val()+"?password="+game.config.data.password));
        }
        if (getCookie("ExternalIP")) {
          input.val(getCookie("ExternalIP")+":"+getCookie("PrivatePort")+"/join");
        }
        input.focus();
        input.get(0).setSelectionRange(0, input.val().length);

        document.execCommand("copy");
        input.remove();
        sendAlert({text : "Invitation Copied!"});
      });

      var label = genIcon("log-in", "Game Invite (NGROK)", true).appendTo(gameOptCtrl);
      label.css("pointer-events", "auto");
      label.click(function(){
        var input = genInput({
          parent : $(this),
          id : "copy-url",
          value : window.location.href.split("?password")[0],
        });

        if (getCookie("PublicLink")) {
          input.val(decodeURIComponent(getCookie("PublicLink"))+"/join?select=true");
        }

        input.focus();
        input.get(0).setSelectionRange(0, input.val().length);

        document.execCommand("copy");
        input.remove();
        sendAlert({text : "Invitation Copied!"});
        layout.coverlay("invite");
      });

      /*var gameOptions = genIcon("wrench", "Game Options", true)//.appendTo(gameOptCtrl);
      gameOptions.attr("title", "Game Options");
      gameOptions.click(function() {
        if (getCookie("UserID") == game.owner) {
          var frame = layout.page({title: "Game Configuration", prompt : "Change information on how this server", blur: 0.5, id : "gameOptions", width : "50%"});

          var newApp = sync.newApp("ui_gameCtrl", game.config);
          newApp.appendTo(frame);
        }
        else if (hasSecurity(getCookie("UserID"), "Trusted Player")){
          var frame = layout.page({title: "Assistant Master", prompt : "what do you want to do", blur: 0.5, id: "save-as-session-prompt"});

          var buttonDiv = $("<div>").appendTo(frame);
          buttonDiv.addClass("flexaround");

          var yes = $("<button>").appendTo(buttonDiv);
          yes.append("Give me Anytime Access to this Game");
          yes.click(function(){
            runCommand("grantAccess");
            layout.coverlay("save-as-session-prompt");
          });

          var no = $("<button>").appendTo(buttonDiv);
          no.append("Continue to Game Controls");
          no.click(function(){
            var frame = layout.page({title: "Game Configuration", prompt : "Change information on how this server", blur: 0.5, id : "gameOptions", width : "50%"});

            var newApp = sync.newApp("ui_gameCtrl", game.config);
            newApp.appendTo(frame);
            layout.coverlay("save-as-session-prompt");
          });
        }
        layout.coverlay("game-options");
        gameOptions.click();
      });
      */
      var reactionsCtrl = $("<div>").appendTo(content);
      reactionsCtrl.addClass("flexcolumn");

      var reactions = genIcon("comment", "Reactions Enabled", true);
      if (getCookie("disableReactions") == "true") {
        reactions = genIcon("comment", "Reactions Disabled", true);
        reactions.css("color", "rgb(170, 130, 130)");
      }
      reactions.appendTo(reactionsCtrl);
      reactions.click(function() {
        if (getCookie("disableReactions") == "true") {
          setCookie("disableReactions", "");
        }
        else {
          setCookie("disableReactions", "true");
        }
        layout.coverlay("game-options");
        gameOptions.click();
      });

      var alertsCtrl = $("<div>").appendTo(content);
      alertsCtrl.addClass("flexcolumn");

      var alerts = genIcon("bell", "Alerts Enabled", true);
      if (getCookie("disableAlerts") == "true") {
        alerts = genIcon("bell", "Alerts Disabled", true);
        alerts.css("color", "rgb(170, 130, 130)");
      }
      alerts.appendTo(alertsCtrl);
      alerts.click(function() {
        if (getCookie("disableAlerts") == "true") {
          setCookie("disableAlerts", "");
        }
        else {
          setCookie("disableAlerts", "true");
        }
        layout.coverlay("game-options");
        gameOptions.click();
      });

      var alerts = genIcon("film", "Media Enabled", true);
      if (mediaPlayer.disabled) {
        alerts = genIcon("film", "Media Disabled", true);
        alerts.css("color", "rgb(170, 130, 130)");
      }
      alerts.appendTo(alertsCtrl);
      alerts.click(function() {
        if (mediaPlayer.disabled) {
          delete mediaPlayer.disabled;
        }
        else {
          mediaPlayer.disabled = true;
        }
        layout.coverlay("game-options");
        gameOptions.click();
      });


      var alerts = genIcon("folder-close", "File Controls Disabled", true);
      alerts.css("color", "rgb(170, 130, 130)");
      if (layout.fileControls) {
        alerts = genIcon("folder-open", "File Controls Enabled", true);
      }
      alerts.appendTo(alertsCtrl);
      alerts.click(function() {
        if (layout.fileControls) {
          delete layout.fileControls;
        }
        else {
          layout.fileControls = true;
        }
        $(".application[ui-name='ui_fileBrowser']").each(function(){sync.updateApp($(this), null);});
        layout.coverlay("game-options");
        gameOptions.click();
      });

      var label = genIcon("list-alt", "Manage Mods (World Only)", true).appendTo(gameOptCtrl);
      label.css("pointer-events", "auto");
      label.click(function(){
        var newApp = sync.newApp("ui_manageMods");
        game.config.addApp(newApp);

        ui_popOut({
          target : $("body"),
          title : "Manage Mods",
          id : "manage-mods",
          style : {"width" : "400px", "height" : "400px"}
        }, newApp);
      });

      var anchor = genIcon("th-large", "Toggle Anchor Mode", true)//.appendTo(alertsCtrl);
      anchor.click(function(){
        if (!$(".main-dock").length) {
          setCookie("table_save", '[{"w":100,"h":100,"class":"layout-table","a":[{"w":100,"h":100,"class":"layout-row-data","app":"ui_primaryView"}]}]', 9000000000000);
          layout.init();
        }
        else {
          setCookie("table_save", '[{"w":100,"h":100,"class":"layout-table","a":[{"w":77,"h":100,"class":"layout-row-data","app":"ui_displayManager"},{"w":23,"h":100,"class":"layout-row-data","app":"ui_textBox"}]}]');
          layout.anchorInit();
          layout.load();
        }
      });

      content.append("<div class='padding'></div>");
      content.append("<u class='bold fit-x flexmiddle'>Mods and Extensions</u>");

      var app = sync.newApp("ui_hotApps", null, {vertical : "true"});
      app.appendTo(content);
      app.addClass("fit-x scroll-y");
      app.removeClass("application");
      app.attr("vertical", "true");
      app.css("width", "auto");
      app.css("border-color", "transparent");
    }
  });


  var gameOptions = genIcon("question-sign", "Help").appendTo(configOptions);
  gameOptions.addClass("lrpadding subtitle spadding");
  gameOptions.attr("title", "Help");
  gameOptions.click(function(){
    var content = sync.render("ui_renderHelp")(sync.obj, $("<div>"), {}).addClass("padding sheet1");
    ui_popOut({
      target : $("body"),
      title : "Help",
      style : {"width" : "400px", height : "600px"}
    }, content);
  });

  var splash = genIcon("menu-hamburger").appendTo(configOptions);
  splash.css("padding-right", "4px");
  splash.attr("id", "splash-button");
  splash.attr("title", "Main Menu");
  splash.click(function(){
    openSplash(true);
  });
  splash.hide();

  var menuContent = $("<div>").appendTo(rightContentWrap);
  menuContent.addClass("flexcolumn flex");
  menuContent.css("background", "#D8D7DD");
  
  var mediaOptions = $("<div>").appendTo(rightContent);
  mediaOptions.addClass("flexrow flex flexbetween");
  mediaOptions.css("font-size", "1.4em");

  // moved it up here to ignore popup auto focus on inputs
  var right = ui_popOut({
    target : $("body"),
    align : "top-right",
    noCss : true,
    allowDock : true,
    hideclose : true,
    pin : true,
    style : {"width" : "350px", "height" : $(window).height() - 125, "max-height" : "100vh"}
  }, rightContentWrap);
  right.addClass("foreground");
  right.attr("locked", "true");
  right.attr("fadeHide", "true")
  right.attr("docked-z", util.getMinZ(".ui-popout"));
  right.attr("docked", "right");
  right.attr("id", "main-menu");
  right.css("top", "50px");
  right.resizable();

  function addSubmenu(icon, shorttitle, title, create, object) {
    var iconWrap = $("<div>")
    iconWrap.addClass("flexcolumn smooth flexmiddle link spadding");
    iconWrap.attr("title", title);

    var media = genIcon(icon).appendTo(iconWrap);
    media.addClass("lrpadding dull");
    media.css("font-size", "1.4em");

    var titleText = $("<text>").appendTo(iconWrap);
    titleText.addClass("dull");
    titleText.css("font-size", "12px");
    titleText.text(shorttitle);

    var content;
    if (object) {
      content = sync.newApp(create).appendTo(menuContent);
      if (create == "ui_fileBrowser") {
        content.attr("height", "40px");
      }
      game[object].addApp(content);
    }
    else {
      content = sync.newApp(create, null, {height : "40px"}).appendTo(menuContent);
      if (create == "ui_fileBrowser") {
        content.attr("height", "40px");
      }
    }
    content.hide();
    if (create == "ui_renderHelp" && !$("#quick-help").length) {
      content.attr("id", "quick-help");
      content.css("overflow", "hidden");
    }


    iconWrap.click(function(){
      menuContent.children().hide();
      mediaOptions.children().removeClass("outline highlight");
      mediaOptions.children().children().addClass("dull");
      $(this).addClass("outline highlight");
      $(this).children().removeClass("dull");

      content.show();
      if (create == "ui_textBox") {
        game.logs.update();
      }
      else if (create == "ui_media") {
        content.find("input").focus();
      }
      else if (create == "ui_combatControls") {
        if (!game.locals["turnOrder"]) {
          game.locals["turnOrder"] = sync.obj("turnOrder");
          game.locals["turnOrder"].data = {combat : {engaged : {}, current : {}}};
        }
        for (var index in game.players.data) {
          if (game.players.data[index].entity) {
            game.locals["turnOrder"].data.combat.engaged[game.players.data[index].entity] = {};
          }
        }
        game.locals["turnOrder"].update();
      }
    });
    iconWrap.contextmenu(function(ev){
      var newApp;
      if (object) {
        newApp = sync.newApp(create);
        game[object].addApp(newApp);

        var popup = ui_popOut({
          target : $("body"),
          title : title,
          style : {"width" : "400px", "height" : "400px"}
        }, newApp);
        popup.resizable();
      }

      return false;
    });
    return iconWrap;
  }

  var chat = addSubmenu("comment", "Chat", "Event Log", "ui_textBox").appendTo(mediaOptions);
  chat.attr("id", "chat-button");
  chat.click();

  if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
    addSubmenu("folder-open", "Files", "File Manager", "ui_fileBrowser").appendTo(mediaOptions);
  }
  addSubmenu("globe", "Assets", "Asset Manager", "ui_assetManager", "entities").appendTo(mediaOptions);

  var combat = addSubmenu("fire", "Combat", "Combat Controls", "ui_combatControls", "state").appendTo(mediaOptions);
  combat.attr("id", "combat-button");

  if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
    addSubmenu("music", "Music", "Music Manager", "ui_audioPlayer", "config").appendTo(mediaOptions);
    addSubmenu("film", "Media", "Media Player", "ui_media").appendTo(mediaOptions);
  }
}


layout.nav = function(){
  var topContent = $("<div>");
  topContent.addClass("flexrow flex alttext");

  var pin = genIcon("pushpin").appendTo(topContent);
  pin.addClass("spadding alttext smooth highlight");
  pin.attr("title", "Lock this menu down");
  pin.click(function(){
    if (top.attr("locked")) {
      top.removeAttr("locked");
      pin.removeClass("highlight");
    }
    else {
      pin.addClass("highlight");
      top.attr("locked", true);
    }
  });

  var buttons = $("<div>").appendTo(topContent);
  buttons.addClass("lrpadding");
  buttons.attr("id", "navbuttons");

  var buttons = $("<div>").appendTo(buttons);
  buttons.addClass("flexmiddle link");
  buttons.css("background", "rgba(0,0,0,0.4)");
  if (hasSecurity(getCookie("UserID"), "Assistant Master") && !game.config.data.offline) {
    var button = genIcon("sunglasses").appendTo(buttons);
    button.addClass("lrmargin");
    button.attr("title", "Special Effects");
    button.click(function(){
      if ($("#special-effects").length) {
        if ($("#special-effects").is(":visible")) {
          $("#special-effects").hide();
        }
        else {
          $("#special-effects").show();
          var max = util.getMaxZ(".ui-popout");
          $("#special-effects").css("z-index", max+1);
        }
      }
      else {
        var specialEffects = $("<div>");
        specialEffects.addClass("alttext flexcolumn");
        for (var i in util.effects) {
          var effect = $("<div>").appendTo(specialEffects);
          effect.addClass("background flexmiddle hover2 outlinebottom lrpadding");
          effect.text(i);
          effect.click(function(){
            var effect = $(this).text();
            $(".displayApp").each(function(){
              runCommand("effect", {effect : effect, tab : $(this).attr("currentTab")});
            });
          });
        }

        var popOut = ui_popOut({
          target : $(this),
          id : "special-effects",
          align : "bottom",
          minimze : true,
          prompt : true,
          title : "SFX",
          close : function(ev, ui) {
            popOut.hide();
            return false;
          },
        }, specialEffects);
        popOut.resizable();
      }
    });
  }


  var app = sync.newApp("ui_setting").appendTo(topContent);
  app.addClass("flexmiddle lrmargin");
  app.removeClass("application");
  app.css("height", "auto");
  app.css("width", "100px");
  app.attr("supressHover", true);
  app.attr("size", "30");
  app.attr("alignpop", "bottom");
  app.css("outline", "none");

  var newApp = sync.newApp("ui_displayTabs").appendTo(topContent);
  newApp.addClass("flexmiddle");
  newApp.attr("target", "primary-display");
  newApp.css("outline", "none");

  setTimeout(function(){
    game.state.addApp(app);
    game.state.addApp(newApp);
  }, 100);


  var top = ui_popOut({
    target : $("body"),
    align : "top left",
    noCss : true,
    hideclose : true,
    pin: false,
    style : {"max-width" : "100vw", "transition" : "opacity 0.5s"}
  }, topContent).attr("docked", "top").attr("fadeHide", "true").attr("docked-z", util.getMinZ(".ui-popout"));
  top.attr("locked", true);
  top.css("box-shadow", "none");
  top.css("background", "rgba(0,0,0,0.0)");
  top.draggable("disable");
  top.addClass("main-dock");
}

layout.nav = function(){
  var topContent = $("<div>");
  topContent.addClass("flexrow flex alttext flexaround");

  var leftContent = $("<div>");
  leftContent.addClass("fit-xy flexcolumn");
  leftContent.css("background", "#D8D7DD");
  leftContent.attr("id", "left-content");
  
  var navDiv = $("<div>").appendTo(topContent);
  navDiv.addClass("flexrow");
  navDiv.css("min-width", "300px");
  navDiv.attr("id", "nav-div");

  function buttonWrap(icon, name, title, click) {
    var iconWrap = $("<button>")
    iconWrap.addClass("background flex flexcolumn flexmiddle link spadding alttext");
    iconWrap.attr("title", title);
    iconWrap.css("min-width", "60px");

    var media = genIcon(icon).appendTo(iconWrap);
    media.addClass("lrpadding dull");

    var titleText = $("<text>").appendTo(iconWrap);
    titleText.addClass("dull");
    titleText.css("font-size", "12px");
    titleText.text(name);

    
    iconWrap.click(function(){
      leftContent.children().empty();

      var selected;
      if ($(this).hasClass("highlight")) {
        selected = true;
      }

      navDiv.children().removeClass("outline highlight");
      navDiv.children().addClass("background");
      navDiv.children().children().addClass("dull");
      if (!selected) {
        $("#left-menu").css("width", $("#nav-div").width());
        $(this).addClass("highlight outline");
        $(this).removeClass("background");
        $(this).children().removeClass("dull");
        click();
        util.dockReveal(left);
      }
      else {
        util.dockHide(left);
      }
      if (!mediaOptions.children().hasClass("highlight") && !navDiv.children().hasClass("highlight")) {
        top.removeAttr("locked");
      }
      else {
        top.attr("locked", true);
      }
    });

    return iconWrap;
  }

  
  buttonWrap("user", "Actors", "View the Actors in your World", function(){
    leftContent.empty();
    leftContent.css("background", "#D8D7DD");
    leftContent.css("pointer-events", "");
    left.css("pointer-events", "");
    var content = sync.newApp("ui_assetManager").appendTo(leftContent);
    content.attr("category", "c");

    game.entities.addApp(content);
  }).appendTo(navDiv);

  buttonWrap("briefcase", "Elements", "View the Elements in your World", function(){
    leftContent.empty();
    leftContent.css("background", "#D8D7DD");
    leftContent.css("pointer-events", "");
    left.css("pointer-events", "");
    var content = sync.newApp("ui_assetManager").appendTo(leftContent);
    content.attr("category", "i");

    game.entities.addApp(content);
  }).appendTo(navDiv);

  buttonWrap("globe", "Maps", "View the Maps in your World", function(){
    leftContent.empty();
    leftContent.css("background", "#D8D7DD");
    leftContent.css("pointer-events", "");
    left.css("pointer-events", "");
    var content = sync.newApp("ui_assetManager").appendTo(leftContent);
    content.attr("category", "b");

    game.entities.addApp(content);
  }).appendTo(navDiv);

  buttonWrap("file", "Resources", "View the Notes in your World", function(){
    leftContent.empty();
    leftContent.css("background", "#D8D7DD");
    leftContent.css("pointer-events", "");
    left.css("pointer-events", "");
    var content = sync.newApp("ui_assetManager").appendTo(leftContent);
    content.attr("category", "p");

    game.entities.addApp(content);
  }).appendTo(navDiv);

  if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
    buttonWrap("folder-open", "Files", "View your local Files", function(){
      leftContent.empty();
      leftContent.css("background", "#D8D7DD");
      leftContent.css("pointer-events", "");
      left.css("pointer-events", "");
      sync.newApp("ui_fileBrowser", null, {"height" : "40px"}).appendTo(leftContent);
    }).appendTo(navDiv);
  }


  
  var splash = genIcon("menu-hamburger").appendTo(navDiv);
  splash.css("padding-right", "4px");
  splash.attr("id", "splash-button");
  splash.attr("title", "Main Menu");
  splash.click(function(){
    openSplash(true);
  });
  splash.hide();

  /*var gameOptions = $("<button>").appendTo(topContent);
  gameOptions.addClass("flexcolumn flexmiddle spadding alttext background");
  gameOptions.attr("title", "View Locations");
  
  var titleText = $("<text>").appendTo(gameOptions);
  titleText.css("font-size", "10px");
  titleText.text("Location");*/

  var newAppTabs = sync.newApp("ui_displayTabs").appendTo(topContent);
  newAppTabs.attr("target", "primary-display");
  newAppTabs.css("outline", "none");
  if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
    var button = genIcon("sunglasses").appendTo(topContent);
    button.addClass("lrpadding flexmiddle alttext size2");
    button.attr("title", "Special Effects");
    button.click(function(){
      if ($("#special-effects").length) {
        if ($("#special-effects").is(":visible")) {
          $("#special-effects").hide();
        }
        else {
          $("#special-effects").show();
          var max = util.getMaxZ(".ui-popout");
          $("#special-effects").css("z-index", max+1);
        }
      }
      else {
        var content = $("<div>");
        content.addClass("alttext flexcolumn foreground");
        for (var i in util.effects) {
          var effect = $("<button>").appendTo(content);
          effect.addClass("background");
          effect.text(i);
          effect.click(function(){
            var effect = $(this).text();
            $(".displayApp").each(function(){
              runCommand("effect", {effect : effect, tab : $(this).attr("currentTab") || 0});
            });
          });
        }

        var popOut = ui_popOut({
          target : $(this),
          id : "special-effects",
          align : "top",
          minimze : true,
          title : "SFX",
          close : function(ev, ui) {
            popOut.hide();
            return false;
          },
        }, content);
        popOut.resizable();
      }
    });
  }

  var newAppTabsWeather = sync.newApp("ui_setting").appendTo(topContent);
  newAppTabsWeather.addClass("flexmiddle lrmargin");
  newAppTabsWeather.removeClass("application");
  newAppTabsWeather.css("height", "auto");
  newAppTabsWeather.css("width", "100px");
  newAppTabsWeather.attr("supressHover", true);
  newAppTabsWeather.attr("size", "30");
  newAppTabsWeather.attr("alignpop", "bottom");
  newAppTabsWeather.css("outline", "none");


  
  var mediaOptions = $("<div>").appendTo(topContent);
  mediaOptions.addClass("flexrow alttext flexaround");
  mediaOptions.css("min-width", "300px");

  var menuContent = $("<div>");
  menuContent.addClass("flexcolumn fit-xy");
  menuContent.css("background", "#D8D7DD");

  var top = ui_popOut({
    target : $("body"),
    align : "top left",
    noCss : true,
    hideclose : true,
    pin: false,
    style : {"width" : "100%", "transition" : "opacity 0.5s"}
  }, topContent).attr("docked", "top").attr("fadeHide", "true").attr("docked-z", util.getMinZ(".ui-popout"));
  top.attr("locked", true);
  top.draggable("disable");
  top.addClass("main-dock").css("max-width", "100%");
  top.attr("id", "main-nav");    
  top.css("box-shadow", "none");

  var left = ui_popOut({
    target : $("body"),
    align : "left",
    noCss : true,
    hideclose : true,
    pin: false,
    style : {"min-width" : "300px", "height" : $(window).outerHeight() - $("#main-nav").outerHeight(), "transition" : "opacity 0.5s"}
  }, leftContent).attr("docked", "left").attr("fadeHide", "true").attr("docked-z", util.getMinZ(".ui-popout"));
  left.attr("locked", true);
  left.draggable("disable");
  left.css("opacity", "0");
  left.attr("id", "left-menu");
  left.css("box-shadow", "none");
  left.addClass("main-dock");

  var right = ui_popOut({
    target : $("body"),
    noCss : true,
    hideclose : true,
    pin: false,
    style : {"max-width" : "100vw", "min-width" : "300px", "height" : $(window).outerHeight() - $("#main-nav").outerHeight(), "transition" : "opacity 0.5s"}
  }, menuContent).attr("docked", "right").attr("fadeHide", "true").attr("docked-z", util.getMinZ(".ui-popout"));
  right.attr("locked", true);
  right.draggable("disable");
  right.attr("id", "right-menu");
  right.css("opacity", "0");
  right.css("box-shadow", "none");
  right.addClass("main-dock");
  
  setTimeout(function(){
    left.css("height", $(window).outerHeight() - $("#main-nav").outerHeight());
    left.css("top", $("#main-nav").outerHeight());
    left.css("width", navDiv.outerWidth());

    right.css("width", mediaOptions.outerWidth());
    right.css("height", $(window).outerHeight() - $("#main-nav").outerHeight());
    right.css("top", $("#main-nav").outerHeight());
    util.dockHide(left);
    chat.click();
  }, 100);

  function addSubmenu(icon, shorttitle, title, create, object) {
    var iconWrap = $("<button>")
    iconWrap.addClass("flex background flexcolumn flexmiddle link spadding");
    iconWrap.attr("title", title);

    var media = genIcon(icon).appendTo(iconWrap);
    media.addClass("lrpadding dull");
    media.css("font-size", "1.2em");

    var titleText = $("<text>").appendTo(iconWrap);
    titleText.addClass("dull");
    titleText.css("font-size", "10px");
    titleText.text(shorttitle);

    var content;
    if (object) {
      content = sync.newApp(create).appendTo(menuContent);
      if (create == "ui_fileBrowser") {
        content.attr("height", "40px");
      }
      game[object].addApp(content);
    }
    else {
      content = sync.newApp(create, null, {height : "40px"}).appendTo(menuContent);
      if (create == "ui_fileBrowser") {
        content.attr("height", "40px");
      }
    }
    content.hide();
    if (create == "ui_renderHelp" && !$("#quick-help").length) {
      content.attr("id", "quick-help");
      content.css("overflow", "hidden");
    }
    
    iconWrap.click(function(){
      menuContent.children().hide();

      var selected;
      if ($(this).hasClass("highlight")) {
        selected = true;
      }
    
      mediaOptions.children().removeClass("outline highlight");
      mediaOptions.children().addClass("background");
      mediaOptions.children().children().addClass("dull");
      if (!selected) {
        $(this).addClass("outline highlight");
        $(this).removeClass("background");
        $(this).children().removeClass("dull");
  
        content.show();
        if (create == "ui_textBox") {
          game.logs.update();
        }
        else if (create == "ui_media") {
          content.find("input").focus();
        }
        else if (create == "ui_combatControls") {
          if (!game.locals["turnOrder"]) {
            game.locals["turnOrder"] = sync.obj("turnOrder");
            game.locals["turnOrder"].data = {combat : {engaged : {}, current : {}}};
          }
          for (var index in game.players.data) {
            if (game.players.data[index].entity) {
              game.locals["turnOrder"].data.combat.engaged[game.players.data[index].entity] = {};
            }
          }
          game.locals["turnOrder"].update();
        }
        util.dockReveal(right);
      }
      else if (selected) {
        util.dockHide(right);
      }
      if (!mediaOptions.children().hasClass("highlight") && !navDiv.children().hasClass("highlight")) {
        top.removeAttr("locked");
      }
      else {
        top.attr("locked", true);
      }
    });
    iconWrap.contextmenu(function(ev){
      var newApp;
      if (create == "ui_media") {
        newApp = sync.newApp(create, null, {});
        newApp.addClass("flex inactive");

        var popup = ui_popOut({
          target : $("body"),
          title : title,
          style : {"width" : "400px", "height" : "400px"}
        }, newApp);
        popup.resizable();
      }
      else if (create == "ui_textBox") {
        newApp = sync.newApp("ui_textBox");
        newApp.addClass("sheet1");
        game.logs.addApp(newApp);

        var popup = ui_popOut({
          target : $("body"),
          title : title,
          style : {"width" : "400px", "height" : "400px"}
        }, newApp);
        popup.resizable();
      }
      else if (object) {
        newApp = sync.newApp(create);
        game[object].addApp(newApp);

        var popup = ui_popOut({
          target : $("body"),
          title : title,
          style : {"width" : "400px", "height" : "400px"}
        }, newApp);
        popup.resizable();
      }

      return false;
    });
    return iconWrap;
  }
  var library = genIcon("wrench", "Steam Workshop").appendTo(gameOptions);
  library.click(function(){
    var workshopObj = sync.obj();
    workshopObj.data = {};

    var newApp = sync.newApp("ui_workshop");
    newApp.attr("tab", "modules");
    workshopObj.addApp(newApp);

    var pop = ui_popOut({
      target : $("body"),
      minimize : true,
      prompt : true,
      title : "Workshop",
      style : {"width" : "500px", "height" : $(window).height() - 125}
    }, newApp);
    pop.resizable();

    if ($("#game-library").length) {
      $("#game-library").hide();
    }
  });


  var media = genIcon("book", "Compendiums").appendTo(gameOptions);
  media.addClass("lrpadding dull");
  media.click(function(){
    if ($("#game-library").length) {
      $("#game-library").toggle();
    }
    else {
      var workshopObj = sync.obj();
      workshopObj.data = {};

      var newApp = sync.newApp("ui_workshop");
      newApp.attr("hideTabs", true);
      workshopObj.addApp(newApp);

      var pop = ui_popOut({
        target : $("body"),
        id : "game-library",
        minimize : true,
        prompt : true,
        close : function(){
          $("#game-library").toggle();
          return false;
        },
        title : "Compendiums",
        style : {"width" : "500px", "height" : $(window).height() - 125}
      }, newApp);
      pop.resizable();
    }
  });


  var gameOptions = $("<div>").appendTo(mediaOptions);
  gameOptions.addClass("flexcolumn flexmiddle spadding dull background outline smooth subtitle");
  gameOptions.css("font-size", "9px");
  gameOptions.append("<div class='flexrow'><a href='https://discord.gg/usy4ByN' target='_' class='lrmargin' title='Discord Channel'>Discord<img width=12 height=12 src='/content/Discord-Logo-White.png'></img></a><a href='http://wiki.gmforge.io/' target='_' id='help-button'>Wiki</div>");



  var gameOptions = $("<button>").appendTo(mediaOptions);
  gameOptions.addClass("flexcolumn flexmiddle spadding dull background");
  gameOptions.attr("title", "Options");
  
  
  var media = genIcon("cog").appendTo(gameOptions);
  media.addClass("lrpadding dull");
  media.css("font-size", "1.2em");

  var titleText = $("<text>").appendTo(gameOptions);
  titleText.addClass("dull");
  titleText.css("font-size", "10px");
  titleText.text("Options");

  gameOptions.click(function(){
    menuContent.children().hide();
    
    var selected;
    if ($(this).hasClass("highlight")) {
      selected = true;
    }

    mediaOptions.children().removeClass("outline highlight");
    mediaOptions.children().addClass("background");
    mediaOptions.children().children().addClass("dull");

    if (!selected) {
      $(this).addClass("outline highlight");
      $(this).removeClass("background");
      $(this).children().removeClass("dull");
      util.dockReveal(right);
      if (!mediaOptions.children().hasClass("highlight") && !navDiv.children().hasClass("highlight")) {
        top.removeAttr("locked");
      }
      else {
        top.attr("locked", true);
      }
      if ($("#game-options").length) {
        $("#game-options").show();
        
        return;
      }
      else {
        var content = $("<div>").appendTo(menuContent);
        content.attr("id", "game-options");
        content.addClass("flexcolumn padding");

        var button = $("<button>").appendTo(content);
        button.addClass("fit-x");
        button.append("Change/Update Templates");
        button.click(function(){
          var choices = $("<div>");
          choices.addClass("flexcolumn fit-x");

          for (var i in game.locals["gameList"]) {
            if (game.locals["gameList"][i] && game.locals["gameList"][i].build == game.templates.build) {
              var option = $("<button>").appendTo(choices);
              option.addClass("fit-x");
              option.attr("index", i);
              option.text(sync.rawVal(game.locals["gameList"][i].info.name));
              option.click(function(){
                runCommand("updateTemplate", duplicate(game.locals["gameList"][$(this).attr("index")]));
                layout.coverlay("restore");
              });
            }
          }

          ui_popOut({
            target : $("body"),
            id : "restore",
            title : "Select Template",
            style : {"width" : "400px", "max-height" : "600px"}
          }, choices);
        });

        var hotkeyCtrl = $("<div>").appendTo(content);
        hotkeyCtrl.addClass("spadding");

        var hotkeyCtrl = $("<div>").appendTo(content);
        hotkeyCtrl.addClass("flexcolumn");

        var hotKeys = genIcon("link", "Show HotKey List", true).appendTo(hotkeyCtrl);
        hotKeys.attr("title", "Show HotKey List");
        hotKeys.click(function(){
          toggleHotKeysDisplay();
        });

        var floatingApp = genIcon("plus", "Temporary App", true).appendTo(content);
        floatingApp.attr("title", "Temporary App");
        floatingApp.click(function() {
          var buildList = [];
          //options
          function recurse(data, source) {
            for (var index in data) {
              if (index == "_ui") {
                for (var ind in data[index]) {
                  data[index][ind].click = function(ev, self) {
                    var content = sync.newApp(self.attr("ui-name"), null, {});

                    var popout = ui_popOut({
                      title : self.attr("ui-name"),
                      target : floatingApp,
                      align : "bottom",
                      minimize : true,
                      maximize : true,
                      dragThickness : "0.5em",
                      resizable : true,
                      style : {"max-width" : "none"},
                    }, content);
                    popout.css("padding", "0px");
                    popout.addClass("floating-app");
                  }
                  source.push(data[index][ind]);
                }
              }
              else {
                var addObj = {name : index, submenu : []};
                recurse(data[index], addObj.submenu);
                source.push(addObj);
              }
            }
          }

          recurse(game.components, buildList);
          var dropMenu = ui_dropMenu($(this), buildList, {id: "layout-control-popup"}).css("z-index", "100000000000");
        });

        var gameOptCtrl = $("<div>").appendTo(content);
        gameOptCtrl.addClass("flexcolumn");

        var label = genIcon("log-in", "Internal Network Game Invite", true).appendTo(gameOptCtrl);
        label.css("pointer-events", "auto");
        label.click(function(){
          var input = genInput({
            parent : $(this),
            id : "copy-url",
            value : window.location.href,
          });

          if (game.config.data.password) {
            input.val(encodeURI(input.val()+"?password="+game.config.data.password));
          }
          if (getCookie("InternalIP")) {
            input.val(getCookie("InternalIP")+":30000/join");
          }
          input.focus();
          input.get(0).setSelectionRange(0, input.val().length);

          document.execCommand("copy");
          input.remove();
          sendAlert({text : "Invitation Copied!"});
        });

        var label = genIcon("log-in", "Game Invite (UPnP)", true).appendTo(gameOptCtrl);
        label.css("pointer-events", "auto");
        label.click(function(){
          var input = genInput({
            parent : $(this),
            id : "copy-url",
            value : window.location.href,
          });

          if (game.config.data.password) {
            input.val(encodeURI(input.val()+"?password="+game.config.data.password));
          }
          if (getCookie("ExternalIP")) {
            input.val(getCookie("ExternalIP")+":"+getCookie("PublicPort")+"/join");
          }
          input.focus();
          input.get(0).setSelectionRange(0, input.val().length);

          document.execCommand("copy");
          input.remove();
          sendAlert({text : "Invitation Copied!"});
        });

        var label = genIcon("log-in", "Game Invite (Port Forwarding)", true).appendTo(gameOptCtrl);
        label.css("pointer-events", "auto");
        label.click(function(){
          var input = genInput({
            parent : $(this),
            id : "copy-url",
            value : window.location.href,
          });

          if (game.config.data.password) {
            input.val(encodeURI(input.val()+"?password="+game.config.data.password));
          }
          if (getCookie("ExternalIP")) {
            input.val(getCookie("ExternalIP")+":"+getCookie("PrivatePort")+"/join");
          }
          input.focus();
          input.get(0).setSelectionRange(0, input.val().length);

          document.execCommand("copy");
          input.remove();
          sendAlert({text : "Invitation Copied!"});
        });

        var label = genIcon("log-in", "Game Invite (NGROK)", true).appendTo(gameOptCtrl);
        label.css("pointer-events", "auto");
        label.click(function(){
          var input = genInput({
            parent : $(this),
            id : "copy-url",
            value : window.location.href.split("?password")[0],
          });

          if (getCookie("PublicLink")) {
            input.val(decodeURIComponent(getCookie("PublicLink"))+"/join?select=true");
          }

          input.focus();
          input.get(0).setSelectionRange(0, input.val().length);

          document.execCommand("copy");
          input.remove();
          sendAlert({text : "Invitation Copied!"});
          layout.coverlay("invite");
        });

      var reactionsCtrl = $("<div>").appendTo(content);
      reactionsCtrl.addClass("flexcolumn");

      var reactions = genIcon("comment", "Reactions Enabled", true);
      if (getCookie("disableReactions") == "true") {
        reactions = genIcon("comment", "Reactions Disabled", true);
        reactions.css("color", "rgb(170, 130, 130)");
      }
      reactions.appendTo(reactionsCtrl);
      reactions.click(function() {
        if (getCookie("disableReactions") == "true") {
          setCookie("disableReactions", "");
        }
        else {
          setCookie("disableReactions", "true");
        }
        layout.coverlay("game-options");
        gameOptions.click();
      });

      var alertsCtrl = $("<div>").appendTo(content);
      alertsCtrl.addClass("flexcolumn");

      var alerts = genIcon("bell", "Alerts Enabled", true);
      if (getCookie("disableAlerts") == "true") {
        alerts = genIcon("bell", "Alerts Disabled", true);
        alerts.css("color", "rgb(170, 130, 130)");
      }
      alerts.appendTo(alertsCtrl);
      alerts.click(function() {
        if (getCookie("disableAlerts") == "true") {
          setCookie("disableAlerts", "");
        }
        else {
          setCookie("disableAlerts", "true");
        }
        layout.coverlay("game-options");
        gameOptions.click();
      });

      var alerts = genIcon("film", "Media Enabled", true);
      if (mediaPlayer.disabled) {
        alerts = genIcon("film", "Media Disabled", true);
        alerts.css("color", "rgb(170, 130, 130)");
      }
      alerts.appendTo(alertsCtrl);
      alerts.click(function() {
        if (mediaPlayer.disabled) {
          delete mediaPlayer.disabled;
        }
        else {
          mediaPlayer.disabled = true;
        }
        layout.coverlay("game-options");
        gameOptions.click();
      });


      var alerts = genIcon("folder-close", "File Controls Disabled", true);
      alerts.css("color", "rgb(170, 130, 130)");
      if (layout.fileControls) {
        alerts = genIcon("folder-open", "File Controls Enabled", true);
      }
      alerts.appendTo(alertsCtrl);
      alerts.click(function() {
        if (layout.fileControls) {
          delete layout.fileControls;
        }
        else {
          layout.fileControls = true;
        }
        $(".application[ui-name='ui_fileBrowser']").each(function(){sync.updateApp($(this), null);});
        layout.coverlay("game-options");
        gameOptions.click();
      });

      var label = genIcon("list-alt", "Manage Mods (World Only)", true).appendTo(gameOptCtrl);
      label.css("pointer-events", "auto");
      label.click(function(){
        var newApp = sync.newApp("ui_manageMods");
        game.config.addApp(newApp);

        ui_popOut({
          target : $("body"),
          title : "Manage Mods",
          id : "manage-mods",
          style : {"width" : "400px", "height" : "400px"}
        }, newApp);
      });

      var anchor = genIcon("th-large", "Toggle Anchor Mode", true)//.appendTo(alertsCtrl);
      anchor.click(function(){
        if (!$(".main-dock").length) {
          setCookie("table_save", '[{"w":100,"h":100,"class":"layout-table","a":[{"w":100,"h":100,"class":"layout-row-data","app":"ui_primaryView"}]}]', 9000000000000);
          layout.init();
        }
        else {
          setCookie("table_save", '[{"w":100,"h":100,"class":"layout-table","a":[{"w":77,"h":100,"class":"layout-row-data","app":"ui_displayManager"},{"w":23,"h":100,"class":"layout-row-data","app":"ui_textBox"}]}]');
          layout.anchorInit();
          layout.load();
        }
      });

      content.append("<div class='padding'></div>");
      content.append("<u class='bold fit-x flexmiddle'>Mods and Extensions</u>");

      var app = sync.newApp("ui_hotApps", null, {vertical : "true"});
      app.appendTo(content);
      app.addClass("fit-x scroll-y");
      app.removeClass("application");
      app.attr("vertical", "true");
      app.css("width", "auto");
      app.css("border-color", "transparent");
      }
    }
    else {
      if (!mediaOptions.children().hasClass("highlight") && !navDiv.children().hasClass("highlight")) {
        top.removeAttr("locked");
      }
      else {
        top.attr("locked", true);
      }
      $(this).addClass("background");
      $(this).removeClass("highlight outline");
      util.dockHide(right);
    }
 });

  if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
    addSubmenu("music", "Music", "Music Manager", "ui_audioPlayer", "config").appendTo(mediaOptions);
    addSubmenu("film", "Media", "Media Player", "ui_media").appendTo(mediaOptions);
  }
  var combat = addSubmenu("fire", "Combat", "Combat Controls", "ui_combatControls", "state").appendTo(mediaOptions);
  combat.attr("id", "combat-button");
  
  var chat = addSubmenu("comment", "Chat", "Event Log", "ui_textBox").appendTo(mediaOptions);
  chat.attr("id", "chat-button");

  var bottomContent = $("<div>");
  bottomContent.addClass("flexrow flex");
  bottomContent.css("height", "50px");
  
  var pin = genIcon("pushpin").appendTo(bottomContent);
  pin.addClass("outline spadding alttext smooth highlight flexmiddle");
  pin.attr("title", "Lock this menu down");
  pin.css("color", "white");
  pin.click(function(){
    if (bottom.attr("locked")) {
      bottom.removeAttr("locked");
      $(this).removeClass("highlight");
      $(this).addClass("background");
    }
    else {
      $(this).addClass("highlight");
      $(this).removeClass("background");
      bottom.attr("locked", true);
    }
  });
  
  var newApp = sync.newApp("ui_selfToken").appendTo(bottomContent);
  newApp.removeClass("application");
  newApp.css("overflow", "none");
  
  game.players.addApp(newApp);

  var gameOptions = $("<div>").appendTo(bottomContent);
  gameOptions.addClass("flexcolumn flexmiddle spadding alttext");
  gameOptions.attr("id", "navbuttons");
  
  var cards = genIcon("book").appendTo(gameOptions);

  var titleText = $("<text>").appendTo(gameOptions);
  titleText.css("font-size", "10px");
  titleText.text("Cards");

  gameOptions.click(function(){
    var contnt = $("<div>");

    var cardWrap = $("<div>").appendTo(contnt);
    cardWrap.addClass("flexrow");
    cardWrap.css("overflow", "hidden");
  
    var newApp = sync.newApp("ui_hand").appendTo(contnt);
    newApp.attr("UserID", getCookie("UserID"));
    newApp.css("overflow", "visible");
    newApp.css("margin-top", "4px");
    newApp.css("outline", "none");
    newApp.css("border", "none");
    game.state.addApp(newApp);
  
  
    if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
      var cardWrap = $("<div>").appendTo(contnt);
      cardWrap.addClass("flexrow flexmiddle");
  
      var newApp = sync.newApp("ui_deck").appendTo(cardWrap);
      newApp.addClass("flexmiddle lrmargin");
      newApp.removeClass("application");
      newApp.css("outline", "none");
      newApp.css("overflow", "visible");
      game.state.addApp(newApp);
    }

    ui_popOut({
      target : $("body"),
      id : "card-pop",
      title : "Playing Cards",
    }, contnt);
  });

  var app = sync.newApp("ui_players").appendTo(bottomContent);
  app.attr("height", 50);
  app.css("overflow-y", "hidden");
  app.css("pointer-events", "none");
  app.css("border", "none");
  game.players.addApp(app);

  game.locals["workshop"] = game.locals["workshop"] || sync.obj();
  game.locals["workshop"].data = game.locals["workshop"].data || {};

  sync.newApp("ui_workshop", game.locals["workshop"], {});

  var bottom = ui_popOut({
    target : $("body"),
    align : "bottom",
    noCss : true,
    hideclose : true,
    pin: false,
    style : {"width" : newAppTabs.width(), "max-width" : "100000000px", "transition" : "opacity 0.5s"}
  }, bottomContent).attr("docked", "bottom").attr("fadeHide", "true").attr("docked-z", util.getMinZ(".ui-popout"));
  bottom.attr("locked", true);
  bottom.css("box-shadow", "none");
  bottom.css("background", "rgba(0,0,0,0.0)");
  bottom.draggable("disable");
  bottom.addClass("main-dock");
  bottom.attr("id", "player-menu");
  setTimeout(function(){
    game.state.addApp(newAppTabs);
    game.state.addApp(newAppTabsWeather);
      
    util.dockReveal(bottom);
  }, 1000);
}

 

layout.players = function(){
  var bottomContent = $("<div>");
  bottomContent.addClass("flexrow flex");
  bottomContent.css("position", "relative");

  //bottom right
  var app = sync.newApp("ui_players").appendTo(bottomContent);
  app.attr("height", 50);
  app.css("overflow-y", "hidden");
  app.css("pointer-events", "none");
  app.css("border", "none");
  game.players.addApp(app);
  game.players.listen["recenter"] = function(){
    app.append("<div class='flex'></div>");
    util.dockReveal(bottom);
    return true;
  };
  var bottom = ui_popOut({
    target : $("body"),
    align : "bottom-right",
    noCss : true,
    hideclose : true,
    style : {"transition" : "opacity 0.5s", "min-height" : "70px", "min-width" : "200px", "box-shadow" : "none"}
  }, bottomContent).attr("fadeHide", "true").attr("docked-z", util.getMinZ(".ui-popout")).attr("locked", "true").attr("docked", "bottom");
  bottom.addClass("main-dock");
  bottom.draggable("disable");
  bottom.attr("id", "player-list");
}

layout.hotbar = function(){
  var bottomContent = $("<div>");
  bottomContent.addClass("flexrow flex alttext");
  bottomContent.css("position", "relative");

  var cardWrap = $("<div>").appendTo(bottomContent);
  cardWrap.addClass("flexcolumn lrmargin");

  var rolls = sync.newApp("ui_hotRolls");
  rolls.css("outline", "none");
  rolls.appendTo(cardWrap);
  game.players.addApp(rolls);

  var cardWrap = $("<div>").appendTo(bottomContent);
  cardWrap.addClass("flexrow");
  cardWrap.css("height", "6.0em");

  var newApp = sync.newApp("ui_hand").appendTo(cardWrap);
  newApp.attr("UserID", getCookie("UserID"));
  newApp.css("overflow", "visible");
  newApp.css("margin-top", "4px");
  newApp.css("outline", "none");
  newApp.css("border", "none");
  game.state.addApp(newApp);

  if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
    var cardWrap = $("<div>").appendTo(bottomContent);
    cardWrap.addClass("flexrow flexmiddle");

    var newApp = sync.newApp("ui_deck").appendTo(cardWrap);
    newApp.addClass("flexmiddle lrmargin");
    newApp.removeClass("application");
    newApp.css("outline", "none");
    newApp.css("overflow", "visible");
    game.state.addApp(newApp);
  }

  bottomContent.bind("paste", function(e) {
    // access the clipboard using the api
    // firefox won't call this if ctrl shift + v
    if (hasSecurity(getCookie("UserID"), "Trusted Player")) {
      if (getCookie("disableReactions") != "true") {
        ui_processLink(e.originalEvent.clipboardData.getData('text'), function(link, newLink, exists){
          runCommand("reaction", newLink);
        });
      }
    }
  });

  var bottom = ui_popOut({
    target : $("body"),
    align : "bottom-left",
    noCss : true,
    hideclose : true,
    id : "hot-bar",
    style : {"max-width" : "60vw", "transition" : "opacity 0.5s"}
  }, bottomContent).attr("docked", "bottom").attr("fadeHide", "true").attr("docked-z", util.getMinZ(".ui-popout")).attr("locked", true);
  bottom.css("background", "rgba(0,0,0,0.0)").css("box-shadow", "none");

  game.players.listen["recenterhot"] = function(){
    setTimeout(function(){util.dockReveal($("#hot-bar"));}, 10);
    return true;
  };

  bottom.draggable("disable");
  bottom.addClass("main-dock");
}

var mediaPlayer = mediaPlayer || {iframe : null, width : '400', height : '200'};

function media_init() {
  if (mediaPlayer.disabled) {
    return false;
  }
  mediaPlayer.iframe = null;
  var contentCC = $("<div>");
  contentCC.bind("paste", function(e) {
    if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
      var reg = /([v][=])([\S]*)/;
      var ex = reg.exec(e.originalEvent.clipboardData.getData('text'));
      if (ex) {
        runCommand("media", {cmd : "update", data : {video : ex[2]}});
      }
    }
  });

  contentCC.on("dragover", function(ev) {
    ev.preventDefault();
    ev.stopPropagation();
    if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
      if (!$("#media-drag-overlay").length) {
        var olay = layout.overlay({
          target : contentCC,
          id : "media-drag-overlay",
          style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
        });
        olay.addClass("flexcolumn flexmiddle alttext");
        olay.css("font-size", "2em");
        olay.append("<b>Drop to Load Video</b>");
      }
    }
  });
  contentCC.on('drop', function(ev){
    ev.preventDefault();
    ev.stopPropagation();
    var dt = ev.originalEvent.dataTransfer;
    if (dt.getData("Text")) {
      if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
        var reg = /([v][=])([\S]*)/;
        var ex = reg.exec(dt.getData("Text"));
        if (ex) {
          runCommand("media", {cmd : "update", data : {video : ex[2]}});
        }
      }
    }
    layout.coverlay("media-drag-overlay");
  });

  contentCC.on("dragleave", function(ev) {
    ev.preventDefault();
    ev.stopPropagation();
    layout.coverlay("media-drag-overlay");
  });

  var content = $("<div>").appendTo(contentCC);
  content.attr("id", "media");

  var frame = ui_popOut({
    id : "dragMedia",
    noCss : true,
    close : function(){
      runCommand("media", {cmd : "watching", video : ""});
    },
    style : {"position": "fixed", "min-width": "", "min-height": "", "z-index" : "2000", "background-color" : "white"}
  }, contentCC).removeClass("ui-popout").addClass("smooth");


  var seekingWrap = $("<div>").appendTo(contentCC);
  seekingWrap.addClass("flexrow flexbetween");

  var seeking = genInput({
    parent : seekingWrap,
    type: "range",
    min : 0,
    max : 0, // update this with
    style : {"padding" : "0px"}
  }).addClass("fit-x");
  // So messy, but hey it works
  seeking.hover(function(){
    mediaPlayer.manual = true;
  },
  function() {
    mediaPlayer.manual = false;
    mediaPlayer.update();
  });
  seeking.bind("input", function(){
    seekingLabel.empty();
    seekingLabel.text(String(parseInt($(this).val())/100).formatTime(1)+"/"+String(mediaPlayer.iframe.getDuration()).formatTime(1));
  });
  seeking.click(function() {
    mediaPlayer.manual = true;
    setTimeout(function(){mediaPlayer.manual = false;},10);
  });
  seeking.change(function() {
    if (mediaPlayer.iframe) {
      runCommand("media", {cmd : "update", data : {video : mediaPlayer.video, list : mediaPlayer.list, time : parseInt($(this).val())/100}});
      $(this).attr("disabled", "disabled");
    }
  });

  seekingWrap.append($("<div id='mediaControls' class='flexaround' style='font-size: 2em;'></div>"));

  var seekingLabel = $("<div>").appendTo($("#mediaControls"));
  seekingLabel.css("font-size", "12px");
  seekingLabel.addClass("flexmiddle lrmargin");
  seekingLabel.text("0:00/0:00");

  var div = $("<div>").appendTo($("#mediaControls"));
  div.addClass("flexmiddle");
  div.css("pointer-events", "auto");

  var volumeIcon = genIcon({icon : "volume-up", raw : true});
  volumeIcon.addClass("hover2 subtitle");
  volumeIcon.appendTo(div);
  volumeIcon.click(function(){
    var volumeContent = $("<div>");
    var volume = genInput({
      parent : volumeContent,
      type: "range",
      min : 0,
      value : 100,
      max : 400,
      style : {"padding": "0", "pointer-events" : "auto", "width" : "100px"},
    });

    volume.val(parseInt((getCookie("volume") || 100)));
    mediaPlayer.volume = parseInt((getCookie("volume") || 100));
    volume.change(function() {
      mediaPlayer.setVolume(Math.ceil($(this).val()/4));
      setCookie("volume", Math.ceil($(this).val()/4));
      mediaPlayer.volume = Math.ceil($(this).val()/4);
      if ($(this).val() == 0) {
        volumeIcon.changeIcon("volume-off");
        volumeIcon.addClass("subtitle");
      }
      else if ($(this).val() < 50) {
        volumeIcon.changeIcon("volume-down");
        volumeIcon.addClass("subtitle");
      }
      else {
        volumeIcon.changeIcon("volume-up");
        volumeIcon.addClass("subtitle");
      }
      $("#media-volume-label").text(" " + $(this).val() + "%");
    });

    ui_popOut({
      target : $(this),
      align : "top",
      title : "volume",
      id : "youtube-volume"
    }, volumeContent);
  });

  var value = $("<div class='flexmiddle'><b id='media-volume-label' style='font-size: 14px;'> "+(getCookie("volume") || 100)+"%</b></div>");
  value.addClass("hover2");
  value.click(function(){
    volumeIcon.click();
  });
  value.appendTo(div);

  var userCountDiv = $("<div>").appendTo(("#mediaControls"));
  userCountDiv.addClass("flexmiddle lrmargin");

  var userCount = genIcon({icon : "user", raw : true}).appendTo(userCountDiv);
  userCount.css("font-size", "12px");

  var userLabel = $("<div>").appendTo(userCountDiv);
  userLabel.attr("id", "mediausercount");
  userLabel.css("font-size", "12px");
  userLabel.addClass("flexmiddle");
  userLabel.text("x1");

  //var nextIcon = genIcon("forward").appendTo($("#mediaControls"));
  // states
  // 0 NO VIDEO
  // 1 LOADING
  // 2 READY
  // 3 PLAYING
  // 4 OUT OF SYNC
  function onYouTubeIframeAPIReady() {

  }

  function onPlayerReady(event) {
    mediaPlayer.play(); // prime the video for playing
    mediaPlayer.update();
    mediaPlayer.volume = mediaPlayer.volume || parseInt((getCookie("volume") || 100));
    mediaPlayer.setVolume(Math.ceil((mediaPlayer.volume)/4));
    mediaPlayer.update();
  }

  // 5. The API calls this function when the player's state changes.
  //    The function indicates that when playing a video (state=1),
  //    the player should play for six seconds and then stop.
  mediaPlayer.think = function() {
    if (mediaPlayer.iframe.getCurrentTime() < mediaPlayer.iframe.getDuration() && mediaPlayer.iframe.getPlayerState() == YT.PlayerState.PLAYING) {
      mediaPlayer.update(true);
      setTimeout(mediaPlayer.think, 100);
    }
  }

  function onPlayerStateChange(event) {
    if (!mediaPlayer.executing) {
      if (event.data == YT.PlayerState.PLAYING) {
        // changed state to playing, better execute it
        mediaPlayer.executing = {cmd : "waiting"};
        mediaPlayer.pause(); // counter the last action
      }
      else if (event.data == YT.PlayerState.PAUSED) {
        runCommand("media", {cmd : "update", data : {video : mediaPlayer.video, list : mediaPlayer.list, time : mediaPlayer.iframe.getCurrentTime()}});
      }
    }
    else if (mediaPlayer.executing.cmd == "play") {
      if (event.data == YT.PlayerState.PLAYING) {
        mediaPlayer.think();
        delete mediaPlayer.executing;
      }
      else {
        mediaPlayer.play(); // get this shit playing
      }
    }
    else if (mediaPlayer.executing.cmd == "update") {
      if (event.data == YT.PlayerState.PLAYING) {
        mediaPlayer.pause(); // get this shit paused
      }
      else if (event.data == YT.PlayerState.PAUSED) {
        // all ready
        if (mediaPlayer.executing.time != null) {
          mediaPlayer.iframe.seekTo(mediaPlayer.executing.time || 0);
        }
        delete mediaPlayer.executing;
        //once it is all complete send ack
        runCommand("media", {cmd : "update-ack", data : {state : 2}});
      }
      else {
        mediaPlayer.play(); // get this shit playing to start buffering
      }
    }
    else if (mediaPlayer.executing.cmd == "waiting") {
      if (event.data == YT.PlayerState.PAUSED) {
        runCommand("media", {cmd : "play"});
        delete mediaPlayer.executing;
      }
      else {
        mediaPlayer.executing = {cmd : "waiting"};
        mediaPlayer.pause(); // counter the last action
      }
    }
    mediaPlayer.lastState = event.data;
  }

  mediaPlayer.update = function(update) {
    if (mediaPlayer.iframe != null) {
      seeking.attr("max", mediaPlayer.iframe.getDuration() * 100);

      if (!mediaPlayer.manual || update) {
        seeking.val(Math.floor(mediaPlayer.iframe.getCurrentTime() * 100));
      }
      seekingLabel.empty();
      seekingLabel.text(String(mediaPlayer.iframe.getCurrentTime()).formatTime(1)+"/"+String(mediaPlayer.iframe.getDuration()).formatTime(1));
    }
  }

  mediaPlayer.setVolume = function(amt) {
    if (mediaPlayer.iframe && mediaPlayer.iframe.setVolume) {
      return mediaPlayer.iframe.setVolume(amt);
    }
  }

  mediaPlayer.play = function(time) {
    if (mediaPlayer.iframe && mediaPlayer.iframe.playVideo) {
      return mediaPlayer.iframe.playVideo();
    }
  }

  mediaPlayer.pause = function(time) {
    if (mediaPlayer.iframe && mediaPlayer.iframe.pauseVideo) {
      return mediaPlayer.iframe.pauseVideo();
    }
  }

  mediaPlayer.isPlaying = function(time) {
    if (mediaPlayer.iframe) {
      return mediaPlayer.getState() == 3;
    }
    return false;
  }

  mediaPlayer.getState = function() {
    if (mediaPlayer.iframe) {
      var state = mediaPlayer.iframe.getPlayerState();
      if (state == YT.PlayerState.PLAYING) {
        return 3;
      }
      else if (state == YT.PlayerState.PAUSED) {
        return 2;
      }
      return 1;
    }
    return 0;
  }
  var _watching = {};
  mediaPlayer.command = function(data) {
    if (mediaPlayer.disabled) {
      return false;
    }
    if (data.cmd == "watching") {
      // live count of who's watching what
      if (data.userID) {
        if (data.video) {
          _watching[data.userID] = data.video;
        }
        else {
          delete _watching[data.userID];
        }
      }
      var count = 0;
      for (var key in _watching) {
        if (_watching[key] == mediaPlayer.video) {
          count = count + 1;
        }
      }
      $("#mediausercount").text("x"+count);
      return;
    }
    if (data.cmd == "play") {
      // if the server is sending this command we are OK to play the video
      mediaPlayer.executing = data;
      mediaPlayer.play();
    }
    else if (data.cmd == "update") {
      if (!mediaPlayer.iframe) {
        mediaPlayer.iframe = new YT.Player('media', {
          width: mediaPlayer.width,
          height: mediaPlayer.height,
          videoId: data.data.video,
          playerVars: {controls: 0, disablekb: 1, fs: 0, showinfo: 0, iv_load_policy: 3, rel: 0, start : (data.data.time || 0)},
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
        $("#dragMedia").css("left", $(window).outerWidth()/2 - $("#dragMedia").outerWidth()/2);
        $("#dragMedia").css("top", $(window).outerHeight() - $("#dragMedia").outerHeight());
      }
      else {
        if (data.data.video != mediaPlayer.video) {
          mediaPlayer.iframe.cueVideoById({videoId : data.data.video, startSeconds : (data.data.time || 0)});
        }
        else if (data.data.time != null && mediaPlayer.iframe.getCurrentTime() != (data.data.time || 0)) {
          mediaPlayer.iframe.seekTo(data.data.time || 0);
        }
        seeking.removeAttr("disabled");
        setTimeout(function() {mediaPlayer.update(true);}, 100);
      }
      mediaPlayer.video = data.data.video;
      //mediaPlayer.list = data.data.list;
      //mediaPlayer.index = data.data.index;
      mediaPlayer.executing = data;

      mediaPlayer.play();
    }
    runCommand("media", {cmd : "watching", video : mediaPlayer.video});
  }
}

function notify(content, noteData){
  noteData = noteData || {};

  var contentWrap = $("<div>");
  contentWrap.addClass("flex flexcolumn");
  contentWrap.css("background-color", "transparent");
  contentWrap.css("position", "relative");
  contentWrap.css("overflow", "auto");

  content.appendTo(contentWrap);
  content.css("position", "absolute");

  var notification = ui_popOut({
    target : $("body"),
    title : noteData.title || "Notification",
    id : noteData.id,
    style : {"width" : "300px", "height" : "200px"}
  }, contentWrap).addClass("alttext foreground").removeClass("ui-popout");
  var max = util.getMaxZ(".ui-popout");
  notification.css("z-index", "100000000000");
  notification.resizable();
  notification.attr("docked", "top");
  util.dockReveal(notification);

  return notification;
}

function loadNotify(){
  //var content = $("<div>").load("/tabs/newlayout.html");

  //notify(content, {title : "New Layout!"});
}

// This library is meant to provide an easy way (only for me most likely)
// to automatically update document elements with live data. React was too bulky
// for me to learn so I wrote this
var _appuid = 0;
var _render = {};
var sync = {};

sync.render = function(uiName, renderFunc) {
  if (uiName && renderFunc) {
    _render[uiName] = renderFunc;
  }
  else {
    if (!_render[uiName]) {
      return function(obj, app, scope){return $("<div class='flexmiddle subtitle bold'>No App</div>");}
    }
    else {
      return _render[uiName];
    }
  }
}

sync.newApp = function(uiName, obj, scope) {
  var rObj = $("<div>");
  rObj.attr('ui-name', uiName);
  rObj.attr('id', 'app_'+_appuid);
  rObj.addClass("application flexcolumn");

  rObj.scroll(function() {
    $(this).attr("_lastScrollTop", $(this).scrollTop());
    $(this).attr("_lastScrollLeft", $(this).scrollLeft());
  });
  _appuid = _appuid + 1;

  if (_render[uiName] && (obj || scope)) {
    var output = sync.render(uiName)(obj, rObj, scope);
    output.appendTo(rObj);

    output.find("[_lastScrollTop]").each(function(){
      $(this).scrollTop($(this).attr("_lastScrollTop"));
    });
    output.find("[_lastScrollLeft]").each(function(){
      $(this).scrollLeft($(this).attr("_lastScrollLeft"));
    });
  }

  return rObj;
}

var _syncuid = 0;

sync.updateApp = function(ref, obj){
  var output = sync.render(ref.attr("ui-name"))(obj, ref);
  // compare output to the current element, replacing different parts
  //_deepCompare(ref.children(), output);
  ref.empty();
  ref.append(output);
  // preserve submenus
  output.find("[_lastScrollTop]").each(function(){
    $(this).scrollTop($(this).attr("_lastScrollTop"));
  });
  output.find("[_lastScrollLeft]").each(function(){
    $(this).scrollLeft($(this).attr("_lastScrollLeft"));
  });
  if (ref.css("overflow-y") == "scroll") {
    ref.scrollTop(ref.attr("_lastScrollTop"));
  }
  else {
    output.scrollTop(ref.attr("_lastScrollTop"));
  }

  if (ref.css("overflow-y") == "scroll") {
    ref.scrollLeft(ref.attr("_lastScrollLeft"));
  }
  else {
    output.scrollLeft(ref.attr("_lastScrollLeft"));
  }
  return false;
}

sync.update = function(obj, newObj, keys) {
  if (newObj) {
    if (keys) {
      for (var i in keys) {
        obj.data[keys[i]] = newObj[keys[i]];
      }
    }
    else {
      obj.data = newObj;
    }
  }
  if (game.config && game.config.data.offline && getCookie("offlineGame")) {
    localStorage.setItem(getCookie("offlineGame"), JSON.stringify(game));
  }
  // re-renders all apps that are connected to it
  if (obj["_apps"].length > 0) {
    for (var index = obj["_apps"].length - 1; index >= 0; index--) {
      var ref = $("#"+obj["_apps"][index]);
      if (ref.length > 0) { // not empty
        if (obj.data) {
          var output = sync.render(ref.attr("ui-name"))(obj, ref);
          // compare output to the current element, replacing different parts
          //_deepCompare(ref.children(), output);
          ref.empty();
          ref.append(output);
          // preserve submenus
          output.find("[_lastScrollTop]").each(function(){
            $(this).scrollTop($(this).attr("_lastScrollTop"));
          });
          output.find("[_lastScrollLeft]").each(function(){
            $(this).scrollLeft($(this).attr("_lastScrollLeft"));
          });
          if (ref.css("overflow-y") == "scroll") {
            ref.scrollTop(ref.attr("_lastScrollTop"));
          }
          else {
            output.scrollTop(ref.attr("_lastScrollTop"));
          }

          if (ref.css("overflow-y") == "scroll") {
            ref.scrollLeft(ref.attr("_lastScrollLeft"));
          }
          else {
            output.scrollLeft(ref.attr("_lastScrollLeft"));
          }
        }
      }
      else {
        // garbage collect apps that are no longer in existence
        obj["_apps"].splice(index, 1);
      }
    }
  }
}

// javascript objects
/*
function _deepCompare(oldUi, newUi) {
  var chillun = newUi.children();
  var done = false;
  for (var index in oldUi.children()) {
    if (!done && newUi.children()[index] && newUi.children()[index] != oldUi.children()[index]) {
      console.log(oldUi.children()[index]);
      console.log(newUi.children()[index]);
      $(oldUi.children()[index]).replaceWith(newUi.children()[index]);
      done = true;
    }
  }
}

sync.copy = function(obj) {
  var recurseCopy;
  return newObj;
}
*/

sync.rebuildApp = function(targetApp) {
  var found = false;
  for (var id in _syncList) {
    var obj = _syncList[id];
    if (util.contains(obj._apps, targetApp)) {
      obj.update();
      found = true;
    }
  }
}

sync.replaceApps = function(data) {
  var appList = $(".application");
  for (var i=0; i<appList.length; i++) {
    var app = appList[i];
    if (util.contains(data.apps, $(app).attr("ui-name"))) {
      // i don't add it to the object because the first time should track down
      // the appropriate object for that app
      var newApp = sync.newApp(data.newApp);
      for (var j=0; j<app.attributes.length; j++) {
        var attrib = app.attributes[j];
        if (attrib.specified == true && attrib.name != "ui-name" && attrib.name != "id") {
          if (attrib.name == "class") {
            newApp.addClass(attrib.value);
          }
          else if (attrib.name == "style" && attrib.value){
            var split = attrib.value.split(";");
            for (var key in split) {
              var subSplit = split[key].split(":");
              if (subSplit) {
                newApp.css(subSplit[0], subSplit[1]);
              }
            }
          }
          else {
            newApp.attr(attrib.name, attrib.value);
          }
        }
      }
      newApp.attr("_lastApp", $(app).attr("ui-name"));
      var parent = $(app).parent();
      $(app).remove();
      parent.append(newApp);
      newApp.append(sync.render(newApp.attr("ui-name"))(null, newApp, {}));
      if (!data.all) { // only do one
        break;
      }
    }
  }
}

var _syncList = {};

sync.dummyObj = function(id, defaultApps) {
  var apps = [];
  if (defaultApps) {
    apps = defaultApps;
  }
  var rObj = {
    _lid : id, // index
    _apps : apps, // array of id's that represent applications
    listen : [],
  };
  rObj.removeApp = function(newApp){
    for (var index in rObj["_apps"]) {
      if (rObj["_apps"][index] == newApp.attr("id")) {
        rObj["_apps"].splice(index, 1);
      }
    }
  }
  rObj.addApp = function(newApp){
    for (var index in rObj["_apps"]) {
      if (rObj["_apps"][index] == newApp.attr("id")) {
        return;
      }
    }
    rObj["_apps"].push(newApp.attr("id"));
    if (rObj.data != null) {
      var output = sync.render(newApp.attr("ui-name"))(rObj, newApp);
      // compare output to the current element, replacing different parts
      //_deepCompare(ref.children(), output);
      newApp.empty();
      newApp.append(output);
      newApp.find("[_lastScrollTop]").each(function(){
        $(this).scrollTop($(this).attr("_lastScrollTop"));
      });
      newApp.find("[_lastScrollLeft]").each(function(){
        $(this).scrollLeft($(this).attr("_lastScrollLeft"));
      });
    }
  };
  rObj.update = function(newObj, target){
    for (var i in rObj.listen) {
      if (rObj.listen[i] && !rObj.listen[i](rObj, newObj, target)) {
        delete rObj.listen[i];
      }
    }
    sync.update(rObj, newObj, target);
  }; // locally updates
  rObj.id = function(){return rObj["_lid"]};
  rObj.sync = function(cmd, target) {
    rObj.update();
    if (connection.alive && !rObj.local) {
      runCommand(cmd, {id: rObj.id(), respond : false, target : target, data : jQuery.extend(true, {}, rObj.data)});
    }
    else {
      sendAlert({text : "CONNECTION IS BROKEN"});
    }
  };
  return rObj;
}

sync.obj = function(id, defaultApps) {
  var apps = [];
  if (defaultApps) {
    apps = defaultApps;
  }
  var rObj = {
    _lid : id, // index
    _uid : _syncuid, // internal use only
    listen : {},
    _apps : apps, // array of id's that represent applications
  };
  rObj.removeApp = function(newApp){
    for (var index in rObj["_apps"]) {
      if (rObj["_apps"][index] == newApp.attr("id")) {
        rObj["_apps"].splice(index, 1);
      }
    }
  }
  rObj.addApp = function(newApp){
    for (var index in rObj["_apps"]) {
      if (rObj["_apps"][index] == newApp.attr("id")) {
        return;
      }
    }
    rObj["_apps"].push(newApp.attr("id"));
    if (rObj.data != null) {
      var output = sync.render(newApp.attr("ui-name"))(rObj, newApp);
      // compare output to the current element, replacing different parts
      //_deepCompare(ref.children(), output);
      newApp.empty();
      newApp.append(output);
      newApp.find("[_lastScrollTop]").each(function(){
        $(this).scrollTop($(this).attr("_lastScrollTop"));
      });
      newApp.find("[_lastScrollLeft]").each(function(){
        $(this).scrollLeft($(this).attr("_lastScrollLeft"));
      });
    }
  };
  rObj.update = function(newObj, target){
     // locally updates
     for (var i in rObj.listen) {
       if (rObj.listen[i] && !rObj.listen[i](rObj, newObj, target)) {
         delete rObj.listen[i];
       }
     }
     sync.update(rObj, newObj, target);
  };
  rObj.id = function(){return rObj["_lid"]};
  rObj.sync = function(cmd, target) {
    rObj.update();
    if (connection.alive && !rObj.local) {
      runCommand(cmd, {id: rObj.id(), respond : false, target : target, data : jQuery.extend(true, {}, rObj.data)});
    }
  };
  _syncList[_syncuid] = rObj; // save the pointer
  _syncuid = _syncuid + 1;
  return rObj;
} // generates an object that has a unique id associated with it

function parseValue(value) {
  if (value === "") {
    return null;
  }
  if (value == null || isNaN(value)) {
    return value;
  }
  return eval(value);
}

// values
sync.newValue = function(name, value, min, max, modifiers) {
  /* {
    name : name,
    current : parseValue(value),
    min : parseValue(min),
    max : parseValue(max),
    modifiers : modifiers
  };*/
  // in order to save space, all these if statements
  var rObj = {};
  if (name != null) {
    rObj.name = name;
  }
  if (value != null) {
    rObj.current = parseValue(value);
  }
  if (min != null) {
    rObj.min = parseValue(min);
  }
  if (max != null) {
    rObj.max = parseValue(max);
  }
  if (modifiers != null) {
    rObj.modifiers = modifiers;
  }
  return rObj;
}

sync.modifier = function(valueObj, key, newVal) {
  if (!valueObj) {return;}
  if (newVal != null) {
    if (!valueObj.modifiers) {
      valueObj.modifiers = {};
    }
    valueObj.modifiers[key] = parseValue(newVal);
  }
  else {
    if (!valueObj.modifiers) {
      return null;
    }
  }
  return valueObj.modifiers[key];
}

sync.removeModifier = function(valueObj, key) {
  if (!valueObj) {return;}
  if (!valueObj.modifiers) {
    return null;
  }
  delete valueObj.modifiers[key];
  if (Object.keys(valueObj.modifiers).length < 1) {
    delete valueObj.modifiers; // keep this concise for database purposes
  }
}

sync.clamped = function(valueObj, inVal) {
  if (!valueObj || inVal == null) {return;}
  var result = inVal;
  if (!isNaN(inVal)) {
    if (valueObj.min != null && valueObj.min !== "") {
      result = Math.max(result, valueObj.min);
    }
    if (valueObj.max != null && valueObj.max !== "") {
      result = Math.min(result, valueObj.max);
    }
  }
  return result;
}

sync.modified = function(valueObj, compareValue, clamped) {
  if (!valueObj) {return;}
  var total = 0;
  if (compareValue == null) {
    compareValue = valueObj.current;
  }
  if (isNaN(compareValue)) {
    total = "";
  }
  else {
    var ctx = sync.defaultContext();
    for (var key in valueObj.modifiers) {
      if (valueObj.modifiers[key] != "none") {
        total = total + sync.eval(valueObj.modifiers[key], ctx) || 0;
      }
    }
  }
  if (clamped) {
    return sync.clamped(valueObj, Number(compareValue) + Number(total));
  }
  else {
    return compareValue + total;
  }
}

sync.val = function(valueObj, newVal) {
  if (!valueObj) {return;}
  if (!(valueObj instanceof Object)) {
    return valueObj;
  }
  if (newVal != null) {
    valueObj.current = sync.clamped(valueObj, parseValue(newVal));
  }
  else {
    if (valueObj.current == null || isNaN(valueObj.current)) {
      return valueObj.current;
    }
    return sync.clamped(valueObj, sync.modified(valueObj, Number(valueObj.current)));
  }
}

sync.unModified = function(valueObj) {
  if (!valueObj) {return;}
  return sync.clamped(valueObj, Number(valueObj.current));
}

sync.rawVal = function(valueObj, newVal) {
  if (!valueObj) {return;}
  if (!(valueObj instanceof Object)) {
    return valueObj;
  }
  if (newVal != null) {
    valueObj.current = newVal;
  }
  else {
    return valueObj.current;
  }
}


// regular Expressions, define them once
var diceAddRegex = /([0-9]*)[\s]*([+|-])[\s]*([-]*[0-9]*)/; // find addition
var diceNumber = /\d+/;
var diceRegex = /(\d*)d(\d+)([k|d]([l|h])?[\d+])?(([r|e])(\d*)?(([<|=|>]+)(\d)+)?)?/i; // find a <x>d<y>
var diceRegexReroll = /(\d*)d(\d+)([r|e](\d+)?([<|=|>]+(\d)+)?)?/i;
var diceQuery = /([^\[]*)\[([^\[^\]]+)\]([\+|-].*)*/i; // how many times will it run
var queryType = /([\d|\)|}])([B|R|W])([\d|\(|{])?/i;
var clampRegex =  /\(([^(^)]*)\)([frc])*([_][\d]*)*([|][\d]*)*/i;
var lookupMatch = /([RM])?@([\w|.]*)/i;
var variableRegex = /([#|$])([\w\.]*)([ ])*(=[^;]*;)/i;

sync.executeQuery = function(equation, targets, noRoll) {
  var str = String(equation || "");
  var match = str.match(diceQuery);
  var returnEqs = {
    str : equation,
    pool : {},
    loc : svd.location,
    equations : [],
  };
  if (match) {
    match[1] = String(sync.result(match[1], targets));
    var query = match[1].match(queryType);
    var rolls = 1;
    var type;
    var selector;
    var compare;
    if (query) {
      rolls = sync.eval(match[1].substring(0, query.index+1), targets, noRoll) || 1;
      type = query[2];
      selector = sync.eval(query[3], targets, noRoll) || 1;
    }
    else {
      rolls = sync.eval(match[1], targets, noRoll);
    }
    for (var i=0; i<rolls; i++) {
      var val = sync.process(match[2], targets, noRoll);
      if (type && type.toLowerCase() == "r") {
        if (returnEqs.equations.length < selector) {
          returnEqs.equations.push(val);
        }
      }
      else {
        returnEqs.equations.push(val);
      }
    }
    if (type && type.toLowerCase() == "w") {
      returnEqs.equations.sort(function(a,b){return a.v-b.v;});
      var newEqs = [];
      for (var j=returnEqs.equations.length-1; j>=selector; j--) {
        newEqs.push(returnEqs.equations[j].v);
        returnEqs.equations.splice(j, 1);
      }
      returnEqs.pool.discarded = newEqs;
    }
    else if (type && type.toLowerCase() == "b") {
      returnEqs.equations.sort(function(a,b){return b.v-a.v;});
      var newEqs = [];
      for (var j=returnEqs.equations.length-1; j>=selector; j--) {
        newEqs.push(returnEqs.equations[j].v);
        returnEqs.equations.splice(j, 1);
      }
      returnEqs.pool.discarded = newEqs;
    }
    if (match[3]) {
      var newEqs = sync.executeQuery(match[3].substring(1, match[3].length), targets, noRoll);
      for (var i in newEqs.equations) {
        returnEqs.equations.push(newEqs.equations[i]);
      }
    }
  }
  else {
    returnEqs.equations = [sync.process(str, targets)];
  }
  var total = 0;
  var rolled = {};
  for (var index in returnEqs.equations) {
    if (!returnEqs.equations[index].ctx) {
      returnEqs.equations[index].ctx = {};
    }
    returnEqs.equations[index].ctx.total = sync.newValue(null, returnEqs.equations[index].v);
    total += returnEqs.equations[index].v || 0;
    if (returnEqs.equations[index].ctx.die) {
      var diceData = game.templates.dice.pool[sync.rawVal(returnEqs.equations[index].ctx.die)];
      rolled[sync.rawVal(returnEqs.equations[index].ctx.die)] = rolled[sync.rawVal(returnEqs.equations[index].ctx.die)] || 0;
      rolled[sync.rawVal(returnEqs.equations[index].ctx.die)] += 1;
      if (diceData && diceData.results) {
        var valueData = diceData.results[returnEqs.equations[index].v];
        if (noRoll && diceData.results[returnEqs.equations[index].e]) {
          valueData = diceData.results[returnEqs.equations[index].e];
          returnEqs.equations[index].v = returnEqs.equations[index].e;
        }
        for (var key in valueData) {
          if (returnEqs.pool[key]) {
            returnEqs.pool[key] += valueData[key];
          }
          else {
            returnEqs.pool[key] = valueData[key];
          }
        }
      }
    }
  }
  if (returnEqs.equations && returnEqs.equations.length) {
    returnEqs.pool["dice"] = returnEqs.equations.length;
    returnEqs.pool["rolled"] = rolled;
  }
  returnEqs.pool["total"] = total;
  return returnEqs;
}

var svd = {};
sync.context = function(equation, targets, noRoll) {
  var str = equation;
  var context = {};
  targets = targets || {};

  var maxLoop = 1000;
  var loop = 0;
  var vMatch = variableRegex.exec(str);
  // save localVaribles
  var cmps = /([\/><\!\~\=])/; // important for conditional logic
  while (vMatch) {
    if (vMatch[2] && vMatch[4] && vMatch[4][0] == "=") {
      var stack = [0];
      for (var i=1; i<vMatch[4].length; i++) {
        if (vMatch[4][i] == "=" && !((vMatch[4][i-1] || "").match(cmps) || (vMatch[4][i+1] || "").match(cmps))) {
          stack.push(i);
        }
        else if (vMatch[4][i] == ";") {
          stack.pop();
          if (stack.length == 0) {
            stack = i+1; // record the successful index
            break;
          }
        }
      }
      if (!(stack instanceof Object)) {
        var evalStr = vMatch[4].substring(1, stack-1);
        // this is what should be evaluated
        var res = evalStr;
        if (vMatch[1] == "#") {
          if (noRoll) {
            res = evalStr;
          }
          else {
            res = sync.eval(evalStr, targets);
          }
        }
        if (sync.traverse(targets, vMatch[2]) instanceof Object) {
          sync.rawVal(sync.traverse(targets, vMatch[2]), res);
        }
        else {
          sync.traverse(targets, vMatch[2], sync.newValue(null, res));
        }
        sync.traverse(context, vMatch[2], sync.newValue(null, res));
        vMatch[0] = (vMatch[1] || "") +(vMatch[2] || "") + (vMatch[3] || "") + vMatch[4].substring(0, stack);
      }
    }
    str = str.replace(vMatch[0], "");
    vMatch = variableRegex.exec(str);
    loop++;
    if (loop > maxLoop) {
      sendAlert({text : "Error Processing Equation"});
      console.log(equation);
      return "0";
    }
  }

  var tmatch = str.match(tableMatch);
  if (util.calcAPI["table"] || util.calcAPI["constant"]) {
    while (tmatch) {
      var cmd = "table";
      var trav = tmatch[1];
      var fn = tmatch[2];
      var val = "";
      var parenths = [];
      var args = [fn];
      if (tmatch.index + tmatch[0].length < str.length) {
        if (str[tmatch.index + tmatch[0].length] == "(") {
          parenths.push(tmatch.index + tmatch[0].length);
          var lastIndex = parenths[0];
          for (var i=parenths[0]+1;i<str.length;i++) {
            if (str[i] == "(") {
              parenths.push(i);
            }
            else if (str[i] == ")") {
              parenths.splice(parenths.length-1,1);
            }
            lastIndex = i;
            if (parenths.length == 0) {
              var splitList = str.substring(tmatch.index+tmatch[0].length+1, lastIndex).split(",");
              for (var i=0; i<splitList.length; i++) {
                args.push(splitList[i]);
              }
              tmatch[0] = tmatch[0] + str.substring(tmatch.index+tmatch[0].length, lastIndex+1);
              break;
            }
          }
        }
        else {
          cmd = "constant";
        }
      }
      else {
        cmd = "constant";
      }
      val = util.calcAPI[cmd](args, targets);
      if (val instanceof Object) {
        val = JSON.stringify(val);
      }
      str = str.replace(tmatch[0], val);
      tmatch = str.match(tableMatch);
      loop++;
      if (loop > maxLoop) {
        sendAlert({text : "Error Processing Equation"});
        console.log(equation);
        return "0";
      }
    }
  }

  if (!context.die) {
    if (game.templates && game.templates.dice && game.templates.dice.pool[str]) {
      context.die = sync.newValue(null, str);
      if (str != game.templates.dice.pool[str].value) {
        str = game.templates.dice.pool[str].value;
      }
    }
    else {
      var d = diceRegex.exec(equation);
      if (d) {
        if (!d[3]) {
          context.die = d[0];
        }
        else {
          context.die = "d"+d[2];
        }
      }
    }
  }
  return {context : context, str : str};
}

sync.process = function(equation, targets, noRoll) {
  var returnObj = {};

  var context = sync.context(equation, targets);
  returnObj.ctx = duplicate(context.context);
  merge(context.context, targets);
  returnObj.e = context.str;
  if (!noRoll) {
    returnObj.r = sync.reduce(context.str, context.context);
    returnObj.v = sync.eval(returnObj.r, context.context);
  }
  return returnObj;
}

sync.keySearch = function(key, targets) {
  if (targets.eval) {
    for (var refKey in targets.eval) {
      if (isNaN(refKey) && refKey.toLowerCase() == key.toLowerCase()) {
        return targets.eval[refKey];
      }
    }
  }
  if (targets.var) {
    for (var refKey in targets.var) {
      if (isNaN(refKey) && refKey.toLowerCase() == key.toLowerCase()) {
        return targets.var[refKey];
      }
    }
  }
  if (targets.c) {
    for (var refKey in targets.c.info) {
      if (isNaN(refKey) && refKey.toLowerCase() == key.toLowerCase()) {
        return targets.c.info[refKey];
      }
    }
    for (var refKey in targets.c.stats) {
      if (isNaN(refKey) && refKey.toLowerCase() == key.toLowerCase()) {
        return targets.c.stats[refKey];
      }
    }
    for (var refKey in targets.c.counters) {
      if (isNaN(refKey) && refKey.toLowerCase() == key.toLowerCase()) {
        return targets.c.counters[refKey];
      }
    }
  }

  if (targets[key] && !Array.isArray(targets[key])) {
    return targets[key];
  }
  if (isNaN(key)) {
    for (var refKey in targets) {
      if (isNaN(refKey) && refKey.toLowerCase() == key.toLowerCase()) {
        return targets[refKey];
      }
    }
  }
  for (var cmKey in targets) {
    if (cmKey[0] != "_") {
      if (!Array.isArray(targets[cmKey]) && targets[cmKey] instanceof Object) {
        if (targets[cmKey][key]) {
          return targets[cmKey][key];
        }
        else {
          var res = sync.keySearch(key, targets[cmKey]);
          if (res) {
            return res;
          }
        }
      }
    }
  }
}

sync.reduce = function(equation, targets, noRoll, fillOnce) {
  var str = String(equation);

  // insurance
  var maxLoop = 1000;
  var loop = 0;

  var fmatch = str.match(fnMatch);
  while (fmatch) {
    var trav = fmatch[1];
    var fn = fmatch[2];
    var val = "";
    if (util.calcAPI[fn]) {
      var parenths = [];
      var args = [];
      if (fmatch.index + fmatch[0].length < str.length && str[fmatch.index + fmatch[0].length] == "(") {
        parenths.push(fmatch.index + fmatch[0].length);
        var lastIndex = parenths[0];
        for (var i=parenths[0]+1;i<str.length;i++) {
          if (str[i] == "(") {
            parenths.push(i);
          }
          else if (str[i] == ")") {
            parenths.splice(parenths.length-1,1);
          }
          lastIndex = i;
          if (parenths.length == 0) {
            var splitList = str.substring(fmatch.index+fmatch[0].length+1, lastIndex).split(",");
            for (var i=0; i<splitList.length; i++) {
              args.push(splitList[i]);
            }
            fmatch[0] = fmatch[0] + str.substring(fmatch.index+fmatch[0].length, lastIndex+1);
            break;
          }
        }
      }
      val = util.calcAPI[fn](args, targets);
      if (val instanceof Object) {
        val = JSON.stringify(val);
      }
    }
    str = str.replace(fmatch[0], val);
    fmatch = str.match(fnMatch);
    loop++;
    if (loop > maxLoop) {
      sendAlert({text : "Error Processing Equation"});
      console.log(equation);
      return "0";
    }
  }

  var tmatch = str.match(tableMatch);
  if (util.calcAPI["table"] || util.calcAPI["constant"]) {
    while (tmatch) {
      var cmd = "table";
      var trav = tmatch[1];
      var fn = tmatch[2];
      var val = "";
      var parenths = [];
      var args = [fn];
      if (tmatch.index + tmatch[0].length < str.length) {
        if (str[tmatch.index + tmatch[0].length] == "(") {
          parenths.push(tmatch.index + tmatch[0].length);
          var lastIndex = parenths[0];
          for (var i=parenths[0]+1;i<str.length;i++) {
            if (str[i] == "(") {
              parenths.push(i);
            }
            else if (str[i] == ")") {
              parenths.splice(parenths.length-1,1);
            }
            lastIndex = i;
            if (parenths.length == 0) {
              var splitList = str.substring(tmatch.index+tmatch[0].length+1, lastIndex).split(",");
              for (var i=0; i<splitList.length; i++) {
                args.push(splitList[i]);
              }
              tmatch[0] = tmatch[0] + str.substring(tmatch.index+tmatch[0].length, lastIndex+1);
              break;
            }
          }
        }
        else {
          cmd = "constant";
        }
      }
      else {
        cmd = "constant";
      }
      val = util.calcAPI[cmd](args, targets);
      if (val instanceof Object) {
        val = JSON.stringify(val);
      }
      str = str.replace(tmatch[0], val);
      tmatch = str.match(tableMatch);
      loop++;
      if (loop > maxLoop) {
        sendAlert({text : "Error Processing Equation"});
        console.log(equation);
        return "0";
      }
    }
  }

  var varMatch = str.match(lookupMatch);
  while (varMatch) {
    // search the targets for a value
    // typically {game : {}, me : {}, local : {}, c : {}, i : {}}
    // recursively search for the key
    var val;
    if (varMatch[2].match("\\.")) {
      val = sync.traverse(targets, varMatch[2]);
    }
    else {
      // look for it myself
      val = sync.keySearch(varMatch[2], targets);
    }
    if (val != null && val !== false) {
      if (val instanceof Object) {
        if (varMatch[1] == "R") {
          val = sync.rawVal(val);
        }
        else if (varMatch[1] == "M") {
          val = sync.modified(val, 0);
        }
        else {
          val = sync.val(val);
        }
      }
    }
    if (val) {
      str = str.replace(varMatch[0], val);
    }
    else {
      str = str.replace(varMatch[0], "0");
    }
    varMatch = str.match(lookupMatch);
    loop++;
    if (loop > maxLoop) {
      sendAlert({text : "Error Processing Equation"});
      console.log(equation);
      return "0";
    }
  }
  if (!fillOnce) {
    var tmatch = str.match(tableMatch);
    if (util.calcAPI["table"] || util.calcAPI["constant"]) {
      while (tmatch) {
        var cmd = "table";
        var trav = tmatch[1];
        var fn = tmatch[2];
        var val = "";
        var parenths = [];
        var args = [fn];
        if (tmatch.index + tmatch[0].length < str.length) {
          if (str[tmatch.index + tmatch[0].length] == "(") {
            parenths.push(tmatch.index + tmatch[0].length);
            var lastIndex = parenths[0];
            for (var i=parenths[0]+1;i<str.length;i++) {
              if (str[i] == "(") {
                parenths.push(i);
              }
              else if (str[i] == ")") {
                parenths.splice(parenths.length-1,1);
              }
              lastIndex = i;
              if (parenths.length == 0) {
                var splitList = str.substring(tmatch.index+tmatch[0].length+1, lastIndex).split(",");
                for (var i=0; i<splitList.length; i++) {
                  args.push(splitList[i]);
                }
                tmatch[0] = tmatch[0] + str.substring(tmatch.index+tmatch[0].length, lastIndex+1);
                break;
              }
            }
          }
          else {
            cmd = "constant";
          }
        }
        else {
          cmd = "constant";
        }
        val = util.calcAPI[cmd](args, targets);
        if (val instanceof Object) {
          val = JSON.stringify(val);
        }
        str = str.replace(tmatch[0], val);
        tmatch = str.match(tableMatch);
        loop++;
        if (loop > maxLoop) {
          sendAlert({text : "Error Processing Equation"});
          console.log(equation);
          return "0";
        }
      }
    }
  }

  if (!noRoll) {
    var diceMatch = diceRegex.exec(str);
    while (diceMatch) {
      var rep = sync.evalDice(diceMatch[0]);
      // explode dice and re-roll dice
      if (diceMatch.index + diceMatch[0].length < str.length) {
        if (str[diceMatch.index + diceMatch[0].length + 1] == "r") {

        }
        else if (str[diceMatch.index + diceMatch[0].length + 1] == "e") {

        }
      }
      if (str.match(diceMatch[0]+"]")) {
        str = str.replace(diceMatch[0]+"]", diceMatch[0]);
      }
      str = str.replace(diceMatch[0], rep);

      diceMatch = diceRegex.exec(str);
    }
  }

  str = replaceAll(str, "--", "+");
  str = replaceAll(str, "+-", "-");
  str = replaceAll(str, "-+", "+");
  str = replaceAll(str, "++", "+");

  return str || "0";
}

var fnMatch = /(@):([\w]*)/i

var tableMatch = /(#):([\w]*)/i
var condMatch = /(\?):([\w]*)/i

sync.result = function(equation, targets, noRoll, fillOnce) {
  var str = sync.reduce(String(equation), targets, noRoll, fillOnce);
  str = replaceAll(str, "<?<", "(");
  str = replaceAll(str, ">?>", ")");
  var maxLoop = 1000;
  var loop = 0;

  var match = str.match(clampRegex);
  while (match) {
    if (match[2] || match[3] || match[4] || match[5]) {
      var res = match[1];
      if (match[2] == "c") {
        res = Math.ceil(sync.eval(res, targets));
      }
      else if (match[2] == "f") {
        res = Math.floor(sync.eval(res, targets));
      }
      else if (match[2] == "r") {
        res = Math.round(sync.eval(res, targets));
      }
      if (match[3] != null) {
        res = Math.max(sync.eval(res, targets), Number(match[3].replace("_", "")));
      }
      if (match[4] != null) {
        res = Math.min(sync.eval(res, targets), Number(match[4].replace("|", "")));
      }
      if (match[5] != null) {
        res = Math.pow(sync.eval(res, targets), Number(match[5].replace("^", "")));
      }
      str = str.replace(match[0], (res || 0));
    }
    else {
      // skip over this one
      str = str.replace(match[0], "<?<"+match[1]+">?>");
    }
    match = str.match(clampRegex);
    loop++;
    if (loop > maxLoop) {
      sendAlert({text : "Error Processing Equation"});
      console.log(equation);
      return "0";
    }
  }
  str = replaceAll(str, "<?<", "(");
  str = replaceAll(str, ">?>", ")");
  str = replaceAll(str, "--", "+");
  str = replaceAll(str, "+-", "-");
  str = replaceAll(str, "-+", "+");
  str = replaceAll(str, "++", "+");


  return str || "0";
}

sync.eval = function(equation, targets) {
  var res = sync.result(equation, targets);
  if (equation != null && String(equation).length > 400) {
    sendAlert({text : "Macro is too large"});
    console.log(equation);
    return 0;
  }
  try {
    if (res[0] = "{" && res[res.length-1] == "}") {
      return JSON.parse(res);
    }
    else {
      var evl = eval(res);
      if (evl instanceof Function) {
        return res;
      }
      else {
        return evl;
      }
    }
  }
  catch(err) {
    return res;
  }
}

sync.evalDice = function(term) {
  var dice = term.match(diceRegex);
  if (isNaN(term) && dice) {
    var res;
    if (dice) {
      var values = [];
      var rollsLeft = dice[7];
      var condition = dice[9] || "==";
      if (condition == "=") {
        condition = "==";
      }
      var conditionValue = dice[10] || 1;
      for (var i=0; i<(dice[1] || 1); i++) {
        var newValue = Math.ceil(chance.natural({min: 1, max: dice[2]}));
        if (dice[6] == "r") {
          if (dice[7]) {
            if (eval(String(newValue + condition + conditionValue))) {
              newValue = Math.ceil(chance.natural({min: 1, max: dice[2]}));
              rollsLeft--;
            }
          }
          else if (eval(String(newValue + condition + conditionValue))) {
            newValue = Math.ceil(chance.natural({min: 1, max: dice[2]}));
          }
        }
        else if (dice[6] == "e") {
          var maxLoop = 1000;
          var loop = 0;
          var totalValue = newValue;
          while (eval(String(newValue + condition + conditionValue)) && (!dice[7] || rollsLeft)) {
            newValue = Math.ceil(chance.natural({min: 1, max: dice[2]}));
            totalValue += newValue;
            if (rollsLeft) {
              rollsLeft--;
            }
            loop++;
            if (loop > maxLoop) {
              sendAlert({text : "Error Processing Equation"});
              return "0";
            }
          }
          newValue = totalValue;
        }
        values.push(newValue);
      }
      if (dice[3]) {
        //descending order;
        values.sort(function(a,b){
          if (b > a) {
            return -1;
          }
          else if (a > b) {
            return 1;
          }
          return 0;
        });
        if (dice[3][0] == "k") {
          if (dice[4]) {
            var amount = dice[3].substring(2, dice[3].length) || 1;
            if (dice[4] == "h") {
              values.splice(0, values.length-amount);
            }
            else if (dice[4] == "l") {
              values.splice(amount, values.length-amount);
            }
          }
          else {
            var amount = dice[3].substring(1, dice[3].length) || 1;
            values.splice(0, values.length-amount);
          }
        }
        else if (dice[3][0] == "d") {
          if (dice[4]) {
            var amount = dice[3].substring(2, dice[3].length) || 1;
            if (dice[4] == "h") {
              values.splice(values.length-amount, amount);
            }
            else if (dice[4] == "l") {
              values.splice(0, amount);
            }
          }
          else {
            var amount = dice[3].substring(1, dice[3].length) || 1;
            values.splice(0, amount);
          }
        }
      }

      res = "(" + values[0];
      for (var j=1; j<values.length; j++) {
        res = res + "+" + values[j]; // its a bit long winded, but we want to track everything
      }
      res = res + ")";
      /*for (var i=0; i<(dice[1] || 1); i++) {
        res = "(" + Math.ceil(chance.natural({min: 1, max: dice[2]}));
        for (var j=0; j<dice[1]-1; j++) {
          var val = Math.ceil(chance.natural({min: 1, max: dice[2]}));
          res = res + "+" + val; // its a bit long winded, but we want to track everything
        }
        res = res + ")";
      }*/
    }
    return res || 0;
  }
  else {
    return term;
  }
}

sync.defaultContext = function() {
  var context = {
    setting : duplicate(game.state.data.setting),
    me : {
      cName : getPlayerCharacterName(getCookie("UserID")),
      char : getPlayerCharacter(getCookie("UserID")),
      pName : getPlayerName(getCookie("UserID")),
      name : "(`@me.cName`!=`0`)?(`@me.cName(@me.pName)`):(`@me.pName`)",
    },
    location : svd.location || {}
  };

  if (game.templates && game.templates.security) {
    for (var priv in game.templates.security.player) {
      if (game.players.data[getCookie("UserID")] && game.players.data[getCookie("UserID")].rank == game.templates.security.player[priv]) {
        context.me.rank = "'"+priv+"'";
      }
    }
  }
  return context;
}

sync.traverse = function(object, string, value) {
  var split = String(string || "").split(".");
  var target = object;
  while (string && split.length) {
    var key = split[0];
    split.splice(0, 1);
    if (target[key] && (value == null || split.length)) {
      target = target[key];
    }
    else if (isNaN(key) && !target[key] && (value == null || split.length)) { // reading only
      // case insensitive reading
      var searching = false;
      for (var refKey in target) {
        if (isNaN(refKey) && refKey.toLowerCase() == key.toLowerCase()) {
          target = target[refKey];
          searching = true;
          break;
        }
      }
      if (!searching) {
        if (value != null && split.length) {
          if (!target[key]) {
            target[key] = {};
          }
          target = target[key];
        }
        else if (value != null) {
          if (value === "") {
            if (Array.isArray(target)) {
              target.splice(key, 1);
            }
            else {
              delete target[key];
            }
            return;
          }
          else {
            target[key] = value;
            target = target[key];
          }
        }
        else {
          return false;
        }
      }
    }
    else {
      if (value != null && split.length) {
        if (!target[key]) {
          target[key] = {};
        }
        target = target[key];
      }
      else if (value != null) {
        if (value === "") {
          if (Array.isArray(target)) {
            target.splice(key, 1);
          }
          else {
            delete target[key];
          }
          return;
        }
        else {
          target[key] = value;
          target = target[key];
        }
      }
      else {
        return false;
      }
    }
  }
  return target;
}

var audioChannels = {};
audioChannels.channels = {};
audioChannels.play = function(index, ind){
  var trackData = game.config.data.tracks[index];
  audioChannels.channels[index] = audioChannels.channels[index] || {s : {}};
  if (audioChannels.channels[index].s && audioChannels.channels[index].s[ind]) {
    audioChannels.channels[index].s[ind].volume = trackData.s[ind].v;
    audioChannels.channels[index].s[ind].loop = trackData.s[ind].l;
    audioChannels.channels[index].s[ind].play();
  }
  else {
    audioChannels.channels[index].s[ind] = new Audio(trackData.s[ind].src);
    audioChannels.channels[index].s[ind].volume = trackData.s[ind].v;
    audioChannels.channels[index].s[ind].loop = trackData.s[ind].l;
    audioChannels.channels[index].s[ind].play();
  }
  if (trackData.pl) {
    audioChannels.channels[index].s[ind].onended = function(){
      var trackData = game.config.data.tracks[index];
      if (this.currentTime >= this.duration) {
        // play next sound
        if (trackData.s.length-1 >= Number(ind)+1 && trackData.s[Number(ind)+1]) {
          audioChannels.play(index, Number(ind)+1);
        }
      }
      game.config.update();
    }
  }
}

audioChannels.pause = function(index, ind){
  var trackData = game.config.data.tracks[index];
  audioChannels.channels[index] = audioChannels.channels[index] || {s : {}};
  if (audioChannels.channels[index].s && audioChannels.channels[index].s[ind]) {
    audioChannels.channels[index].s[ind].volume = trackData.s[ind].v;
    audioChannels.channels[index].s[ind].loop = trackData.s[ind].l;
    audioChannels.channels[index].s[ind].pause();
  }
  else {
    audioChannels.channels[index].s[ind] = new Audio(trackData.s[ind].src);
    audioChannels.channels[index].s[ind].volume = trackData.s[ind].v;
    audioChannels.channels[index].s[ind].loop = trackData.s[ind].l;
  }
}

audioChannels.stop = function(index, ind){
  var trackData = game.config.data.tracks[index];
  if (!trackData || !trackData.s[ind]) {
    if (audioChannels.channels[index].s[ind]) {
      if (audioChannels.channels[index].s[ind].stop) {
        audioChannels.channels[index].s[ind].stop();
      }
      delete audioChannels.channels[index].s[ind];
    }
  }
  else {
    audioChannels.channels[index] = audioChannels.channels[index] || {s : {}};
    if (audioChannels.channels[index].s && audioChannels.channels[index].s[ind]) {
      audioChannels.channels[index].s[ind].pause();
      audioChannels.channels[index].s[ind].load();
      audioChannels.channels[index].s[ind].volume = trackData.s[ind].v;
      audioChannels.channels[index].s[ind].loop = trackData.s[ind].l;
    }
    else {
      audioChannels.channels[index].s[ind] = new Audio(trackData.s[ind].src);
      audioChannels.channels[index].s[ind].volume = trackData.s[ind].v;
      audioChannels.channels[index].s[ind].loop = trackData.s[ind].l;
    }
  }
}

audioChannels.volume = function(index, ind, newVol) {
  audioChannels.channels[index] = audioChannels.channels[index] || {s : {}};
  if (audioChannels.channels[index].s && audioChannels.channels[index].s[ind]) {
    audioChannels.channels[index].s[ind].volume = newVol;
    return true;
  }
  return false;
}

audioChannels.playing = function(index, ind) {
  audioChannels.channels[index] = audioChannels.channels[index] || {s : {}};
  if (audioChannels.channels[index].s && audioChannels.channels[index].s[ind] && !audioChannels.channels[index].s[ind].paused) {
    return true;
  }
  return false;
}

audioChannels.paused = function(index, ind) {
  audioChannels.channels[index] = audioChannels.channels[index] || {s : {}};
  if (audioChannels.channels[index].s) {
    var soundData = audioChannels.channels[index].s[ind];
    if (soundData && soundData.paused && soundData.played && soundData.played.length) {
      return true;
    }
  }
  return false;
}

audioChannels.trackPlaying = function(index){
  audioChannels.channels[index] = audioChannels.channels[index] || {s : {}};
  for (var ind in audioChannels.channels[index].s) {
    var soundData = audioChannels.channels[index].s[ind];
    if (soundData && !soundData.paused) {
      return true;
    }
  }
  return false;
}

audioChannels.trackPaused = function(index){
  audioChannels.channels[index] = audioChannels.channels[index] || {s : {}};
  for (var ind in audioChannels.channels[index].s) {
    var soundData = audioChannels.channels[index].s[ind];
    if (soundData && (soundData.paused && soundData.played && soundData.played.length)) {
      return true;
    }
  }
  return false;
}

audioChannels.playTrack = function(index){
  var trackData = game.config.data.tracks[index];
  audioChannels.channels[index] = audioChannels.channels[index] || {s : {}};
  for (var ind in trackData.s) {
    var soundData = audioChannels.channels[index].s[ind];
    if (!soundData) {
      audioChannels.channels[index].s[ind] = new Audio(trackData.s[ind].src);
      audioChannels.channels[index].s[ind].volume = trackData.s[ind].v;
      audioChannels.channels[index].s[ind].loop = trackData.s[ind].l;
    }
    else if (audioChannels.channels[index].s[ind] && audioChannels.channels[index].s[ind].paused) {
      audioChannels.channels[index].s[ind].volume = trackData.s[ind].v;
      audioChannels.channels[index].s[ind].loop = trackData.s[ind].l;
    }
    audioChannels.play(index, ind);
  }
}

audioChannels.pauseTrack = function(index){
  var trackData = game.config.data.tracks[index];
  audioChannels.channels[index] = audioChannels.channels[index] || {s : {}};
  for (var ind in trackData.s) {
    var soundData = audioChannels.channels[index].s[ind];
    if (soundData) {
      audioChannels.channels[index].s[ind].pause();
      audioChannels.channels[index].s[ind].volume = trackData.s[ind].v;
      audioChannels.channels[index].s[ind].loop = trackData.s[ind].l;
    }
    else {
      audioChannels.channels[index].s[ind] = new Audio(trackData.s[ind].src);
      audioChannels.channels[index].s[ind].volume = trackData.s[ind].v;
      audioChannels.channels[index].s[ind].loop = trackData.s[ind].l;
    }
  }
}

audioChannels.stopTrack = function(index){
  var trackData = game.config.data.tracks[index];
  audioChannels.channels[index] = audioChannels.channels[index] || {s : {}};
  for (var ind in trackData.s) {
    var soundData = audioChannels.channels[index].s[ind];
    if (soundData) {
      audioChannels.channels[index].s[ind].pause();
      audioChannels.channels[index].s[ind].load();
      audioChannels.channels[index].s[ind].volume = trackData.s[ind].v;
      audioChannels.channels[index].s[ind].loop = trackData.s[ind].l;
    }
    else {
      audioChannels.channels[index].s[ind] = new Audio(trackData.s[ind].src);
      audioChannels.channels[index].s[ind].volume = trackData.s[ind].v;
      audioChannels.channels[index].s[ind].loop = trackData.s[ind].l;
    }
  }
}

audioChannels.prepTracks = function(tracks){
  for (var index in tracks) {
    var trackData = tracks[index];
    audioChannels.channels[index] = audioChannels.channels[index] || {s : {}};
    if (audioChannels.channels[index]) {
      for (var ind in trackData.s) {
        if (!audioChannels.channels[index].s[ind]) {
          audioChannels.channels[index].s[ind] = new Audio(trackData.s[ind].src);
          audioChannels.channels[index].s[ind].volume = trackData.s[ind].v;
          audioChannels.channels[index].s[ind].loop = trackData.s[ind].l;
        }
        else if (decodeURI(audioChannels.channels[index].s[ind].src).match(trackData.s[ind].src) && audioChannels.channels[index].s[ind].paused){
          audioChannels.channels[index].s[ind].src = trackData.s[ind].src;
          audioChannels.channels[index].s[ind].volume = trackData.s[ind].v;
          audioChannels.channels[index].s[ind].loop = trackData.s[ind].l;
        }
      }
    }
  }
}

sync.render("ui_audioPlayer", function(obj, app, scope) {
  obj.data.tracks = obj.data.tracks || {};

  var div = $("<div>");
  div.addClass("flex flexcolumn");

  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("background alttext flexaround outline");

  var newTrack = genIcon("music", "New Track").appendTo(optionsBar);
  newTrack.css("font-size", "1.2em");
  newTrack.click(function(){
    var max = 0;
    for (var i in obj.data.tracks) {
      if (!isNaN(i) && i > max) {
        max = i;
      }
    }
    max += 1;
    obj.data.tracks[max] = {n : "New Track", s : []};
    obj.sync("updateConfig");
  });

  var newTrack = genIcon("music", "New Playlist").appendTo(optionsBar);
  newTrack.css("font-size", "1.2em");
  newTrack.click(function(){
    var max = 0;
    for (var i in obj.data.tracks) {
      if (!isNaN(i) && i > max) {
        max = i;
      }
    }
    max += 1;
    obj.data.tracks[max] = {n : "New Playlist", s : [], pl : true};
    obj.sync("updateConfig");
  });

  var charWrapper = $("<div>").appendTo(div);
  charWrapper.addClass("flex");
  charWrapper.css("overflow-y", "auto");
  charWrapper.attr("_lastScrollTop", app.attr("_lastScrollTop"));
  charWrapper.scroll(function(){
    app.attr("_lastScrollTop", charWrapper.scrollTop());
    app.attr("_lastScrollLeft", charWrapper.scrollLeft());
  });


  function folderWrap(index) {
    var trackData = obj.data.tracks[index];
    var trackPlate = $("<div>").appendTo(charWrapper);
    trackPlate.addClass("flexrow flexmiddle spadding hover2");

    if (!trackData.pl) {
      trackPlate.addClass("alttext");
    }

    if (obj.data.tracks[index].h) {
      var remove = genIcon("plus").appendTo(trackPlate);
      remove.addClass("subtitle lrmargin");
      remove.click(function(){
        obj.data.tracks[index].h = !obj.data.tracks[index].h;
        obj.update();
      });
    }
    else {
      var remove = genIcon("minus").appendTo(trackPlate);
      remove.addClass("subtitle lrmargin");
      remove.click(function(){
        obj.data.tracks[index].h = !obj.data.tracks[index].h;
        obj.update();
      });
    }


    var remove = genIcon("trash").appendTo(trackPlate);
    remove.addClass("subtitle");
    remove.click(function(ev){
      var ind = $(this).attr("index");
      ui_prompt({
        target : $(this),
        click : function(){
          for (var ind in obj.data.tracks[index].s) {
            if (audioChannels.trackPaused(index) || audioChannels.trackPlaying(index)) {
              audioChannels.stop(index, ind);
              runCommand("music", {cmd : "stop", index : index, ind : ind});
            }
          }
          delete obj.data.tracks[index];
          obj.sync("updateConfig");
        }
      });
      ev.stopPropagation();
      ev.preventDefault();
    });

    var folderName = genInput({
      parent : trackPlate,
      classes : "middle line lrmargin subtitle",
      disabled : !(hasSecurity(getCookie("UserID"), "Assistant Master")),
      value : obj.data.tracks[index].n,
      placeholder : "Track Name",
    });
    folderName.change(function(){
      obj.data.tracks[index].n = $(this).val() || "";
      obj.sync("updateConfig");
    });

    var newSoundPlate = $("<div>").appendTo(trackPlate);
    newSoundPlate.addClass("flexmiddle subtitle flex");
    newSoundPlate.attr("index", index);


    var newSound = genIcon("volume-up", "Add").appendTo(newSoundPlate);
    newSound.click(function(ev){
      var picker = sync.render("ui_filePicker")(obj, app, {
        filter : ["audio"],
        change : function(ev, ui, val, name) {
          if (val.match("\.mp3") || val.match("\.ogg") || val.match("\.wav")) {
            var aud = new Audio(val);
            audioChannels.prepTracks(game.config.data.tracks);
            trackData.s.push({n : name, v : 0.5, src : val});
            obj.sync("updateConfig");
            layout.coverlay("sound-picker");
          }
          else {
            sendAlert({text : "Unsupported Type"});
          }
        }
      });

      var pop = ui_popOut({
        target : $(this),
        prompt : true,
        id : "sound-picker",
        style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
      }, picker);
      ev.stopPropagation();
      ev.preventDefault();
    });

    var audioControls = $("<div>").appendTo(trackPlate);
    audioControls.addClass("flexmiddle");

    if (audioChannels.trackPaused(index) || audioChannels.trackPlaying(index)) {
      var stop = genIcon("stop").appendTo(audioControls);
      stop.addClass("lrmargin");
      stop.attr("title", "Stop whole track");
      stop.click(function(){
        audioChannels.stopTrack(index);
        obj.update();
        runCommand("music", {cmd : "stopTrack", index : index});
      });
    }

    if (audioChannels.trackPlaying(index)) {
      var pause = genIcon("pause").appendTo(audioControls);
      pause.addClass("lrmargin");
      if (trackData.pl) {
        pause.attr("title", "Pause playlist");
        pause.click(function(){
          var current = 0;
          if (audioChannels.channels[index]) {
            for (var ind in trackData.s) {
              if (audioChannels.channels[index].s[ind] && audioChannels.channels[index].s[ind].currentTime && audioChannels.channels[index].s[ind].currentTime < audioChannels.channels[index].s[ind].duration) {
                current = ind;
                break;
              }
            }
          }
          audioChannels.pause(index, current);
          obj.update();
          runCommand("music", {cmd : "pause", index : index, ind : current});
        });
      }
      else {
        pause.attr("title", "Pause whole track");
        pause.click(function(){
          audioChannels.pauseTrack(index);
          obj.update();
          runCommand("music", {cmd : "pauseTrack", index : index});
        });
      }
    }
    else {
      var play = genIcon("play").appendTo(audioControls);
      play.addClass("lrmargin");
      if (trackData.pl) {
        play.attr("title", "Start Playlist");
        play.click(function(){
          var current = 0;
          if (audioChannels.channels[index]) {
            for (var ind in trackData.s) {
              if (audioChannels.channels[index].s[ind] && audioChannels.channels[index].s[ind].currentTime && audioChannels.channels[index].s[ind].currentTime < audioChannels.channels[index].s[ind].duration) {
                current = ind;
                break;
              }
            }
          }
          audioChannels.play(index, current);
          obj.update();
          runCommand("music", {cmd : "play", index : index, ind : current});
        });
      }
      else {
        play.attr("title", "Play whole track");
        play.click(function(){
          audioChannels.playTrack(index);
          obj.update();
          runCommand("music", {cmd : "playTrack", index : index});
        });
      }
    }

    var play = genIcon("random").appendTo(audioControls);
    play.addClass("lrmargin");
    play.attr("title", "Play random track");
    play.click(function(){
      var ind = Math.floor(trackData.s.length*Math.random());
      audioChannels.play(index, ind);
      obj.update();
      runCommand("music", {cmd : "play", index : index, ind : ind});
    });

    var trackContents = $("<div>").appendTo(charWrapper);
    trackContents.addClass("flexcolumn spadding white outlinebottom");
    trackContents.css("padding-left", "1em");
    trackContents.css("margin-bottom", "1em");
    if (obj.data.tracks[index].h) {
      if (trackData.pl) {
        trackPlate.addClass("button");
        trackPlate.css("color", "#333");
      }
      else {
        trackPlate.addClass("foreground");
      }
      trackContents.hide();
    }
    else {
      if (trackData.pl) {
        trackPlate.addClass("button");
        trackPlate.css("color", "#333");
      }
      else {
        trackPlate.addClass("background");
      }
    }
    for (var i in trackData.s) {
      var soundData = trackData.s[i];
      var soundPlate = $("<div>").appendTo(trackContents);
      soundPlate.addClass("flexrow flexmiddle spadding smooth subtitle");

      var remove = genIcon("trash").appendTo(soundPlate);
      remove.attr("index", i);
      remove.click(function(){
        var ind = $(this).attr("index");
        ui_prompt({
          target : $(this),
          click : function(){
            if (audioChannels.trackPaused(index) || audioChannels.trackPlaying(index)) {
              audioChannels.stop(index, ind);
              runCommand("music", {cmd : "stop", index : index, ind : ind});
            }
            obj.data.tracks[index].s.splice(ind, 1);
            obj.sync("updateConfig");
          }
        });
      });

      var soundName = genInput({
        parent : soundPlate,
        classes : "middle line lrmargin subtitle",
        disabled : !(hasSecurity(getCookie("UserID"), "Assistant Master")),
        value : soundData.n,
        placeholder : "Sound Name",
        index : i,
        title : soundData.src.split("/")[soundData.src.split("/").length-1]
      });
      soundName.change(function(){
        var ind = $(this).attr("index");
        obj.data.tracks[index].s[ind].n = $(this).val() || "";
        obj.sync("updateConfig");
      });

      var audioControls = $("<div>").appendTo(soundPlate);
      audioControls.addClass("flex flexmiddle");

      genIcon({raw : true, icon : "volume-up"}).addClass("lrmargin").appendTo(audioControls);

      var volume = genInput({
        parent : audioControls,
        type : "range",
        min : 0,
        max : 1,
        step : 0.01,
        value : soundData.v,
        index : i,
        style : {"min-width" : "50px", "height" : "10px"}
      }, 1);
      volume.attr("title", "Music Volume");
      volume.val(soundData.v);
      volume.bind("input", function(){
        var ind = $(this).attr("index");
        obj.data.tracks[index].s[ind].v = Number($(this).val());
        audioChannels.volume(index, ind, Number($(this).val()));
      });
      volume.change(function(){
        var ind = $(this).attr("index");
        obj.data.tracks[index].s[ind].v = Number($(this).val());
        audioChannels.volume(index, ind, Number($(this).val()));
        if (audioChannels.playing(index, ind)) {
          runCommand("music", {cmd : "volume", index : index, ind : ind, val : obj.data.tracks[index].s[ind].v});
        }
        else {
          obj.sync("updateConfig");
        }
      });

      var repeat = genIcon("refresh").appendTo(audioControls);
      repeat.addClass("lrmargin");
      repeat.attr("title", "Repeat");
      repeat.attr("index", i);
      if (!soundData.l) {
        repeat.addClass("dull");
      }
      repeat.click(function(){
        var ind = $(this).attr("index");
        obj.data.tracks[index].s[ind].l = !obj.data.tracks[index].s[ind].l;
        obj.sync("updateConfig");
      });

      if (audioChannels.paused(index, i) || audioChannels.playing(index, i)) {
        var stop = genIcon("stop").appendTo(audioControls);
        stop.addClass("lrmargin");
        stop.attr("index", i);
        stop.attr("title", "Stop");
        stop.click(function(){
          var ind = $(this).attr("index");
          audioChannels.stop(index, ind);
          obj.update();
          runCommand("music", {cmd : "stop", index : index, ind : ind});
        });
      }
      if (audioChannels.playing(index, i)) {
        var pause = genIcon("pause").appendTo(audioControls);
        pause.addClass("lrmargin");
        pause.attr("index", i);
        pause.attr("title", "Pause");
        pause.click(function(){
          var ind = $(this).attr("index");
          audioChannels.pause(index, ind);
          obj.update();
          runCommand("music", {cmd : "pause", index : index, ind : ind});
        });
      }
      else {
        var play = genIcon("play").appendTo(audioControls);
        play.addClass("lrmargin");
        play.attr("index", i);
        play.attr("title", "Play");
        play.click(function(){
          var ind = $(this).attr("index");
          audioChannels.play(index, ind);
          obj.update();
          runCommand("music", {cmd : "play", index : index, ind : ind});
        });
      }
    }

    return soundPlate;
  }

  for (var index in obj.data.tracks) {
    folderWrap(index);
  }

  return div;
});

var shakeEvent;

sync.render("ui_dice", function(obj, app, scope){
  if (!game.templates || !game.templates.dice) {
    return $("<diV>");
  }
  var diceArray = game.templates.dice.pool;
  scope = scope || {};
  scope.width = scope.width || "50px";
  scope.height = scope.height || "50px";
  scope["font-size"] = scope["font-size"] || "1.2em";

  var value = obj;
  var context = value.ctx;
  var key = game.templates.dice.defaults[0];
  if (context && context["die"]) {
    key = sync.rawVal(context["die"]);
  }
  var diceData = diceArray[key] || diceArray[game.templates.dice.defaults[0]]; // for custom

  scope.translate = scope.translate || function(ui, valueObj, result) {
    if (diceData && diceData.translations) {
      ui.empty();
      ui.css("width", "100%");
      ui.css("height", "100%");

      if (result == null) {
        result = value.v;
      }
      if (result != null && !String(result).match(diceRegex)) {
        result = sync.eval(result);
        if (diceData.translations[result]) {
          for (var imgIndex in diceData.translations[result].imgs) {
            var img = diceData.translations[result].imgs[imgIndex];
            if (img) {
              var imgDiv = $("<div>").appendTo(ui);
              imgDiv.css("background-image", "url('"+img+"')");
              imgDiv.css("background-repeat", "no-repeat");
              imgDiv.css("background-position", "center");
              imgDiv.css("background-size", "contain");
              imgDiv.css("margin", "auto");
              imgDiv.css("width", Math.floor(100/diceData.translations[result].imgs.length) + "%");
              imgDiv.css("height", Math.floor(100/diceData.translations[result].imgs.length) + "%");
            }
          }
        }
      }
    }
    else {
      ui.css("width", "auto");
      ui.css("height", "auto");
      if (result == null || (result != null && String(result).match(diceRegex))) {
        ui.text(diceData.value);
      }
      else {
        ui.text(result);
      }
    }
  }

  var die = $("<div>");

  die.addClass("flexmiddle");
  die.css("border-radius", "20%");
  die.css("width", scope.width);
  die.css("height", scope.height);
  die.css("position", "relative");

  if (sync.rawVal(value.ctx.die) == "d2") {
    var dieShape = $("<div>").appendTo(die);
    dieShape.addClass("flexmiddle");
    dieShape.css("width", scope.width);
    dieShape.css("height", scope.height);
    dieShape.css("position", "relative");
    dieShape.css("border-radius", "50%");
    dieShape.css("background-color", "#333");
  }
  else if (sync.rawVal(value.ctx.die) == "d4") {
    var dieShape = $("<div>").appendTo(die);
    dieShape.addClass("flexmiddle");
    dieShape.css("border-radius", "20%");
    dieShape.css("width", scope.width);
    dieShape.css("height", scope.height);
    dieShape.css("position", "relative");
    dieShape.css("background-image", "url('/content/dice/d4.png')");
    dieShape.css("background-size", "100% 100%");
    dieShape.css("background-repeat", "no-repeat");
    dieShape.css("background-color", "transparent");
  }
  else if (sync.rawVal(value.ctx.die) == "d6") {
    var dieShape = $("<div>").appendTo(die);
    dieShape.addClass("flexmiddle");
    dieShape.css("border-radius", "20%");
    dieShape.css("width", scope.width);
    dieShape.css("height", scope.height);
    dieShape.css("position", "relative");
    dieShape.css("background-image", "url('/content/dice/d6.png')");
    dieShape.css("background-size", "100% 100%");
    dieShape.css("background-repeat", "no-repeat");
    dieShape.css("background-color", "transparent");
  }
  else if (sync.rawVal(value.ctx.die) == "d8") {
    var dieShape = $("<div>").appendTo(die);
    dieShape.addClass("flexmiddle");
    dieShape.css("border-radius", "20%");
    dieShape.css("width", scope.width);
    dieShape.css("height", scope.height);
    dieShape.css("position", "relative");
    dieShape.css("background-image", "url('/content/dice/d8.png')");
    dieShape.css("background-size", "100% 100%");
    dieShape.css("background-repeat", "no-repeat");
    dieShape.css("background-color", "transparent");
  }
  else if (sync.rawVal(value.ctx.die) == "d10") {
    var dieShape = $("<div>").appendTo(die);
    dieShape.addClass("flexmiddle");
    dieShape.css("border-radius", "20%");
    dieShape.css("width", scope.width);
    dieShape.css("height", scope.height);
    dieShape.css("position", "relative");
    dieShape.css("background-image", "url('/content/dice/d10.png')");
    dieShape.css("background-size", "100% 100%");
    dieShape.css("background-repeat", "no-repeat");
    dieShape.css("background-color", "transparent");
  }
  else if (sync.rawVal(value.ctx.die) == "d12") {
    var dieShape = $("<div>").appendTo(die);
    dieShape.addClass("flexmiddle");
    dieShape.css("border-radius", "20%");
    dieShape.css("width", scope.width);
    dieShape.css("height", scope.height);
    dieShape.css("position", "relative");
    dieShape.css("background-image", "url('/content/dice/d12.png')");
    dieShape.css("background-size", "100% 100%");
    dieShape.css("background-repeat", "no-repeat");
    dieShape.css("background-color", "transparent");
  }
  else if (sync.rawVal(value.ctx.die) == "d20") {
    var dieShape = $("<div>").appendTo(die);
    dieShape.addClass("flexmiddle");
    dieShape.css("border-radius", "20%");
    dieShape.css("width", scope.width);
    dieShape.css("height", scope.height);
    dieShape.css("position", "relative");
    dieShape.css("background-image", "url('/content/dice/d20.png')");
    dieShape.css("background-size", "100% 100%");
    dieShape.css("background-repeat", "no-repeat");
    dieShape.css("background-color", "transparent");

  }
  else {
    die.addClass("dice");
  }


  for (var key in diceData.display) {
    die.css(key, diceData.display[key]);
  }

  var rollResult = $("<div>").appendTo(die);
  rollResult.css("position", "absolute");
  rollResult.css("text-align", "center");
  rollResult.css("color", "white");
  rollResult.css("font-size", scope["font-size"]);
  rollResult.css("font-weight", "bold");
  rollResult.css("word-break", "keep-all");
  rollResult.attr("key", sync.rawVal(value.ctx.die)); // dice type
  rollResult.css("pointer-events", "none");

  for (var key in scope.attr) {
    rollResult.attr(key, scope.attr[key]);
  }

  scope.translate(rollResult, value, scope.value);
  die.attr("title", value.e + "\n" + value.r);

  return die;
});

sync.render("ui_body", function(obj, app, scope){
  var data = obj.data;

  scope = scope || {viewOnly: false}; // defaults
  scope.url = scope.url || "/content/outline.png";
  scope.target = scope.target || sync.traverse(obj.data, "counters.wounds");
  scope.displayText = scope.displayText || function(button, key) {
    if (sync.modifier(scope.target, key) < 0) {
      button.text(sync.modifier(scope.target, key));
    }
  }
  scope.colorize = scope.colorize || function(ui) {
    if (sync.val(scope.target) <= 0) {
      ui.css("background-color", "rgba(255,0,0,0.3)");
    }
    else {
      ui.css("background-color", "rgba(0,255,0,0.3)");
    }
  }
  scope.click = scope.click || function(e, ui) {
    if (hasSecurity(getCookie("UserID"), "Rights", obj.data)) {
      if (e.which == 1) {
        var target = scope.target;
        if (_down["18"]) {
          target = data.counters[game.templates.display.sheet.altStat];
        }
        if (e.shiftKey) {
          if (e.ctrlKey) {
            target.max = target.max + 1;
            obj.sync("updateAsset");
          }
          else {
            target.max = target.max - 1;
            obj.sync("updateAsset");
          }
        }
        else {
          if (e.ctrlKey) {
            if (sync.modified(target) < 0) {
              if (sync.modifier(target, ui.attr("data-index")) < 0) {
                sync.modifier(target, ui.attr("data-index"), Number(sync.modifier(target, ui.attr("data-index"))) + 1);
              }
              else {
                sync.removeModifier(target, ui.attr("data-index"));
              }
            }
            else {
              sync.val(target, Number(sync.rawVal(target)) + 1);
            }
            obj.sync("updateAsset");
          }
          else {
            if (sync.val(target) <= 0) {
              if (sync.modifier(target, ui.attr("data-index")) <= 0) {
                sync.modifier(target, ui.attr("data-index"), Number(sync.modifier(target, ui.attr("data-index"))) - 1);
              }
              else {
                sync.modifier(target, ui.attr("data-index"), -1);
              }
            }
            else {
              sync.val(target, Number(sync.rawVal(target)) - 1);
            }
            obj.sync("updateAsset");
          }
        }
      }
    }
  }

  if (!scope.body) {
    scope.body = {};
    scope.body["human_head"] = {url: "../content/head.png", coords: ["40%",0], size: ["20%","20%"]};
    scope.body["human_torso"] = {url: "../content/torso.png", coords: ["40%","20%"], size: ["20%","40%"]};
    scope.body["human_larm"] = {url: "../content/leftarm.png", coords: ["60%","20%"], size: ["20%","40%"]};
    scope.body["human_rarm"] = {url: "../content/rightarm.png", coords: ["20%","20%"], size: ["20%","40%"]};
    scope.body["human_rleg"] = {url: "../content/leftleg.png", coords: ["30%","60%"], size: ["20%","40%"]};
    scope.body["human_lleg"] = {url: "../content/rightleg.png", coords: ["50%","60%"], size: ["20%","40%"]};
  }

  var body = scope.body;

  var wrapper = $("<div>");
  wrapper.addClass("body-background");
  wrapper.addClass("outline smooth");
  if (scope && scope.viewOnly) {
    wrapper.css("background-color", "rgb(235,235,228)");
  }
  wrapper.css("background-image", "url('"+scope.url+"')");
  wrapper.css("position", "relative");
  wrapper.css("overflow", "hidden");

  if (isChrome()) { // not supported in firefox
    for (var key in body) {
      var part = body[key];
      var url = part.url;

      var img = $("<div>").appendTo(wrapper);
      img.addClass('body-mask');
      img.attr("key", key);
      img.css("-webkit-mask-image", "url('"+url+"')");
      img.css("mask-image", "url('"+url+"')");
      scope.colorize(img);
    }
  }
  if (scope && !scope.viewOnly && scope.target && game.config.data.game == "heresy2" && scope.refresh) {
    var refresh = genIcon("refresh").appendTo(wrapper);
    refresh.css("position", "absolute");
    refresh.css("left", "0");
    refresh.css("top", "0");
    refresh.css("pointer-events", "auto");
    refresh.click(function(ev){
      var target = scope.target;
      target.modifiers = {};
      obj.sync("updateAsset");
    });
  }
  // need the body parts to be ontop, and manually setting z-index is a poor
  // decision
  for (var key in body) {
    var part = body[key];
    if (part.size && part.coords) {
      var button = $("<div>").appendTo(wrapper);
      button.addClass("flexmiddle body-part");
      button.css("position", "absolute");
      button.css("width", part.size[0]);
      button.css("height", part.size[1]);
      button.css("left", part.coords[0]);
      button.css("top", part.coords[1]);
      button.attr("data-index", key);
      button.css("color", "black");
      button.css("font-weight", "bold");
      button.attr("title", key);
      button.attr("key", key);
      scope.displayText(button, key);
      if ((button.text() || "").length > 1) {
        button.addClass("subtitle");
      }
      if (!isChrome()) { // not supported in firefox
        var url = part.url;
        scope.colorize(button);
      }
      if (scope.editable) {
        button.draggable({
          containment : "parent",
          snap: ".body-part",
          snapMode: "both",
          snapTolerance: 4,
          stop : function(ev, ui) {
            var perX = Math.ceil(((ui.offset.left - wrapper.offset().left)-1)/wrapper.outerWidth()*100);
            var perY = Math.ceil(((ui.offset.top - wrapper.offset().top)-1)/wrapper.outerHeight()*100);
            if (body[$(ui.helper).attr("key")][0] != String(perX)+"%" && body[$(ui.helper).attr("key")][0] != String(perY)+"%"){
              body[$(ui.helper).attr("key")].coords = [String(perX)+"%", String(perY)+"%"];
              obj.update();
            }
          }
        });
        var edit = genIcon("pencil").appendTo(button);
        edit.attr("key", key);
        edit.attr("title", "Edit Size");
        edit.click(function(ev) {
          var index = $(this).attr("key");
          ui_prompt({
            target : $(this),
            id : "resize-hitbox",
            inputs : {
              "Width(%)" : {
                type : "number",
                value : parseInt(body[index].size[0]),
                min : 10,
                max : 100,
                step : 1,
              },
              "Height(%)" : {
                type : "number",
                value : parseInt(body[index].size[1]),
                min : 10,
                max : 100,
                step : 1,
              }
            },
            click : function(ev, inputs){
              body[index].size = [String(inputs["Width(%)"].val())+"%", String(inputs["Height(%)"].val())+"%"];
              obj.update();
            }
          });
        });

        var del = genIcon("trash").appendTo(button);
        del.attr("key", key);
        del.attr("title", "Delete");
        del.click(function(ev) {
          scope.click(ev, $(this));
        });
      }
      else {
        if (!scope.viewOnly) {
          button.click(function(e) {
            scope.click(e, $(this));
          });
        }
        else {
          button.css("cursor", "auto");
        }
      }
    }
  }
  return wrapper;
});

sync.render("ui_card", function(obj, app, scope) {
  scope = scope || {};

  var div = $("<div>");
  div.addClass("flexmiddle");

  var img = "/content/cards/backface.png";
  if (obj.data.flipped || (obj.data._s && hasSecurity(getCookie("UserID"), "Visible", obj.data)) || getCookie("UserID") == app.attr("UserID")) {
    img = obj.data.src;
  }
  div.attr("cardSrc", img);
  div.css("width", "64px");
  div.css("height", "96px");
  div.css("background-image", "url('"+(img)+"')");
  div.css("background-size", "100% 100%");
  div.css("background-repeat", "no-repeat");
  div.css("background-position", "center");

  if (scope.text || obj.data.text) {
    var namePlate = $("<b>"+(scope.text || obj.data.text)+"</b>").appendTo(div);
    namePlate.addClass("alttext lrpadding subtitle smooth outline");
    namePlate.css("pointer-events", "none");
    namePlate.css("background-color", "rgba(0,0,0,0.6)");
    namePlate.css("padding-right", "2em");
  }

  return div;
});


sync.render("ui_hand", function(obj, app, scope) {
  scope = scope || {player : app.attr("UserID")};

  if (!obj) {
    game.state.addApp(app);
    return $("<div>");
  }
  obj.data.cards = obj.data.cards || {};
  obj.data.cards.players = obj.data.cards.players || {};
  var playerData = scope.cardData || obj.data.cards.players[scope.player];

  var div = $("<div>");
  div.addClass("flexrow dropContent");
  if (getCookie("UserID") == scope.player) {
    div.sortable({
      connectWith : ".dropContent",
      update : function(ev, ui) {
        var finalOrder = [];
        div.children().each(function(){
          if ($(this).attr("cardID")) {
            finalOrder.push(obj.data.cards.players[scope.player][$(this).attr("cardID")]);
          }
          else if ($(this).attr("cardSrc")) {
            finalOrder.push({src : $(this).attr("cardSrc")});
          }
        });
        obj.data.cards.players[scope.player] = finalOrder;
        if (obj == game.state) {
          obj.sync("updateCards");
        }
        else {
          obj.update();
        }
      }
    });
  }

  for (var i in playerData) {
    var card = sync.render("ui_card")({data : playerData[i]}, app, scope).appendTo(div);
    card.attr("cardID", i);
    card.attr("src", "state");
    if (i != 0) {
      card.css("margin-left", "-48px");
    }
    if (!playerData[i].flipped) {
      card.css("margin-top", "8px");
    }
    if ((obj.data._s && hasSecurity(getCookie("UserID"), "Visible", obj.data)) || getCookie("UserID") == scope.player) {
      card.addClass("hover2");
      card.click(function(){
        var cardID = $(this).attr("cardID");
        obj.data.cards.players[scope.player][cardID].flipped = !obj.data.cards.players[scope.player][cardID].flipped;
        if (obj == game.state) {
          obj.sync("updateCards");
        }
        else {
          obj.update();
        }
      });
      card.contextmenu(function(){
        var cardID = $(this).attr("cardID");
        var src = $(this).attr("cardSrc");
        var actionsList = [
          {
            name : "Announce Card",
            click : function(){
              runCommand("reaction", src);
            }
          },
          {
            name : "Discard",
            click : function(){
              obj.data.cards.players[scope.player].splice(cardID, 1);
              if (obj == game.state) {
                obj.sync("updateCards");
              }
              else {
                obj.update();
              }
            }
          },
          {
            name : "View Card",
            click : function(ev, ui){
              assetTypes["img"].preview(ev, ui, src);
            }
          },
        ];

        ui_dropMenu($(this), actionsList, {id : "card-menu"});
        return false;
      });
    }
  }

  return div;
});


sync.render("ui_deck", function(obj, app, scope) {
  obj.data.cards = obj.data.cards || {};
  obj.data.cards.players = obj.data.cards.players || {};

  var div = $("<div>");
  div.addClass("flexrow flexmiddle");

  if (obj.data.cards) {
    if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
      var cards = $("<div>").appendTo(div);
      cards.addClass("hover2 flexmiddle");
      cards.attr("title", "Playing Cards");
      cards.css("width", 75 * 2/5);
      cards.css("height", 75 * 3/5);
      cards.css("background-image", "url('/content/cards/backfacegreen.png')");
      cards.css("background-size", "contain");
      cards.css("background-repeat", "no-repeat");
      cards.css("background-position", "center");
      cards.click(function(){
        var cards = [];

        cards.push({
          name : "Show Hands",
          click : function() {
            for (var id in game.state.data.cards.players) {
              if (id != getCookie("UserID")) {
                var content = $("<div>");
                content.addClass("flexcolumn");

                var namePlate = $("<b>"+(getPlayerCharacterName(id) || getPlayerName(id))+"</b>").appendTo(content);
                namePlate.addClass("alttext lrpadding subtitle smooth outline");
                namePlate.css("pointer-events", "none");
                namePlate.css("background-color", "rgba(0,0,0,0.6)");
                namePlate.css("padding-right", "2em");

                var newApp = sync.newApp("ui_hand").appendTo(content);
                newApp.addClass("flexmiddle");
                newApp.attr("UserID", id);

                game.state.addApp(newApp);

                var pop = ui_popOut({
                  target : $("#player-icon-"+id),
                  id : "hand-"+id,
                  align : "top",
                  noCss : true,
                  style : {"min-width" : "70px"},
                }, content);
                pop.attr("UserID", id);

                if (game.players.data[id].color) {
                  pop.css("background-color", game.players.data[id].color);
                }
                else {
                  pop.addClass("background");
                }
              }
            }
          }
        });

        cards.push({
          name : "Empty Hands",
          click : function() {
            game.state.data.cards.players = {};
            game.state.sync("updateState");
          }
        });

        var createDecks = [];
        for (var key in util.decks) {
          createDecks.push({
            name : key,
            attr : {deck : key},
            click : function(ev, ui){
              game.state.data.cards = game.state.data.cards || {}
              game.state.data.cards.decks = game.state.data.cards.decks || [];

              // shuffle
              var deckData = {type : ui.attr("deck"), pool : [], players : {}};
              var start = duplicate(util.decks[ui.attr("deck")]);
              while (start.length) {
                var index = Math.floor(Math.random() * start.length);
                var val = start.splice(index, 1)[0];
                deckData.pool.push(val);
              }
              game.state.data.cards.decks.push(deckData);

              game.state.sync("updateState");
            }
          });
        }

        for (var key in game.entities.data) {
          var ent = game.entities.data[key];
          if (ent && ent.data && ent.data._t == "p" && sync.rawVal(ent.data.info.mode) == "Deck of Cards") {
            createDecks.push({
              name : sync.rawVal(ent.data.info.name),
              attr : {deck : ent.id()},
              click : function(ev, ui){
                game.state.data.cards = game.state.data.cards || {}
                game.state.data.cards.decks = game.state.data.cards.decks || [];

                // shuffle
                var deckData = {type : JSON.parse(sync.rawVal(getEnt(ui.attr("deck")).data.info.notes)), pool : [], players : {}};
                var start = duplicate(deckData.type);
                while (start.length) {
                  var index = Math.floor(Math.random() * start.length);
                  var val = start.splice(index, 1)[0];
                  deckData.pool.push(val);
                }
                game.state.data.cards.decks.push(deckData);

                game.state.sync("updateState");
              }
            });
          }
        }

        cards.push({
          name : "Deal Unique Card",
          click : function(ev, ui) {
            var picker = sync.render("ui_filePicker")(obj, app, {
              filter : "img",
              change : function(ev, ui, val){
                var players = [];
                players.push({
                  name : "All Players",
                  attr : {player : key},
                  click : function(ev, ui){
                    var key = ui.attr("player");
                    game.state.data.cards.players = game.state.data.cards.players || {};

                    for (var key in game.players.data) {
                      game.state.data.cards.players[key] = game.state.data.cards.players[key] || [];
                      game.state.data.cards.players[key].push({src : val});
                    }

                    game.state.sync("updateState");
                  }
                });

                for (var key in game.players.data) {
                  players.push({
                    name : getPlayerCharacterName(key) || getPlayerName(key),
                    attr : {player : key},
                    click : function(ev, ui){
                      var key = ui.attr("player");
                      obj.data.cards.players = obj.data.cards.players || {};
                      obj.data.cards.players[key] = obj.data.cards.players[key] || [];
                      obj.data.cards.players[key].push({src : val});

                      game.state.sync("updateState");
                    }
                  });
                }

                ui_dropMenu(prompt, players, {id : "drop", align : "center"});
                layout.coverlay("unique-card");
              }
            });
            var prompt = ui_popOut({
              target : $("body"),
              prompt : true,
              id : "unique-card",
              style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
            }, picker);
          }
        });


        if (createDecks.length) {
          cards.push({name : "Create Deck", submenu : createDecks});
        }

        ui_dropMenu($(this), cards, {id : "cards", align : "top"});
      });
      cards.contextmenu(function(){
        $(this).click();
        return false;
      });
    }
    for (var i in obj.data.cards.decks) {
      var cards = $("<div>").appendTo(div);
      cards.addClass("flexmiddle alttext lrpadding");
      cards.attr("index", i);
      cards.css("margin-right", "4px");
      cards.css("width", 75 * 3/5);
      cards.css("height", 75 * 4/5);
      cards.css("background-image", "url('/content/cards/backface.png')");
      cards.css("background-size", "100% 100%");
      cards.css("background-repeat", "no-repeat");
      cards.css("background-position", "center");
      cards.append("<b>"+obj.data.cards.decks[i].pool.length+"</b>");
      if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
        cards.addClass("hover2");
        cards.click(function(){
          var cardActions = [];
          var deck = $(this).attr("index");

          var deal = [];
          function draw(deck, number, player) {
            var deckData = game.state.data.cards.decks[deck];
            game.state.data.cards.players = game.state.data.cards.players || {};
            game.state.data.cards.players[player] = game.state.data.cards.players[player] || [];

            var cards = deckData.pool.splice(0, number);
            for (var i in cards) {
              game.state.data.cards.players[player].push(cards[i]);
            }

            game.state.sync("updateState");
          }

          for (var key in game.players.data) {
            var dealCards = [
              {
                name : "1 Card",
                attr : {user : key, num : 1},
                click : function(ev, ui){
                  draw(deck, parseInt(ui.attr("num")), ui.attr("user"));
                }
              },
              {
                name : "2 Cards",
                attr : {user : key, num : 2},
                click : function(ev, ui){
                  draw(deck, parseInt(ui.attr("num")), ui.attr("user"));
                }
              },
              {
                name : "3 Cards",
                attr : {user : key, num : 3},
                click : function(ev, ui){
                  draw(deck, parseInt(ui.attr("num")), ui.attr("user"));
                }
              },
              {
                name : "4 Cards",
                attr : {user : key, num : 4},
                click : function(ev, ui){
                  draw(deck, parseInt(ui.attr("num")), ui.attr("user"));
                }
              },
              {
                name : "5 Cards",
                attr : {user : key, num : 5},
                click : function(ev, ui){
                  draw(deck, parseInt(ui.attr("num")), ui.attr("user"));
                }
              },
              {
                name : "6 Cards",
                attr : {user : key, num : 6},
                click : function(ev, ui){
                  draw(deck, parseInt(ui.attr("num")), ui.attr("user"));
                }
              },
              {
                name : "7 Cards",
                attr : {user : key, num : 7},
                click : function(ev, ui){
                  draw(deck, parseInt(ui.attr("num")), ui.attr("user"));
                }
              },
              {
                name : "# Cards",
                attr : {user : key},
                click : function(ev, ui){
                  var user = ui.attr("user");
                  ui_prompt({
                    target : ui,
                    inputs : {
                      "Number of Cards" : {type : "number", value : 7, min : 1}
                    },
                    click : function(ev, inputs) {
                      draw(deck, parseInt(inputs["Number of Cards"].val()), user);
                    }
                  });
                }
              }
            ];

            cardActions.push({
              name : "Deal to " + game.players.data[key].displayName,
              submenu : dealCards
            });
          }

          cardActions.push({
            name : "Discard Deck",
            submenu : [
              {
                name : "CONFIRM",
                attr : {title : "Deletes this Deck", deck : $(this).attr("index")},
                click : function(ev, ui){
                   game.state.data.cards.decks.splice(ui.attr("deck"), 1);
                   game.state.sync("updateState");
                }
              }
            ]
          });

          cardActions.push({
            name : "Restore Deck",
            attr : {title : "Reshuffles all the cards", deck : $(this).attr("index")},
            click : function(ev, ui){
              var deckData = game.state.data.cards.decks[ui.attr("deck")];
              deckData.pool = [];
              var start;
              if (deckData.type instanceof Object) {
                start = duplicate(deckData.type);
              }
              else {
                start = duplicate(util.decks[deckData.type]);
              }
              while (start.length) {
                deckData.pool.push(start.splice(Math.floor(Math.random() * start.length), 1)[0]);
              }
              game.state.sync("updateState");
            }
          });

          cardActions.push({
            name : "Shuffle",
            attr : {title : "Reshuffles the remaining cards", deck : $(this).attr("index")},
            click : function(ev, ui){
              var deckData = game.state.data.cards.decks[ui.attr("deck")];
              var start = duplicate(deckData.pool);
              deckData.pool = [];
              while (start.length) {
                deckData.pool.push(start.splice(Math.floor(Math.random() * start.length), 1)[0]);
              }
              game.state.sync("updateState");
            }
          });

          cardActions.push({
            name : "Peek",
            attr : {title : "Peek at the next cards", deck : $(this).attr("index")},
            click : function(ev, ui){
              var content = $("<div>");
              content.addClass("flexrow");
              var deckData = game.state.data.cards.decks[ui.attr("deck")];
              for (var i=deckData.pool.length-1; i>=0; i--) {
                var dat = {data : duplicate(deckData.pool[i])};
                dat.data.flipped = true;
                dat.data.text = (i==0)?("Top Card"):(null);

                var card = sync.render("ui_card")(dat, app, {}).appendTo(content);
                card.attr("cardID", i);
                if (i != 0) {
                  card.css("margin-right", "-48px");
                }
                if (!deckData.pool[i].flipped) {
                  card.css("margin-top", "8px");
                }
              }

              ui_popOut({
                target : ui,
                noCss : true,
                id : "peek-deck",
              }, content).addClass("highlight");
            }
          });
          ui_dropMenu($(this), cardActions, {id : "cards", align : "top"});
        });
        cards.contextmenu(function(){
          $(this).click();
          return false;
        });
      }
    }
  }

  return div;
});

sync.render("ui_combatControls", function(obj, app, scope){
  var data;
  var div = $("<div>");
  div.addClass("flexcolumn flex");
  if (!obj) {
    game.state.addApp(app);
    return div;
  }

  div.attr("_lastScrollTop", app.attr("_lastScrollTop_combatDiv"));
  div.attr("_lastScrollLeft", app.attr("_lastScrollTop_combatDiv"));
  div.scroll(function(){
    app.attr("_lastScrollTop_combatDiv", $(this).scrollTop());
    app.attr("_lastScrollTop_combatDiv", $(this).scrollLeft());
  });

  data = obj.data;

  if (true) {
    var optionsBar = $("<div>").appendTo(div);
    optionsBar.addClass("flexrow flexaround flexwrap bold");
    optionsBar.css("font-size", "1.5em");

    if (data.combat) {
      optionsBar.addClass("outline alttext");
      if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
        optionsBar.addClass("highlight");
      }
      else {
        optionsBar.addClass("foreground");
      }
      var compare = function (obj1, obj2) {
        return sync.eval(game.templates.initiative.compare, {i1 : obj1, i2 : obj2});
      }

      var inits = [];
      for (var i in data.combat.engaged) {
        var ref = Math.max(inits.length-1, 0);
        while (ref != null && ref >= 0) {
          if (ref == inits.length && inits.length == 0) {
            var added = duplicate(data.combat.engaged[i]);
            added.e = [i];
            inits.push(added);
            ref = null;
          }
          else {
            if (compare(data.combat.engaged[i], inits[ref]) > 0) {
              var added = duplicate(data.combat.engaged[i]);
              added.e = [i];
              if (ref == inits.length-1) {
                inits.push(added);
              }
              else {
                util.insert(inits, ref+1, added);
              }
              ref = null;
            }
            else if (compare(data.combat.engaged[i], inits[ref]) == 0) {
              inits[ref].e = inits[ref].e || [];
              if (!util.contains(inits[ref].e, i)) {
                inits[ref].e.push(i);
              }
              ref = null;
            }
          }
          if (ref != null) {
            ref--;
          }
        }
        if (ref != null && ref == -1) {
          var added = duplicate(data.combat.engaged[i]);
          added.e = [i];
          var newInit = [added];
          for (var j=0; j<inits.length; j++) {
            newInit.push(inits[j]);
          }
          inits = newInit;
        }
      }

      var turn;
      for (var j in inits) {
        if (compare(data.combat.current, inits[j]) == 0) {
          turn = parseInt(j);
          break;
        }
      }


      function isHiddenTurn(turnCheck){
        if (inits[turnCheck]) {
          var valid = true;
          for (var i in inits[turnCheck].e) {
            var ent = getEnt(inits[turnCheck].e[i]);
            if (ent && ent.data && !(ent.data._flags && ent.data._flags.hidden)) {
              valid = false;
              break;
            }
          }
        }
        return valid;
      }

      if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
        var back = genIcon("fast-backward").appendTo(optionsBar);
        back.attr("title", "Last Round");
        back.css("font-size", "1em");
        back.click(function() {
          var newTurn = 0;
          while (isHiddenTurn(newTurn)) {
            newTurn = Math.min(newTurn+1, inits.length-1);
            if (newTurn >= inits.length-1) {
              break;
            }
          }
          sync.val(data.combat.round, sync.val(data.combat.round) - 1);
          data.combat.current = inits[newTurn];
          for (var key in data.combat.engaged) {
            data.combat.engaged[key].ok = true;
          }
          obj.sync("updateCombatState");
        });

        var last = genIcon("backward").appendTo(optionsBar);
        last.attr("title", "Previous Turn");
        last.css("font-size", "1em");
        last.click(function() {
          var newTurn = turn+1;
          while (isHiddenTurn(newTurn)) {
            newTurn = Math.min(newTurn+1, inits.length-1);
            if (newTurn >= inits.length-1) {
              break;
            }
          }

          if (turn == inits.length-1) {
            newTurn = 0;
            while (isHiddenTurn(newTurn)) {
              newTurn = Math.min(newTurn+1, inits.length-1);
              if (newTurn >= inits.length-1) {
                break;
              }
            }
            sync.val(data.combat.round, sync.val(data.combat.round) - 1);
            for (var key in data.combat.engaged) {
              data.combat.engaged[key].ok = true;
            }
          }
          else {
            for (var key in data.combat.engaged) {
              if (compare(inits[turn], data.combat.engaged[key]) == 0) {
                delete data.combat.engaged[key].ok;
              }
            }
          }
          data.combat.current = inits[newTurn];
          obj.sync("updateCombatState");
        });

        var disableCombat = genIcon("resize-full", "Disable Combat").appendTo(optionsBar);
        disableCombat.css("font-size", "0.6em");
        disableCombat.addClass("flexmiddle");
        disableCombat.click(function() {
          var pop = ui_popOut({
            id : "confirm-disable-combat",
            target : $(this),
            noCss : true,
            prompt : true,
            style : {"font-size" : "1.4em"}
          }, $("<b class='lpadding fit-x hover2'>Confirm?</b>")).addClass("background alttext");
          var max = util.getMaxZ(".ui-popout");
          pop.css("z-index", max+1);
          pop.click(function(){
            delete obj.data.combat;
            obj.sync("disableCombat");
            $(this).remove();
          });
        });

        var next = genIcon("play").appendTo(optionsBar);
        next.attr("title", "Next Turn");
        next.css("font-size", "1em");
        next.click(function() {
          var newTurn = turn-1;
          while (isHiddenTurn(newTurn)) {
            newTurn = Math.max(newTurn-1, 0);
            if (newTurn <= 0) {
              break;
            }
          }

          function changeTurn() {
            if (turn == 0) {
              newTurn = inits.length-1;
              while (isHiddenTurn(newTurn)) {
                newTurn = Math.max(newTurn-1, 0);
                if (newTurn <= 0) {
                  break;
                }
              }
              sync.val(data.combat.round, sync.val(data.combat.round) + 1);
              for (var key in data.combat.engaged) {
                delete data.combat.engaged[key].ok;
                delete data.combat.engaged[key].sp;
              }
            }
            else {
              for (var key in data.combat.engaged) {
                if (compare(inits[turn], data.combat.engaged[key]) == 0) {
                  data.combat.engaged[key].ok = true;
                }
              }
            }
            for (var key in data.combat.engaged) {
              if (compare(inits[newTurn], data.combat.engaged[key]) == 0) {
                if (game.templates.initiative.skip && sync.eval(game.templates.initiative.skip, {c : duplicate(getEnt(key))})) {
                  data.combat.engaged[key].ok = true;
                }
              }
            }
            data.combat.current = inits[newTurn];
            obj.sync("updateCombatState");
          }
          for (var key in game.players.data) {
            var player = game.players.data[key];
            if (player.entity && data.combat.engaged[player.entity] && !data.combat.engaged[player.entity].ok) {
              if (compare(data.combat.engaged[player.entity], inits[turn]) == 0) {
                var pop = ui_popOut({
                  id : "confirm-skip-turn",
                  target : $(this),
                  noCss : true,
                  prompt : true,
                  style : {"font-size" : "1.4em"}
                }, $("<b class='lpadding fit-x hover2'>Skip Players</b>")).addClass("background alttext");
                var max = util.getMaxZ(".ui-popout");
                pop.css("z-index", max+1);
                pop.click(function(){
                  changeTurn();
                  $(this).remove();
                });
                return;
              }
            }
          }
          changeTurn();
        });

        var top = genIcon("fast-forward").appendTo(optionsBar);
        top.attr("title", "Next Round");
        top.css("font-size", "1em");
        top.click(function() {
          var newTurn = inits.length-1;
          while (isHiddenTurn(newTurn)) {
            newTurn = Math.max(newTurn-1, 0);
            if (newTurn <= 0) {
              break;
            }
          }

          data.combat.current = inits[newTurn];
          sync.val(data.combat.round, sync.val(data.combat.round) + 1);
          for (var key in data.combat.engaged) {
            delete data.combat.engaged[key].ok;
            delete data.combat.engaged[key].sp;
          }
          for (var key in data.combat.engaged) {
            if (game.templates.initiative.skip && sync.eval(game.templates.initiative.skip, {c : duplicate(getEnt(key))})) {
              data.combat.engaged[key].ok = true;
            }
          }
          obj.sync("updateCombatState");
        });

        if (data.combat.round && sync.val(data.combat.round) != null) {
          var round = $("<b>").appendTo(optionsBar);
          round.addClass("flexmiddle subtitle");

          round.text(data.combat.round.name + " " + sync.val(data.combat.round) || 0);
        }
      }
      else {
        genIcon("", "Combat Enabled").appendTo(optionsBar);
      }
      layout.coverlay($(".my-turn"), 500);
      var update = false;
      for (var key in game.players.data) {
        var player = game.players.data[key];
        if (player && player.entity) {
          if (data.combat.engaged[player.entity] && inits[turn] && compare(data.combat.engaged[player.entity], inits[turn]) == 0) {
            update = true;
            if (!data.combat.engaged[player.entity].ok) {
              if ($("#player-image-plate-"+key).length && !hasSecurity(key, "Assistant Master")) {
                var target = $("#player-image-plate-"+key);
                if ($("#web-cam-"+key).length && getCookie("UserID") != key) {
                  target = $("#web-cam-"+key);
                }
                if (key == getCookie("UserID")) {
                  optionsBar.empty();
                  optionsBar.addClass("highlight hover2 flexrow");
                  optionsBar.removeClass("foreground");
                  var button = $("<div>").appendTo(optionsBar);
                  button.addClass("flex flexmiddle");
                  button.attr("UserID", key);
                  button.attr("title", "Click to pass your turn over to the next person");
                  button.css("font-size", "2em");
                  button.css("font-family", "Nodesto Caps Condensed");
                  button.text("I've completed my turn");
                  button.click(function(){
                    if (game.state.data.combat) {
                      var player = game.players.data[$(this).attr("UserID")];
                      if (data.combat.engaged[player.entity]) {
                        data.combat.engaged[player.entity].ok =  true;

                        var change = true;
                        for (var eIDs in inits[turn].e) {
                          if (!data.combat.engaged[inits[turn].e[eIDs]].ok) {
                            change = false;
                            break;
                          }
                        }
                        if (change) {
                          var newTurn = turn-1;
                          function changeTurn() {
                            if (turn == 0) {
                              newTurn = inits.length-1;
                              sync.val(data.combat.round, sync.val(data.combat.round) + 1);
                              for (var key in data.combat.engaged) {
                                delete data.combat.engaged[key].ok;
                                delete data.combat.engaged[key].sp;
                              }
                            }
                            else {
                              for (var key in data.combat.engaged) {
                                if (compare(inits[turn], data.combat.engaged[key]) == 0) {
                                  data.combat.engaged[key].ok = true;
                                }
                              }
                            }
                            for (var key in data.combat.engaged) {
                              if (compare(inits[newTurn], data.combat.engaged[key]) == 0) {
                                if (game.templates.initiative.skip && sync.eval(game.templates.initiative.skip, {c : duplicate(getEnt(key))})) {
                                  data.combat.engaged[key].ok = true;
                                }
                              }
                            }
                            data.combat.current = inits[newTurn];
                            obj.sync("updateCombatState");
                          }
                          changeTurn();
                        }
                        else {
                          obj.sync("updateCombatState");
                        }
                      }
                    }
                  });
                  if ($("#main-menu").length && $("#main-menu").css("opacity") == 0 && $("#main-menu").attr("docked") && !$("#main-menu").attr("locked")) {
                    $("#combat-button").click();
                    util.dockReveal($("#main-menu"));
                  }
                }
              }
            }
          }
        }
      }
      game.players.update();
    }
    else {
      optionsBar.css("color", "white");

      var enableCombat = genIcon("resize-small", "Enable Combat");
      if (!app.attr("hideCombat")) {
        optionsBar.addClass("background outline");
      }
      else if ($("#quick-combat").length == 0 || !$("#quick-combat").is(":visible")) {
        enableCombat = genIcon("resize-small", "Setup Combat");
      }
      enableCombat.appendTo(optionsBar);

      enableCombat.css("font-size", "1em");
      enableCombat.click(function() {
        if (app.attr("hideCombat") && ($("#quick-combat").length == 0 || !$("#quick-combat").is(":visible"))) {
          var charList = sync.newApp("ui_combatControls");
          charList.addClass("white");
          game.state.addApp(charList);
          if ($("#quick-combat").length == 0) {
            var pop = ui_popOut({
              align : "top-left",
              target : $($(".main-dock")[3]),
              id : "quick-combat",
              title : "Combat",
              minimize : true,
              maximize : true,
              close : function(){
                pop.hide();
              },
              style : {"width" : "400px", "height" : "300px"}
            }, charList);
            pop.resizable();
            //pop.hover(function(){}, function(){$(this).hide();})
          }
          else {
            $("#quick-combat").show();
          }
          if ($("#quick-combat").attr("docked")) {
            util.dockReveal($("#quick-combat"));
          }
          obj.update();
        }
        else {
          if (game.locals["turnOrder"].data && Object.keys(game.locals["turnOrder"].data.combat.engaged).length) {
            var compare = function (obj1, obj2) {
              return sync.eval(game.templates.initiative.compare, {i1 : obj1, i2 : obj2});
            }

            game.state.data.combat = duplicate(game.locals["turnOrder"].data.combat);
            var randomInit = duplicate(game.locals["turnOrder"].data.combat.current);
            // roll the randoms if it isn't a player
            var pEnts = {};
            for (var k in game.players.data) {
              if (game.players.data[k].entity && !hasSecurity(k, "Game Master")) {
                 pEnts[game.players.data[k].entity] = k;
              }
            }
            for (var i in randomInit.e) {
              if (!pEnts[randomInit.e[i]] && compare(game.state.data.combat.engaged[randomInit.e[i]], {}) == 0) {
                var sp;
                var ok;
                if (game.state.data.combat.engaged[randomInit.e[i]]) {
                  if (game.state.data.combat.engaged[randomInit.e[i]].sp) {
                    sp = game.state.data.combat.engaged[randomInit.e[i]].sp;
                  }
                  if (game.state.data.combat.engaged[randomInit.e[i]].ok) {
                    ok = game.state.data.combat.engaged[randomInit.e[i]].ok;
                  }
                }
                var context = sync.defaultContext();
                context[game.entities.data[randomInit.e[i]].data._t] = duplicate(game.entities.data[randomInit.e[i]].data);
                game.state.data.combat.engaged[randomInit.e[i]] = sync.executeQuery(game.templates.initiative.query, context).pool;
                game.state.data.combat.engaged[randomInit.e[i]].sp = sp;
                game.state.data.combat.engaged[randomInit.e[i]].ok = ok;
              }
            }
            game.state.data.combat.current = {};

            for (var id in game.state.data.combat.engaged) {
              if (compare(game.state.data.combat.engaged[id], game.state.data.combat.current) > 0) {
                game.state.data.combat.current = duplicate(game.state.data.combat.engaged[id]);
              }
            }
            game.state.data.combat.round = sync.newValue("Round", 0);
            game.state.sync("updateCombatState");
            runCommand("enableCombat");
          }
        }
      });
    }
  }

  if (!data.combat && !hasSecurity(getCookie("UserID"), "Assistant Master")) {
    div.empty();
    div.addClass("flexmiddle");
    div.append("<b>No Combat</b>");
    return div;
  }

  if (!app.attr("hideCombat")) {
    if (!obj.data.combat) {
      if (!game.locals["turnOrder"]) {
        game.locals["turnOrder"] = sync.obj("turnOrder");
        game.locals["turnOrder"].data = {combat : {engaged : {}, current : {}}};
      }
      for (var index in game.players.data) {
        if (game.players.data[index].entity) {
          game.locals["turnOrder"].data.combat.engaged[game.players.data[index].entity] = {};
        }
      }

      var charList = sync.newApp("ui_turnOrder");
      game.locals["turnOrder"].addApp(charList);
      charList.appendTo(div);
    }
    else {
      var charList = sync.newApp("ui_combat");
      obj.addApp(charList);
      charList.appendTo(div);
    }
  }

  return div;
});

sync.render("ui_contentList", function(obj, app, scope) {
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};
  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");
  div.css("position", "relative");

  if (!obj) {
    game.locals["storage"] = game.locals["storage"] || sync.obj("storage");
    game.locals["storage"].addApp(app);

    runCommand("retreiveStorage");
    return div;//$("<div class='flexmiddle'><b>Loading...</b></div>");
  }

  var list = [];
  if (game.locals["newContent"]) {
    list.push(game.locals["newContent"]);
  }
  if (obj) {
    var data = obj.data;
    for (var i in data.l) {
      if (data.l[i] && data.l[i].a == "pk" && data.l[i]._uid) {
        if (isNaN(data.l[i]._uid)) {
          if (data.l[i]._uid.match(getCookie("UserID"))) {
            var splt = data.l[i]._uid.split("_");
            if (splt[1]) {
              list.push(data.s[splt[1]]);
            }
          }
          else if (data.s[data.l[i]._uid]) {
            list.push(data.s[data.l[i]._uid]);
          }
        }
        else {
          list.push(data.s[data.l[i]._uid]);
        }
      }
    }
  }
  if (list.length) {
    var wrap = $("<div>").appendTo(div);
    wrap.addClass("flex outlinebottom");
    wrap.css("position", "relative");
    wrap.css("overflow", "auto");

    var content = sync.render("ui_entList")(obj, app, {
      list : list,
      draw : function(ui, ent) {
        $(ui.children()[0]).removeClass("flexbetween");
        $(ui.children()[0]).addClass("flexcolumn");
        $(ui.children()[0]).css("position", "relative");
        var img = $($(ui.children()[0]).children()[0]);
        img.css("max-width", "100%");
        img.css("height", "auto");
        if (obj != game.locals["newContent"]) {
          for (var i in data.l) {
            if (data.s[data.l[i]._uid] == ent) {
              var del = genIcon("remove").appendTo($(ui.children()[0]));
              del.addClass("lrpadding");
              del.attr("title", "Unsubscribe");
              del.attr("index", i);
              del.css("position", "absolute");
              del.css("right", "0");
              del.css("top", "0");
              del.click(function(ev){
                var l = duplicate(data.l);
                l[$(this).attr("index")] = {delete : true};
                runCommand("moveAssets", {l : l});
                ui.remove();
                sendAlert({text : "Unsubscribing"});
                ev.stopPropagation();
                ev.preventDefault();
                return false;
              });
            }
          }
        }
      },
      click : function(ev, ui, eObj) {
        var newApp = sync.newApp("ui_contentEditor");
        eObj.addApp(newApp);

        var pop = ui_popOut({
          target : app,
          align : "top",
          id : "content-package",
          dragThickness : "0.5em",
          minimize : true,
          title : sync.rawVal(eObj.data.info.name),
          style : {"width" : "50vw", "height" : "50vh"}
        }, newApp);
        pop.resizable();
      },
    });
    content.addClass("fit-xy");
    content.css("position", "absolute");
    content.css("top", "0");
    content.css("left", "0");
    content.appendTo(wrap);

    var library = genIcon("cloud-download", "find more packs").appendTo(div);
    library.addClass("fit-x flexmiddle subtitle");
    library.click(function(){
      var frame = layout.page({title: "Community Chest", blur : 0.5, width: "90%", id: "community-chest"});
      if (layout.mobile) {
        frame.css("width", "95vw");
      }
      var newApp = sync.newApp("ui_newMarket", null, {});
      newApp.appendTo(frame);
      newApp.css("height", "80vh");
    });

    var optionsBar = $("<div>").appendTo(div);
    optionsBar.addClass("background alttext flexrow flexaround spadding");

    var newPack = genIcon("plus", "Create New Package").appendTo(optionsBar);
    newPack.addClass("subtitle");
    newPack.click(function(){
      game.locals["newContent"] = sync.obj();
      game.locals["newContent"].data = duplicate(game.templates.content);
      sync.rawVal(game.locals["newContent"].data.info.name, "Local Package");

      var newApp = sync.newApp("ui_contentEditor");
      game.locals["newContent"].addApp(newApp);

      var pop = ui_popOut({
        target : app,
        align : "top",
        id : "content-package",
        dragThickness : "0.5em",
        minimize : true,
        title : sync.rawVal(game.locals["newContent"].data.info.name),
        style : {"width" : "50vw", "height" : "50vh"}
      }, newApp);
      pop.resizable();
    });

    return div;
  }
  else {
    div.append("<i class='subtitle lrpadding flex flexmiddle'>No Content Packs Found</i>");

    var optionsBar = $("<div>").appendTo(div);
    optionsBar.addClass("background alttext flexrow flexaround spadding");

    var newPack = genIcon("plus", "Create New Package").appendTo(optionsBar);
    newPack.addClass("subtitle");
    newPack.click(function(){
      game.locals["newContent"] = sync.obj();
      game.locals["newContent"].data = duplicate(game.templates.content);
      sync.rawVal(game.locals["newContent"].data.info.name, "Local Package");

      var newApp = sync.newApp("ui_contentEditor");
      game.locals["newContent"].addApp(newApp);

      var pop = ui_popOut({
        target : app,
        align : "top",
        id : "content-package",
        dragThickness : "0.5em",
        minimize : true,
        title : sync.rawVal(game.locals["newContent"].data.info.name),
        style : {"width" : "50vw", "height" : "50vh"}
      }, newApp);
      pop.resizable();
    });
    return div;
  }
});

sync.render("ui_contentEditor", function(obj, app, scope) {
  scope = scope || {viewOnly : (app.attr("viewOnly") == "true")};

  var categories = {
    "a" : {n : "Adventures", i : "book", ui : "ui_planner", width : "60vw", height : "40vh"},
    "b" : {n : "Maps", i : "globe", ui : "ui_board", width : assetTypes["b"].width, height : assetTypes["b"].height},
    "c" : {n : "Actors", i : "user", ui : "ui_characterSheet", width : assetTypes["c"].width, height : assetTypes["c"].height},
    "i" : {n : "Items/Spells", i : "briefcase", ui : "ui_renderItem", width : assetTypes["i"].width, height : assetTypes["i"].height},
    "p" : {n : "Resources", i : "file", ui : "ui_renderPage", width : "600px", height : "800px"},
    "v" : {n : "Vehicles", i : "plane", ui : "ui_vehicle", width : "50vw", height : "40vh"},
  };

  var div = $("<div>");
  div.addClass("flex flexcolumn");

  if (!obj) {
    return sync.render("ui_contentList")(obj, app, scope);
  }
  var data = obj.data;
  if (obj.data["_uid"] && isNaN(obj.data["_uid"]) && !obj.data["_uid"].toLowerCase().match(getCookie("UserID").toLowerCase())) {
    scope.viewOnly = true;
  }
  console.log(data);
  if (!(data.b instanceof Object)) {
    data.b = JSON.parse(data.b || "[]");
  }
  if (!(data.c instanceof Object)) {
    data.c = JSON.parse(data.c || "[]");
  }
  if (!(data.p instanceof Object)) {
    data.p = JSON.parse(data.p || "[]");
  }
  if (!(data.v instanceof Object)) {
    data.v = JSON.parse(data.v || "[]");
  }

  if (!(data.inventory instanceof Object)) {
    data.inventory = JSON.parse(data.inventory || "[]");
  }
  if (!(data.spellbook instanceof Object)) {
    data.spellbook = JSON.parse(data.spellbook || "[]");
  }
  /*if (!(data.talents instanceof Object)) {
    data.talents = JSON.parse(data.talents || "[]");
  }*/

  if (!scope.viewOnly || app.attr("from")) {
    var optionsBar = $("<div>").appendTo(div);
    optionsBar.addClass("foreground padding subtitle alttext flexrow flexaround");
    if (app.attr("from")) {
      var back = genIcon("arrow-left").appendTo(optionsBar);
      back.attr("title", "To List");
      back.click(function(){
        obj.removeApp(app);
        app.attr("ui-name", "ui_contentList");
        game.locals["storage"] = game.locals["storage"] || sync.obj("storage");
        game.locals["storage"].addApp(app);
      });
    }

    if (!scope.viewOnly) {
      if (obj.data["_uid"]) {
        var trash = genIcon("trash", "Delete Content").appendTo(optionsBar);
        trash.attr("title", "Delete this Content");
        trash.click(function(){
          ui_prompt({
            target : $(this),
            id : "confirm-delete-content",
            click : function(){
              sendAlert({text : "You must delete this from your storage"});
            }
          });
        });
      }

      var clear = genIcon("remove", "Clear Content").appendTo(optionsBar);
      clear.attr("title", "Clear the Contents of this Content");
      clear.click(function(){
        ui_prompt({
          target : $(this),
          id : "confirm-clear-adventure",
          click : function(){
            obj.data = duplicate(game.templates.content);
            obj.sync("updateAsset");
          }
        });
      });

      var store = genIcon("cloud-upload", "Export Content as Package");
      if (obj.data["_uid"]) {
        store = genIcon("cloud-upload", "Re-Package Content");
      }
      store.appendTo(optionsBar);
      store.attr("title", "Save Content as Package");
      store.click(function(){
        var dupe = {_s : obj.data._s};
        dupe.info = duplicate(obj.data.info);
        dupe.b = JSON.stringify(obj.data.b);
        dupe.c = JSON.stringify(obj.data.c);
        dupe.p = JSON.stringify(obj.data.p);
        dupe.v = JSON.stringify(obj.data.v);
        dupe._c = obj.data._c;
        dupe._t = "pk";
        dupe._uid = duplicate(obj.data._uid);
        dupe.inventory = JSON.stringify(obj.data.inventory);
        dupe.spellbook = JSON.stringify(obj.data.spellbook);
        dupe.talents = JSON.stringify(obj.data.talents);
        runCommand("storeContent", dupe);
        layout.coverlay("quick-storage-popout");
      });
    }
  }

  var body = genNavBar('foreground subtitle alttext', null, "4px");
  $(body.children()[0]).removeClass("background");
  body.addClass("fit-xy flexcolumn");
  body.appendTo(div);

  body.generateTab("Content Package Info", "info-sign", function(parent){
    parent.addClass("flexcolumn flex");

    var content = $("<div>").appendTo(parent);
    content.addClass("flexcolumn flex");

    var newApp = sync.render("ui_editPage")(obj, app, scope);
    if (scope.viewOnly) {
      newApp = sync.render("ui_renderPage")(obj, app, {viewOnly : true});
    }
    content.append(newApp);
    if (app) {
      app.attr("_tab", "Content Package Info");
    }
  });

  /*body.generateTab("Character Factory", "list-alt", function(parent){
    parent.addClass("flexcolumn flex");

    var content = $("<div>").appendTo(parent);
    content.addClass("flexcolumn flex");
    content.css("position", "relative");
    $("<b class='highlight smooth spadding outline alttext' style='position:absolute;'>Beta</b>").appendTo(content);
    var newApp = sync.render("ui_genEditor")(obj, app, scope);
    content.append(newApp);
    if (app) {
      app.attr("_tab", "Character Factory");
    }
  });*/

  function tabWrap(name, icon, filter, click) {
    body.generateTab(name, icon, function(parent){
      parent.addClass("flexcolumn fit-y");

      //var create = genIcon("plus", "Create "+name.substring(0,name.length-1)+"").appendTo(optionsBar);

      var listedChars = $("<div>").appendTo(parent);
      listedChars.addClass("flexcolumn flex outlinebottom");
      listedChars.attr("_lastScrollTop", app.attr("_lastScrollTop_chars"));
      listedChars.css("overflow-y", "auto");
      listedChars.css("position", "relative");
      listedChars.scroll(function(){
        app.attr("_lastScrollTop_chars", $(this).scrollTop());
      });

      var listWrap = $("<div>").appendTo(listedChars);
      listWrap.addClass("fit-x flexcolumn flexmiddle");
      listWrap.css("position", "absolute");
      var target = "c";
      if (filter == "i") {
        if (name == "Spells") {
          target = "spellbook";
        }
        else {
          target = "inventory";
        }
      }
      else if (filter == "b") {
        target = "b";
      }
      else if (filter == "p") {
        target = "p";
      }
      else if (filter == "v") {
        target = "v";
      }

      for (var i in obj.data[target]) {
        var dummyObj = sync.obj(-1);
        dummyObj.data = obj.data[target][i];
        var charList = sync.render("ui_ent")(dummyObj, app, {
          small : true,
          draw : function(ui, charObj) {
            if (!scope.viewOnly) {
              var remove = genIcon("trash").appendTo(ui);
                remove.click(function(ev){
                obj.data[target].splice(ui.attr("index"), 1);
                obj.update();

                ev.stopPropagation();
                ev.preventDefault();
              });
            }
          },
          click : function(ev, ui, charObj) {
            var newApp;
            var width = "40vw";
            var height = "70vh";
            if (categories[target]) {
              width = categories[target].width;
              height = categories[target].height;
              newApp = sync.newApp(categories[target].ui);
            }
            else if (target == "inventory" || target == "spellbook") {
              width = categories["i"].width;
              height = categories["i"].height;
              newApp = sync.newApp(categories["i"].ui, null, {viewOnly : true, itemData : charObj.data, spellBool : (target == "spellbook")});
            }
            newApp.attr("viewOnly", "true");

            charObj.addApp(newApp);
            var pop = ui_popOut({
              target : app,
              title : sync.rawVal(charObj.data.info.name),
              minimize : true,
              dragThickness : "0.5em",
              style : {"width" : width, "height" : height},
            }, newApp);
            pop.resizable();
          }
        });
        charList.appendTo(listWrap);
        charList.addClass("fit-x");
        charList.attr("draggable", true);
        charList.attr("index", i);
        charList.on("dragstart", function(ev){
          var dt = ev.originalEvent.dataTransfer;
          dt.setData("OBJ", JSON.stringify(obj.data[target][$(this).attr("index")]));
          if (target == "spellbook") {
            dt.setData("spell", true);
          }
        });
      }
      if (listWrap.children().length > 1) {
        listWrap.children().each(function(){
          $(this).removeClass("outline");
          $(this).addClass("outlinebottom");
        });
      }


      var optionsBar = $("<div>").appendTo(parent);
      optionsBar.addClass("fit-x flexbetween outline flexwrap background alttext");

      var searchBar = $("<div>").appendTo(optionsBar);
      searchBar.addClass("flexmiddle");

      var searchIcon = genIcon("search").appendTo(searchBar);
      searchIcon.addClass("lrpadding");
      searchIcon.attr("title", "Search");

      var searchInput = genInput({
        parent : searchBar,
        placeholder : "Search Terms",
        value : app.attr("lastSearchTerm"),
      });
      searchInput.addClass("flex subtitle");
      searchInput.css("color", "#333");

      if (!scope.viewOnly) {
        var add = genIcon("share-alt", "Insert "+name+"").appendTo(optionsBar);
        if (filter == "i") {
          add.click(function(){
            var content = $("<div>");
            content.addClass("flexaround flexwrap");
            var finalList = [];
            for (var key in game.entities.data) {
              var ent = game.entities.data[key];
              if (ent && (ent.data["_t"] == "c" || ent.data["_t"] == "v") && hasSecurity(getCookie("UserID"), "Visible", ent.data)) {
                var list = [];
                var inventory = ent.data.inventory;
                for (var itemKey in inventory) {
                  var itemData = inventory[itemKey];
                  if (itemData && itemData["_t"] == "i" && !util.contains(finalList, JSON.stringify(itemData))) {
                    list.push(finalList.length);
                    finalList.push(JSON.stringify(itemData));
                  }
                }
                if (list.length) {
                  var container = $("<div>").appendTo(content);
                  container.addClass("subtitle");

                  var charDiv = sync.render("ui_characterSummary")(ent, app, {minimized: true});
                  charDiv.addClass("background alttext");
                  charDiv.appendTo(container);

                  for (var itemKey in list) {
                    var itemData = JSON.parse(finalList[list[itemKey]]);
                    var itemPlate = $("<div>").appendTo(container);
                    itemPlate.css("margin-left", "8px");
                    itemPlate.addClass("outline hover2");
                    if (sync.rawVal(itemData.info.img)) {
                      var img = $("<img>").appendTo(itemPlate);
                      img.attr("width", "auto");
                      img.attr("height", "25px");
                      img.attr("src", sync.rawVal(itemData.info.img));
                    }
                    var namePlate = $("<b>").appendTo(itemPlate);
                    namePlate.append(sync.rawVal(itemData.info.name));
                    itemPlate.attr("index", list[itemKey]);
                    itemPlate.click(function(ev){
                      var itemData = finalList[$(this).attr("index")];
                      click(ev, $(this), JSON.parse(itemData));
                    });
                  }
                }
              }
            }
            if (finalList.length){
              ui_popOut({
                target : div,
                id : "content-insert",
                align : "top",
                style : {"max-width" : "80vw", "max-height" : "35vh", "overflow-y" : "scroll"}
              }, content);
            }
          });
          var importText = genIcon("import", "Import "+name+" as List");//.appendTo(optionsBar);
          importText.click(function(){
            var content = $("<div>");
            content.addClass("flexcolumn flexmiddle");

            var textArea = $("<textarea>").appendTo(content);
            textArea.addClass("fit-x");
            textArea.css("width", "400px");
            textArea.css("height", "400px");
            textArea.attr("placeholder", "Seperate Entries with a new line, or comma's");

            var button = $("<button>Confirm</button>").appendTo(content);
            button.addClass("fit-x");
            button.click(function(){
              if (name == "Spells") {
                var tempChar = duplicate(game.templates.character);
                maxify("SPELLBOOK-\n"+(textArea.val() || ""), tempChar, game.templates);

                for (var i in tempChar.spellbook) {
                  var str = JSON.stringify(tempChar.spellbook[i]);
                  var stop = false;
                  for (var j in data.spellbook) {
                    if (str == JSON.stringify(data.spellbook[j])) {
                      layout.coverlay("import-subsection");
                      stop = true;
                      break;
                    }
                  }
                  if (!stop) {
                    obj.data.spellbook.push(tempChar.spellbook[i]);
                  }
                }
              }
              else {
                var tempChar = duplicate(game.templates.character);
                maxify("INVENTORY-\n"+(textArea.val() || ""), tempChar, game.templates);

                for (var i in tempChar.inventory) {
                  var str = JSON.stringify(tempChar.inventory[i]);
                  var stop = false;
                  for (var j in data.inventory) {
                    if (str == JSON.stringify(data.inventory[j])) {
                      layout.coverlay("import-subsection");
                      stop = true;
                      break;
                    }
                  }
                  if (!stop) {
                    obj.data.inventory.push(tempChar.inventory[i]);
                  }
                }
              }

              layout.coverlay("import-subsection");
              obj.update();
            });
            ui_popOut({
              target : $(this),
              id : "import-subsection"
            }, content);
          });
        }
        else {
          add.click(function(){
            var ignore = {};
            for (var i in game.entities.data) {
              if (isNaN(i)) {
                ignore[i] = true;
              }
            }
            for (var key in obj.data.entities) {
              ignore[obj.data.entities[key]] = true;
            }
            var content = sync.render("ui_entList")(obj, app, {
              filter : filter,
              click : click,
              ignore : ignore,
            });
            if (content.children().length > 0) {
              ui_popOut({
                target : $(this),
                id : "content-insert",
              }, content);
            }
          });
        }
      }

      if (app) {
        app.attr("_tab", name);
      }
    });
  }
  tabWrap("Actors", "user", "c",
  function(ev, ui, eObj) {
    data.c.push(duplicate(eObj.data));
    obj.update();
    layout.coverlay("content-insert");
  });
  tabWrap("Items", "briefcase", "i",
    function(ev, ui, eObj) {
      var str = JSON.stringify(eObj);
      for (var i in data.inventory) {
        if (str == JSON.stringify(data.inventory[i])) {
          sendAlert({text : "Dupicate Item Detected", duration : data.duration || 3000});
          layout.coverlay("content-insert");
          return;
        }
      }
      data.inventory.push(eObj);
      obj.update();
      layout.coverlay("content-insert");
    }
  );
  tabWrap("Maps", "globe", "b",
  function(ev, ui, eObj) {
    data.b.push(duplicate(eObj.data));
    obj.update();
    layout.coverlay("content-insert");
  });
  tabWrap("Resources", "duplicate", "p",
  function(ev, ui, eObj) {
    data.p.push(duplicate(eObj.data));
    obj.update();
    layout.coverlay("content-insert");
  });
  tabWrap("Spells", "flash", "i",
    function(ev, ui, eObj) {
      var str = JSON.stringify(eObj);
      for (var i in data.spellbook) {
        if (str == JSON.stringify(data.spellbook[i])) {
          sendAlert({text : "Dupicate Spell Detected", duration : data.duration || 3000});
          layout.coverlay("content-insert");
          return;
        }
      }
      data.spellbook.push(eObj);
      obj.update();
      layout.coverlay("content-insert");
    }
  );

/*  body.generateTab("Talents", "screenshot", function(parent){
    parent.addClass("flexcolumn flex");

    var optionsBar = $("<div>").appendTo(parent);
    optionsBar.addClass("fit-x flexaround flexwrap background alttext outline");

    var searchBar = $("<div>").appendTo(optionsBar);
    searchBar.addClass("flexmiddle");

    var searchIcon = genIcon("search").appendTo(searchBar);
    searchIcon.addClass("lrpadding");
    searchIcon.attr("title", "Search");

    var searchInput = genInput({
      parent : searchBar,
      placeholder : "Search Terms",
      value : app.attr("lastSearchTerm"),
    });
    searchInput.addClass("flex subtitle");
    searchInput.css("color", "#333");

    if (!scope.viewOnly) {
      var add = genIcon("share-alt", "Insert Talent").appendTo(optionsBar);
      add.click(function(){
        var content = $("<div>");
        content.addClass("flexaround flexwrap");
        var finalList = [];
        for (var key in game.entities.data) {
          var ent = game.entities.data[key];
          if (ent && ent.data.talents && hasSecurity(getCookie("UserID"), "Visible", ent.data)) {
            var list = [];
            var talents = ent.data.talents;
            for (var itemKey in talents) {
              var itemData = talents[itemKey];
              if (itemData && !util.contains(finalList, JSON.stringify(itemData))) {
                list.push(finalList.length);
                finalList.push(JSON.stringify(itemData));
              }
            }
            if (list.length) {
              var container = $("<div>").appendTo(content);
              container.addClass("subtitle");

              var charDiv = sync.render("ui_characterSummary")(ent, app, {minimized: true});
              charDiv.addClass("background alttext");
              charDiv.appendTo(container);

              for (var itemKey in list) {
                var itemData = JSON.parse(finalList[list[itemKey]]);
                var itemPlate = sync.render("ui_renderTalent")(obj, app, {talentData : itemData, viewOnly : true}).appendTo(container);
                itemPlate.addClass("outline hover2");
                itemPlate.attr("index", list[itemKey]);
                itemPlate.click(function(ev){
                  var itemData = JSON.parse(finalList[$(this).attr("index")]);
                  obj.data.talents.push(itemData);
                  obj.update();
                  layout.coverlay("content-insert");
                });
              }
            }
          }
        }
        if (finalList.length){
          ui_popOut({
            target : div,
            id : "content-insert",
            align : "top",
            style : {"max-width" : "80vw", "max-height" : "35vh", "overflow-y" : "scroll"}
          }, content);
        }
      });
      var importText = genIcon("import", "Import Talents as List").appendTo(optionsBar);
      importText.click(function(){
        var content = $("<div>");
        content.addClass("flexcolumn flexmiddle");

        var textArea = $("<textarea>").appendTo(content);
        textArea.addClass("fit-x");
        textArea.css("width", "400px");
        textArea.css("height", "400px");
        textArea.attr("placeholder", "Seperate Entries with a new line, or comma's");

        var button = $("<button>Confirm</button>").appendTo(content);
        button.addClass("fit-x");
        button.click(function(){
          var tempChar = duplicate(game.templates.character);
          maxify("TALENTS-\n"+(textArea.val() || ""), tempChar, game.templates);

          for (var i in tempChar.talents) {
            var str = JSON.stringify(tempChar.talents[i]);
            var stop = false;
            for (var j in data.inventory) {
              if (str == JSON.stringify(data.talents[j])) {
                layout.coverlay("import-subsection");
                stop = true;
                break;
              }
            }
            if (!stop) {
              obj.data.talents.push(tempChar.talents[i]);
            }
          }
          layout.coverlay("import-subsection");
          obj.update();
        });
        ui_popOut({
          target : $(this),
          id : "import-subsection"
        }, content);
      });
    }

    var wrapper = $("<div>").appendTo(parent);
    wrapper.addClass("flexcolumn flex");

    var contentWrapper = $("<div>").appendTo(wrapper);
    contentWrapper.addClass("fit-x flex");
    contentWrapper.css("overflow", "auto");
    if (name == "Talents") {
      searchInput.keyup(function(){
        listWrap.children().hide();
        var term = ($(this).val() || "").toLowerCase();
        listWrap.children().each(function(){
          var ent = obj.data.talents[$(this).attr("index")];
          if ((ent.name || "").toLowerCase().match(term)) {
            $(this).show();
          }
        });
      });
    }
    else {
      searchInput.keyup(function(){
        listWrap.children().hide();
        var term = ($(this).val() || "").toLowerCase();
        listWrap.children().each(function(){
          var ent = obj.data[target][$(this).attr("index")];
          if ((sync.rawVal(ent.info.name) || "").toLowerCase().match(term)) {
            $(this).show();
          }
        });
      });
    }

    for (var index in obj.data.talents) {
      var wrapper = $("<div>").appendTo(contentWrapper);
      wrapper.addClass("flexrow flexbetween outlinebottom");
      wrapper.css("background-color", "white");
      wrapper.attr("draggable", true);
      wrapper.attr("index", index);
      wrapper.on("dragstart", function(ev){
        var dt = ev.originalEvent.dataTransfer;
        dt.setData("OBJ", JSON.stringify(obj.data.talents[$(this).attr("index")]));
        dt.setData("target", "talents");
      });

      var talentCont = $("<div>").appendTo(wrapper);
      talentCont.addClass("flex hover2 flexbetween");
      talentCont.css("cursor", "pointer");
      talentCont.attr("index", index);
      talentCont.css("padding-bottom", "1em");
      talentCont.click(function(){
        var content = $("<div>");
        content.append(sync.render("ui_renderTalent")(obj, app, {talentData : obj.data.talents[$(this).attr("index")], viewOnly : scope.viewOnly}));
        ui_popOut({
          target : $(this),
          id : "content-preview",
          align : "bottom",
          style : {"max-width" : "50vw"}
        }, content);
      });
      var talentData = duplicate(obj.data.talents[index]);
      sync.render("ui_renderTalent")(obj, app, {talentData: talentData, viewOnly: true, minimized : scope.minimized}).appendTo(talentCont);

      if (!scope.viewOnly) {
        var optionsBar = $("<div>").appendTo(wrapper);
        optionsBar.addClass("flexmiddle background outline alttext");

        var remove = genIcon("trash").appendTo(optionsBar);
        remove.attr("index", index);
        remove.click(function(){
          obj.data.talents.splice($(this).attr("index"), 1);
          obj.update();
        });
      }
    }

    app.attr("_tab", "Talents");
  });

  /*tabWrap("Vehicles", "plane", "v",
  function(ev, ui, eObj) {
    data.v.push(duplicate(eObj.data));
    obj.update();
    layout.coverlay("content-insert");
  });*/
  if (app) {
    if (!app.attr("_tab")) {
      app.attr("_tab", "Content Package Info");
    }
    body.selectTab(app.attr("_tab"));
  }
  else {
    body.selectTab("Content Package Info");
  }

  return div;
});

sync.render("ui_existing", function(obj, app, scope) {
  var content = $("<div>");
  content.addClass("flexaround flexwrap");
  var finalList = [];
  for (var key in game.entities.data) {
    var ent = game.entities.data[key];
    if (ent && (ent.data["_t"] == "c" || ent.data["_t"] == "v") && hasSecurity(getCookie("UserID"), "Visible", ent.data)) {
      var list = [];
      var listRef = sync.traverse(ent.data, scope.lookup);
      for (var listKey in listRef) {
        var refData = listRef[listKey];
        if (refData && !util.contains(finalList, JSON.stringify(refData))) {
          list.push(finalList.length);
          finalList.push(JSON.stringify(refData));
        }
      }
      if (list.length) {
        var container = $("<div>").appendTo(content);
        container.addClass("subtitle");

        var charDiv = sync.render("ui_characterSummary")(ent, app, {minimized: true, height : "35px"});
        charDiv.addClass("background alttext");
        charDiv.removeClass("fit-xy");
        charDiv.appendTo(container);

        for (var refKey in list) {
          var refData = JSON.parse(finalList[list[refKey]]);
          var refPlate = $("<div>").appendTo(container);
          refPlate.css("margin-left", "8px");
          refPlate.addClass("outline hover2");
          if (refData) {
            if (refData._t) {
              if (sync.rawVal(refData.info.img)) {
                var img = $("<img>").appendTo(refPlate);
                img.attr("width", "auto");
                img.attr("height", "25px");
                img.attr("src", sync.rawVal(refData.info.img));
              }
              var namePlate = $("<b>").appendTo(refPlate);
              namePlate.append(sync.rawVal(refData.info.name));
              refPlate.attr("index", list[refKey]);
              refPlate.click(function(){
                var refData = finalList[$(this).attr("index")];
                obj.data = JSON.parse(refData);
                if (!scope.local) {
                  obj.sync("updateAsset");
                }
                else {
                  obj.update();
                }
              });
            }
            else {
              var namePlate = $("<b>").appendTo(refPlate);
              namePlate.append(refData.name);
              refPlate.attr("index", list[refKey]);
              refPlate.click(function(){
                var refData = finalList[$(this).attr("index")];
                obj.data = JSON.parse(refData);
                if (!scope.local) {
                  obj.sync("updateAsset");
                }
                else {
                  obj.update();
                }
              });
            }
          }
        }
      }
    }
  }
  if (finalList.length){
    return content;
  }
  else {
    return $("<div>");
  }
});

sync.render("ui_JSON", function(obj, app, scope) {
  scope = scope || {
    viewOnly: (app.attr("viewOnly") == "true"),
    lookup : app.attr("lookup"),
    textEdit : app.attr("textEdit") == "true",
    hideConfirm : app.attr("hideConfirm") == "true",
    closeTarget : app.attr("closeTarget"),
    width : app.attr("width"),
    height : app.attr("height")
  };

  var div = $("<div>");
  div.addClass("flexcolumn flex");

  var data = obj.data;
  var value = obj.data;
  if (scope.lookup) {
    value = sync.traverse(data, scope.lookup || "");
  }
  var errorFeedback = $("<div>").appendTo(div);
  errorFeedback.addClass("flexmiddle destroy");

  var inputTest = $("<textarea>").appendTo(div);
  inputTest.addClass("flex subtitle");
  inputTest.attr("id", app.attr("id") + "-json-edit");
  if (scope.viewOnly) {
    inputTest.attr("disabled", true);
  }
  inputTest.css("min-width", scope.width || "300px");
  inputTest.css("min-height", scope.height || "300px");
  inputTest.text(JSON.stringify(value, null, 2));
  inputTest.attr("_lastScrollTop", app.attr("_lastScrollTop"));
  inputTest.attr("_lastScrollLeft", app.attr("_lastScrollLeft"));
  inputTest.scroll(function(){
    app.attr("_lastScrollTop", $(this).scrollTop());
    app.attr("_lastScrollLeft", $(this).scrollLeft());
  });
  inputTest.change(function(){
    errorFeedback.empty();
    try {
      var newData = eval("var variable = "+$(this).val()+"; variable");
      if (scope.lookup) {
        sync.traverse(obj.data, scope.lookup || "", newData);
      }
      else {
        obj.data = newData;
      }
      obj.update();
      if (app.attr("closeTarget")) {
        layout.coverlay(app.attr("closeTarget"));
      }
    }
    catch(err) {
      errorFeedback.append("<b title='"+err+"'>Error Parsing Data</b>");
    }
  });
  if (!scope.hideConfirm) {
    var button = $("<button>").appendTo(div);
    button.append("Confirm");
    
    setTimeout(function(){
      var editor = ace.edit(app.attr("id") + "-json-edit");
      editor.setTheme("ace/theme/monokai");
      div.css("min-width", scope.width || "300px");
      div.css("min-height", scope.height || "300px");
      $(editor.container).css("margin","0");
      $(editor.container).addClass("flex");
      editor.setOptions({
        autoScrollEditorIntoView: true
      });
      $(editor.container).hover(function(){
        editor.resize();
      });
      editor.session.setMode("ace/mode/" + (app.attr("lang") || "json"));
      button.click(function(){
        errorFeedback.empty();
        try {
          var newData = eval("var variable = "+editor.getValue()+"; variable");
          if (scope.lookup) {
            sync.traverse(obj.data, scope.lookup || "", newData);
          }
          else {
            obj.data = newData;
          }
          obj.update();
          if (app.attr("closeTarget")) {
            layout.coverlay(app.attr("closeTarget"));
          }
        }
        catch(err) {
          errorFeedback.append("<b title='"+err+"'>Error Parsing Data</b>");
        }
      });
    }, 100);
  }
  return div;
});

sync.render("ui_diceDisplayBuilder", function(obj, app, scope){
  scope = scope || {viewOnly : app.attr("viewOnly") == "true", display : app.attr("diceKey")};
  var div = $("<div>");
  div.addClass("flexrow flex");

  var colWrap = $("<div>").appendTo(div);
  colWrap.addClass("flexcolumn flex");

  var col = $("<div>").appendTo(colWrap);
  col.addClass("flexrow flexwrap padding");

  for (var i in obj.data.templates.display.ui) {
    var button = $("<button>").appendTo(col);
    if (scope.display == i) {
      button.addClass("highlight alttext");
    }
    button.attr("key", i);
    button.append(i);
    button.click(function(){
      app.attr("diceKey", $(this).attr("key"));
      obj.update();
    });
  }

  var plus = $("<button>").appendTo(col);
  plus.addClass("background alttext");
  plus.append("New Display");
  plus.click(function(){
    ui_prompt({
      target : $(this),
      inputs : {
        "Identifier" : {placeholder : "The unique identifier"}
      },
      click : function(ev, inputs) {
        if (inputs["Identifier"].val()) {
          obj.data.templates.display.ui[inputs["Identifier"].val()] = {
            classes : "",
            style : {},
            dice : {},
            displays : {},
            results : {},
          };
          obj.update();
        }
      }
    });
  });

  if (scope.display) {
    app.attr("lookup", "templates.display.ui."+scope.display);

    var select = sync.render("ui_JSON")(obj, app, null).appendTo(colWrap);
    select.addClass("flex padding");

    var dataRollWrap = $("<div>").appendTo(div);
    dataRollWrap.addClass("flexcolumn flex2");
    dataRollWrap.append("<b class='underline'>Test your Display</b>");

    var dataDiv = $("<div>").appendTo(dataRollWrap);
    dataDiv.addClass("flexrow flex padding");

    var flavorText = $("<textarea>").appendTo(dataDiv);
    flavorText.addClass("flex");
    flavorText.val(app.attr("flavor") || "");
    flavorText.attr("placeholder", "Flavor Text");
    flavorText.change(function(){
      app.attr("flavor", $(this).val());
      obj.update();
    });

    var eqText = $("<textarea>").appendTo(dataDiv);
    eqText.addClass("flex");
    eqText.val(app.attr("equation") || "d20");
    eqText.attr("placeholder", "Equation");
    eqText.change(function(){
      app.attr("equation", $(this).val());
      obj.update();
    });

    var dataRoll = $("<div>").appendTo(dataRollWrap);
    dataRoll.addClass("flexcolumn flexmiddle flex padding");

    var wrapObj = {eventData : sync.executeQuery((app.attr("equation") || "d20"), sync.defaultContext()), flavor : "Flavor Text"};

    dataRoll.append("<b class='underline'>Result</b>");

    dataRoll.append("<b>"+(sync.eval(app.attr("flavor"), sync.defaultContext()) || "")+"</b>");

    var display = sync.render("ui_newDiceResults")(wrapObj, app, {display : obj.data.templates.display.ui[scope.display]}).appendTo(dataRoll);
    display.css("width", "350px");
    display.css("min-height", "200px");

    dataRoll.append("<b class='flex'></b>");
  }

  return div;
});

sync.render("ui_homebrew", function(obj, app, scope){
  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");
  div.css("padding-top", "2em");
  if (!game.locals["homebrew"]) {
    game.locals["homebrew"] = game.locals["homebrew"] || sync.obj();
    game.locals["homebrew"].data = game.locals["homebrew"].data || {
      templates : duplicate(game.templates),
      previewChar : sync.dummyObj(),
      previewItem : sync.dummyObj(),
      previewPage : sync.dummyObj(),
    };

    game.locals["homebrew"].data.templates.info = game.locals["homebrew"].data.templates.info || duplicate(game.templates.page.info);

    game.locals["homebrew"].data.previewInfo = sync.obj();

    game.locals["homebrew"].data.templates.info = game.locals["homebrew"].data.templates.info || {};
    game.locals["homebrew"].data.templates.info.name = game.locals["homebrew"].data.templates.info.name || sync.newValue("Name");
    game.locals["homebrew"].data.templates.info.img = game.locals["homebrew"].data.templates.info.img || sync.newValue("Image");
    game.locals["homebrew"].data.templates.info.notes = game.locals["homebrew"].data.templates.info.notes || sync.newValue("Notes");

    game.locals["homebrew"].data.previewInfo.data = {_t : "p", info : duplicate(game.locals["homebrew"].data.templates.info)};
    game.locals["homebrew"].data.previewInfo.update = function(rObj, newObj, target){
      obj.data.templates.info = duplicate(game.locals["homebrew"].data.previewInfo.data.info);
    };

    if (game.templates.build) {
      for (var k in game.templates.actors) {
        function wrap(key){
          game.locals["homebrew"].data.previewChar[key] = sync.dummyObj();
          game.locals["homebrew"].data.previewChar[key].data = duplicate(game.templates.actors[key]);
          game.locals["homebrew"].data.previewChar[key].data._d = duplicate(game.templates.display.actors[key]);
          game.locals["homebrew"].data.previewChar[key].sync = function(){game.locals["homebrew"].data.previewChar[key].update()};
          game.locals["homebrew"].data.previewChar[key].update = function(rObj, newObj, target){
            game.locals["homebrew"].update();
            sync.update(game.locals["homebrew"].data.previewChar[key], newObj, target);
          };
        }
        wrap(k);
      }

      for (var k in game.templates.elements) {
        function wrap(key){
          game.locals["homebrew"].data.previewItem[key] = sync.dummyObj();
          game.locals["homebrew"].data.previewItem[key].data = duplicate(game.templates.elements[key]);
          game.locals["homebrew"].data.previewItem[key].data._d = duplicate(game.templates.display.elements[key]);
          game.locals["homebrew"].data.previewItem[key].sync = function(){game.locals["homebrew"].data.previewItem[key].update()};
          game.locals["homebrew"].data.previewItem[key].update = function(rObj, newObj, target){
            game.locals["homebrew"].update();
            sync.update(game.locals["homebrew"].data.previewItem[key], newObj, target);
          };
        }
        wrap(k);
      }
    }
    else {
      game.locals["homebrew"].data.previewChar.data = duplicate(game.templates.character);
      if (game.templates.build) {
        game.locals["homebrew"].data.previewChar.data._a = duplicate(game.templates.actions.c);
      }
      game.locals["homebrew"].data.previewChar.data._d = duplicate(game.templates.display.sheet);
      game.locals["homebrew"].data.previewChar.data._calc = duplicate(game.templates.display.sheet.calc);
      game.locals["homebrew"].data.previewChar.sync = function(){game.locals["homebrew"].data.previewChar.update()};
      game.locals["homebrew"].data.previewChar.update = function(rObj, newObj, target){
        game.locals["homebrew"].update();
        sync.update(game.locals["homebrew"].data.previewChar, newObj, target);
      };

      game.locals["homebrew"].data.previewItem.data = duplicate(game.templates.item);
      game.locals["homebrew"].data.previewItem.sync = function(){game.locals["homebrew"].data.previewItem.update()};
      game.locals["homebrew"].data.previewItem.update = function(rObj, newObj, target){
        game.locals["homebrew"].update();
        sync.update(game.locals["homebrew"].data.previewItem, newObj, target);
      };
    }



    game.locals["homebrew"].data.previewPage.data = duplicate(game.templates.page);
    game.locals["homebrew"].data.previewPage.data.info.notes.current = `<h1 style="margin: 0; font-size: 3.0em; font-weight: bolder;" data-mce-style="margin: 0; font-size: 3.0em; font-weight: bolder;">Header 1</h1><hr class="h1" style="display: block; outline: none; border: none; width: 100%; height: 4px; background: grey; margin-top: 0px; margin-bottom: 0.5em;" data-mce-style="display: block; outline: none; border: none; width: 100%; height: 4px; background: grey; margin-top: 0px; margin-bottom: 0.5em;"><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam nec sapien maximus, dapibus odio quis, tincidunt sem. Etiam consectetur tempus tincidunt. Sed placerat massa tortor, in laoreet ligula iaculis nec. Vivamus gravida consectetur urna eu pharetra. Morbi tempus purus nec ornare accumsan.</p><p>&nbsp;<br></p><h2 style="margin: 0; font-size: 1.4em; font-weight: bold;" data-mce-style="margin: 0; font-size: 1.4em; font-weight: bold;">&nbsp;Header 2</h2><hr class="h2" style="display: block; outline: none; border: none; width: 100%; height: 1px; background: grey; margin-top: 0px; margin-bottom: 0.5em;" data-mce-style="display: block; outline: none; border: none; width: 100%; height: 1px; background: grey; margin-top: 0px; margin-bottom: 0.5em;"><p>&nbsp;Pellentesque posuere, magna eget dapibus condimentum, felis purus varius nunc, vitae condimentum odio diam eget risus. Donec in arcu vitae massa ullamcorper hendrerit. Maecenas dignissim orci et consectetur tristique. Mauris hendrerit sit amet tellus sed consectetur. Fusce in elit nulla. Integer massa tortor, tristique a eleifend id, sollicitudin a ex.</p><p>&nbsp;<br></p><p><strong>Horizontal Break</strong></p><hr style="display: block; width: 100%; height: 2px; background-color: grey; margin-top: 0px; margin-bottom: 1em;" data-mce-style="display: block; width: 100%; height: 2px; background-color: grey; margin-top: 0px; margin-bottom: 1em;"><p>Nulla rutrum libero quis porttitor auctor. Vestibulum ultrices risus turpis, at iaculis ante varius vitae. Maecenas eleifend, sem et venenatis malesuada, mauris felis lobortis odio, ut facilisis ante erat ut tortor. Curabitur faucibus sollicitudin odio, ut mattis odio finibus nec. In quis viverra turpis. Fusce tellus nisi, auctor eget euismod a, feugiat in metus. Mauris at cursus ante. Proin in est quis enim rutrum pretium eu vel lorem. Praesent auctor semper vestibulum. Pellentesque varius erat sit amet posuere bibendum. Fusce sit amet est nec mi sollicitudin rutrum. Pellentesque et massa diam.</p><p>&nbsp;<br></p><p>&nbsp;<br></p>`;

    game.locals["homebrew"].data.previewPage.sync = function(){game.locals["homebrew"].data.previewPage.update()};
    game.locals["homebrew"].data.previewPage.update = function(rObj, newObj, target){
      game.locals["homebrew"].update();
      sync.update(game.locals["homebrew"].data.previewPage, newObj, target);
    };
  }
  var obj = game.locals["homebrew"];

  var optionsBar = $("<div>");
  optionsBar.addClass("flexrow");
  optionsBar.css("font-size", "1.6em");

  var actor = $("<div>").appendTo(optionsBar);
  actor.addClass("background alttext flex outline smooth padding flexmiddle hover2");
  actor.append(genIcon("user", "Actors"));
  actor.click(function(){
    content.empty();
    menu.empty();

    optionsBar.children().removeClass("highlight").addClass("background");
    $(this).addClass("highlight").removeClass("background");
    if (!game.templates.build) {
      var option = $("<div>").appendTo(menu);
      option.addClass("alttext flexmiddle background hover2 lrpadding");
      option.css("font-size", "1.6em");
      option.text("Actions");
      option.click(function(){
        menu.children().removeClass("highlight").addClass("background");
        $(this).addClass("highlight").removeClass("background");

        content.empty();

        var select = sync.newApp("ui_JSON").appendTo(content);
        select.addClass("fit-xy");
        select.css("max-width", "50%");
        select.attr("lookup", "templates.actions.c");
        obj.addApp(select);
      });
    }

    if (game.templates.build) {
      var option = $("<div>").appendTo(menu);
      option.addClass("alttext flexmiddle create hover2 lrpadding");
      option.css("font-size", "1.6em");
      option.text("New Actor");
      option.click(function(){
        ui_prompt({
          target : $(this),
          inputs : {"Actor Name" : ""},
          click : function(ev, inputs){
            var actorType = inputs["Actor Name"].val();
            obj.data.templates.actors[actorType] = {
              _t : "c",
              _type : actorType,
              info: {
                name: {
                  name: "Name",
                  current: "Default" + actorType
                },
                img: {
                  "name": "Art"
                },
                notes: {
                  "name": "Notes"
                }
              }
            };
            obj.data.templates.display.actors[actorType] = {};
            game.locals["homebrew"].data.previewChar[actorType] = game.locals["homebrew"].data.previewChar[actorType] || sync.obj();
            game.locals["homebrew"].data.previewChar[actorType].data = duplicate(obj.data.templates.actors[actorType]);
            actor.click();
          }
        });
      });

      for (var k in obj.data.templates.actors) {
        var option = $("<div>").appendTo(menu);
        option.addClass("alttext flexmiddle background hover2 lrpadding");
        option.css("font-size", "1.6em");
        option.text(k);
        option.click(function(){
          menu.children().removeClass("highlight").addClass("background");
          $(this).addClass("highlight").removeClass("background");
          content.empty();

          var newApp = sync.newApp("ui_characterSheetv2").appendTo(content);
          newApp.removeClass("application");
          newApp.addClass("lightoutline");
          newApp.attr("homebrew", true);
          newApp.css("width", assetTypes["c"].width);
          newApp.css("height", assetTypes["c"].height);
          game.locals["homebrew"].data.previewChar[$(this).text()].addApp(newApp);

          var actorType = $(this).text();
          var deleteActor = $("<div>").appendTo(content);
          deleteActor.addClass("destroy link");
          deleteActor.text("Delete Actor Type");
          deleteActor.click(function(){
            delete obj.data.templates.actors[actorType];
            delete obj.data.templates.display.actors[actorType];
            delete game.locals["homebrew"].data.previewChar[actorType];
            actor.click();
          });
        });
      }
      option.click();
    }
    else {
      var option = $("<div>").appendTo(menu);
      option.addClass("alttext flexmiddle background hover2 lrpadding");
      option.css("font-size", "1.6em");
      option.text("Character Sheet");
      option.click(function(){
        menu.children().removeClass("highlight").addClass("background");
        $(this).addClass("highlight").removeClass("background");
        content.empty();

        var newApp = sync.newApp("ui_characterSheet").appendTo(content);
        newApp.removeClass("application");
        newApp.addClass("lightoutline");
        newApp.attr("homebrew", true);
        newApp.css("width", assetTypes["c"].width);
        newApp.css("height", assetTypes["c"].height);
        game.locals["homebrew"].data.previewChar.addApp(newApp);
      });
      option.click();
    }

    var option = $("<div>").appendTo(menu);
    option.addClass("alttext flexmiddle background hover2 lrpadding");
    option.css("font-size", "1.6em");
    option.text("Initiative");
    option.click(function(){
      menu.children().removeClass("highlight").addClass("background");
      $(this).addClass("highlight").removeClass("background");

      content.empty();

      var select = sync.newApp("ui_JSON").appendTo(content);
      select.addClass("fit-xy");
      select.css("max-width", "50%");
      select.attr("lookup", "templates.initiative");
      obj.addApp(select);
    });

    var option = $("<div>").appendTo(menu);
    option.addClass("alttext flexmiddle background hover2 lrpadding");
    option.css("font-size", "1.6em");
    option.text("Tags");
    option.click(function(){
      menu.children().removeClass("highlight").addClass("background");
      $(this).addClass("highlight").removeClass("background");

      content.empty();

      var select = sync.newApp("ui_manageTags").appendTo(content);
      select.addClass("fit-xy");
      obj.addApp(select);
    });
  });


  var items = $("<div>").appendTo(optionsBar);
  items.addClass("background alttext flex outline smooth padding flexmiddle hover2");
  items.append(genIcon("briefcase", "Elements"));
  items.click(function(){
    content.empty();
    menu.empty();

    optionsBar.children().removeClass("highlight").addClass("background");
    $(this).addClass("highlight").removeClass("background");

    var option;
    if (!game.templates.build) {
      var option = $("<div>").appendTo(menu);
      option.addClass("alttext flexmiddle background hover2 lrpadding");
      option.css("font-size", "1.6em");
      option.text("Actions");
      option.click(function(){
        menu.children().removeClass("highlight").addClass("background");
        $(this).addClass("highlight").removeClass("background");

        content.empty();

        var select = sync.newApp("ui_JSON").appendTo(content);
        select.addClass("fit-xy");
        select.css("max-width", "50%");
        select.attr("lookup", "templates.actions.i");
        obj.addApp(select);
      });

      var option = $("<div>").appendTo(menu);
      option.addClass("alttext flexmiddle background hover2 lrpadding");
      option.css("font-size", "1.6em");
      option.text("Item");
      option.click(function(){
        menu.children().removeClass("highlight").addClass("background");
        $(this).addClass("highlight").removeClass("background");
        content.empty();

        var newApp = sync.newApp("ui_renderItemv2").appendTo(content);
        newApp.removeClass("application");
        newApp.addClass("lightoutline");
        newApp.attr("homebrew", "true");
        newApp.css("width", assetTypes["i"].width);
        newApp.css("height", assetTypes["i"].height);
        game.locals["homebrew"].data.previewItem.addApp(newApp);
      });
    }
    else {
      var option = $("<div>").appendTo(menu);
      option.addClass("alttext flexmiddle create hover2 lrpadding");
      option.css("font-size", "1.6em");
      option.text("New Element");
      option.click(function(){
        ui_prompt({
          target : $(this),
          inputs : {"Element Name" : "", "Drop to Location" : {placeholder : "(Optional)"}},
          click : function(ev, inputs){
            var actorType = inputs["Element Name"].val();
            obj.data.templates.elements[actorType] = {
              _t : "i",
              _type : actorType,
              info: {
                name: {
                  name: "Name",
                  current: "Default" + actorType
                },
                img: {
                  "name": "Art"
                },
                notes: {
                  "name": "Notes"
                }
              }
            };
            if (inputs["Drop to Location"].val()) {
              obj.data.templates.elements[actorType]._drop = inputs["Drop to Location"].val();
            }
            obj.data.templates.display.elements[actorType] = {};
            game.locals["homebrew"].data.previewItem[actorType] = game.locals["homebrew"].data.previewItem[actorType] || sync.obj();
            game.locals["homebrew"].data.previewItem[actorType].data = duplicate(obj.data.templates.elements[actorType]);
            items.click();
          }
        });
      });

      for (var i in obj.data.templates.elements) {
        var option = $("<div>").appendTo(menu);
        option.addClass("alttext flexmiddle background hover2 lrpadding");
        option.css("font-size", "1.6em");
        option.text(i);
        option.click(function(){
          menu.children().removeClass("highlight").addClass("background");
          $(this).addClass("highlight").removeClass("background");
          content.empty();

          var newApp = sync.newApp("ui_renderItemv2").appendTo(content);
          newApp.removeClass("application");
          newApp.addClass("lightoutline");
          newApp.attr("homebrew", "true");
          newApp.css("width", assetTypes["i"].width);
          newApp.css("height", assetTypes["i"].height);
          game.locals["homebrew"].data.previewItem[$(this).text()].addApp(newApp);

          var actorType = $(this).text();
          var deleteActor = $("<div>").appendTo(content);
          deleteActor.addClass("destroy link");
          deleteActor.text("Delete Element");
          deleteActor.click(function(){
            delete obj.data.templates.elements[actorType];
            delete obj.data.templates.display.elements[actorType];
            delete game.locals["homebrew"].data.previewItem[actorType];
            items.click();
          });
        });
      }
    }

    option.click();
  });

  var visuals = $("<div>").appendTo(optionsBar);
  visuals.addClass("background alttext flex outline smooth padding flexmiddle hover2");
  visuals.append(genIcon("file", "Resources"));
  visuals.click(function(){
    content.empty();
    menu.empty();

    optionsBar.children().removeClass("highlight").addClass("background");
    $(this).addClass("highlight").removeClass("background");

    var contentWrap = $("<div>").appendTo(content);
    contentWrap.addClass("flexrow");

    var stylePage = sync.newApp("ui_stylePage").appendTo(contentWrap);
    stylePage.removeClass("application");
    stylePage.addClass("lightoutline");
    stylePage.css("width", assetTypes["p"].width);
    stylePage.css("height", assetTypes["p"].height);
    game.locals["homebrew"].data.previewPage.addApp(stylePage);

    var newApp = sync.newApp("ui_renderPage").appendTo(contentWrap);
    newApp.removeClass("application");
    newApp.addClass("lightoutline");
    newApp.css("text-align", "left");
    newApp.attr("viewOnly", "true");
    newApp.css("width", assetTypes["p"].width);
    newApp.css("height", assetTypes["p"].height);
    game.locals["homebrew"].data.previewPage.addApp(newApp);
  });

  var macros = $("<div>").appendTo(optionsBar);
  macros.addClass("background alttext flex outline smooth padding flexmiddle hover2");
  macros.append(genIcon("cog", "Game Mechanics"));
  macros.click(function(){
    content.empty();
    menu.empty();

    optionsBar.children().removeClass("highlight").addClass("background");
    $(this).addClass("highlight").removeClass("background");

    var option = $("<div>").appendTo(menu);
    option.addClass("alttext flexmiddle background hover2 lrpadding");
    option.css("font-size", "1.6em");
    option.text("Constants");
    option.click(function(){
      menu.children().removeClass("highlight").addClass("background");
      $(this).addClass("highlight").removeClass("background");
      content.empty();

      var ctx = sync.defaultContext();
      ctx["c"] = duplicate(game.locals["homebrew"].data.previewChar.data);
      ctx["i"] = duplicate(game.locals["homebrew"].data.previewItem.data);

      content.append("<i>Constants are shortcuts for complicated macros, write a long equation, and refer to it with '#:myConstant'</i>");

      var constantList = $("<div>").appendTo(content);
      constantList.addClass("fit-xy scroll-y");
      constantList.css("max-width", "50%");

      function buildConstant(i) {
        var constantWrap = $("<div>").appendTo(constantList);
        constantWrap.addClass("flexrow flexmiddle");

        var constantLookupWrap = $("<div>").appendTo(constantWrap);
        constantLookupWrap.addClass("flexmiddle");
        constantLookupWrap.append("<text>#:</text>");

        var constantLookup = genInput({
          parent : constantLookupWrap,
          classes : "line middle",
          value : i,
        });
        constantLookup.change(function(){
          delete obj.data.templates.constants[i];
          obj.data.templates.constants[$(this).val()] = constantValue.val();
          rebuildConstants();
        });

        var constantValue = genInput({
          parent : constantWrap,
          classes : "line lrmargin fit-x middle",
          value : obj.data.templates.constants[i],
        });
        constantValue.change(function(){
          obj.data.templates.constants[i] = $(this).val();
        });

        var remove = genIcon("trash").appendTo(constantWrap);
        remove.addClass("destroy");
        remove.click(function(){
          delete obj.data.templates.constants[i];
          rebuildConstants();
        });
      }
      function rebuildConstants(){
        constantList.empty();
        for (var i in obj.data.templates.constants) {
          buildConstant(i);
        }

        var addConstant = genIcon("plus", "New Constant").appendTo(constantList);
        addConstant.addClass("create fit-x flexmiddle");
        addConstant.click(function(){
          ui_prompt({
            target : $(this),
            inputs : {
              "Constant Lookup" : {placeholder : "The Text after '#:' to use"}
            },
            click : function(ev, inputs){
              if (inputs["Constant Lookup"].val() && !inputs["Constant Lookup"].val().match(" ")) {
                obj.data.templates.constants[inputs["Constant Lookup"].val()] = "";
                rebuildConstants();
              }
              else {
                sendAlert({text : "Constants can't have spaces or be empty"});
              }
            }
          });

        });
      }
      rebuildConstants();
    });
    option.click();

    var option = $("<div>").appendTo(menu);
    option.addClass("alttext flexmiddle background hover2 lrpadding");
    option.css("font-size", "1.6em");
    option.text("Dice Actions");
    option.click(function(){
      menu.children().removeClass("highlight").addClass("background");
      $(this).addClass("highlight").removeClass("background");

      content.empty();

      var select = sync.newApp("ui_JSON").appendTo(content);
      select.addClass("fit-xy");
      select.css("max-width", "50%");
      select.attr("lookup", "templates.effects");
      obj.addApp(select);
    });

    var option = $("<div>").appendTo(menu);
    option.addClass("alttext flexmiddle background hover2 lrpadding");
    option.css("font-size", "1.6em");
    option.text("Dice Displays");
    option.click(function(){
      menu.children().removeClass("highlight").addClass("background");
      $(this).addClass("highlight").removeClass("background");

      content.empty();

      var select = sync.newApp("ui_diceDisplayBuilder").appendTo(content);
      select.addClass("fit-xy");
      select.css("max-width", "50%");
      obj.addApp(select);
    });

    var option = $("<div>").appendTo(menu);
    option.addClass("alttext flexmiddle background hover2 lrpadding");
    option.css("font-size", "1.6em");
    option.text("Dice Types");
    option.click(function(){
      menu.children().removeClass("highlight").addClass("background");
      $(this).addClass("highlight").removeClass("background");

      content.empty();

      var select = sync.newApp("ui_JSON").appendTo(content);
      select.addClass("fit-xy");
      select.css("max-width", "50%");
      select.attr("lookup", "templates.dice");
      obj.addApp(select);
    });

    var option = $("<div>").appendTo(menu);
    option.addClass("alttext flexmiddle background hover2 lrpadding");
    option.css("font-size", "1.6em");
    option.text("Tables");
    option.click(function(){
      menu.children().removeClass("highlight").addClass("background");
      $(this).addClass("highlight").removeClass("background");

      content.empty();

      var select = sync.newApp("ui_JSON").appendTo(content);
      select.addClass("fit-xy");
      select.css("max-width", "50%");
      select.attr("lookup", "templates.tables");
      obj.addApp(select);

      /*var constantList = $("<div>").appendTo(content);
      constantList.addClass("fit-xy scroll-y");
      constantList.css("max-width", "50%");

      function buildConstant(i) {
        var constantWrap = $("<div>").appendTo(constantList);
        constantWrap.addClass("flexrow flexmiddle");

        var constantLookupWrap = $("<div>").appendTo(constantWrap);
        constantLookupWrap.addClass("flexmiddle");
        constantLookupWrap.append("<text>#:</text>");

        var constantLookup = genInput({
          parent : constantLookupWrap,
          classes : "line middle",
          value : i,
        });
        constantLookup.change(function(){
          delete obj.data.templates.constants[i];
          obj.data.templates.constants[$(this).val()] = constantValue.val();
          rebuildConstants();
        });

        var constantValue = genInput({
          parent : constantWrap,
          classes : "line subtitle lrmargin fit-x middle",
          value : obj.data.templates.constants[i],
        });
        constantValue.change(function(){
          obj.data.templates.constants[i] = $(this).val();
        });

        var remove = genIcon("trash").appendTo(constantWrap);
        remove.addClass("destroy");
        remove.click(function(){
          delete obj.data.templates.constants[i];
          rebuildConstants();
        });
      }
      function rebuildConstants(){
        constantList.empty();
        for (var i in obj.data.templates.constants) {
          buildConstant(i);
        }

        var addConstant = genIcon("plus", "New Constant").appendTo(constantList);
        addConstant.addClass("create fit-x flexmiddle");
        addConstant.click(function(){
          ui_prompt({
            target : $(this),
            inputs : {
              "Constant Lookup" : {placeholder : "The Text after '#:' to use"}
            },
            click : function(ev, inputs){
              if (inputs["Constant Lookup"].val() && !inputs["Constant Lookup"].val().match(" ")) {
                obj.data.templates.constants[inputs["Constant Lookup"].val()] = "";
                rebuildConstants();
              }
              else {
                sendAlert({text : "Constants can't have spaces or be empty"});
              }
            }
          });

        });
      }
      rebuildConstants();*/
    });
  });

  var finalize = $("<div>").appendTo(optionsBar);
  finalize.addClass("background alttext flex outline smooth padding flexmiddle hover2");
  finalize.append(genIcon("check", "Finalize"));
  finalize.click(function(){
    content.empty();
    menu.empty();

    optionsBar.children().removeClass("highlight").addClass("background");
    $(this).addClass("highlight").removeClass("background");

    var wrap = $("<div>");
    wrap.addClass("flexcolumn flexmiddle");

    var versionField = genInput({
      classes : "line",
      parent : wrap,
      placeholder : game.templates.version + " (Current Version)"
    });

    wrap.append("<b class='subtitle'>To stop version popups, enter in your own custom version</b>");


    var option = $("<div>").appendTo(menu);
    option.addClass("alttext flexmiddle background hover2 lrpadding");
    option.css("font-size", "1.6em");
    option.text("Raw JSON");
    option.click(function(){
      menu.children().removeClass("highlight").addClass("background");
      $(this).addClass("highlight").removeClass("background");

      content.empty();

      var select = sync.newApp("ui_JSON").appendTo(content);
      select.addClass("fit-xy");
      select.css("max-width", "50%");
      select.attr("lookup", "templates");
      select.attr("hideConfirm", "true");
      obj.addApp(select);

      var button = $("<button>").appendTo(content);
      button.addClass("highlight alttext fit-x");
      button.css("font-size", "2.0em");
      button.css("max-width", "50%");
      button.append("Finalize from JSON");
      button.click(function(){
        var button = $("<button>");
        button.append("Confirm (Can't be undone)");
        button.click(function(){
          runCommand("updateTemplate", duplicate(obj.data.templates));
          layout.coverlay("confirm-template");
        });

        ui_popOut({
          target : $(this),
          id : "confirm-template",
        }, button);
      });
    });

    var option = $("<div>").appendTo(menu);
    option.addClass("alttext flexmiddle background hover2 lrpadding");
    option.css("font-size", "1.6em");
    option.text("Finalize");
    option.click(function(){
      menu.children().removeClass("highlight").addClass("background");
      $(this).addClass("highlight").removeClass("background");

      content.empty();

      var buttonDiv = $("<div>").appendTo(content);
      buttonDiv.addClass("flexcolumn flexmiddle");

      var newApp = sync.newApp("ui_editPage").appendTo(buttonDiv);
      newApp.attr("autosave", true);
      newApp.attr("entry", true);
      newApp.css("width", "600px");
      newApp.css("height", "600px");
      game.locals["homebrew"].data.previewInfo.addApp(newApp);

      var subOptions = $("<div>").appendTo(buttonDiv);
      subOptions.addClass("flexrow");

      if (!game.templates.build) {
        var button = $("<button>").appendTo(subOptions);
        button.append("Force Assets to the latest version");
        button.click(function(){
          var content = $("<div>");
          content.addClass("flexcolumn flexmiddle");
          content.append("<div class='flexmiddle'><b>This will alter all existing assets, are you sure?</b></div>");

          var button = $("<button>").appendTo(content);
          button.append("Yes");
          button.click(function(){
            game.templates;
            for (var i in game.entities.data) {
              var ent = game.entities.data[i];
              if (ent.data && ent.data._t == "c") {
                merge(ent.data.info, game.templates.character.info);
                merge(ent.data.counters, game.templates.character.counters);
                merge(ent.data.stats, game.templates.character.stats);
                for (var j in ent.data.inventory) {
                  merge(ent.data.inventory[j], game.templates.item);
                }
                var newTalents = {};
                for (var j in ent.data.talents) {
                  ent.data.talents = ent.data.talents || {};
                  newTalents[j] = ent.data.talents[j];
                }
                game.entities.data[i].data.talents = newTalents;

                var newSpecials = {};
                for (var j in ent.data.specials) {
                  ent.data.specials = ent.data.specials || {};
                  newSpecials[j] = ent.data.specials[j];
                }
                game.entities.data[i].data.specials = newSpecials;

                var newSkills = duplicate(game.templates.character.skills);
                for (var j in ent.data.skills) {
                  ent.data.skills = ent.data.skills || {};
                  var found = false;
                  for (var k in newSkills) {
                    if (ent.data.skills[j].name.toLowerCase() == newSkills[k].name.toLowerCase()) {
                      newSkills[k] = ent.data.skills[j];
                      found = true;
                      break;
                    }
                  }
                  if (!found) {
                    newSkills[(Object.keys(newSkills).length || 0)] = ent.data.skills[j];
                  }
                }
                game.entities.data[i].data.skills = newSkills;

                for (var j in ent.data.traits) {
                  ent.data.tags = ent.data.tags || {};
                  ent.data.tags["trait_"+ent.data.traits[j].name] = 1;
                }
                for (var j in ent.data.proficient) {
                  ent.data.tags = ent.data.tags || {};
                  ent.data.tags["prof_"+j] = 1;
                }
                ent.sync("updateAsset");
              }
              else if (ent.data && ent.data._t == "g") {
                ent.sync("deleteAsset");
              }
              else if (ent.data && ent.data._t == "v") {
                merge(ent.data.info, game.templates.vehicle.info);
                merge(ent.data.counters, game.templates.vehicle.counters);
                merge(ent.data.stats, game.templates.vehicle.stats);
                for (var j in ent.data.inventory) {
                  merge(ent.data.inventory[j], game.templates.item);
                }
                ent.sync("updateAsset");
              }
            }
            layout.coverlay("confirm-template");
          });

          var button = $("<button>").appendTo(content);
          button.append("No");
          button.click(function(){
            layout.coverlay("confirm-template");
          });

          ui_popOut({
            target : $(this),
            id : "confirm-template",
          }, content);
        });
      }

      var button = $("<button>").appendTo(buttonDiv);
      button.css("width", "600px");
      button.append("Print System Builder JSON");
      button.click(function(){
        if (game.templates.build) {
          for (var key in obj.data.templates.actors) {
            var template = duplicate(obj.data.previewChar[key].data);

            obj.data.templates.display.actors[key] = duplicate(template._d);

            delete template._d;
            delete template._s;
            delete template._c;

            obj.data.templates.actors[key] = template;
          }
          for (var key in obj.data.templates.elements) {
            var template = duplicate(obj.data.previewItem[key].data);

            obj.data.templates.display.elements[key] = duplicate(template._d);

            delete template._d;
            delete template._s;
            delete template._c;

            obj.data.templates.elements[key] = template;
          }
        }
        else {
          var template = duplicate(obj.data.previewChar.data);
          obj.data.templates.display.sheet.calc = template._calc;
          if (game.templates.build) {
            game.templates.actions.c = duplicate(template._a);
          }
          delete template._a;
          delete template._d;
          delete template._s;
          delete template._c;
          delete template._calc;

          obj.data.templates.character = template;
          obj.data.templates.display.sheet.content = duplicate(obj.data.previewChar.data._d.content);
          obj.data.templates.display.sheet.style = duplicate(obj.data.previewChar.data._d.style);

          var template = duplicate(obj.data.previewItem.data);
          delete template._d;
          delete template._s;
          delete template._c;

          obj.data.templates.item = template;
        }

        var template = duplicate(obj.data.previewPage.data);
        delete template._d;
        delete template._s;
        delete template._c;
        delete template.info.notes.current;
        obj.data.templates.page = template;

        ui_popOut({
          target : $("body"),
          title : "JSON Printout",
          style : {"width" : "600px", "height" : "600px"}
        }, genInput({classes : "flex subtitle", type : "textarea", value : JSON.stringify(obj.data.templates, 2, 2)}));
      });

      var button = $("<button>").appendTo(subOptions);
      button.addClass("focus");
      button.css("width", "600px");
      button.append("Restore to original Templates");
      button.click(function(){
        if (game.locals["gameList"][game.templates.identifier]) {
          runCommand("updateTemplate", duplicate(game.locals["gameList"][game.templates.identifier]));
        }
        else {
          sendAlert({text : "This is a custom game, can't restore templates"});
        }
      });

      var button = $("<button>").appendTo(buttonDiv);
      button.addClass("highlight alttext");
      button.css("font-size", "2.0em");
      button.css("width", "600px");
      button.append("Use these templates for current World");
      button.click(function(){
        var button = $("<button>");
        button.append("Confirm (Can't be undone)");
        button.click(function(){
          if (obj.data.templates.build) {
            for (var key in obj.data.templates.actors) {
              var template = duplicate(obj.data.previewChar[key].data);

              obj.data.templates.display.actors[key] = duplicate(template._d);

              delete template._d;
              delete template._s;
              delete template._c;

              obj.data.templates.actors[key] = template;
            }
            for (var key in obj.data.templates.elements) {
              var template = duplicate(obj.data.previewItem[key].data);

              obj.data.templates.display.elements[key] = duplicate(template._d);

              delete template._d;
              delete template._s;
              delete template._c;

              obj.data.templates.elements[key] = template;
            }
          }
          else {
            var template = duplicate(obj.data.previewChar.data);
            obj.data.templates.display.sheet.calc = template._calc;
            if (game.templates.build) {
              game.templates.actions.c = duplicate(template._a);
            }
            delete template._a;
            delete template._d;
            delete template._s;
            delete template._c;
            delete template._calc;

            obj.data.templates.character = template;
            obj.data.templates.display.sheet.content = duplicate(obj.data.previewChar.data._d.content);
            obj.data.templates.display.sheet.style = duplicate(obj.data.previewChar.data._d.style);

            var template = duplicate(obj.data.previewItem.data);
            delete template._d;
            delete template._s;
            delete template._c;

            obj.data.templates.item = template;
          }

          var template = duplicate(obj.data.previewPage.data);
          delete template._d;
          delete template._s;
          delete template._c;
          delete template.info.notes.current;
          obj.data.templates.page = template;

          runCommand("updateTemplate", obj.data.templates);
          layout.coverlay("confirm-template");
        });

        ui_popOut({
          target : $(this),
          id : "confirm-template",
        }, button);
      });
    });
    option.click();

  });

  var contentWrap = $("<div>").appendTo(div);
  contentWrap.addClass("flex2");
  contentWrap.css("position", "relative");

  var contentWrapWrap = $("<div>").appendTo(contentWrap);
  contentWrapWrap.addClass("fit-xy");
  contentWrapWrap.css("position", "absolute");
  contentWrapWrap.css("overflow", "auto");

  var content = $("<div>").appendTo(contentWrapWrap);
  content.addClass("flexcolumn flexmiddle");
  content.css("min-width", "100%");
  content.css("min-height", "100%");

  var menu = $("<div>");
  if (!app.attr("hidemenu")) {
    menu.appendTo(contentWrap);
  }
  menu.addClass("flexcolumn");
  menu.css("position", "absolute");
  menu.css("left", "100px");
  menu.css("bottom", "100px");
  menu.css("transition", "opacity 0.5s");
  menu.css("opacity", "0.25");
  menu.hover(function(){
    menu.css("opacity", "1.0");
  },
  function(){
    menu.css("opacity", "0.25");
  });
  menu.mousedown(function(ev){
    ev.stopPropagation();
  });
  menu.mouseup(function(ev){
    ev.stopPropagation();
  });
  menu.click(function(ev){
    ev.stopPropagation();
  });
  optionsBar.appendTo(div);

  actor.click();


  
  return div;
});

sync.render('customApp', function(obj, app, scope) {
  //apps are powered by JQuery
  scope = scope || {viewOnly : app.attr('viewOnly') == 'true'};

  var div = $('<div>');
  div.addClass("flexcolumn fit-xy");

  var button = $("<button>").appendTo(div);
  button.append(obj.data);
  button.click(function(){
    obj.data = obj.data || 0;
    obj.data++;
    obj.update();
  });

  return div;
});

sync.render("ui_hotApps", function(obj, app, scope) {
  scope = scope || {vertical : (app.attr("vertical") == "true")};
  var div = $("<div>");
  var icons = util.hotIcons;
  var dat = game.components;
  for (var ind in dat) {
    var category = $("<div>").appendTo(div);
    category.addClass("flexcolumn hover2 flex lrpadding fit-x");
    category.css("position", "relative");
    category.attr("ui", dat[ind].ui);
    category.attr("title", "Creates app as a popup");
    category.attr("icon", icons[dat[ind].ui]);
    category.attr("name", dat[ind].name);
    category.attr("width", dat[ind].w);
    category.attr("height", dat[ind].h);
    category.attr("asTab", dat[ind].asTab);
    category.click(function(ev){
      if ($(this).attr("asTab")) {
        var newTab;
        for (var i in game.state.data.tabs) {
          if (game.state.data.tabs[i].ui == $(this).attr("ui")) {
            newTab = i;
            break;
          }
        }
        if (!newTab) {
          game.state.data.tabs.push({ui : $(this).attr("ui"), name : $(this).attr("name")});
        }
        $(".application[ui-name='ui_displayTabs']").attr("tab", newTab || game.state.data.tabs.length-1);
        game.state.sync("updateState");
      }
      else {
        var content = sync.newApp($(this).attr("ui"), null, {});

        var popOut = ui_popOut({
          target : $(this),
          title : $(this).attr("name"),
          minimize : true,
          maximize : true,
          dragThickness : "0.5em",
          style : {"width" : ($(this).attr("width") || 30)+"vw", "height" : ($(this).attr("height") || 50)+"vh"}
        }, content);
        popOut.resizable();
        popOut.addClass("floating-app");
      }
    });
    category.contextmenu(function(){
      var content = sync.newApp($(this).attr("ui"), null, {});

      var popOut = ui_popOut({
        target : $(this),
        title : $(this).attr("name"),
        minimize : true,
        maximize : true,
        dragThickness : "0.5em",
        style : {"width" : ($(this).attr("width") || 30)+"vw", "height" : ($(this).attr("height") || 50)+"vh"}
      }, content);
      popOut.resizable();
      popOut.addClass("floating-app");
      return false;
    });
    var catWrap = $("<div>").appendTo(category);
    catWrap.addClass("flexrow flexbetween fit-x outlinebottom");

    var link = genIcon(icons[dat[ind].ui], dat[ind].name + "").appendTo(catWrap);
    link.css("font-size", "1.2em");

    var author = $("<i>").appendTo(catWrap);
    author.addClass("subtitle flexmiddle");
    author.append("Author : <b>" + (dat[ind].author || "GM Forge") + "</b>");

    var desc = $("<p>").appendTo(category);
    desc.addClass("spadding subtitle");
    desc.css("min-height", "30px");
    desc.text(dat[ind].basic);
  }


  /*
  if (!obj) {
    app.attr("vertical", scope.vertical);
    game.locals["hotApps"] = game.locals["hotApps"] || sync.obj();
    game.locals["hotApps"].data = game.locals["hotApps"].data || {apps : JSON.parse(getCookie("hot-apps") || '[]')};
    for (var key in game.locals["hotApps"].data.apps) {
      game.locals["hotApps"].data.apps[key].id = null;
    }
    game.locals["hotApps"].addApp(app);
    return div;
  }
  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("flexmiddle alttext");

  var vertical = scope.vertical;
  if (vertical) {
    optionsBar.addClass("flexcolumn");
    optionsBar.removeClass("alttext");
  }
  var hotApps = obj.data.apps;
  for (var i in hotApps) {
    var appName = hotApps[i];
    appName.icon = appName.icon || "unchecked";
    if (appName && appName.icon) {
      if (appName.ui) {
        var hotApp;
        if (!(vertical) && (obj.data.advanced || hotApps.length > 1)) {
          hotApp = genIcon(appName.icon).appendTo(optionsBar);
        }
        else {
          hotApp = genIcon(appName.icon, appName.name, vertical).appendTo(optionsBar);
        }
        console.log(vertical);
        hotApp.addClass("lrpadding");
        if (!vertical) {
          hotApp.addClass("alttext");
          hotApp.css("font-size", "2.0em");
        }
        hotApp.attr("title", appName.name);
        hotApp.attr("ui", appName.ui);
        hotApp.attr("key", i);
        hotApp.css("position", "relative");

        var remove = genIcon("remove").appendTo(hotApp);
        remove.addClass("hover3 smooth");
        remove.addClass("destroy");
        remove.attr("key", i);
        if (!vertical) {
          remove.css("font-size", "0.5em");
          remove.css("position", "absolute");
          remove.css("bottom", "0");
          remove.css("right", "0");
        }
        remove.click(function(ev){
          var app = obj.data.apps[$(this).attr("key")].id;
          $("#"+app).remove();
          obj.data.apps.splice($(this).attr("key"), 1);
          obj.update();
          ev.stopPropagation();
          ev.preventDefault();
          var copy = duplicate(obj.data.apps);
          for (var k in copy) {
            if (copy[k].id) {
              copy[k].id = null;
            }
          }
          setCookie("hot-apps", JSON.stringify(copy), 10000000);
          return false;
        });

        hotApp.click(function(ev) {
          var targ = $("#"+obj.data.apps[$(this).attr("key")].id);
          if (!targ.length) {
            function wrap(ui, key, target) {
              var appData = obj.data.apps[key];
              var newApp = sync.newApp(ui, null, {});
              newApp.addClass("white");
              var newAppID = newApp.attr("id");

              var style = {"min-width" : "100px", "min-height" : "30px"};
              if (appData.w) {
                style["width"] = appData.w+"%";
              }
              if (appData.h) {
                style["height"] = appData.h+"%";
              }
              var p = ui_popOut({
                target : target,
                id : "pop-"+(newAppID),
                align : "top",
                title : appData.name,
                dragThickness : "0.5em",
                minimize : true,
                maximize : true,
                moved : function(ev, ui) {
                  appData.x = Math.max(Math.floor(ui.offset().left/$(window).outerWidth()*100), 0);
                  appData.y = Math.max(Math.floor(ui.offset().top/$(window).outerHeight()*100), 0);
                  var copy = duplicate(obj.data.apps);
                  for (var k in copy) {
                    if (copy[k].id) {
                      copy[k].id = null;
                    }
                  }
                  setCookie("hot-apps", JSON.stringify(copy), 10000000);
                },
                close : function(ev, ui) {
                  $("#pop-"+newAppID).hide();
                  return false;
                },
                style : style
              }, newApp);
              if (appData.x) {
                p.css("left", appData.x+"%");
              }
              if (appData.y) {
                p.css("top", appData.y+"%");
              }
              p.resizable({
                stop : function(ev, ui){
                  appData.w = Math.floor(p.outerWidth()/$(window).outerWidth()*100);
                  appData.h = Math.floor(p.outerHeight()/$(window).outerHeight()*100);
                  var copy = duplicate(obj.data.apps);
                  for (var k in copy) {
                    if (copy[k].id) {
                      copy[k].id = null;
                    }
                  }
                  setCookie("hot-apps", JSON.stringify(copy), 10000000);
                }
              });
              p.show();
              var max = util.getMaxZ(".ui-popout");
              p.css("z-index", max+1);
              obj.data.apps[key].id = "pop-"+newApp.attr("id");
            }
            wrap($(this).attr("ui"), $(this).attr("key"), $(this));
            ev.preventDefault();
            ev.stopPropagation();
          }
          else {
            if (targ.is(":visible")) {
              targ.hide();
            }
            else {
              targ.show();
              var max = util.getMaxZ(".ui-popout");
              targ.css("z-index", max+1);
            }
          }
        });
      }
      else if (app.layout) {
        if (getCookie(app.layout) && getCookie(app.layout) != "") {
          var hotLayout = genIcon(appName.icon).appendTo(optionsBar);
          hotApp.attr("title", app.layout);
          hotApp.css("padding", "4px");
        }
      }
    }
    else if (!appName.icon) {
      hotApps.splice(i, 1);
      obj.update();
      break;
    }
  }

  var add = genIcon("flash", (vertical!=null)?("Add New Mod"):(""), vertical).appendTo(optionsBar);
  add.addClass("create lrmargin");
  add.attr("title", "Manage Mods and Extensions");
  if (!vertical) {
    add.css("font-size", "2.0em");
  }
  add.click(function(){
    if ($("#add-hot-app").length && !app.attr("shouldOpen")) {
      layout.coverlay("add-hot-app", 500);
      return;
    }
    var content = $("<div>");
    var icons = util.hotIcons
    if (obj.data.advanced) {
      content.addClass("flexcolumn");
      content.append("<b class='fit-x flexmiddle'><u>Apps</u></b>");
      var buildList = [];
      //options
      var appCategorys = {};

      var catWrap = $("<div>").appendTo(content);
      catWrap.addClass("flexrow");

      for (var cat in game.components) {
        var category = $("<div>").appendTo(catWrap);
        category.addClass("flexcolumn outline lrpadding");
        category.append("<b class='outlinebottom'>"+cat+"</b>");
        for (var index in game.components[cat]) {
          if (index == "_ui") {
            var dat = game.components[cat][index];
            for (var ind in dat) {
              var link = genIcon(icons[dat[ind].ui], dat[ind].name).appendTo(category);
              link.addClass("subtitle");
              link.attr("ui", dat[ind].ui);
              link.attr("title", dat[ind].basic);
              link.attr("icon", icons[dat[ind].ui]);
              link.attr("name", dat[ind].name);
              link.click(function(){
                var appData = {icon : $(this).attr("icon"), ui : $(this).attr("ui")};
                ui_prompt({
                  target : $(this),
                  id : "add-hot-app-name",
                  inputs : {
                    "App Name" : $(this).attr("name")
                  },
                  click : function(ev, inputs) {
                    appData.name = inputs["App Name"].val();
                    appData.w = 30;
                    appData.h = 50;
                    obj.data.apps.push(appData);
                    obj.update();
                    var copy = duplicate(obj.data.apps);
                    for (var k in copy) {
                      if (copy[k].id) {
                        copy[k].id = null;
                      }
                    }
                    setCookie("hot-apps", JSON.stringify(copy), 10000000);
                  }
                });

                layout.coverlay("add-hot-app");
              });
            }
          }
        }
      }
    }
    else {
      content.css("width", "400px");
      content.css("height", "90vh");

      content.addClass("flexcolumn flex");

      var modDiv = $("<div>")//.appendTo(content);
      modDiv.addClass("flexrow fit-x background");

      var installMods = $("<button>").appendTo(modDiv);
      installMods.addClass("flex background alttext");
      installMods.append("Verified Mods");
      installMods.click(function(){
        modDiv.children().removeClass("highlight").addClass("background");
        $(this).removeClass("background");
        $(this).addClass("highlight");
        modContent.empty();
        app.removeAttr("tab");


        var dat = game.components;
        for (var ind in dat) {
          if (dat[ind].basic) {
            var category = $("<div>").appendTo(modContent);
            category.addClass("flexcolumn lightoutline hover2 flex");
            category.css("padding-left", "1em");
            category.css("padding-right", "1em");
            category.css("position", "relative");
            category.attr("ui", dat[ind].ui);
            category.attr("title", "Creates app as a popup");
            category.attr("icon", icons[dat[ind].ui]);
            category.attr("name", dat[ind].name);
            category.attr("width", dat[ind].w);
            category.attr("height", dat[ind].h);
            category.click(function(ev){
              var content = sync.newApp($(this).attr("ui"), null, {});

              var popOut = ui_popOut({
                target : $(this),
                title : $(this).attr("name"),
                minimize : true,
                maximize : true,
                dragThickness : "0.5em",
                style : {"width" : ($(this).attr("width") || 30)+"vw", "height" : ($(this).attr("height") || 50)+"vh"}
              }, content);
              popOut.resizable();
              popOut.addClass("floating-app");
            });

            var link = genIcon(icons[dat[ind].ui], dat[ind].name + "").appendTo(category);
            link.addClass("outlinebottom");
            link.css("font-size", "2.0em");

            var desc = $("<p>").appendTo(category);
            desc.addClass("padding");
            desc.css("min-height", "50px");
            desc.text(dat[ind].basic);

            var hotApp = genIcon("heart").appendTo(category);
            hotApp.addClass("lrmargin bold");
            hotApp.css("font-size", "2.0em");
            hotApp.css("position", "absolute");
            hotApp.css("top", "0");
            hotApp.css("right", "0");
            hotApp.attr("ui", dat[ind].ui);
            hotApp.attr("title", "Add app to hotbar");
            hotApp.attr("icon", icons[dat[ind].ui]);
            hotApp.attr("name", dat[ind].name);
            hotApp.attr("width", dat[ind].w);
            hotApp.attr("height", dat[ind].h);
            hotApp.click(function(ev){
              var appData = {icon : $(this).attr("icon"), ui : $(this).attr("ui")};
              appData.name = $(this).attr("name");
              appData.w = $(this).attr("width") || 30;
              appData.h = $(this).attr("height") || 50;
              obj.data.apps.push(appData);
              obj.update();
              var copy = duplicate(obj.data.apps);
              for (var k in copy) {
                if (copy[k].id) {
                  copy[k].id = null;
                }
              }
              setCookie("hot-apps", JSON.stringify(copy), 10000000);

              layout.coverlay("add-hot-app");
              ev.stopPropagation();
            });

            var author = $("<i>").appendTo(category);
            author.addClass("subtitle lrpadding");
            author.css("position", "absolute");
            author.css("bottom", "0");
            author.css("right", "0");
            author.append("Author : <b>" + (dat[ind].author || "GM Forge") + "</b>");
          }
        }

      });

      var customMods = $("<button>").appendTo(modDiv);
      customMods.addClass("flex background alttext");
      customMods.append("Custom Mods");
      customMods.click(function(){
        modDiv.children().removeClass("highlight").addClass("background");
        $(this).removeClass("background");
        $(this).addClass("highlight");
        modContent.empty();
        app.attr("tab", "mods");

        if (app.attr("accepted") == "true") {
          $("<div class='spadding'></div>").appendTo(modContent);

          var button = $("<button>").appendTo(modContent);
          button.addClass("fit-x lpadding flexmiddle alttext background");
          button.append("Load External Script");
          button.click(function(){
            var imgList = sync.render("ui_filePicker")(obj, app, {
              filter : "js",
              change : function(ev, ui, value){
                sendAlert({text : "Loading Script " + value});

                $.ajax({
                  url: value,
                  error : function (data) {
                    console.log(data);
                  },
                  dataType : "text",
                  success: function (data){
                    try {
                      eval(data);
                      sendAlert({text : "App Updated"});
                    }
                    catch (err) {
                      sendAlert({text : "Console Error " + err});
                    }
                  }
                });
                layout.coverlay("template-picker");
              }
            });

            var pop = ui_popOut({
              target : $(this),
              prompt : true,
              id : "template-picker",
              align : "top",
              style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
            }, imgList);
            pop.resizable();
          });
          $("<div class='spadding'></div>").appendTo(modContent);

          var button = $("<button>").appendTo(modContent);
          button.addClass("fit-x lpadding flexmiddle alttext highlight");
          button.append("Write Custom Script");
          button.click(function(){
            modContent.empty();

            var modWraper = $("<div>").appendTo(modContent);
            modWraper.addClass("fit-x padding");

            var textArea = $("<textarea>").appendTo(modWraper);
            textArea.addClass("subtitle fit-x");
            textArea.css("min-height", "50vh");
            obj.data.modStr = obj.data.modStr || String('sync.render("customApp", function(obj, app, scope){\n  //apps are powered by JQuery\n  scope = scope || {viewOnly : app.attr("true") == "true"};\n\n  var div = $("<div>");\n  div.addClass("flexcolumn fit-xy");\n\n  var button = $("<button>").appendTo(div);\n  button.append(obj.data);\n  button.click(function(){\n    obj.data = obj.data || 0;\n    obj.data++;\n    obj.update();\n  });\n\n  return div;\n});')

            modWraper.append("<b>App Preview</b>");

            var tempObj = sync.obj();
            tempObj.data = 0;

            var temp = sync.newApp("customApp").appendTo(modWraper);
            tempObj.addApp(temp);

            textArea.val(obj.data.modStr);
            textArea.change(function(){
              obj.data.modStr = $(this).val();
              try {
                eval($(this).val());
                sendAlert({text : "App Updated"});
              }
              catch (err) {
                sendAlert({text : "Console Error " + err});
              }

              tempObj.update();
            });
          });
        }
        else {
          var warning = $("<highlight>").appendTo(modContent);
          warning.addClass("flexmiddle");
          warning.text("Disclaimer!");

          var warning = $("<p>").appendTo(modContent);
          warning.addClass("lpadding");
          warning.text("Scripts loaded and created in this menu could potentially be harmful for your game, your players and in rare cases your computer! By continuing you acknowledge and accept responsiblity for the scripts you import and write and accept any responsibilities that come because of it.");

          var acceptWrap = $("<div>").appendTo(modContent);
          acceptWrap.addClass("flexmiddle fit-x subtitle");

          var check = genInput({
            classes : "margin",
            parent : acceptWrap,
            type : "checkbox",
            style : {"margin-top" : "0px"}
          });
          check.change(function(){
            accept.show();
            check.attr("disabled", true);
          });

          acceptWrap.append("<b class='margin'>I understand, and accept responsibility for scripts I make/import</b>");

          var accept = $("<button>").appendTo(modContent);
          accept.addClass("fit-x lpadding flexmiddle alttext highlight");
          accept.append("Proceed");
          accept.click(function(){
            app.attr("accepted", "true");
            app.attr("shouldOpen", "true");
            obj.update();
          });
          accept.hide();
        }
        //app.attr("accepted", true);
      });

      var modWrap = $("<div>").appendTo(content);
      modWrap.addClass("flexcolumn flex");
      modWrap.css("overflow", "auto");
      modWrap.css("position", "relative");

      var modContent = $("<div>").appendTo(modWrap);
      modContent.addClass("fit-x");
      modContent.css("position", "absolute");

      if (app.attr("tab") == "mods") {
        customMods.click();
      }
      else {
        installMods.click();
      }
    }

    var category = $("<div>").appendTo(content);
    category.addClass("flexcolumn flexmiddle lightoutline");
    category.css("width", "100%");
    category.css("padding-left", "1em");
    category.css("padding-right", "1em");

    if (!vertical) {
      var advanced;
      if (!obj.data.advanced) {
        advanced = genIcon("cog", "Show app catalog").appendTo(category);
      }
      else {
        advanced = genIcon("user", "Take me back to the basics!").appendTo(category);
      }
      advanced.click(function(){
        obj.data.advanced = !obj.data.advanced;
        app.attr("shouldOpen", true);
        obj.update();
      });
    }
    var target = $(this);
    if (app.attr("shouldOpen")) {
      target = app;
    }
    var popout = ui_popOut({
      target : target,
      title : "Mods and Extensions",
      id : "add-hot-app",
      align : "top"
    }, content);
    popout.resizable();
  });
  if (app.attr("shouldOpen")) {
    add.click();
    app.removeAttr("shouldOpen");
  }
*/
  return div;
});

// Changes XML to JSON credit to https://davidwalsh.name/convert-xml-json

var _txtImportRules = {};
_txtImportRules["skills"] = function(data, output) {
	var skillRegex = /([^\n]+)[\n]/g;
	var skills = data.split(skillRegex);
	var dataRegex = /([\w0-9\s-]*)[\s]*([\(][^0-9]*[\)])*[\s]*([\(][-|+|0-9]*[\)])*[\s]*(\[(.*)\])*/i;
	var bonus = /([\+-](.*)|)/;
	var override = /{([\s\S]*)}/;
	var newSkills = {};
	for (var i in skills) {
		var rawSkill = skills[i];
		if (rawSkill.valid()) {
			var exe = dataRegex.exec(rawSkill);
			var skill = sync.newValue(null, 1);
			if (exe) {
				var str = (exe[1] + (exe[2] || "")).trim();
				skill.name = str;
				if (sync.eval(exe[3]) != null) {
					if (sync.eval(exe[3])%10 == 0) {
						sync.modifier(skill, "rank", eval(exe[3])/10);
					}
					else {
						sync.modifier(skill, "rank", eval(exe[3]));
					}
				}

				if (exe[5]) {// custom options for the skill
					var dataArr = exe[5].split(";");
					for (var i in dataArr) {
						var data = dataArr[i].split("=");
						if (data[0].toLowerCase() == "r") {
							sync.modifier(skill, "rank", eval(data[1]));
						}
					}
				}
				if (exe[1].valid()) {
					var pushed = false;
					for (var s in output.skills) {
						if (output.skills[s].name && output.skills[s].name.toLowerCase().match(exe[1].trim().toLowerCase())) {
							skill.name = output.skills[s].name;
							if (output.skills[s].modifiers && !skill.modifiers) {
								skill.modifiers = output.skills[s].modifiers;
							}
							output.skills[s] = skill;
							pushed = true;
						}
					}
					if (!pushed) {
						newSkills.push(skill);
					}
				}
			}
			else {
				skill.name = rawSkill;
				if (!pushed) {
					newSkills.push(skill);
				}
			}
		}
	}
	for (var i in newSkills) {
		output.skills[Object.keys(output.skills).length] = (newSkills[i]);
	}
};
_txtImportRules["stats"] = function(data, output) {
	var itemRegex = /([^\n]+)[\n]/g;
	var stats = data.split(itemRegex);
	var splitReg = /([^:^=^;]+)[:=;](.+)/;
	var reg = /(.+)[-|:|=|;]\s*(.+)[\n|,]/ig;
	var bonus = /([\+-](.*)|)/;
	var override = /{(.*)}/;
	var firstNumber = /([0-9]+)/ig;
	for (var i in stats) {
		var rawStat = stats[i];
		if (rawStat.valid()) {
			var splitStat = rawStat.split(",");
			for (var j in splitStat) {
				var exe = splitReg.exec(splitStat[j]);
				if (exe && (exe[1] || "").valid() && (exe[2] || "").valid()) {
					for (var stat in output.stats) {
						if (stat.toLowerCase() == exe[1].trim().toLowerCase() || output.stats[stat].name.toLowerCase() == exe[1].trim().toLowerCase()) {
							if (isNaN(exe[2])) {
								var equals = exe[2].split("=");
								var regex = /\s*[+-]\s*/;
								var additions = equals[0].trim().split(regex);
								if (additions.length) {
									sync.rawVal(output.stats[stat], parseInt(additions[0]));
									for (var k=1; k<additions.length; k++) {
										sync.modifier(output.stats[stat], k, parseInt(additions[k]));
									}
								}
								else {
									sync.rawVal(output.stats[stat], exe[1]);
								}
							}
							else {
								sync.rawVal(output.stats[stat], parseInt(exe[2]));
							}
						}
					}
					for (var count in output.counters) {
						if (count.toLowerCase() == exe[1].trim().toLowerCase() || output.counters[count].name.toLowerCase() == exe[1].trim().toLowerCase()) {
							var numb = exe[2].match(firstNumber);
							if (numb) {
								if (count == "exp") {
									var spent = 0;
									for (var d=1; d<numb.length; d++) {
										spent = spent + parseInt(numb[d]);
									}
									output.counters[count].modifiers = {"Imported" : spent+parseInt(numb[0])};
									sync.rawVal(output.counters[count], spent);
								}
								else {
									sync.rawVal(output.counters[count], parseInt(numb[0]));
									if (numb[1]) {
										output.counters[count].max = parseInt(numb[1]);
									}
								}
							}
						}
					}
				}
			}
		}
	}
};

_txtImportRules["inventory"] = function(data, output) {
	var itemRegex = /([^\n]+)[\n]/g;
	var items = data.split(itemRegex);
	var dataRegex = /([\w'"-\s&]*)[\s]*([\(].*[\)])*(.)*/i;
	var firstNumber = /([0-9]+)/;
	var weaponRegex = /[\[](.*)[\]]/;
	var split = /[-=;]/;
	var newItems = [];
	var options = /{([\s\S]*)}/;
	for (var i in items) {
		var rawItem = items[i];
		if (rawItem.valid()) {
			var item = JSON.parse(JSON.stringify(game.templates.item));
			var exe = dataRegex.exec(rawItem);
			var quantity = firstNumber.exec(rawItem);
			if (quantity) {
				sync.val(item.info.quantity, quantity[1]);
			}
			else {
				sync.val(item.info.quantity, 1);
			}
			if (exe) {
				if (exe[1].replace(sync.val(item.info.quantity), "").valid()) {
					sync.val(item.info.name, exe[1].trim().replace(sync.val(item.info.quantity), ""));
					sync.val(item.info.notes, exe[2]);
					var weaponData = weaponRegex.exec(rawItem);
					if (weaponData) {
						var weaponArr = weaponData[1].split(";");
						for (var i in weaponArr) {
							var data = weaponArr[i].split(split);
							if (data && data[1]) {
								var obj = data[1];
								if (obj.match(options)) {
									obj = JSON.parse(data[1]);
								}
								if (data[0].toLowerCase() == "armor" || data[0].toLowerCase() == "a") {
									if (obj instanceof Object) {
										merge(item.equip.armor, obj, true);
									}
									else {
										sync.rawVal(item.equip.armor, parseInt(obj));
									}
								}
								else if (data[0].toLowerCase() == "u" || data[0].toLowerCase() == "img") {
									sync.rawVal(item.info.img, obj);
								}
								else if (data[0].toLowerCase() == "weight" | data[0].toLowerCase() == "w") {
									sync.rawVal(item.info.weight, parseInt(obj));
								}
								else if (data[0].toLowerCase() == "quantity" || data[0].toLowerCase() == "q") {
									sync.rawVal(item.info.quantity, parseInt(obj));
								}
								else {
									if (item.weapon[data[0].toLowerCase()]) {
										if (obj instanceof Object) {
											merge(item.weapon[data[0].toLowerCase()], obj, true);
										}
										else {
											sync.rawVal(item.weapon[data[0].toLowerCase()], obj);
										}
									}
									else {
										sync.rawVal(item.info.notes, (sync.rawVal(item.info.notes) || "") + (data[0] || "") + "=" + (obj || "") + "\n");
									}
								}
							}
						}
					}
					output.inventory.push(item);
				}
			}
			else {
				sync.val(item.info.name, rawItem);
				output.inventory.push(item);
			}
		}
	}
};
_txtImportRules["items"] = function(data, output) {
	_txtImportRules["inventory"](data, output);
};
_txtImportRules["gear"] = function(data, output) {
	_txtImportRules["inventory"](data, output);
};
_txtImportRules["equipment"] = function(data, output) {
	_txtImportRules["inventory"](data, output);
};
_txtImportRules["talents"] = function(data, output) {
	var talentRegex = /([^\n]+)[\n]/g;
	var talents = data.split(talentRegex);
	var dataRegex = /([\w*|0-9*|\s*]*)[\s]*([\(].*[\)])/i;
	for (var i in talents) {
		var rawTalent = talents[i];
		if (rawTalent.valid()) {
			var exe = dataRegex.exec(rawTalent);
			if (exe) {
				output.talents[Object.keys(output.talents).length] = sync.newValue(exe[1].trim(), null, null, null, {"rank" : exe[2]});
			}
			else {
				output.talents[Object.keys(output.talents).length] = sync.newValue(rawTalent);
			}
		}
	}
}
_txtImportRules["feats"] = function(data, output) {
	_txtImportRules["talents"](data, output);
}
_txtImportRules["traits"] = function(data, output) {
	var skillRegex = /([^\n]+)[\n]/g;
	var skills = data.split(skillRegex);
	var dataRegex = /([\w*|0-9*|\s*]*)[\s]*([\(].*[\)])/i;
	for (var i in skills) {
		var rawSkill = skills[i];
		if (rawSkill.valid()) {
			output.tags["trait_"+rawSkill.trim()] = 1;
		}
	}
}
_txtImportRules["spellbook"] = function(data, output) {
	var itemRegex = /([^\n]+)[\n]/g;
	var items = data.split(itemRegex);
	var split = /[-|:|=|;]/;
	var firstNumber = /([0-9]+)/;
	var newItems = [];
	for (var i in items) {
		var rawItem = items[i];
		if (rawItem.valid()) {
			var item = JSON.parse(JSON.stringify(game.templates.item));
			var exe = rawItem.split(split);
			if (exe) {
				if (exe[0].replace(sync.val(item.info.quantity), "").valid()) {
					sync.val(item.info.name, exe[0].trim());
					sync.val(item.info.notes, exe[1].trim());
					output.spellbook.push(item);
				}
			}
			else {
				sync.val(item.info.name, rawItem.trim());
				output.spellbook.push(item);
			}
		}
	}
}
_txtImportRules["force"] = function(data, output) {
	_txtImportRules["spellbook"](data, output);
}
_txtImportRules["psychic"] = function(data, output) {
	_txtImportRules["spellbook"](data, output);
}
_txtImportRules["spells"] = function(data, output) {
	_txtImportRules["spellbook"](data, output);
}

_txtImportRules["spellslots"] = function(data, output) {
	var talentRegex = /([^\n]+)[\n]/g;
	var talents = data.split(talentRegex);
	var spellObj = {};
	var level = 0;
	for (var i in talents) {
		var rawTalent = talents[i];
		if (rawTalent.valid()) {
			spellObj[level] = JSON.parse(rawTalent);
			level = level + 1;
		}
	}
	output.spells = spellObj;
}

_txtImportRules["aptitudes"] = function(data, output) {
	var skillRegex = /([^\n]+)[\n]/g;
	var skills = data.split(skillRegex);
	var dataRegex = /([\w*|0-9*|\s*]*)[\s]*([\(].*[\)])/i;
	console.log(skills);
	for (var i in skills) {
		var rawSkill = skills[i];
		if (rawSkill.valid()) {
			var splitData = rawSkill.split(",");
			for (var i in splitData) {
				output.tags["apt_"+splitData[i].trim()] = 1;
			}
		}
	}
}
_txtImportRules["apts"] = function(data, output) {
	_txtImportRules["aptitudes"](data, output);
}
_txtImportRules["notes"] = function(data, output) {
	var splitReg = /([^:^=^;]+)[:=;](.+)/;
	var firstNumber = /([0-9]+)/ig;
	var itemRegex = /([^\n]+)[\n]/g;
	var bonus = /([\+-](.*)|)/;
	var override = /{([\s\S]*)}/;
	var keys = data.split(itemRegex);
	var firstNumber = /([0-9]+)/ig;
	for (var i in keys) {
		var rawData = keys[i];
		if (rawData.valid()) {
			var splitData = rawData.split(",");
			for (var j in splitData) {
				var exe = splitReg.exec(splitData[j]);
				if (exe) {
					for (var key in output.info) {
						if (key.toLowerCase() == exe[1].trim().toLowerCase() || output.info[key].name.toLowerCase() == exe[1].trim().toLowerCase()) {
							sync.rawVal(output.info[key], (exe[2] || "").trim());
						}
						else if (key == "home" && exe[1].trim().toLowerCase().match("home")) {
							sync.rawVal(output.info[key], (exe[2] || "").trim());
						}
					}

					for (var count in output.counters) {
						if (count.toLowerCase() == exe[1].trim().toLowerCase() || output.counters[count].name.toLowerCase() == exe[1].trim().toLowerCase()) {
							var numb = exe[2].match(firstNumber);
							if (numb) {
								if (count == "exp") {
									var spent = 0;
									for (var i=1; i<numb.length; i++) {
										spent = spent + parseInt(numb[i]);
									}
									output.counters[count].modifiers = {"Imported" : spent+parseInt(numb[0])};
									sync.rawVal(output.counters[count], spent);
								}
								else {
									sync.rawVal(output.counters[count], parseInt(numb[0]));
									if (numb[1]) {
										output.counters[count].max = parseInt(numb[1]);
									}
								}
							}
						}
					}
				}
			}
		}
	}
	sync.rawVal(output.info.notes, data);
}
_txtImportRules["description"] = function(data, output) {
	_txtImportRules["notes"](data, output);
}
_txtImportRules["other"] = function(data, output) {
	_txtImportRules["notes"](data, output);
}
_txtImportRules["info"] = function(data, output) {
	_txtImportRules["notes"](data, output);
}
_txtImportRules["specials"] = function(data, output) {
	var skillRegex = /([^\n]+)[\n]/g;
	var splitReg = /([^:^=^;]+)[:=;](.+)/;
	var skills = data.split(skillRegex);
	var dataRegex = /([\w*|0-9*|\s*+-]*)[\s]*([\(].*[\)])/i;
	for (var i in skills) {
		var rawSkill = skills[i];
		if (rawSkill.valid()) {
			var exe = splitReg.exec(rawSkill.trim());
			if (exe) {
				output.specials[Object.keys(output.specials).length] = sync.newValue(exe[1].trim(), exe[2].trim());
			}
			else {
				output.specials[Object.keys(output.specials).length] = sync.newValue("Special Rule", rawSkill.trim());
			}
		}
	}
}

_txtImportRules["proficiencies"] = function(data, output) {
	var skillRegex = /([^\n]+)[\n]/g;
	var splitReg = /([^:^=^;]+)[:=;](.+)/;
	var skills = data.split(skillRegex);
	var dataRegex = /([\w*|0-9*|\s*]*)[\s]*([\(].*[\)])/i;
	for (var i in skills) {
		var rawSkill = skills[i];
		if (rawSkill.valid()) {
			var splitSkill = rawSkill.split(",");
			for (var j in splitSkill) {
				var exe = splitReg.exec(splitSkill[j].trim());
				if (exe) {
					output.tags["prof_"+exe[1].trim()] = 1;
				}
				else {
					output.tags["prof_"+splitSkill[j]] = 1;
				}
			}
		}
	}
}

_txtImportRules["tags"] = function(data, output) {
	var skillRegex = /([^\n]+)[\n]/g;
	var splitReg = /([^:^=^;]+)[:=;](.+)/;
	var skills = data.split(skillRegex);
	var dataRegex = /([\w*|0-9*|\s*]*)[\s]*([\(].*[\)])/i;
	for (var i in skills) {
		var rawSkill = skills[i];
		if (rawSkill.valid()) {
			var splitSkill = rawSkill.split(",");
			for (var j in splitSkill) {
				var exe = splitReg.exec(splitSkill[j].trim());
				if (exe) {
					output.tags[exe[1].trim()] = 1;
				}
				else {
					output.tags[splitSkill[j]] = 1;
				}
			}
		}
	}
}

_txtImportRules["proficient"] = function(data, output) {
	_txtImportRules["proficiencies"](data, output);
}
_txtImportRules["proficiency"] = function(data, output) {
	_txtImportRules["proficiencies"](data, output);
}

_txtImportRules["counters"] = function(data, output) {
	var splitReg = /([^:^=^;]+)[:=;](.+)/;
	var firstNumber = /([0-9]+)/ig;
	var itemRegex = /([^\n]+)[\n]/g;
	var bonus = /(.*)(\+|-)=(.*)/;
	var override = /{([\s\S]*)}/;
	var keys = data.split(itemRegex);
	var firstNumber = /([0-9]+)/ig;
	for (var i in keys) {
		var rawData = keys[i];
		if (rawData.valid()) {
			var splitData = rawData.split(",");
			for (var j in splitData) {
				var exe = splitReg.exec(splitData[j]);
				if (exe) {
					for (var count in output.counters) {
						if (count.toLowerCase() == exe[1].trim().toLowerCase() || output.counters[count].name.toLowerCase() == exe[1].trim().toLowerCase()) {
							// modifiers
							var numb = exe[2].match(firstNumber);
							if (numb) {
								if (count == "exp") {
									var spent = 0;
									for (var i=1; i<numb.length; i++) {
										spent = spent + parseInt(numb[i]);
									}
									output.counters[count].modifiers = {"Imported" : spent+parseInt(numb[0])};
									sync.rawVal(output.counters[count], spent);
								}
								else {
									sync.rawVal(output.counters[count], parseInt(numb[0]));
									if (numb[1]) {
										output.counters[count].max = parseInt(numb[1]);
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


function char_import(text, out_char, system) {
	var reg = /\n[\t]*(traits|counters|talents|feats|inventory|gear|equipment|skills|stats|info|spells|spellbook|spellslots|psychic|aptitudes|apts|proficiency|other|description|notes|specials|proficiencies|proficient)\s*[-|:|=|;]\s*/ig
	var readData = ("\n"+text).split(reg);
	for (var i=1; i<readData.length; i=i+2) {
		var ref = readData[i];
		var rawData = readData[i+1];
		_txtImportRules[ref.toLowerCase()](rawData, out_char);
	}
}

function xmlToJson(xml) {
	// Create the return object
	var obj = {};

	if (xml.nodeType == 1) { // element
		// do attributes
		if (xml.attributes.length > 0) {
		obj["@attributes"] = {};
			for (var j = 0; j < xml.attributes.length; j++) {
				var attribute = xml.attributes.item(j);
				obj["@attributes"][attribute.nodeName] = attribute.nodeValue;
			}
		}
	} else if (xml.nodeType == 3) { // text
		obj = xml.nodeValue;
	}

	// do children
	if (xml.hasChildNodes()) {
		for(var i = 0; i < xml.childNodes.length; i++) {
			var item = xml.childNodes.item(i);
			var nodeName = item.nodeName;
			if (typeof(obj[nodeName]) == "undefined") {
				obj[nodeName] = xmlToJson(item);
			} else {
				if (typeof(obj[nodeName].push) == "undefined") {
					var old = obj[nodeName];
					obj[nodeName] = [];
					obj[nodeName].push(old);
				}
				obj[nodeName].push(xmlToJson(item));
			}
		}
	}
	return obj;
};

sync.render("ui_boxes", function(obj, app, scope) {
	var boxes = $("<div>");
	boxes.addClass("flexrow flexbetween fit-xy");

	var storageBox = $("<div>").appendTo(boxes);
	storageBox.addClass("flexcolumn flexmiddle lightoutline hover2 dropContent");
	storageBox.css("width", "50%");
	storageBox.css("cursor", "pointer");
	storageBox.sortable({
		filter : ".charContent",
		connectWith : ".dropContent",
		update : function(ev, ui) {
			if ($(ui.item).attr("gID")) {
				var gp = game.entities.data[$(ui.item).attr("gID")];
				if (gp && gp.data.list) {
					for (var gKey in gp.data.list) {
						if (gp.data.list[gKey] == $(ui.item).attr("index")) {
							gp.data.list.splice(gKey, 1);
							gp.sync("updateGroup");
							break;
						}
					}
				}
			}
			runCommand("storeAsset", {id: $(ui.item).attr("index")});
			$(ui.item).remove();
			obj.update();
		}
	});
	storageBox.click(function(){
		runCommand("retreiveStorage");

		game.locals["storage"] = game.locals["storage"] || sync.obj("storage");

		var content = $("<div>");
		content.addClass("fit-x")
		content.append("<b>Storage</b>");

		var padding = $("<div>").appendTo(content);
		padding.addClass("flexmiddle");
		padding.css("padding", "4px");

		var newApp = sync.newApp("ui_quickStorage").appendTo(padding);
		newApp.attr("_maxHeight", "10vh");
		game.locals["storage"].addApp(newApp);

		var popOut = ui_popOut({
			target : $(this),
			id : "quick-storage-popout",
			align : "bottom",
			style : {"width" : storageBox.width()}
		}, content);
	});

	var icon = genIcon("", "Drag here to move into storage");
	icon.appendTo(storageBox);

	var icon = genIcon("cloud", "Click to Quick Storage");
	icon.appendTo(storageBox);

	var importBox = $("<div>").appendTo(boxes);
	importBox.addClass("flexcolumn flexmiddle lightoutline");
	importBox.css("flex", "2");

	var icon = genIcon("question-sign", "Drag Text Files to Import");
	icon.click(function(){
		var content = $("<div>");
		content.append("<b>How do I use this?</b>");
		content.append("<p>All you have to do is your pasted sheet follows the rules below! It shouldn't take more than a couple of seconds!</p>");

		function subItem(msg) {
			var listItem = $("<li>");
			listItem.addClass("subtitle");
			listItem.css("list-style-type", "square");
			listItem.css("list-style-position", "inside");
			listItem.css("text-indent", "10%");
			var text = $("<text>").appendTo(listItem);
			text.text(msg);

			return listItem;
		}

		var list = $("<ul>").appendTo(content);
		list.css("text-indent", "5%");
		list.css("height", "auto");
		list.append("<b>Basic Rules</b>");
		list.css("list-style-type", "square");
		list.css("list-style-position", "inside");

		var listItem = $("<li>").appendTo(list);
		listItem.append("Seperate Entries ',' or a new line");

		var listItem = $("<li>").appendTo(list);
		var text = $("<text>").appendTo(listItem);
		text.text("Specify Quantitity with (<number>)");

		var listItem = $("<li>").appendTo(list);
		var text = $("<text>").appendTo(listItem);
		text.text("Specify Extra options with [<options>]");

		var listItem = $("<li>").appendTo(list);
		listItem.append("Match the title/category of any field to import");
		subItem("<Category Name> : <Line Break>").appendTo(listItem);
		subItem("<Category Data/Entries>").appendTo(listItem);

		var list = $("<ul>").appendTo(content);
		list.css("height", "auto");
		list.append("<b>Categories</b>");

		var listItem = $("<li>").appendTo(list);
		listItem.append("Aptitudes");

		subItem("<Name>").appendTo(list);
		subItem("Toughness").appendTo(list);

		var listItem = $("<li>").appendTo(list);
		listItem.append("Equipment Gear Inventory");

		subItem("<Name> (<Amount>) [d:<damage>; r:<range>; p:<penetration>]").appendTo(list);
		subItem("Shotgun (1) [d:1d10+3;r:30m;p:2;]").appendTo(list);

		var listItem = $("<li>").appendTo(list);
		listItem.append("Skills");

		subItem("<Name> (<Stat>) (<Bonus>)").appendTo(list);
		subItem("Athletics (Str) (+4)").appendTo(list);

		var listItem = $("<li>").appendTo(list);
		listItem.append("Specials");

		subItem("<Name> : <Description>").appendTo(list);
		subItem("Stout Toughness : This character does take damage").appendTo(list);

		var listItem = $("<li>").appendTo(list);
		listItem.append("Talents");

		subItem("<Name> (<Rank>)").appendTo(list);
		subItem("Sound Consitution (Rank 1)").appendTo(list);

		var listItem = $("<li>").appendTo(list);
		listItem.append("Traits");

		subItem("<Name>").appendTo(list);
		subItem("Psyker").appendTo(list);

		var listItem = $("<li>").appendTo(list);
		listItem.append("Spells Force Psychic");

		subItem("<Name> : <Description>").appendTo(list);
		subItem("Magic Missile : Launch a energy attack at an enemy").appendTo(list);


		var listItem = $("<li>").appendTo(list);
		listItem.append("Descriptions Notes Other");

		subItem("<Name> : <Value>").appendTo(list);
		subItem("Race : Gnome").appendTo(list);

		var listItem = $("<li>").appendTo(list);
		listItem.append("Stats");
		subItem("<Stat Name> : <Equation>").appendTo(list);
		subItem("Dexterity : 13+4 (or Dex : +3)").appendTo(list);

		var popOut = ui_popOut({
			target : $(this),
			id : "import-popout"
		}, content);
	});

	importBox.append(icon);
	importBox.on("dragover", function(e) {
		e.preventDefault();
		e.stopPropagation();
		$(this).addClass('boxinshadow');
	});
	importBox.on("dragleave", function(e) {
		e.preventDefault();
		e.stopPropagation();
		$(this).removeClass('boxinshadow');
	});
	importBox.bind("drop", function(e) {
		app.unbind("drop");
		e.stopPropagation();
		e.preventDefault();

		var files = e.originalEvent.dataTransfer.files;
		for (var i=0; i<files.length; i++) {
			var reader = new FileReader();
			reader.ref = i;
			reader.onload = function(e2) {
				var override = JSON.parse(JSON.stringify(game.templates.character || {}));

				char_import(e2.target.result, override);
				if (sync.val(override.info.name) == "Default Character") {
					sync.val(override.info.name, files[this.ref].name.replace(".txt", ""));
				}
				runCommand("createCharacter", override);
			}
			reader.readAsText(files[i]);
		}
		$(this).removeClass('boxinshadow');
	});

	return boxes;
});

sync.render("ui_import", function(obj, app, scope) {
  if (!obj || !obj.data) {return $("<div>");}

  scope = scope || {viewOnly: app.attr("viewOnly") == "true"};
  var data = obj.data;
  var result = data.raw;

  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");

	var tabBar = genNavBar("background alttext subtitle", "flex flexcolumn", "4px");
	tabBar.addClass("flexcolumn flex");
	tabBar.generateTab("Text", "text-background", function(parent) {
		var content = $("<div>").appendTo(parent);
		content.addClass("flex flexcolumn padding");

		var title = $("<b>Paste/Drag your text file in here </b>").appendTo(content);

		var icon = genIcon("question-sign").appendTo(title);
		icon.click(function(){
			var content = $("<div>");
			content.append("<b>How do I use this?</b>");
			content.append("<p>All you have to do is your pasted sheet follows the rules below! It shouldn't take more than a couple of seconds!</p>");

			function subItem(msg) {
				var listItem = $("<li>");
				listItem.addClass("subtitle");
				listItem.css("list-style-type", "square");
				listItem.css("list-style-position", "inside");
				listItem.css("text-indent", "10%");
				var text = $("<text>").appendTo(listItem);
				text.text(msg);

				return listItem;
			}

			var list = $("<ul>").appendTo(content);
			list.css("text-indent", "5%");
			list.css("height", "auto");
			list.append("<b>Basic Rules</b>");
			list.css("list-style-type", "square");
			list.css("list-style-position", "inside");

			var listItem = $("<li>").appendTo(list);
			listItem.append("Seperate Entries ',' or a new line");

			var listItem = $("<li>").appendTo(list);
			var text = $("<text>").appendTo(listItem);
			text.text("Specify Quantitity with (<number>)");

			var listItem = $("<li>").appendTo(list);
			var text = $("<text>").appendTo(listItem);
			text.text("Specify Extra options with [<options>]");

			var listItem = $("<li>").appendTo(list);
			listItem.append("Match the title/category of any field to import");
			subItem("<Category Name> : <Line Break>").appendTo(listItem);
			subItem("<Category Data/Entries>").appendTo(listItem);

			var list = $("<ul>").appendTo(content);
			list.append("<b>Categories</b>");

			var listItem = $("<li>").appendTo(list);
			listItem.append("Aptitudes");

			subItem("<Name>").appendTo(list);
			subItem("Toughness").appendTo(list);

			var listItem = $("<li>").appendTo(list);
			listItem.append("Equipment Gear Inventory");

			subItem("<Name> (<Amount>) [d:<damage>; r:<range>; p:<penetration>]").appendTo(list);
			subItem("Shotgun (1) [d:1d10+3;r:30m;p:2;]").appendTo(list);

			var listItem = $("<li>").appendTo(list);
			listItem.append("Skills");

			subItem("<Name> (<Stat>) (<Bonus>)").appendTo(list);
			subItem("Athletics (Str) (+4)").appendTo(list);

			var listItem = $("<li>").appendTo(list);
			listItem.append("Specials");

			subItem("<Name> : <Description>").appendTo(list);
			subItem("Stout Toughness : This character does take damage").appendTo(list);

			var listItem = $("<li>").appendTo(list);
			listItem.append("Talents");

			subItem("<Name> (<Rank>)").appendTo(list);
			subItem("Sound Consitution (Rank 1)").appendTo(list);

			var listItem = $("<li>").appendTo(list);
			listItem.append("Traits");

			subItem("<Name>").appendTo(list);
			subItem("Psyker").appendTo(list);

			var listItem = $("<li>").appendTo(list);
			listItem.append("Spells Force Psychic");

			subItem("<Name> : <Description>").appendTo(list);
			subItem("Magic Missile : Launch a energy attack at an enemy").appendTo(list);


			var listItem = $("<li>").appendTo(list);
			listItem.append("Descriptions Notes Other");

			subItem("<Name> : <Value>").appendTo(list);
			subItem("Race : Gnome").appendTo(list);

			var listItem = $("<li>").appendTo(list);
			listItem.append("Stats");
			subItem("<Stat Name> : <Equation>").appendTo(list);
			subItem("Dexterity : 13+4").appendTo(list);

			var popOut = ui_popOut({
				target : $(this),
				id : "import-popout"
			}, content);
		});

		var humanReadable = $("<textarea>").appendTo(content);
		humanReadable.addClass("flex");
		humanReadable.attr("placeholder", "Plain Text, don't worry about capitalization/formating much, its pretty flexible!\n_________\n| Example |\n--------------\nStats - \n Str: 10+3, Dex-15+3,\n\nConstitution : 12, Wisdom : 9-1\nCha ; 12, wounds : 12/14 \n\nInventory :\nMolotovs(3)[d:1d4+2;r:30m;p:1], Backpack, Shotgun\n\n Bodyarmor, 32 shoes, helm \n\nNotes : \n name : Big Roger \nRace : Giant, Size : Massive");
		div.on("dragover", function(e) {
			e.preventDefault();
			e.stopPropagation();
			$(this).addClass('boxinshadow');
		});

		div.on("dragleave", function(e) {
			e.preventDefault();
			e.stopPropagation();
			$(this).removeClass('boxinshadow');
		});
		div.unbind("drop");
		div.bind("drop", function(e) {
			e.stopPropagation();
			e.preventDefault();

			var files = e.originalEvent.dataTransfer.files;
			var multiple = (files.length > 1);
			for (var i=0; i<files.length; i++) {
				var reader = new FileReader();
				reader.ref = i;
				reader.onload = function(e2) {
					humanReadable.val(e2.target.result);
					if (multiple) {
						var override = duplicate(game.templates.character || {});

						char_import(e2.target.result, override);
						if (sync.val(override.info.name) == "Default Character") {
							sync.val(override.info.name, files[this.ref].name.replace(".txt", ""));
						}
						runCommand("createCharacter", override);
					}
					else {
						humanReadable.change();
					}
				}
				reader.readAsText(files[i]);
			}
			$(this).removeClass('boxinshadow');
		});
		humanReadable.change(function(){
			data.override = JSON.parse(JSON.stringify(game.templates.character || {}));

			char_import($(this).val(), data.override);
		});
		humanReadable.val(scope.example);

		var button = $("<button>");//.appendTo(parent);
		button.append("here");
		button.click(function(){
			$.get('http://localhost:4000/dnd_5e.txt', function(data) {
		    var myvar = data;

		    var regex = /\n(\t*)([\w|\s]*)(\?[\w|\s]+)*[=]*({[0-9]*[\(\[<])/im;
		    // construct the regex that matches the indentation and then do it

				function parseOptions(str) {
					var result = null;

					var params = str.match(regex);
					// first seperate the body from the options
					if (params) { // check for nested choices
						var options = str.substring(params.index, str.length);
						var optionsList = options.split("\n"+params[1]+")}");
						optionsList.splice(optionsList.length-1, 1);

						for (var i in optionsList) {
							var params = optionsList[i].match(regex);
							if (params) {
								// Gather all information about what can be chosen
								var choice = {};
								choice.name = params[2];
								choice.tip = params[3];
								if (!isNaN(params[4].charAt(1))) {
									choice.number = parseInt(params[4].charAt(1));
								}
								if (params[4].charAt(1) == "(" || params[4].charAt(2) == "(") {
									choice.exclusive = true;
								}
								optionsList[i] = optionsList[i].replace(params[0], "");
								result = result || [];

								choice.choices = [];
								var choiceList = optionsList[i].split("\n"+params[1]+"	>}");
								choiceList.splice(choiceList.length-1, 1);
								for (var cIndex in choiceList) {
									choiceList[cIndex] = choiceList[cIndex] + "\n"+params[1]+"	>}";
									choice.choices.push(parseData(choiceList[cIndex]));
								}
								result.push(choice);
							}
						}
					}
					return result;
				}

				function parseData(str, abort) {
					var params = str.match(regex);
					if (params) {
						var result = {};
						result.name = params[2];
						result.tip = params[3];
						result.data = str.substring(0, params.index);
						var contents = str.substring(params.index, str.length);
						var correction = contents.match("\n"+params[1]+"[>|\\]|\\)]}");
						if (correction) {
							contents = contents.substring(0, correction.index);
							contents = contents.replace(params[0], "");

							var split = contents.match(regex);
							// seperate the options from the data
							if (split) {
								result.data = contents.substring(0, split.index);
								result.choices = parseOptions(contents.substring(split.index, contents.length));
							}
							else {
								result.data = contents;
							}
						}
					}
					return result;
				}

				//build(data, buildTree);
				console.log(parseData(data));
				//var evaluated = getOption(data);
				//humanReadable.val(getOption(getOption(getOption(data).next).choices));
				//humanReadable.change();
		  });
		});

		var button = $("<button>");//.appendTo(parent);
		button.append("translate");
		button.click(function(){
			var temps = game.templates.generation;

			var strr = "";

			function parseValuee(value, suppress) {
				var returnStr = JSON.stringify(value);
				if (value instanceof Object) {
					if (value.current && value.name && !suppress) {
						returnStr = value.name + ":" + value.current;
					} // is it a sync value
					else if (value.current != null && !suppress) {
						returnStr = value.current;
					}
					return returnStr;
				}
				return value;
			}

			function generateStr(data, depth) {
				var rStr = "";
				var indent = "";
				for (var i=0; i<depth; i++) {
					indent = indent + "\t";
				}
				var linebreak = "\n" + indent;
				for (var key in data) {
					rStr = rStr + key + "-" + linebreak;
					if (data[key]) {
						for (var subkey in data[key]) {
							if (key != "spells" && !isNaN(subkey) && data[key] instanceof Object && !Array.isArray(data[key])) {
								if (game.templates.character[key][subkey]) {
									rStr = rStr + game.templates.character[key][subkey].name;
								}
								if (key == "skills") {
									rStr = rStr + parseValuee(data[key][subkey], true) + linebreak;
								}
								else {
									rStr = rStr + parseValuee(data[key][subkey], true) + linebreak;
								}
							}
							else {
								if (key == "stats" || key == "proficient" || key == "counters" || key == "info") {
									if (subkey == "saving") {
										rStr = rStr + subkey + ":";
										for (var mkey in data[key][subkey].current) {
											rStr = rStr + mkey + "-" + parseValuee(data[key][subkey].current[mkey])+",";
										}
										rStr = rStr.substring(0, rStr.length-1) + linebreak;
									}
									else {
										rStr = rStr + subkey + ":" + parseValuee(data[key][subkey]) + linebreak;
									}
								}
								else {
									rStr = rStr + parseValuee(data[key][subkey]) + linebreak;
								}
							}
						}
					}
				}
				/*if (data.stats) {
					rStr = rStr + "\n stats:";
					for (var key in data.stats) {
						rStr = rStr + key + ":" + parseValuee(data.stats[key]) + ",";
					}
				}
				if (data.inventory) {
					rStr = rStr + "\n inventory:";
					for (var key in data.inventory) {
						rStr = rStr + data.inventory[key] + ",";
					}
				}
				if (data.talents) {
					rStr = rStr + "\n talents:";
					for (var key in data.talents) {
						rStr = rStr + key + ":" + parseValuee(data.talents[key]) + ",";
					}
				}
				if (data.skills) {
					rStr = rStr + "\n skills:";
					for (var key in data.skills) {
						rStr = rStr + key + ":" + parseValuee(data.skills[key]) + ",";
					}
				}*/
				return rStr;
			}

			function recurse(choice, depth) {
				var returnStr = "";
				var indent = "";
				for (var i=0; i<depth; i++) {
					indent = indent + "\t";
				}
				var linebreak = "\n" + indent;
				if (choice instanceof Object) {
					if (choice.data) {
						returnStr = returnStr + generateStr(choice.data, depth);
					}
					if (choice.choices) {
						returnStr = returnStr + "{(" + linebreak;
						for (var key in choice.choices) {
							if (choice.choices[key].name) {
								returnStr = returnStr + "\t" + choice.choices[key].name;
							}
							else {
								returnStr = returnStr + "\t" + key;
							}
							if (choice.choices[key].tip) {
								returnStr = returnStr + "?" + choice.choices[key].tip;
							}

							returnStr = returnStr + "={<"+ linebreak +"\t\t" +recurse(choice.choices[key], depth+2)+">}" + linebreak;
						}
						returnStr = returnStr + ")}" + linebreak;
					}
				}
				return returnStr.substring(0, returnStr.length-1);
			}
			for (var i in temps[data.key]) {
				strr = strr + recurse(temps[data.key][i], 0) + "\n";
			}
			humanReadable.val(strr);
		});
	});

	if (app.attr("xml")) {
		tabBar.generateTab("XML", "open-file", function(parent) {
			if (app.attr("xml") == "true") {
			  var raw = $("<textarea>").appendTo(parent);
			  raw.addClass("fit-x");
			  raw.css("flex", "2");
			  raw.attr("placeholder", "Paste/Drag XML file into here");
				div.on("dragover", function(e) {
			    e.preventDefault();
			    e.stopPropagation();
			    $(this).addClass('boxinshadow');
				});

				div.on("dragleave", function(e) {
			    e.preventDefault();
			    e.stopPropagation();
			    $(this).removeClass('boxinshadow');
				});
				div.unbind("drop");
				div.bind("drop", function(e) {
					e.stopPropagation();
					e.preventDefault();

					var files = e.originalEvent.dataTransfer.files;
					var multiple = (files.length > 1);
					for (var i=0; i<files.length; i++) {
						var reader = new FileReader();
						reader.ref = i;
						reader.onload = function(e2) {
							raw.val(e2.target.result);
							var res = xmlToJson($.parseXML(e2.target.result));
							if (multiple) {
								if (res.nodehandler) {
									pcgen_import(res, override);
								}
								else if (res["Character"]) {
									ogg_import(res, override);
								}
								else {
									raw.val("Sorry, we haven't build support for this tool yet! Head over to /r/gamemasterapp and request we make an importer for it!");
								}

								if (sync.val(override.info.name) == "Default Character") {
									sync.val(override.info.name, files[this.ref].name.replace(".txt", ""));
								}
								runCommand("createCharacter", override);
							}
							else {
								raw.change();
							}
						}
						reader.readAsText(files[i]);
					}
					$(this).removeClass('boxinshadow');
				});
			  raw.change(function(){
			    var res = xmlToJson($.parseXML($(this).val()));
					data.override = JSON.parse(JSON.stringify(game.templates.character || {}));
					if (res.nodehandler) {
						pcgen_import(res, data.override);
					}
					else if (res["Character"]) {
						ogg_import(res, data.override);
					}
					else {
						raw.val("Sorry, we haven't build support for this tool yet! Head over to /r/gamemasterapp and request we make an importer for it!");
					}
			  });
			}
		});
	}

	/*tabBar.generateTab("Web", "cloud-download", function(parent) {
		parent.empty();
		parent.addClass("flexcolumn");
		parent.css("height", "80%");
		parent.css("padding", "1em");

		parent.append("<b style='text-align : center;'>Got your other sheets off system?<br>Try these unofficial plugins!</b>");
		var list = $("<ul>").appendTo(parent);
		list.append("<li><a href='https://chrome.google.com/webstore/detail/roll20-character-parser-d/ifcmilildkphnhpceobdlbhhffdakocf'>Roll20 DnD - 5e Sheet Parser</a></li>");
		list.append("<li><a href='https://chrome.google.com/webstore/detail/roll20-character-parser-4/bbgjpikdfcbpadbmkclkbmmlaailacgc'>Roll20 40k - Dark Heresy Sheet Parser</a></li>");
		parent.append("<div class='flexmiddle'><p><i>Got some suggestions? Want to contribute?</i> <b><a href='https://github.com/Noobulater/ttrpg-web-parsers'>check out this github repo!</a></b></p></div>");
	});*/

	tabBar.selectTab("Text");
	tabBar.appendTo(div);

  if ($("#template-hint").length > 0) {
    layout.coverlay($("#template-hint"));
  }

  return div;
});

sync.render("ui_import_web", function(obj, app, scope) {
	if (!obj || !obj.data) {return $("<div>");}

	scope = scope || {viewOnly: app.attr("viewOnly") == "true"};
	var data = obj.data;
	var result = data.raw;

	var div = $("<div>");
	div.addClass("flexcolumn fit-xy");

	var flex = $("<div>").appendTo(div);
	flex.addClass("flexrow flexbetween");
	flex.css("flex", "1");

	var humanReadable = $("<textarea>").appendTo(flex);
	humanReadable.addClass("fit-y")
	humanReadable.css("width", "30%");
	humanReadable.attr("placeholder", "Paste in content retrieved by the web-extension");
	humanReadable.change(function(){
		data.override = JSON.parse(JSON.stringify(game.templates.character || {}));
		char_import($(this).val(), data.override);
	});

  var charContainer = $("<div>").appendTo(flex);
  charContainer.css("overflow-y", "none");
  charContainer.css("overflow-x", "none");
	charContainer.css("width", "70%");

  if ($("#template-hint").length > 0) {
    layout.coverlay($("#template-hint"));
  }

	return div;
});

/*
sync.render("ui_heroImport", function(obj, app, scope) {
	var div = $("<div>");
	div.addClass("flex flexmiddle");
	div.text("Drop Files here to Import");

	div.on("dragover", function(e) {
		e.preventDefault();
		e.stopPropagation();
		$(this).addClass('boxinshadow');
	});

	div.on("dragleave", function(e) {
		e.preventDefault();
		e.stopPropagation();
		$(this).removeClass('boxinshadow');
	});
	div.unbind("drop");
	div.bind("drop", function(e) {
		e.stopPropagation();
		e.preventDefault();

		var files = e.originalEvent.dataTransfer.files;
		var multiple = (files.length > 1);
		for (var i=0; i<files.length; i++) {
			var reader = new FileReader();
			reader.ref = i;
			reader.onload = function(e2) {
				var rawText = e2.target.result;
				console.log(rawText);
				// parse XML to JSON
				// xmlToJson($.parseXML(rawText));
				var newCharacter = duplicate(game.templates.character || {});
				runCommand("createCharacter", newCharacter);
			}
			reader.readAsText(files[i]);
		}
		$(this).removeClass('boxinshadow');
	});

	return div;
});

game.components.push({
	name : "Hero Importer",
	ui : "ui_heroImport",
	basic : "Hero Lab importer",
	author : "You",
	w : 50,
	h : 50
}); // first action is the default)*/

sync.render("ui_library", function(obj, app, scope) {
  scope = scope || {viewOnly : (app.attr("viewOnly") == "true")};

  game.locals["gameLibrary"] = game.locals["gameLibrary"] || sync.obj();
  obj = game.locals["gameLibrary"];

  var div = $("<div>");
  div.addClass("flexcolumn flex");

  /*$("<b class='flexmiddle fit-x subtitle alttext'>Content Type</b>").appendTo(optionsBar);

  var curSession = $("<div>").appendTo(optionsBar);
  curSession.addClass("flexmiddle outline bold spadding white smooth hover2 highlight alttext");
  curSession.text("Current Session");
  curSession.click(function(){
    $(this).addClass("highlight alttext");
    gameList.removeClass("highlight alttext");
    obj.data = {
      a : [],
      b : [],
      c : [],
      p : [],
      v : [],
      inventory : [],
      talents : [],
      spellbook : [],
    };
    for (var i in game.entities.data) {
      var ent = game.entities.data[i];
      if (hasSecurity(getCookie("UserID"), "Visible", ent.data)) {
        if (ent.data._t == "b") {
          obj.data.b.push(ent.data);
        }
        if (ent.data._t == "c") {
          obj.data.c.push(ent.data);
          for (var i in ent.data.inventory) {
            var item = JSON.stringify(ent.data.inventory[i]);
            if (!util.contains(obj.data.inventory, item)) {
              obj.data.inventory.push(item);
            }
          }
          for (var i in ent.data.spellbook) {
            var item = JSON.stringify(ent.data.spellbook[i]);
            if (!util.contains(obj.data.spellbook, item)) {
              obj.data.spellbook.push(item);
            }
          }
        }
        if (ent.data._t == "p") {
          obj.data.p.push(ent.data);
        }
        if (ent.data._t == "v") {
          obj.data.v.push(ent.data);
          for (var i in ent.data.inventory) {
            var item = JSON.stringify(ent.data.inventory[i]);
            if (!util.contains(obj.data.inventory, item)) {
              obj.data.inventory.push(item);
            }
          }
        }
      }
    }
    for (var i in obj.data.inventory) {
      obj.data.inventory[i] = JSON.parse(obj.data.inventory[i]);
    }
    for (var i in obj.data.spellbook) {
      obj.data.spellbook[i] = JSON.parse(obj.data.spellbook[i]);
    }
    obj.data.inventory.sort(function(obj1, obj2){
      return sync.rawVal(obj1.info.name).toLowerCase().localeCompare(sync.rawVal(obj2.info.name).toLowerCase());
    });
    obj.data.spellbook.sort(function(obj1, obj2){
      return sync.rawVal(obj1.info.name).toLowerCase().localeCompare(sync.rawVal(obj2.info.name).toLowerCase());
    });
    app.removeAttr("library");
    obj.update();
  });

  var gameList = $("<div>").appendTo(optionsBar);
  gameList.addClass("flexmiddle outline bold spadding white smooth hover2");
  gameList.text("Game Library");

  gameList.click(function(){
    $(this).addClass("highlight alttext");
    curSession.removeClass("highlight alttext");*/
  var localList = game.config.data.library || [];
  obj.data = {
    a : [],
    b : [],
    c : [],
    p : [],
    v : [],
    inventory : [],
    talents : [],
    spellbook : [],
    custom : true,
  };
  if (localList) {
    // loads the content package so we can merge it's contents
    if (localList.a && localList.a.length) {
      obj.data.a = obj.data.a.concat(duplicate(localList.a));
    }
    if (localList.b && localList.b.length) {
      obj.data.b = obj.data.b.concat(duplicate(localList.b));
    }
    if (localList.c && localList.c.length) {
      obj.data.c = obj.data.c.concat(duplicate(localList.c));
    }
    if (localList.p && localList.p.length) {
      obj.data.p = obj.data.p.concat(duplicate(localList.p));
    }
    if (localList.v && localList.v.length) {
      obj.data.v = obj.data.v.concat(duplicate(localList.v));
    }
    if (localList.inventory && localList.inventory.length) {
      obj.data.inventory = obj.data.inventory.concat(duplicate(localList.inventory));
    }
    if (localList.talents && localList.talents.length) {
      obj.data.talents = obj.data.talents.concat(duplicate(localList.talents));
    }
    if (localList.spellbook && localList.spellbook.length) {
      obj.data.spellbook = obj.data.spellbook.concat(duplicate(localList.spellbook));
    }
  }

  obj.data.a.sort(function(obj1, obj2){
    return sync.rawVal(obj1.info.name).toLowerCase().localeCompare(sync.rawVal(obj2.info.name).toLowerCase());
  });
  obj.data.b.sort(function(obj1, obj2){
    return sync.rawVal(obj1.info.name).toLowerCase().localeCompare(sync.rawVal(obj2.info.name).toLowerCase());
  });
  obj.data.c.sort(function(obj1, obj2){
    return sync.rawVal(obj1.info.name).toLowerCase().localeCompare(sync.rawVal(obj2.info.name).toLowerCase());
  });
  obj.data.p.sort(function(obj1, obj2){
    return sync.rawVal(obj1.info.name).toLowerCase().localeCompare(sync.rawVal(obj2.info.name).toLowerCase());
  });
  obj.data.v.sort(function(obj1, obj2){
    return sync.rawVal(obj1.info.name).toLowerCase().localeCompare(sync.rawVal(obj2.info.name).toLowerCase());
  });

  obj.data.inventory.sort(function(obj1, obj2){
    return sync.rawVal(obj1.info.name).toLowerCase().localeCompare(sync.rawVal(obj2.info.name).toLowerCase());
  });
  obj.data.talents.sort(function(obj1, obj2){
    return sync.rawVal(obj1.name).toLowerCase().localeCompare(sync.rawVal(obj2.name).toLowerCase());
  });
  obj.data.spellbook.sort(function(obj1, obj2){
    return sync.rawVal(obj1.info.name).toLowerCase().localeCompare(sync.rawVal(obj2.info.name).toLowerCase());
  });

  /*app.attr("library", "true");
  obj.update();
  });*/


  var newApp = sync.newApp("ui_libraryBuild").appendTo(div);
  obj.addApp(newApp);

  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("flexrow flexbetween foreground spadding subtitle");

  var custom = $("<div>").appendTo(optionsBar);
  custom.addClass("flexcolumn hover2 white flex alttext lpadding flexmiddle");
  custom.css("background-image", "url('/content/games/custom.png')");
  custom.css("background-size", "cover");
  custom.css("background-repeat", "no-repeat");
  custom.css("background-position", "center");

  custom.append("<b class='flexmiddle smooth fit-x' style='background-color : rgba(0,0,0,0.8);'>Current Game</b>");

  custom.click(function(){
    obj.data = {
      a : [],
      b : [],
      c : [],
      p : [],
      v : [],
      inventory : [],
      talents : [],
      spellbook : [],
    };
    for (var i in game.config.data.library) {
      obj.data[i] = duplicate(game.config.data.library[i]);
    }
    obj.data.custom = true;
    obj.update();
  });

  var dnd5e = $("<div>").appendTo(optionsBar);
  dnd5e.addClass("flexcolumn hover2 white flex2 alttext lpadding flexmiddle");
  dnd5e.css("background-image", "url('"+("http://www.enworld.org/forum/attachment.php?attachmentid=62061&d=1402069890&stc=1")+"')");
  dnd5e.css("background-size", "cover");
  dnd5e.css("background-repeat", "no-repeat");
  dnd5e.css("background-position", "center");

  dnd5e.append("<b class='flexmiddle smooth fit-x' style='background-color : rgba(0,0,0,0.8);'>Dungeons and Dragons 5th Edition SRD</b>");

  dnd5e.click(function(){
    newApp.append("<div class='flexmiddle fit-x'><div class='loader'></div></div>");
    delete obj.data.custom;
    $.ajax({
      url : "https://files.gmforge.io/file/compendiums/dnd5e/characters.txt",
      dataType: "text",
      success : function(data) {
        obj.data.c = JSON.parse(data);
        obj.update();
      }
    });
    $.ajax({
      url : "https://files.gmforge.io/file/compendiums/dnd5e/equipment.txt",
      dataType: "text",
      success : function(data) {
        obj.data.inventory = JSON.parse(data || "[]");
        /*for (var i in obj.data.inventory) {
          if (sync.rawVal(obj.data.inventory[i].weapon.damage)) {
            sync.rawVal(obj.data.inventory[i].weapon.damage);
          }
        }*/
        obj.update();
      }
    });
    $.ajax({
      url : "https://files.gmforge.io/file/compendiums/dnd5e/spellbook.txt",
      dataType: "text",
      success : function(data) {
        obj.data.spellbook = JSON.parse(data);
        obj.update();
      }
    });
    $.ajax({
      url : "https://files.gmforge.io/file/compendiums/dnd5e/info.txt",
      dataType: "text",
      success : function(data) {
        var dummyObj = sync.obj();
        dummyObj.data = {info : JSON.parse(data)};

        var content = sync.newApp("ui_renderPage");
        content.attr("viewOnly", true);
        dummyObj.addApp(content);
        var pop = ui_popOut({
          target : $("body"),
          id : "preview-terms",
          style : {"width" : assetTypes["p"].width, "height" : assetTypes["p"].height}
        }, content);
      }
    });
  });

  var pathfinder = $("<div>").appendTo(optionsBar);
  pathfinder.addClass("flexcolumn hover2 white flex2 alttext lpadding flexmiddle");
  pathfinder.css("background-image", "url('"+("https://paizo.com/image/content/Logos/PathfinderRPGLogo_500.jpeg")+"')");
  pathfinder.css("background-size", "cover");
  pathfinder.css("background-repeat", "no-repeat");
  pathfinder.css("background-position", "center");

  pathfinder.append("<b class='flexmiddle smooth fit-x' style='background-color : rgba(0,0,0,0.8);'>Pathfinder SRD</b>");
  pathfinder.click(function(){
    delete obj.data.custom;
    newApp.append("<div class='flexmiddle fit-x'><div class='loader'></div></div>");
    $.ajax({
      url : "https://files.gmforge.io/file/compendiums/pathfinder/characters.txt",
      dataType: "text",
      success : function(data) {
        obj.data.c = JSON.parse(data || "[]");
        obj.update();
      }
    });
    $.ajax({
      url : "https://files.gmforge.io/file/compendiums/pathfinder/info.txt",
      dataType: "text",
      success : function(data) {
        var dummyObj = sync.obj();
        dummyObj.data = {info : JSON.parse(data)};

        var content = sync.newApp("ui_renderPage");
        content.attr("viewOnly", true);
        dummyObj.addApp(content);
        var pop = ui_popOut({
          target : $("body"),
          id : "preview-terms",
          style : {"width" : assetTypes["p"].width, "height" : assetTypes["p"].height}
        }, content);
      }
    });

    $.ajax({
      url : "https://files.gmforge.io/file/compendiums/pathfinder/equipment.txt",
      dataType: "text",
      success : function(data) {
        obj.data.inventory = JSON.parse(data || "[]");
        obj.update();
      }
    });
    $.ajax({
      url : "https://files.gmforge.io/file/compendiums/pathfinder/spellbook.txt",
      dataType: "text",
      success : function(data) {
        obj.data.spellbook = JSON.parse(data || "[]");
        obj.update();
      }
    });
    $.ajax({
      url : "https://files.gmforge.io/file/compendiums/pathfinder/equipment.txt",
      dataType: "text",
      success : function(data) {
        obj.data.inventory = JSON.parse(data || "[]");
        obj.update();
      }
    });
  });

  return div;
});

sync.render("ui_libraryBuild", function(obj, app, scope) {
  scope = scope || {viewOnly : (app.attr("viewOnly") == "true")};

  var data = obj.data;

  var div = $("<div>");
  div.addClass("flexcolumn flex");

  var navBar = genNavBar("foreground alttext subtitle", "flex", "6px");
  $(navBar.children()[0]).removeClass("background");
  navBar.appendTo(div);
  navBar.addClass("flex");

  function tabWrap(target, parent) {
    var search = $("<div>").appendTo(parent);
    search.addClass("outlinebottom background fit-x flexrow flexaround alttext");

    var searchIcon = genIcon("search").appendTo(search);
    searchIcon.addClass("lrpadding");
    searchIcon.attr("title", "Search");

    var searchInput = genInput({
      classes : "flex2",
      parent : search,
      placeholder : "Search Terms",
      value : app.attr("lastSearchTerm"),
    });
    searchInput.addClass("flex subtitle");
    searchInput.css("color", "#333");

    if (data.custom) {
      var insert = genIcon("share-alt", "Import").appendTo(search);
      insert.addClass("flex flexmiddle subtitle");
      insert.click(function(ev){
        var content = sync.render("ui_assetPicker")(obj, app, {
          filter : target,
          select : function(ev, ui, ent, options, entities){
            var entData = duplicate(ent.data);
            entData._s = {}; // clear security
            obj.data[target].push(entData);
            game.config.data.library = game.config.data.library || {};
            game.config.data.library[target] = obj.data[target];
            game.config.sync("updateConfig");
            obj.update();
            layout.coverlay("add-asset");
          }
        });
        var pop = ui_popOut({
          target : $("body"),
          prompt : true,
          id : "add-asset",
          title : "Add Asset",
          style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
        }, content);
        pop.resizable();
      });
    }

    var listedChars = $("<div>").appendTo(parent);
    listedChars.addClass("flexcolumn flex outlinebottom");
    listedChars.attr("_lastScrollTop", app.attr("_lastScrollTop_chars"));
    listedChars.css("overflow-y", "auto");
    listedChars.css("position", "relative");
    listedChars.scroll(function(){
      app.attr("_lastScrollTop_chars", $(this).scrollTop());
    });

    var listWrap = $("<div>").appendTo(listedChars);
    listWrap.addClass("fit-x flexcolumn flexmiddle");
    listWrap.css("position", "absolute");
    if (data.custom) {
      if (target == "inventory" || target == "spellbook") {
        listedChars.on("dragover", function(ev) {
          ev.preventDefault();
          ev.stopPropagation();
          if (!_dragTransfer && !$("#"+app.attr("id")+"-drag-overlay").length) {
        		var olay = layout.overlay({
              target : app,
              id : app.attr("id")+"-drag-overlay",
              style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
            });
            olay.addClass("flexcolumn flexmiddle alttext");
            olay.css("font-size", "2em");
            olay.css("z-index", util.getMaxZ(".ui-popout")+1);
            olay.append("<b>Drop to Insert</b>");
          }
      	});
        listedChars.on('drop', function(ev, ui ){
          ev.preventDefault();
          ev.stopPropagation();
          if (!_dragTransfer) {
            var dt = ev.originalEvent.dataTransfer||$(ui.draggable).data("dt");
            if (dt && dt.getData("OBJ")) {
              var entData = JSON.parse(dt.getData("OBJ"));
              if (entData._t == "i") {
                entData._s = {}; // clear security
                obj.data[target].push(entData);
                game.config.data.library = game.config.data.library || {};
                game.config.data.library[target] = obj.data[target];
                game.config.sync("updateConfig");
                obj.update();
              }
            }
          }
          layout.coverlay(app.attr("id")+"-drag-overlay");
        });
      	listedChars.on("dragleave", function(ev) {
          ev.preventDefault();
          ev.stopPropagation();
          layout.coverlay(app.attr("id")+"-drag-overlay");
      	});
      }
      else {
        listedChars.addClass("dropContent");
        listedChars.sortable({
          handle : ".nofilter",
          over : function(ev, ui){
            if ($(ui.item).attr("index")) {
              if (!$("#"+app.attr("id")+"-drag-overlay").length) {
                var olay = layout.overlay({
                  target : app,
                  id : app.attr("id")+"-drag-overlay",
                  style : {"pointer-events" : "none", "background-color" : "rgba(0,0,0,0.5)"}
                });
                olay.addClass("flexcolumn flexmiddle alttext");
                olay.css("font-size", "2em");
                olay.append("<b>Drop to Insert</b>");
                olay.css("z-index", util.getMaxZ(".ui-popout")+1);
              }
            }
          },
          out : function(ev, ui) {
            layout.coverlay(app.attr("id")+"-drag-overlay");
          },
          update : function(ev, ui) {
            if ($(ui.item).attr("src")) {
              if ($(ui.item).attr("src") == "state") {
                game.state.update(); // refresh the list
              }
              else if ($(ui.item).attr("src") == "players") {
                game.players.update(); // refresh the list
              }
              else {
                game.entities.data[$(ui.item).attr("src")].update(); // refresh the list
              }
            }
            else {
              game.entities.update(); // refresh the list
            }
            // create a piece if there is an entity reference
            if ($(ui.item).attr("index")) {
              var ent = getEnt($(ui.item).attr("index"));
              if (ent && hasSecurity(getCookie("UserID"), "Rights", ent.data) && (ent.data._t == "c" || ent.data._t == "b" || ent.data._t == "p")) {
                var entData = duplicate(ent.data);
                entData._s = {}; // clear security
                obj.data[entData._t].push(entData);
                game.config.data.library = game.config.data.library || {};
                game.config.data.library[entData._t] = obj.data[entData._t];
                game.config.sync("updateConfig");
                obj.update();
                layout.coverlay("add-asset");
              }
            }
            layout.coverlay(app.attr("id")+"-drag-overlay");
            ev.stopPropagation(); //don't go through boards
          }
        });
      }
    }
    searchInput.keyup(function(){
      var str = ($(this).val() || "").toLowerCase();
      listWrap.children().each(function(){
        if ($(this).attr("index") && str) {
          var ent = obj.data[target][$(this).attr("index")];
          if (ent) {
            var name = (sync.rawVal(ent.info.name) || "").toLowerCase();
            var hide = false;
            for (var tag in ent.tags) {
              if (tag.match(String(str))) {
                hide = true;
                break;
              }
            }
            if (name.match(String(str))) {
              hide = true;
            }
            if (!hide) {
              $(this).hide();
            }
            else {
              $(this).show();
            }
          }
        }
        else {
          $(this).fadeIn();
        }
      });
    });

    for (var i in obj.data[target]) {
      var dummyObj = sync.obj(-1);
      dummyObj.data = obj.data[target][i];
      var charList = sync.render("ui_ent")(dummyObj, app, {
        height : 40,
        click : function(ev, ui, charObj) {
          var newApp;
          var width = "40vw";
          var height = "70vh";
          if (target[0] == "s") {
            width = assetTypes["i"].width;
            height = assetTypes["i"].height;
          }
          else {
            width = assetTypes[target[0]].width;
            height = assetTypes[target[0]].height;
          }
          if (target == "b") {
            newApp = sync.newApp("ui_board");
          }
          else if (target == "c") {
            newApp = sync.newApp("ui_characterSheet");
            newApp.attr("from", "ui_characterSummary");
          }
          else if (target == "p") {
            newApp = sync.newApp("ui_renderPage");
          }
          /*else if (target == "v") {
            newApp = sync.newApp("ui_vehicle");
          }*/
          else if (target == "inventory" || target == "spellbook") {
            newApp = sync.newApp("ui_renderItem", null, {viewOnly : true, itemData : charObj.data, spellBool : (target == "spellbook")});
          }
          newApp.attr("viewOnly", "true");

          charObj.addApp(newApp);
          var pop = ui_popOut({
            target : app,
            title : sync.rawVal(charObj.data.info.name),
            minimize : true,
            dragThickness : "0.5em",
            style : {"width" : width, "height" : height},
          }, newApp);
          pop.resizable();
        },
        contextmenu : function(ev, plate, charObj) {
          if (obj.data.custom) {
            var index = plate.attr("index");
            var actionsList = [{
              name : "Remove",
              click : function(ev, ui){
                obj.data[target].splice(index, 1);
                game.config.data.library = game.config.data.library || {};
                game.config.data.library[target] = obj.data[target];
                game.config.sync("updateConfig");
                obj.update();
              }
            }];
            ui_dropMenu(plate, actionsList, {id : "remove-library"});
          }
        }
      });
      charList.appendTo(listWrap);
      charList.addClass("fit-x");
      charList.attr("draggable", true);
      charList.attr("index", i);
      charList.on("dragstart", function(ev){
        var dt = ev.originalEvent.dataTransfer;
        var tempObj = duplicate(obj.data[target][$(this).attr("index")]);
        tempObj.tags = tempObj.tags || {};
        if (_down["17"]) {
          delete tempObj._flags["temp"];
        }
        else {
          tempObj._flags["temp"] = true;
        }
        dt.setData("OBJ", JSON.stringify(tempObj));
        if (target == "spellbook") {
          dt.setData("spell", true);
        }
      });
    }
    if (listWrap.children().length > 1) {
      listWrap.children().each(function(){
        $(this).removeClass("outline");
        $(this).addClass("outlinebottom");
      });
    }
  }

  /*navBar.generateTab("Adventures", "book", function(parent) {
    app.attr("tab", "Adventures");
  });*/
  if (obj.data.c && obj.data.c.length || obj.data.custom) {
    navBar.generateTab("Actors", "user", function(parent) {
      tabWrap("c", parent);

      app.attr("tab", "Actors");
    });
  }
  if (obj.data.inventory && obj.data.inventory.length || obj.data.custom) {
    navBar.generateTab("Items", "briefcase", function(parent) {
      tabWrap("inventory", parent);

      app.attr("tab", "Items");
    });
  }
  if (obj.data.b && obj.data.b.length || obj.data.custom) {
    navBar.generateTab("Maps", "globe", function(parent) {
      tabWrap("b", parent);

      app.attr("tab", "Maps");
    });
  }
  if (obj.data.p && obj.data.p.length || obj.data.custom) {
    navBar.generateTab("Resources", "duplicate", function(parent) {
      tabWrap("p", parent);

      app.attr("tab", "Resources");
    });
  }

  if (obj.data.spellbook && obj.data.spellbook.length || obj.data.custom) {
    navBar.generateTab("Spells", "flash", function(parent) {
      tabWrap("spellbook", parent);

      app.attr("tab", "Spells");
    });
  }

  if (obj.data.talents && obj.data.talents.length) {
    navBar.generateTab("Talents", "screenshot", function(parent) {
      var searchBar = $("<div>").appendTo(parent);
      searchBar.addClass("fit-x flexrow flexwrap background alttext");

      var searchIcon = genIcon("search").appendTo(searchBar);
      searchIcon.addClass("lrpadding");
      searchIcon.attr("title", "Search");

      var searchInput = genInput({
        parent : searchBar,
        placeholder : "Search Terms",
        value : app.attr("lastSearchTerm"),
      });
      searchInput.addClass("flex subtitle");
      searchInput.css("color", "#333");

      var wrapper = $("<div>").appendTo(parent);
      wrapper.addClass("flexcolumn flex outlinebottom");

      var contentWrapper = $("<div>").appendTo(wrapper);
      contentWrapper.addClass("fit-x flex");
      contentWrapper.css("overflow", "auto");
      searchInput.keyup(function(){
        listWrap.children().hide();
        var term = ($(this).val() || "").toLowerCase();
        listWrap.children().each(function(){
          var ent = obj.data.talents[$(this).attr("index")];
          if ((ent.name || "").toLowerCase().match(term)) {
            $(this).show();
          }
        });
      });

      for (var index in obj.data.talents) {
        var wrapper = $("<div>").appendTo(contentWrapper);
        wrapper.addClass("flexrow flexbetween outlinebottom");
        wrapper.css("background-color", "white");
        wrapper.attr("draggable", true);
        wrapper.attr("index", index);
        wrapper.on("dragstart", function(ev){
          var dt = ev.originalEvent.dataTransfer;
          dt.setData("OBJ", JSON.stringify(obj.data.talents[$(this).attr("index")]));
          dt.setData("key", $(this).attr("index"));
          if (target == "spellbook") {
            dt.setData("spell", true);
          }
        });

        var talentCont = $("<div>").appendTo(wrapper);
        talentCont.addClass("flex hover2 flexbetween");
        talentCont.css("cursor", "pointer");
        talentCont.attr("index", index);
        talentCont.css("padding-bottom", "1em");
        talentCont.click(function(){
          var content = $("<div>");
          content.append(sync.render("ui_renderTalent")(obj, app, {talentData : obj.data.talents[$(this).attr("index")], viewOnly : scope.viewOnly}));
          ui_popOut({
            target : $(this),
            id : "content-preview",
            align : "bottom",
            style : {"max-width" : "50vw"}
          }, content);
        });
        var talentData = duplicate(obj.data.talents[index]);
        sync.render("ui_renderTalent")(obj, app, {talentData: talentData, viewOnly: true}).appendTo(talentCont);
      }

      app.attr("tab", "Talents");
    });
  }
  /*navBar.generateTab("Vehicles", "plane", function(parent) {
    tabWrap("v", parent);

    app.attr("tab", "Vehicles");
  });*/

  navBar.selectTab(app.attr("tab") || "Items");

  $("<i class='subtitle fit-x flexmiddle'>Drag and drop to create new assets</i>").appendTo(div);

  return div;
});

sync.render("ui_media", function(obj, app, scope){
  if (!obj) {
    obj = game.media;
  }
  var div = $("<div>");
  div.addClass("alttext flex flexcolumn");
  var data = {};
  if (obj && obj.data) {
    data = obj.data;
  }


  var reg = /(v=)([^&]*)/;
  var reg1 = /[^\/]*([^&^?\/]*)$/;
  var time = /[^?]*t=([^&^?]*)$/;
  var list = /[^?]*list=([^&^?]*)$/;
  var index = /[^?]*index=([^&^?]*)$/;
  function getData(val) {
    var returnData = {};
    var res = reg.exec(val);
    if (res) {
      returnData.video = res[2];
    }
    else {
      var res = reg1.exec(val);
      if (res) {
        returnData.video = res[0].split("?")[0];
      }
    }
    var timeReg = time.exec(val);
    if (timeReg) {
      returnData.time = timeReg[1];
    }
    /*var listReg = list.exec(val);
    console.log(listReg);
    if (listReg) {
      returnData.list = listReg[1];
    }
    returnData.list = "LFgquLnL59ak-4CpDgS6u0eXKtz_VgGfX";
    var indexReg = index.exec(val);
    console.log(indexReg);
    if (indexReg) {
      returnData.index = indexReg[1];
    }
    console.log(returnData);*/
    return returnData;
  }

  var searchDiv = $("<div>").appendTo(div);
  searchDiv.addClass("flexrow lpadding outline background");
  searchDiv.css("font-size", "1.4em");

  var searchInput = genInput({
    classes : "line middle flex",
    parent : searchDiv,
    placeholder : "Search for Videos",
  });
  searchInput.bind("paste", function(e) {
    if (hasSecurity(getCookie("UserID"), "Assistant Master") && util.matchYoutube(e.originalEvent.clipboardData.getData('text'))) {
      runCommand("media", {cmd : "update", data : getData(e.originalEvent.clipboardData.getData('text'))});
      setTimeout(function(){searchInput.val("")},1);
    }
  });
  searchInput.bind("input", function(){
    function getRequest(searchTerm) {
      url = 'https://www.googleapis.com/youtube/v3/search';
      var params = {
        part: 'snippet',
        key: 'AIzaSyBT-c44FBm7008tgjjrXtewMRo2IZR_HUo',
        q: searchTerm,
        maxResults : 8,
      };

      $.getJSON(url, params, function (searchTerm) {
        showResults(searchTerm);
      });
    }
    if ($(this).val()) {
      getRequest($(this).val().split("&ab_channel=")[0]);
    }
    else {
      searchList.empty();
    }
  });


  var searchList = $("<div>").appendTo(div);
  searchList.addClass("flexcolumn flex");

  /*var video = genInput({
    parent: searchDiv,
    classes : "line middle",
    placeholder: "URL",
    value: data.video,
    style: {"width": "100px"},
  });
  video.change(function(){
    if ($(this).val()) {
      if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
        runCommand("media", {cmd : "update", data : getData()});
      }
      else {
        runCommand("reaction", $(this).val());
      }
      $(this).val("");
      $("#media-player").hide();
    }
  });*/


  function showResults(results) {
    var html = "";
    var entries = results.items;
    searchList.empty();
    $.each(entries, function (index, value) {
      var resultDiv = $("<div>").appendTo(searchList);
      resultDiv.addClass("flexrow outlinebottom hover2 white flex");
      resultDiv.attr("videoId", value.id.videoId);
      resultDiv.css("color", "#333");
      resultDiv.css("text-shadow", "none");

      var img = $("<div>").appendTo(resultDiv);
      img.addClass("flex");
      img.css("background-image", "url('"+value.snippet.thumbnails.high.url+"')");
      img.css("background-size", "contain");
      img.css("background-position", "center");
      img.css("background-repeat", "no-repeat");

      var title = $("<p>").appendTo(resultDiv);
      title.addClass("bold flex2 flexmiddle");
      title.text(value.snippet.title);

      resultDiv.click(function(){
        if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
          runCommand("media", {cmd : "update", data : {video : $(this).attr("videoId")}});
        }
        else {
          runCommand("reaction", "https://www.youtube.com/watch?v="+$(this).attr("videoId"));
        }

        $("#media-player").hide();
      });
    });
  }

  return div;
});

sync.render("ui_editPage", function(obj, app, scope){
  if (!obj) {
    var retDiv = $("<div>");

    var butt = $("<button>Click to Refresh</button>");
    butt.click(function(){
      retDiv.empty();
      retDiv.append(sync.render("ui_editPage")(obj, app, scope));
    });
    butt.appendTo(retDiv);

    sync.render("ui_entList")(obj, app, {
      filter : "p",
      click : function(ev, ui, ent) {
        ent.addApp(app);
      }
    }).appendTo(retDiv);

    return retDiv;
  }
  var data = obj.data;
  var info = data.info;

  if (info.img.modifiers && data._t != "c") {
    sync.modifier(obj.data.info.notes, "style", duplicate(info.img.modifiers));
    delete obj.data.info.img.modifiers;
  }

  scope = scope || {viewOnly: (app.attr("viewOnly") == "true"), autoSave : app.attr("autoSave") == "true", entry : app.attr("entry") == "true", hideOptions : app.attr("hideOptions") == "true"};

  if (game.locals[app.attr("id")+"-edit-page"] != null) {
    data = game.locals[app.attr("id")+"-edit-page"].data;
    info = game.locals[app.attr("id")+"-edit-page"].data.info;
  }
  else {
    game.locals[app.attr("id")+"-edit-page"] = game.locals[app.attr("id")+"-edit-page"] || sync.obj();
    game.locals[app.attr("id")+"-edit-page"].data = duplicate(obj.data);
  }

  var div = $("<div>");
  div.addClass("flexcolumn fit-y");

  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("background alttext flexrow flexbetween");
  if (scope.noOptions) {
    optionsBar.hide();
  }

  if (obj.data._t != "c") {
    var namePlate = $("<div>").appendTo(optionsBar);
    namePlate.addClass("flexrow flexmiddle");

    var config = $("<div>").appendTo(namePlate);
    config.addClass("flexcolumn flexmiddle lrmargin");

    var security = genIcon("lock").appendTo(config);
    security.attr("title", "Configure who can access this");
    security.click(function(){
      var content = sync.newApp("ui_rights");
      obj.addApp(content);

      var frame = ui_popOut({
        target : $(this),
        prompt : true,
        align : "bottom",
        id : "ui-rights-dialog",
      }, content);
    });

    var del = genIcon("refresh").appendTo(config);
    del.addClass("destroy bold");
    del.attr("title", "Clear Notes");
    del.click(function(){
      ui_prompt({
        target : $(this),
        confirm : "Confirm Delete",
        click : function() {
          sync.rawVal(obj.data.info.notes, "");
          obj.sync("updateAsset");
        }
      });
    });

    var imgWrap = $("<div>").appendTo(namePlate);
    imgWrap.addClass("flex flexcolumn lrmargin");
    imgWrap.css("width", "35px");
    imgWrap.css("height", "35px");

    var img = sync.render("ui_image")(obj, app, {lookup : "info.img", viewOnly : scope.viewOnly}).appendTo(imgWrap);
    img.addClass("white smooth outline");

    var nameWrap = $("<div>").appendTo(namePlate);
    nameWrap.addClass("flexrow lrmargin");

    var title = genInput({
      parent : nameWrap,
      classes : "line",
      title : "Change this page's name",
      value : sync.rawVal(obj.data.info.name),
    });
    title.attr("title", "Change this page's Name");
    title.change(function(){
      sync.rawVal(obj.data.info.name, $(this).val());
      obj.sync("updateAsset");
    });

    if (obj.data._t == "p") {
      var select = $("<select>").appendTo(nameWrap);
      select.addClass("subtitle lrmargin");
      select.css("width", "100px");
      select.css("color", "#333");
      select.css("text-shadow", "none");

      for (var key in util.resourceTypes) {
        select.append("<option>"+key+"</option>");
      }
      select.children().each(function(){
        if ($(this).text() == sync.rawVal(obj.data.info.mode)) {
          $(this).attr("selected", "selected");
        }
      });
      select.change(function(){
        if (!obj.data.info.mode) {
          obj.data.info.mode = sync.newValue("Mode");
        }
        sync.rawVal(obj.data.info.mode, $(this).val());
        obj.sync("updateAsset");
      });

      var live = genIcon("eye-open", "View").appendTo(nameWrap);
      live.addClass("lrmargin subtitle flexmiddle");
      live.attr("title", "Creates a popup previewing your changes");
      live.css("text-align", "left");
      live.click(function(){
        var content = sync.newApp("ui_renderPage");
        content.attr("viewOnly", "true");
        content.attr("preview", "true");
        game.locals[app.attr("id")+"-edit-page"].addApp(content);

        var pop = ui_popOut({
          target : app,
          id : "live-preview-"+app.attr("id"),
          align : "right",
          title : "Live Preview",
          style : {width : assetTypes["p"].width, height : assetTypes["p"].height},
        }, content);
        pop.resizable();
      });

      /*
      var recover = genIcon("refresh", "Recover").appendTo(recoverWrap);
      recover.attr("title", "Check the caches for a backup");
      recover.click(function(){
        var list = $("<div>");
        list.addClass("flexcolumn");

        for (var key in game.locals) {
          if (key.match("-edit-page") && game.locals[key]) {
            var optionWrap = $("<div>").appendTo(list);
            optionWrap.addClass("spadding outline smooth hover2 bold flexmiddle");
            optionWrap.append(sync.rawVal(game.locals[key].data.info.name));
            optionWrap.attr("key", key);
            optionWrap.click(function(){
              var key = $(this).attr("key");
              var content = $("<div>");
              content.addClass("flexcolumn flex");

              var render = sync.newApp("ui_renderPage").appendTo(content);
              render.attr("viewOnly", true);
              game.locals[key].addApp(render);

              var confirm = $("<button>").appendTo(content);
              confirm.addClass("highlight alttext spadding");
              confirm.append("Restore to this version");
              confirm.click(function(){
                var old = duplicate(obj.data.info);
                obj.data.info = duplicate(game.locals[key].data.info);
                game.locals[key].data.info = old;
                obj.update();
                layout.coverlay(key+"-recover");
              });

              var pop = ui_popOut({
                target : app,
                id : key+"-recover",
                align : "right",
                style : {"width" : assetTypes["p"].width, "height" : assetTypes["p"].height}
              }, content);
              pop.resizable();
            });
          }
        }

        var pop = ui_popOut({
          target : app,
          id : app.attr("id")+"-recover",
        }, list);
        pop.resizable();
      });
      */
    }
  }

  var content = $("<div>").appendTo(div);
  content.addClass("flexcolumn flex");
  if (sync.rawVal(obj.data.info.mode) == "HTML") {
    var editorContent = $("<textarea>").appendTo(content);
    editorContent.addClass("flex subtitle");
    editorContent.attr("id", "adventure-editor-"+app.attr("id"));
    editorContent.val(sync.rawVal(info.notes));

    var examples = $("<div>").appendTo(content);
    examples.addClass("flexaround subtitle");

    var spaceWars = $("<a>").appendTo(examples);
    spaceWars.text("Checkout or example : Space Wars Intro!");
    spaceWars.click(function(){
      editorContent.val(spacewars);
      editorContent.change();
    });
    var saveWrap = $("<div>").appendTo(optionsBar);
    saveWrap.addClass("flexcolumn flexmiddle lrmargin");

    if (obj.data._t == "p") {
      var save = genIcon("book", "Finalize").appendTo(saveWrap);
      save.attr("title", "Finalize Page");
      save.click(function(){
        app.attr("from", "ui_editPage");
        app.attr("ui-name", "ui_renderPage");
        sync.rawVal(obj.data.info.notes, editorContent.val());
        obj.sync("updateAsset");
        game.locals[app.attr("id")+"-edit-page"] = null;
      });
    }

    var save = genIcon("floppy-disk", "Save ");
    save.appendTo(saveWrap);
    save.attr("title", "Save Changes");
    save.click(function(){
      if (app.attr("targetApp")) {
        $("#"+app.attr("targetApp")).removeAttr("viewingNotes");
      }

      save.text("Save");
      sync.rawVal(obj.data.info.notes, editorContent.val());
      obj.sync("updateAsset");
      game.locals[app.attr("id")+"-edit-page"] = null;
      if (app.attr("saveClose")) {
        layout.coverlay(app.attr("saveClose"));
      }
    });

    editorContent.keyup(function(){
      sync.rawVal(game.locals[app.attr("id")+"-edit-page"].data.info.notes, $(this).val());
      game.locals[app.attr("id")+"-edit-page"].update();

      if (scope.autoSave) {
        sync.rawVal(obj.data.info.notes, $(this).val());
      }
      else {
        save.get(0).innerHTML = save.get(0).innerHTML.replace("Save ", "Save*");
      }
    });
  }
  else if (util.resourceTypes[sync.rawVal(obj.data.info.mode)] && util.resourceTypes[sync.rawVal(obj.data.info.mode)].edit) {
    util.resourceTypes[sync.rawVal(obj.data.info.mode)].edit(obj, app, scope, content)
  }
  else {
    var saveWrap = $("<div>").appendTo(optionsBar);
    saveWrap.addClass("flexcolumn flexmiddle lrmargin");

    if (obj.data._t == "p") {
      var save = genIcon("book", "Finalize").appendTo(saveWrap);
      save.attr("title", "Finalize Page");
      save.click(function(){
        app.attr("from", "ui_editPage");
        app.attr("ui-name", "ui_renderPage");
        sync.rawVal(obj.data.info.notes, tinyMCE.get("adventure-editor-"+app.attr("id")).getContent({format : 'raw'}));
        obj.sync("updateAsset");
        game.locals[app.attr("id")+"-edit-page"] = null;
      });
    }

    var editorWrap = $("<div>").appendTo(content);
    editorWrap.addClass("");

    var editorContent = $("<textarea>").appendTo(editorWrap);
    editorContent.attr("id", "adventure-editor-"+app.attr("id"));
    editorContent.attr("maxlength", "10000");
    editorContent.attr("placeholder", "");
    editorContent.val(unpurge(sync.rawVal(info.notes)));
    editorContent.css("opacity", "0");
    setTimeout(function(){
      editorContent.css("opacity", "");
      tinymce.execCommand('mceRemoveEditor', true, "adventure-editor-"+app.attr("id"));
      var entNames = [];
      for (var i in game.entities.data) {
        var ent = game.entities.data[i];
        if (hasSecurity(getCookie("UserID"), "Visible", ent.data) && ent.data.info && sync.rawVal(ent.data.info.name) && sync.rawVal(ent.data.info.name).length > 3) {
          entNames.push({name : sync.rawVal(ent.data.info.name), id : ent.id()});
        }
      }
      tinymce.init({
        toolbar_items_size : 'small',
        selector : "#adventure-editor-"+app.attr("id"),
        menubar : false,
        themes : "custom",
        skin : "light",
        plugins : [
          'advlist autolink textcolor lists link image charmap print preview anchor',
          'searchreplace visualblocks code fullscreen hr spellchecker',
          'insertdatetime media contextmenu paste code mention visualblocks placeholder'
        ],
        content_style: ".mce-content-body {font-size:12px;}",
        browser_spellcheck : true,
        mentions : {
          delimiter : "@",
          delay : "100",
          source: entNames,
          insert: function(item) {
            return "<a href='|asset|="+item.id+"'>"+item.name+"</a>";
          }
        },
        extended_valid_elements : "div[data]",
        //toolbar : 'undo redo | insert | styleselect visualblocks | bold italic | forecolor backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media ',
        toolbar : "title subtitle bold italic line | alignleft aligncenter alignright | outdent indent | forecolor backcolor | bullist numlist",
        contextmenu : "underline strikethrough | link image inserttable fileLink audioLink | assetLink settingLink effectLink combatLink rollTable macroLink | visualblocks",
        resize : false,
        height : 50,
        pagebreak_split_block: true,
        setup : function(editor) {
          editor.addButton('title', {
            text: "H1",
            tooltip : "Header",
            onclick: function () {
              var selection = tinyMCE.get("adventure-editor-"+app.attr("id")).selection.getContent({'format': 'text'});
              if (selection) {
                selection = selection.trim();
              }
              tinyMCE.get("adventure-editor-"+app.attr("id")).execCommand('mceInsertContent', false, "<h1 style='margin:0; font-size:3.0em; font-weight:bolder;'>"+selection+"</h1><hr class='h1' style='display : block; outline : none; border : none; width : 100%; height : 4px; background : grey; margin-top:0px; margin-bottom:0.5em;'></hr><p></p>");
            },
            onpostrender : function() {
              var btn = $(this.$el[0]).find(".mce-txt");
              btn.css("font-weight", "bold");
              btn.css("font-size", "1.2em");
            }
          });
          editor.addButton('subtitle', {
            text: "H2",
            tooltip : "Sub Header",
            onclick: function () {
              var selection = tinyMCE.get("adventure-editor-"+app.attr("id")).selection.getContent({'format': 'text'});
              if (selection) {
                selection = selection.trim();
              }
              tinyMCE.get("adventure-editor-"+app.attr("id")).execCommand('mceInsertContent', false, "<h2 style='margin:0; font-size:1.4em; font-weight:bold;'>"+selection+"</h2><hr class='h2' style='display : block; outline : none; border : none; width : 100%; height : 1px; background : grey; margin-top:0px; margin-bottom:0.5em;'></hr><p></p>");
            },
            onpostrender : function() {
              var btn = $(this.$el[0]).find(".mce-txt");
              btn.css("font-weight", "bold");
            }
          });

          editor.addButton('line', {
            icon : "hr",
            tooltip : "Horizontal Break",
            onclick: function () {
              tinyMCE.get("adventure-editor-"+app.attr("id")).execCommand('mceInsertContent', false, "<hr style='display : block; width : 100%; height : 2px; background-color : grey; margin-top:0px; margin-bottom:1em;'></hr>");
            },
            onpostrender : function() {
              var btn = $(this.$el[0]).find(".mce-txt");
              btn.css("font-weight", "bold");
            }
          });
          editor.addMenuItem('fileLink', {
            text: "File",
            onclick: function() {
              var content = sync.render("ui_filePicker")(obj, app, {allowExternal : true, change : function(ev, ui, val){
                tinyMCE.get("adventure-editor-"+app.attr("id")).execCommand('mceInsertContent', false, "<img src='"+val+"' width='"+(editorWrap.width()-30)+"'></img>");
                layout.coverlay("image-selection");
              }});

              var pop = ui_popOut({
                target : editorWrap,
                prompt : true,
                id : "image-selection",
                style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
              }, content);
              pop.resizable();
            }
          });

          editor.addMenuItem('audioLink', {
            text: "Sound",
            onclick: function() {
              var content = sync.render("ui_filePicker")(obj, app, {allowExternal : true, filter : "audio", change : function(ev, ui, val, name){
                tinyMCE.get("adventure-editor-"+app.attr("id")).execCommand('mceInsertContent', false, "<a href='sound"+val+"'>"+name+"</a>");
                layout.coverlay("image-selection");
              }});

              var pop = ui_popOut({
                target : editorWrap,
                prompt : true,
                id : "image-selection",
                style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
              }, content);
              pop.resizable();
            }
          });

          editor.addMenuItem('assetLink', {
            text: "Asset",
            onclick: function () {
              var ignore = {};
              ignore[obj.id()] = true;
              var content = sync.render("ui_assetPicker")(obj, app, {
                rights : "Visible",
                ignore : ignore,
                select : function(ev, ui, ent, options, entities){
                  var name = sync.rawVal(ent.data.info.name);
                  var img = (sync.rawVal(ent.data.info.img) || "/content/icons/blankchar.png");
                  var id = ent.id();
                  if (ent.data._t == "p" && sync.rawVal(ent.data.info.mode) == "Roll Table") {
                    var tableStr = "<table style='width : 100%;'>";

                    var tableData;

                    if (sync.rawVal(ent.data.info.notes) && sync.rawVal(ent.data.info.notes)[0] == "{") {
                      try {
                        tableData = JSON.parse(sync.rawVal(ent.data.info.notes));
                      }
                      catch (e) {
                        tableData = {headers : [], contents : []};
                      }
                    }
                    else {
                      tableData = {headers : [], contents : []};
                    }

                    tableStr += "<tr>";
                    for (var i=0; i<tableData.headers.length; i++) {
                      var contentData = tableData.headers[i];

                      tableStr += "<td>"+(contentData.name || "")+"</td>";
                    }
                    tableStr += "</tr>";
                    for (var i=0; i<tableData.contents.length; i++) {
                      var contentData = tableData.contents[i];

                      tableStr += "<tr><td>"+(contentData.name || "")+"</td><td>"+(contentData.value || "")+"</td></tr>";
                    }
                    tableStr += "</table>";

                    var str = "";
                    if (sync.rawVal(ent.data.info.name) && sync.rawVal(ent.data.info.name).trim()) {
                      str += "<h2 style='margin:0; font-size:1.4em; font-weight:bold;'>"+sync.rawVal(ent.data.info.name)+"</h2><hr class='h2' style='display : block; outline : none; border : none; width : 100%; height : 1px; background : grey; margin-top:0px;'></hr>";
                    }
                    str += tableStr;

                    tinyMCE.get("adventure-editor-"+app.attr("id")).execCommand('mceInsertContent', false, str);
                  }
                  else {
                    tinyMCE.get("adventure-editor-"+app.attr("id")).execCommand('mceInsertContent', false, "<a href='|asset|="+id+"'>"+(name || id)+"</a>");
                  }

                  layout.coverlay("add-asset");
                }
              });
              var pop = ui_popOut({
                target : $("body"),
                prompt : true,
                id : "add-asset",
                title : "Add Asset Link...",
                style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
              }, content);
              pop.resizable();
            }
          });

          editor.addMenuItem('effectLink', {
            text: "Special Effects",
            onclick: function () {
              var settingObj = sync.obj();
              settingObj.data = {setting : {}};

              var content = $("<div>");
              content.addClass("flexcolumn flex flexmiddle foreground");

              for (var key in util.effects) {
                var effectButton = $("<button>").appendTo(content);
                effectButton.addClass("background alttext");
                effectButton.text(key);
                effectButton.css("min-width", "200px");
                effectButton.click(function(){
                  tinyMCE.get("adventure-editor-"+app.attr("id")).execCommand('mceInsertContent', false, "<a href='effect_"+$(this).text()+"'>"+$(this).text()+"</a>");
                  layout.coverlay("effect-selection");
                });
              }

              var pop = ui_popOut({
                target : editorWrap,
                title : "Special Effects",
                id : "effect-selection",
              }, content);
              pop.resizable();
            }
          });

          editor.addMenuItem('settingLink', {
            text: "Time / Weather / Temp",
            onclick: function () {
              var settingObj = sync.obj();
              settingObj.data = {setting : {}};

              var content = $("<div>");
              content.addClass("background flexcolumn flex flexmiddle spadding");

              var newApp = sync.newApp("ui_setting").appendTo(content);
              settingObj.addApp(newApp);

              var button = $("<button>").appendTo(content);
              button.addClass("fit-x flexmiddle");
              button.append("Confirm");
              button.click(function(){
                tinyMCE.get("adventure-editor-"+app.attr("id")).execCommand('mceInsertContent', false, "<a href='setting"+JSON.stringify(settingObj.data)+"'>"+"Setting"+"</a>");
                layout.coverlay("setting-selection");
              });

              var pop = ui_popOut({
                target : editorWrap,
                title : "Time / Weather / Temp",
                id : "setting-selection",
              }, content);
              pop.resizable();
            }
          });

          editor.addMenuItem('combatLink', {
            text: "Combat",
            onclick: function () {
              var combatObj = sync.obj();
              combatObj.data = {combat : {engaged : {}, current : {}}};

              var content = $("<div>");
              content.addClass("flexcolumn flex");

              var newApp = sync.newApp("ui_turnOrder").appendTo(content);
              combatObj.addApp(newApp);

              var button = $("<button>").appendTo(content);
              button.addClass("fit-x flexmiddle");
              button.append("Confirm");
              button.click(function(){
                tinyMCE.get("adventure-editor-"+app.attr("id")).execCommand('mceInsertContent', false, "<a href='combat"+JSON.stringify(combatObj.data)+"'>"+"Combat"+"</a>");
                layout.coverlay("combat-selection");
              });

              var pop = ui_popOut({
                target : $("body"),
                id : "combat-selection",
                style : {"width" : "400px", "height" : "400px"}
              }, content);
              pop.resizable();
            }
          });

          editor.addMenuItem('rollTable', {
            text: "Roll Table",
            onclick: function () {
              var ent = sync.obj();
              ent.data = duplicate(game.templates.page);
              sync.rawVal(ent.data.info.name, " ");
              sync.rawVal(ent.data.info.mode, "Roll Table");

              var content = $("<div>");
              content.addClass("flexcolumn flex");

              var newApp = sync.newApp("ui_editPage").appendTo(content);
              newApp.attr("entry", "true");
              newApp.attr("hideOptions", "true");
              ent.addApp(newApp);

              var button = $("<button>").appendTo(content);
              button.addClass("fit-x flexmiddle");
              button.append("Confirm");
              button.click(function(){
                var tableStr = "<table style='width : 100%;'>";

                var tableData;

                if (sync.rawVal(ent.data.info.notes) && sync.rawVal(ent.data.info.notes)[0] == "{") {
                  try {
                    tableData = JSON.parse(sync.rawVal(ent.data.info.notes));
                  }
                  catch (e) {
                    tableData = {headers : [], contents : []};
                  }
                }
                else {
                  tableData = {headers : [], contents : []};
                }

                tableStr += "<tr>";
                for (var i=0; i<tableData.headers.length; i++) {
                  var contentData = tableData.headers[i];

                  tableStr += "<td>"+(contentData.name || "")+"</td>";
                }
                tableStr += "</tr>";
                for (var i=0; i<tableData.contents.length; i++) {
                  var contentData = tableData.contents[i];

                  tableStr += "<tr><td>"+(contentData.name || "")+"</td><td>"+(contentData.value || "")+"</td></tr>";
                }
                tableStr += "</table>";
                var str = "";
                if (sync.rawVal(ent.data.info.name) && sync.rawVal(ent.data.info.name).trim()) {
                  str += "<h2 style='margin:0; font-size:1.4em; font-weight:bold;'>"+sync.rawVal(ent.data.info.name)+"</h2><hr class='h2' style='display : block; outline : none; border : none; width : 100%; height : 1px; background : grey; margin-top:0px;'></hr>";
                }
                str += tableStr;

                tinyMCE.get("adventure-editor-"+app.attr("id")).execCommand('mceInsertContent', false, str);
                layout.coverlay("combat-selection");
              });

              var pop = ui_popOut({
                target : editorWrap,
                id : "combat-selection",
                style : {"width" : "50vw", "height" : "40vh"}
              }, content);
              pop.resizable();
            }
          });

          /*editor.addMenuItem('condLink', {
            text: "Conditional Section",
            onclick: function () {
              var content = $("<div>");
              content.addClass("flexcolumn");
              content.append("<i class='subtitle fit-x flexmiddle'>Selection will be affected</i>");

              var button = $("<button>").appendTo(content);
              button.addClass("subtitle");
              button.append("GM Only");

              var input = $("<textarea>").appendTo(content);
              input.addClass("subtitle");

              button.click(function(){
                input.val("@:gm()");
              });

              var button = $("<button>").appendTo(content);
              button.append("Confirm");
              button.click(function(){
                var text = tinyMCE.get("adventure-editor-"+app.attr("id")).selection.getContent({'format': 'html'});
                if (text && text.length > 0) {
                  tinyMCE.get("adventure-editor-"+app.attr("id")).execCommand('mceInsertContent', false, '<div data="'+input.val()+'">'+text+'</div>');
                }
                layout.coverlay("cond-selection");
              });

              var pop = ui_popOut({
                target : editorWrap,
                id : "cond-selection",
              }, content);
            }
          });*/

          editor.addMenuItem('macroLink', {
            text: "Roll Equation",
            onclick: function () {
              var pop = ui_prompt({
                target : editorWrap,
                id : "macro-selection",
                inputs : {
                  "Equation" : ""
                },
                click : function(ev, inputs) {
                  if (inputs["Equation"].val()) {
                    tinyMCE.get("adventure-editor-"+app.attr("id")).execCommand('mceInsertContent', false, "<a href='macro'>"+inputs["Equation"].val()+"</a>");
                  }
                  layout.coverlay("macro-selection");
                }
              });
            }
          });
        },
        init_instance_callback : function(editor) {
          var delay = 1;
          if (isChrome()) {
            delay = 0;
          }
          setTimeout(function(){
            var part = $(editor.editorContainer);
            var height = $("#"+editor.editorContainer.id).height() - $(editor.contentAreaContainer).height();
            editor.theme.resizeTo("100%", content.height()-height-4);
          }, delay);

          var save = genIcon("floppy-disk", "Save ");
          save.appendTo(saveWrap);
          save.attr("title", "Save Changes");
          save.click(function(){
            if (app.attr("targetApp")) {
              $("#"+app.attr("targetApp")).removeAttr("viewingNotes");
            }
            save.text("Save");
            sync.rawVal(obj.data.info.notes, tinyMCE.get("adventure-editor-"+app.attr("id")).getContent({format : 'raw'}));
            obj.sync("updateAsset");
            game.locals[app.attr("id")+"-edit-page"] = game.locals[app.attr("id")+"-edit-page"] || sync.obj();
            game.locals[app.attr("id")+"-edit-page"].data = duplicate(obj.data);
            if (app.attr("saveClose")) {
              layout.coverlay(app.attr("saveClose"));
            }
          });
          editor.on('Change', function(ev) {
            sync.rawVal(game.locals[app.attr("id")+"-edit-page"].data.info.notes, tinyMCE.get("adventure-editor-"+app.attr("id")).getContent({format : 'raw'}));
            game.locals[app.attr("id")+"-edit-page"].update();

            if (scope.autoSave) {
              sync.rawVal(obj.data.info.notes, tinyMCE.get("adventure-editor-"+app.attr("id")).getContent({format : 'raw'}));
            }
            else {
              save.get(0).innerHTML = save.get(0).innerHTML.replace("Save ", "Save*");
            }
          });
          editor.on("keyup", function(){
            sync.rawVal(game.locals[app.attr("id")+"-edit-page"].data.info.notes, tinyMCE.get("adventure-editor-"+app.attr("id")).getContent({format : 'raw'}));
            game.locals[app.attr("id")+"-edit-page"].update();

            if (scope.autoSave) {
              sync.rawVal(obj.data.info.notes, tinyMCE.get("adventure-editor-"+app.attr("id")).getContent({format : 'raw'}));
            }
            else {
              save.get(0).innerHTML = save.get(0).innerHTML.replace("Save ", "Save*");
            }
          });
        }
      });
    }, 0);
  }
  if (scope.hideOptions) {
    optionsBar.hide();
  }
  if (scope.entry) {
    optionsBar.empty();

    var title = genInput({
      parent : optionsBar,
      classes : "line smargin",
      title : "Change this page's name",
      value : sync.rawVal(obj.data.info.name),
    });
    title.attr("title", "Change this page's Name");
    title.change(function(){
      sync.rawVal(obj.data.info.name, $(this).val());
      obj.sync("updateAsset");
    });
  }

  return div;
});

sync.render("ui_stylePage", function(obj, app, scope){
  if (!obj) {
    return $("<div>");
  }
  var data = obj.data;
  var info = data.info;

  if (info.img.modifiers && data._t != "c") {
    sync.modifier(obj.data.info.notes, "style", duplicate(info.img.modifiers));
    delete obj.data.info.img.modifiers;
  }

  if (!sync.modifier(obj.data.info.notes, "style")) {
    sync.modifier(obj.data.info.notes, "style", {});
  }

  var content = $("<div>");
  content.addClass("flexcolumn flex");
  content.css("position", "relative");

  var beta = $("<b>").appendTo(content);
  beta.addClass("lrpadding outline smooth highlight");
  beta.css("color", "white");
  beta.css("font-size", "0.8em");
  beta.css("position", "absolute");
  beta.css("right", "0");
  beta.append("Beta");

  var styleOptions = $("<div>").appendTo(content);
  styleOptions.addClass("flexrow foreground");

  var basic = $("<button>").appendTo(styleOptions);
  basic.addClass("background alttext");
  basic.text("Basic Settings");
  basic.click(function(){
    styleOptions.children().removeClass("highlight").addClass("background");
    $(this).removeClass("background");
    $(this).addClass("highlight");
    rebuildOptions("basic");
  });

  var h1 = $("<button>").appendTo(styleOptions);
  h1.addClass("background alttext");
  h1.text("Header 1");
  h1.click(function(){
    styleOptions.children().removeClass("highlight").addClass("background");
    $(this).removeClass("background");
    $(this).addClass("highlight");
    rebuildOptions("header1");
  });

  var h2 = $("<button>").appendTo(styleOptions);
  h2.addClass("background alttext");
  h2.text("Header 2");
  h2.click(function(){
    styleOptions.children().removeClass("highlight").addClass("background");
    $(this).removeClass("background");
    $(this).addClass("highlight");
    rebuildOptions("header2");
  });

  var styleEntry = $("<div>").appendTo(content);
  styleEntry.addClass("flexcolumn flex subtitle");

  var colChoices = [
    "rgb(180, 0, 0)",
    "rgb(180, 7, 0)",
    "rgb(180, 65, 0)",
    "rgb(180, 88, 0)",
    "rgb(180, 122, 0)",
    "rgb(180, 130, 0)",
    "rgb(172, 130, 0)",
    "rgb(115, 130, 0)",
    "rgb(57, 130, 0)",
    "rgb(0, 130, 0)",
    "rgb(0, 13, 7)",
    "rgb(0, 13, 65)",
    "rgb(0, 13, 122)",
    "rgb(0, 13, 130)",
    "rgb(0, 172, 130)",
    "rgb(0, 115, 130)",
    "rgb(0, 57, 130)",
    "rgb(0, 0, 130)",
    "rgb(7, 0, 130)",
    "rgb(65, 0, 130)",
    "rgb(122, 0, 130)",
    "rgb(180, 0, 130)",
    "rgb(180, 0, 122)",
    "rgb(180, 0, 65)",
    "rgb(180, 0, 7)",
    "rgb(230, 0, 0)",
    "rgb(230, 57, 0)",
    "rgb(230, 115, 0)",
    "rgb(230, 138, 0)",
    "rgb(230, 172, 0)",
    "rgb(230, 230, 0)",
    "rgb(172, 230, 0)",
    "rgb(115, 230, 0)",
    "rgb(57, 230, 0)",
    "rgb(0, 230, 0)",
    "rgb(0, 230, 57)",
    "rgb(0, 230, 115)",
    "rgb(0, 230, 172)",
    "rgb(0, 230, 230)",
    "rgb(0, 172, 230)",
    "rgb(0, 115, 230)",
    "rgb(0, 57, 230)",
    "rgb(0, 0, 230)",
    "rgb(57, 0, 230)",
    "rgb(115, 0, 230)",
    "rgb(172, 0, 230)",
    "rgb(230, 0, 230)",
    "rgb(230, 0, 172)",
    "rgb(230, 0, 115)",
    "rgb(230, 0, 57)",
    "rgb(34,34,34)",
    "rgb(255,255,255)",
    "rgba(0,0,0,0)"
  ];

  function rebuildOptions(optionVal) {
    styleEntry.empty();
    if (optionVal == "basic") {
      var general = $("<div>").appendTo(styleEntry);
      general.addClass("flexrow flexaround");

      var imageDiv = $("<div>").appendTo(general);
      imageDiv.addClass("flexcolumn");

      var img = $("<div>").appendTo(imageDiv);
      img.addClass("hover2 flexmiddle lmargin outline smooth");

      var style = sync.modifier(info.notes, "bgStyle");
      for (var i in style) {
        img.css(i, style[i]);
      }
      var processedPage = $("<div>").appendTo(img);
      processedPage.css("width", assetTypes["p"].width);
      processedPage.css("height", assetTypes["p"].height);
      processedPage.css("zoom", "33%");

      var style = sync.modifier(info.notes, "style");
      for (var i in style) {
        processedPage.css(i, style[i]);
      }

      img.click(function(){
        var contentDiv = $("<div>");
        contentDiv.addClass("flexrow flexaround");

        function buildSample(modifiers) {
          var sampleImage = $("<div>");
          sampleImage.addClass("outline spadding hover2 smooth flexmiddle");
          var style = modifiers.bgStyle || {};
          for (var i in style) {
            sampleImage.css(i, style[i]);
          }

          var processedPage = $("<div>").appendTo(sampleImage);
          processedPage.css("width", assetTypes["p"].width);
          processedPage.css("height", assetTypes["p"].height);
          processedPage.css("zoom", "33%");

          var style = modifiers.style || {};
          for (var i in style) {
            processedPage.css(i, style[i]);
          }

          sampleImage.click(function(){
            obj.data.info.notes.modifiers = modifiers;
            obj.sync("updateAsset");
            layout.coverlay("sample-pages");
          });
          return sampleImage;
        }

        for (var i in util.pageSamples) {
          buildSample(duplicate(util.pageSamples[i])).appendTo(contentDiv);
        }

        ui_popOut({
          target : $(this),
          title : "Sample Notes",
          id : "sample-pages",
          prompt : true,
        }, contentDiv);
      });

      imageDiv.append("<b>Basic Font</b>");
      var fonts = util.fonts;

      var select = $("<select>").appendTo(imageDiv);
      select.css("width", "200px");

      var option = $("<option>").appendTo(select);
      option.attr("value", "");
      option.text("Default");
      for (var i in fonts) {
        var option = $("<option>").appendTo(select);
        option.attr("value", fonts[i]);
        option.text(fonts[i]);
        if (obj.data.info.notes.modifiers.style["font-family"] == fonts[i]) {
          option.attr("selected", true);
        }
      }
      select.change(function(){
        obj.data.info.notes.modifiers.style["font-family"] = $(this).val();
        obj.sync("updateAsset");
      });

      imageDiv.append("<b>Basic Text Color</b>");
      var colDiv1 = sync.render("ui_colorPicker")(obj, app, {
        color : obj.data.info.notes.modifiers.style["color"],
        colors : colChoices,
        colorChange : function(ev, ui, col){
          if (col == "transparent" || col == "rgba(0,0,0,0)") {
            delete obj.data.info.notes.modifiers.style["color"];
          }
          else {
            obj.data.info.notes.modifiers.style["color"] = col;
          }
          obj.sync("updateAsset");
        }
      }).appendTo(imageDiv);

      imageDiv.append("<b>Basic Text Shadow</b>");
      var colDiv1 = sync.render("ui_colorPicker")(obj, app, {
        hideColor : true,
        colors : colChoices,
        colorChange : function(ev, ui, col){
          if (col == "transparent" || col == "rgba(0,0,0,0)") {
            delete obj.data.info.notes.modifiers.style["text-shadow"];
          }
          else {
            obj.data.info.notes.modifiers.style["text-shadow"] = "0em 0em 4px " + col;
          }
          obj.sync("updateAsset");
        }
      }).appendTo(imageDiv);

      var basicRow = $("<div>").appendTo(general);
      basicRow.addClass("flexcolumn");

      basicRow.append("<b>Default Horizontal Line</b>");
      var colDiv1 = sync.render("ui_colorPicker")(obj, app, {
        color : obj.data.info.notes.modifiers.style["color"],
        colors : colChoices,
        colorChange : function(ev, ui, col){
          if (col == "transparent" || col == "rgba(0,0,0,0)") {
            delete obj.data.info.notes.modifiers["HR"];
          }
          else {
            obj.data.info.notes.modifiers["HR"] = col;
          }
          obj.sync("updateAsset");
        }
      }).appendTo(basicRow);

      var newApp = sync.newApp("ui_JSON").appendTo(basicRow);
      newApp.attr("lookup", "info.notes.modifiers.style");
      newApp.attr("height", "200px");
      obj.addApp(newApp);

      var newApp = sync.newApp("ui_JSON").appendTo(basicRow);
      newApp.attr("lookup", "info.notes.modifiers.bgStyle");
      newApp.attr("height", "200px");
      obj.addApp(newApp);
    }
    else if (optionVal == "header1") {
      styleEntry.append("<b>H1 Font</b>");
      var fonts = util.fonts;

      var select = $("<select>").appendTo(styleEntry);
      var option = $("<option>").appendTo(select);
      option.attr("value", "");
      option.text("Default");

      for (var i in fonts) {
        var option = $("<option>").appendTo(select);
        option.attr("value", fonts[i]);
        option.text(fonts[i]);
        if (sync.modifier(obj.data.info.notes, "H1F") == fonts[i]) {
          option.attr("selected", true);
        }
      }
      select.change(function(){
        sync.modifier(obj.data.info.notes, "H1F", $(this).val());
        obj.sync("updateAsset");
      });

      styleEntry.append("<b>H1 Relative Size</b>");
      var input = genInput({
        parent : styleEntry,
        type : "range",
        min : 2.0,
        step : 0.1,
        max : 4.0,
        value : sync.modifier(obj.data.info.notes, "H1FS") || 3,
      });
      input.change(function(){
        sync.modifier(obj.data.info.notes, "H1FS", $(this).val());
        obj.sync("updateAsset");
      });

      styleEntry.append("<b>H1 Line Color</b>");
      var colDiv1 = sync.render("ui_colorPicker")(obj, app, {
        color : sync.modifier(obj.data.info.notes, "HR1"),
        colors : colChoices,
        colorChange : function(ev, ui, col){
          if (col == "transparent" || col == "rgba(0,0,0,0)") {
            sync.modifier(obj.data.info.notes, "HR1", "");
          }
          else {
            sync.modifier(obj.data.info.notes, "HR1", col);
          }
          obj.sync("updateAsset");
        }
      }).appendTo(styleEntry);


      styleEntry.append("<b>H1 Text Color</b>");
      var colDiv1 = sync.render("ui_colorPicker")(obj, app, {
        color : sync.modifier(obj.data.info.notes, "H1C"),
        colors : colChoices,
        colorChange : function(ev, ui, col){
          if (col == "transparent" || col == "rgba(0,0,0,0)") {
            sync.modifier(obj.data.info.notes, "H1C", "");
          }
          else {
            sync.modifier(obj.data.info.notes, "H1C", col);
          }
          obj.sync("updateAsset");
        }
      }).appendTo(styleEntry);


      styleEntry.append("<b>H1 Shadow Color</b>");
      var colDiv1 = sync.render("ui_colorPicker")(obj, app, {
        color : sync.modifier(obj.data.info.notes, "H1S"),colors : colChoices,
        colors : colChoices,
        colorChange : function(ev, ui, col){
          if (col == "transparent" || col == "rgba(0,0,0,0)") {
            sync.modifier(obj.data.info.notes, "H1S", "");
          }
          else {
            sync.modifier(obj.data.info.notes, "H1S", "0em 0em 4px " + col);
          }
          obj.sync("updateAsset");
        }
      }).appendTo(styleEntry);
    }
    else if (optionVal == "header2") {
      styleEntry.append("<b>H2 Font</b>");
      var fonts = util.fonts;

      var select = $("<select>").appendTo(styleEntry);
      var option = $("<option>").appendTo(select);
      option.attr("value", "");
      option.text("Default");
      for (var i in fonts) {
        var option = $("<option>").appendTo(select);
        option.attr("value", fonts[i]);
        option.text(fonts[i]);
        if (sync.modifier(obj.data.info.notes, "H2F") == fonts[i]) {
          option.attr("selected", true);
        }
      }
      select.change(function(){
        sync.modifier(obj.data.info.notes, "H2F", $(this).val());
        obj.sync("updateAsset");
      });

      styleEntry.append("<b>H2 Relative Size</b>");

      var input = genInput({
        parent : styleEntry,
        type : "range",
        min : 1.0,
        step : 0.1,
        max : 3.0,
        value : sync.modifier(obj.data.info.notes, "H2FS") || 2,
      });
      input.change(function(){
        sync.modifier(obj.data.info.notes, "H2FS", $(this).val());
        obj.sync("updateAsset");
      });
      styleEntry.append("<b>H2 Line Color</b>");
      var colDiv1 = sync.render("ui_colorPicker")(obj, app, {
        color : sync.modifier(obj.data.info.notes, "HR2"),
        colors : colChoices,
        colorChange : function(ev, ui, col){
          if (col == "transparent" || col == "rgba(0,0,0,0)") {
            sync.modifier(obj.data.info.notes, "HR2", "");
          }
          else {
            sync.modifier(obj.data.info.notes, "HR2", col);
          }
          obj.sync("updateAsset");
        }
      }).appendTo(styleEntry);

      styleEntry.append("<b>H2 Text Color</b>");
      var colDiv1 = sync.render("ui_colorPicker")(obj, app, {
        color : sync.modifier(obj.data.info.notes, "H2C"),
        colors : colChoices,
        colorChange : function(ev, ui, col){
          if (col == "transparent" || col == "rgba(0,0,0,0)") {
            sync.modifier(obj.data.info.notes, "H2C", "");
          }
          else {
            sync.modifier(obj.data.info.notes, "H2C", col);
          }
          obj.sync("updateAsset");
        }
      }).appendTo(styleEntry);

      styleEntry.append("<b>H2 Shadow Color</b>");
      var colDiv1 = sync.render("ui_colorPicker")(obj, app, {
        color : sync.modifier(obj.data.info.notes, "H2S"),
        colors : colChoices,
        colorChange : function(ev, ui, col){
          if (col == "transparent" || col == "rgba(0,0,0,0)") {
            sync.modifier(obj.data.info.notes, "H2S", "");
          }
          else {
            sync.modifier(obj.data.info.notes, "H2S", "0em 0em 2px " + col);
          }
          obj.sync("updateAsset");
        }
      }).appendTo(styleEntry);
    }
    /*
    var primaryCol = sync.render("ui_colorPicker")(obj, app, {
      hideColor : true,
      custom : false,
      colors : [
        "rgb(180, 0, 0)",
        "rgb(180, 7, 0)",
        "rgb(180, 65, 0)",
        "rgb(180, 88, 0)",
        "rgb(180, 122, 0)",
        "rgb(180, 130, 0)",
        "rgb(172, 130, 0)",
        "rgb(115, 130, 0)",
        "rgb(57, 130, 0)",
        "rgb(0, 130, 0)",
        "rgb(0, 13, 7)",
        "rgb(0, 13, 65)",
        "rgb(0, 13, 122)",
        "rgb(0, 13, 130)",
        "rgb(0, 172, 130)",
        "rgb(0, 115, 130)",
        "rgb(0, 57, 130)",
        "rgb(0, 0, 130)",
        "rgb(7, 0, 130)",
        "rgb(65, 0, 130)",
        "rgb(122, 0, 130)",
        "rgb(180, 0, 130)",
        "rgb(180, 0, 122)",
        "rgb(180, 0, 65)",
        "rgb(180, 0, 7)",
        "rgb(230, 0, 0)",
        "rgb(230, 57, 0)",
        "rgb(230, 115, 0)",
        "rgb(230, 138, 0)",
        "rgb(230, 172, 0)",
        "rgb(230, 230, 0)",
        "rgb(172, 230, 0)",
        "rgb(115, 230, 0)",
        "rgb(57, 230, 0)",
        "rgb(0, 230, 0)",
        "rgb(0, 230, 57)",
        "rgb(0, 230, 115)",
        "rgb(0, 230, 172)",
        "rgb(0, 230, 230)",
        "rgb(0, 172, 230)",
        "rgb(0, 115, 230)",
        "rgb(0, 57, 230)",
        "rgb(0, 0, 230)",
        "rgb(57, 0, 230)",
        "rgb(115, 0, 230)",
        "rgb(172, 0, 230)",
        "rgb(230, 0, 230)",
        "rgb(230, 0, 172)",
        "rgb(230, 0, 115)",
        "rgb(230, 0, 57)",
      ],
      colorChange : function(ev, ui, value){

      }
    }).appendTo(styleEntry);
    */
    app.attr("option", optionVal);
  }

  if (app.attr("option")) {
    rebuildOptions(app.attr("option"));
  }
  else {
    basic.click();
  }
  return content;
});


/*
{
  "padding": "2em",
  "margin-top": "43px",
  "margin-bottom": "73px",
  "margin-left": "4em",
  "margin-right": "4em",
  "color": "white",
  "overflow": "auto",
  "max-height": "640px",
  "display": "block"
}

{
  "background-image": "url('https://i.imgur.com/6cfwFee.jpg')",
  "background-size": "contain",
  "background-repeat": "no-repeat",
  "background-position": "center",
  "font-size": "1.2em"
}
*/


sync.render("ui_rollText", function(obj, app, scope){
  var div = $("<div>");
  div.addClass("flexcolumn outline smooth");

  if (scope.context.var) {
    var titlePlate = $("<div>").appendTo(div);
    titlePlate.addClass("outlinebottom spadding flexmiddle");
    titlePlate.text(scope.context.var.rollTitle);

    var displayPlate = $("<div>").appendTo(div);
    displayPlate.addClass("spadding");
    displayPlate.append(scope.context.var.rollText);
  }

  return div;
});

sync.render("ui_renderPage", function(obj, app, scope){
  if (!obj) {
    return $("<div>");
  }
  var data = obj.data;
  var info = data.info;
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true"), preview : (app.attr("preview") == "true")};

  if (info.img.modifiers && data._t != "c") {
    sync.modifier(obj.data.info.notes, "style", duplicate(info.img.modifiers));
    delete obj.data.info.img.modifiers;
  }

  var div = $("<div>");
  div.addClass("flexcolumn flex");

  if (!scope.viewOnly) {
    var optionsBar = $("<div>").appendTo(div);
    optionsBar.addClass("background alttext flexrow flexbetween lrpadding");

    var stylePage = genIcon("tint", "Style Page").appendTo(optionsBar);
    stylePage.attr("title", "Change the style of how this page renders");
    stylePage.click(function(){
      var newApp = sync.newApp("ui_stylePage");
      obj.addApp(newApp);

      var pop = ui_popOut({
        target : app,
        align : "right",
        id : "page-styling",
        title : "Page Style",
        style : {width : assetTypes["p"].width, height : assetTypes["p"].height},
      }, newApp);
    });

    var edit = genIcon("pencil", "Edit Page").appendTo(optionsBar);
    edit.click(function(){
      app.attr("from", "ui_renderPage");
      app.attr("ui-name", "ui_editPage");
      var ent = getEnt(obj.id()) || obj;
      ent.update();
    });
  }
  var contentWrap = $("<div>").appendTo(div);
  contentWrap.addClass("flexcolumn flex");
  contentWrap.attr("_lastScrollTop", app.attr("_lastScrollTop"));
  contentWrap.attr("_lastScrollLeft", app.attr("_lastScrollLeft"));
  contentWrap.css("position", "relative");
  contentWrap.css("overflow-y", "auto");
  contentWrap.scroll(function(){
    app.attr("_lastScrollTop", $(this).scrollTop());
    app.attr("_lastScrollLeft", $(this).scrollLeft());
  });

  if (data && data.options) {
    var filterStr = "";
    for (var key in data.options.filter) {
      if (key == "hue-rotate") {
        filterStr = filterStr + " " + key + "("+data.options.filter[key]+"deg)";
      }
      else {
        filterStr = filterStr + " " + key + "("+data.options.filter[key]+"%)";
      }
    }
    contentWrap.css("background-color", "rgb(255,255,255)");
    contentWrap.css("-webkit-filter", filterStr);
    contentWrap.css("filter", filterStr);
  }

  if (util.resourceTypes[sync.rawVal(obj.data.info.mode)] && util.resourceTypes[sync.rawVal(obj.data.info.mode)].view) {
    util.resourceTypes[sync.rawVal(obj.data.info.mode)].view(obj, app, scope, contentWrap);
  }
  else {
    var content = $("<div>").appendTo(contentWrap);
    content.addClass("flexrow fit-x");
    content.css("max-width", "100%");
    content.css("min-height", "100%");
    content.css("position", "absolute");

    var style = sync.modifier(info.notes, "bgStyle");
    for (var i in style) {
      content.css(i, style[i]);
    }

    var preview = util.processPage(sync.rawVal(info.notes), obj, app, scope).appendTo(content);
    preview.addClass("flexcolumn flex lpadding");
    preview.css("overflow", "hidden");
    var style = sync.modifier(info.notes, "style");
    for (var i in style) {
      preview.css(i, style[i]);
    }
  }

  return div;
});


/*
H1C :"white",
H1F : "Tahoma, Geneva, sans-serif",
H1FS : 2,
H1S : "0em 0em 4px rgb(0, 230, 230)",
H2C : "rgb(0, 230, 172)",
H2F : `"Lucida Console", Monaco, monospace"`,
H2FS : 1.5,
H2S : "0em 0em 2px rgb(0, 230, 172)",
HR : "rgba(187,0,0,1)",
HR1 : "rgb(0, 115, 130)",
HR2 : "rgba(187,0,0,1)",
bgStyle : {
  "background-image" : "url('https://i.imgur.com/6cfwFee.jpg')",
  "background-position" : "center",
  "background-repeat" : "no-repeat",
  "background-size" : "contain",
  "font-size" : "1.2em",
},
style : {
  color : "rgb(0, 230, 230)",
  display :  "block",
  margin-bottom : "73px",
  margin-left : "4em",
  margin-right : "4em",
  margin-top : "43px",
  max-height : "640px",
  overflow : "auto",
  padding : "2em",
  text-shadow : "0em 0em 4px rgb(0, 115, 230)"
}
*/

sync.render("ui_pageCard", function(obj, app, scope){
  var data = obj.data;
  var info = data.info;
  var charContainer = $("<div>");
  charContainer.addClass("flexcolumn flexmiddle pageContent");
  charContainer.attr("index", obj.id());

  var charOutline = $("<div>").appendTo(charContainer);
  charOutline.addClass("outline");
  charOutline.css("cursor", "pointer");

  var optionsBar = $("<div>").appendTo(charOutline);
  optionsBar.addClass("flexaround");

  if (hasSecurity(getCookie("UserID"), "Rights", data) && !scope.viewOnly) {
    var deleteButton = genIcon("trash").appendTo(optionsBar);
    deleteButton.attr("title", "Delete Page");
    deleteButton.click(function() {
      var popOut = ui_prompt({
        target : $(this),
        id : "confirm-delete-page",
        confirm : "Delete Page",
        click : function(){
          runCommand("deleteAsset", {id: obj.id()});
          delete game.entities.data[obj.id()];
          game.entities.update();
        }
      });
    });

    var dupe = genIcon("duplicate");
    dupe.appendTo(optionsBar);
    dupe.attr("title", "Duplicate this Page");
    dupe.click(function(){
      runCommand("createPage", data);
    });

    if (scope.edit) {
      var edit = genIcon("pencil").appendTo(optionsBar);
      edit.attr("title", "Edit this Page");
      edit.click(function(ev) {
        scope.edit(ev, this, obj);
      });
    }

    var security = genIcon("lock").appendTo(optionsBar);
    security.attr("title", "Configure who can access this");
    security.click(function(){
      var content = sync.newApp("ui_rights");
      obj.addApp(content);

      var frame = ui_popOut({
        target : $(this),
        prompt : true,
        align : "bottom",
        id : "ui-rights-dialog",
      }, content);
    });
  }

  var charDiv = $("<div>").appendTo(charOutline);
  charDiv.attr("index", obj.id());
  if (!scope.mode) {
    charDiv.css("overflow-y", "hidden");
    charDiv.css("min-width", "8em");

    charContainer.css("max-width", "150px");
    charDiv.css("cursor", "pointer");

    var title = $("<b style='text-align : center;'>"+sync.val(info.name)+"</b>").appendTo(charDiv);
    title.addClass("flexmiddle outlinebottom");

    if (sync.val(info.name) && sync.val(info.name).length > 20) {
      title.addClass("subtitle");
      if (sync.val(info.name).length > 35) {
        title.text(sync.val(info.name).substring(0, 33)+"..");
      }
    }

    var icon = $("<div>").appendTo(charDiv);
    icon.css("position", "relative");
    icon.css("background-image", "url('"+(sync.val(info.img) || "/content/icons/Scroll1000p.png")+"')");
    icon.css("background-size", "contain");
    icon.css("background-position", "center");
    icon.css("background-repeat", "no-repeat");
    icon.css("width", "100%");
    icon.css("height", "6em");
  }
  else if (scope.mode == "list") {
    charContainer.removeClass("flexmiddle");
    charOutline.addClass("flex flexcolumn");

    charDiv.addClass("flex flexrow");
    charDiv.css("cursor", "pointer");

    var icon = $("<img>").appendTo(charDiv);
    icon.attr("src", (sync.val(info.img) || "/content/icons/blankchar.png"));
    icon.attr("width", "auto");
    icon.attr("height", "25px");
    icon.addClass("outline");

    var title = $("<b style='text-align : center;'>"+sync.val(info.name)+"</b>").appendTo(charDiv);
    title.addClass("flexmiddle flex");
  }
  else if (scope.mode == "large") {
    charDiv.css("overflow-y", "hidden");
    charDiv.css("min-width", "25em");

    charDiv.css("cursor", "pointer");

    var title = $("<b style='text-align : center;'>"+sync.val(info.name)+"</b>").appendTo(charDiv);
    title.addClass("flexmiddle");
    title.css("font-size", "1.5em");

    if (sync.val(info.name) && sync.val(info.name).length > 20) {
      title.css("font-size", "1.2em");
      title.css("text-align", "center");
      if (sync.val(info.name).length > 35) {
        title.text(sync.val(info.name).substring(0, 33)+"..");
      }
    }

    var icon = $("<div>").appendTo(charDiv);
    icon.css("position", "relative");
    icon.css("background-image", "url('"+(sync.val(info.img) || "/content/icons/Scroll1000p.png")+"')");
    icon.css("background-size", "contain");
    icon.css("background-position", "center");
    icon.css("background-repeat", "no-repeat");
    icon.css("width", "auto");
    icon.css("height", "15em");
  }
  charDiv.click(function(ev){
    if (scope.click) {
      scope.click(ev, $(this), obj);
    }
  });

  if (scope.label) {
    var labelDiv = $("<div>").appendTo(icon);
    labelDiv.addClass("alttext background outline spadding subtitle");
    labelDiv.css("position", "absolute");
    if (scope.label instanceof String) {
      labelDiv.append("<i>"+scope.label+"</i>");
    }
    else {
      labelDiv.append(scope.label);
    }
  }

  if (hasSecurity(getCookie("UserID"), "Owner", data) && !scope.viewOnly) {
    var syncLabel;
    if (data._c == -1) {
      syncLabel = genIcon("remove").appendTo(icon);
      syncLabel.addClass("alttext background outline");
      syncLabel.attr("title", "Duplicate to move to Asset Storage");
      syncLabel.css("right", "0");
      syncLabel.css("bottom", "0");
      syncLabel.css("position", "absolute");
      syncLabel.css("padding", "2px");
    }
    else {
      if (data._uid) {
        if (data._sync) {
          syncLabel = genIcon("refresh").appendTo(icon);
          syncLabel.addClass("alttext background outline");
          syncLabel.attr("title", "This is saved, and is in-sync with Asset Storage");
          syncLabel.click(function(ev){
            runCommand("updateSync", {id : obj.id(), data : false});
            ev.stopPropagation();
            return false;
          });
        }
        else {
          syncLabel = genIcon("cloud").appendTo(icon);
          syncLabel.addClass("alttext background outline");
          syncLabel.attr("title", "This is saved, but is not in-sync with Asset Storage");
          syncLabel.click(function(ev){
            runCommand("updateSync", {id : obj.id(), data : true});
            ev.stopPropagation();
            return false;
          });
        }
      }
      else {
        syncLabel = genIcon("cloud").appendTo(icon);
        syncLabel.addClass("outline");
        syncLabel.css("background-color", "white");
        syncLabel.attr("title", "Enable Asset Storage");
        syncLabel.click(function(ev){
          var popOut = ui_prompt({
            target : $(this),
            id : "confirm-store-char",
            confirm : "Move to Asset Storage",
            click : function(){
              runCommand("storeAsset", {id: obj.id()});
              layout.coverlay("quick-storage-popout");
              syncLabel.remove();
            }
          });
          ev.stopPropagation();
          return false;
        });
      }
      syncLabel.css("right", "0");
      syncLabel.css("bottom", "0");
      syncLabel.css("position", "absolute");
      syncLabel.css("padding", "2px");
    }
  }

  return charContainer;
});



sync.render("ui_adventureCard", function(obj, app, scope){
  var data = obj.data;
  var info = data.info;
  var charContainer = $("<div>");
  charContainer.addClass("flexcolumn flexmiddle advContent");
  charContainer.attr("index", obj.id());

  var charOutline = $("<div>").appendTo(charContainer);
  charOutline.addClass("outline");
  charOutline.css("cursor", "pointer");

  var optionsBar = $("<div>").appendTo(charOutline);
  optionsBar.addClass("flexaround");

  if (hasSecurity(getCookie("UserID"), "Rights", data) && !scope.viewOnly) {
    var deleteButton = genIcon("trash").appendTo(optionsBar);
    deleteButton.attr("title", "Delete Adventure");
    deleteButton.click(function() {
      var popOut = ui_prompt({
        target : $(this),
        id : "confirm-delete-page",
        confirm : "Delete Adventure",
        click : function(){
          runCommand("deleteAsset", {id: obj.id()});
          delete game.entities.data[obj.id()];
          game.entities.update();
        }
      });
    });

    if (scope.edit) {
      var edit = genIcon("pencil").appendTo(optionsBar);
      edit.attr("title", "Edit this Adventure");
      edit.click(function(ev) {
        scope.edit(ev, this, obj);
      });
    }

    var security = genIcon("lock").appendTo(optionsBar);
    security.attr("title", "Configure who can access this");
    security.click(function(){
      var content = sync.newApp("ui_rights");
      obj.addApp(content);

      var frame = ui_popOut({
        target : $(this),
        align : "bottom",
        id : "ui-rights-dialog",
      }, content);
    });
  }

  var charDiv = $("<div>").appendTo(charOutline);
  charDiv.attr("index", obj.id());
  if (!scope.mode) {
    charDiv.css("overflow-y", "hidden");
    charDiv.css("min-width", "8em");

    charContainer.css("max-width", "150px");
    charDiv.css("cursor", "pointer");

    var title = $("<b style='text-align : center;'>"+sync.val(info.name)+"</b>").appendTo(charDiv);
    title.addClass("flexmiddle outlinebottom");

    if (sync.val(info.name) && sync.val(info.name).length > 20) {
      title.addClass("subtitle");
      if (sync.val(info.name).length > 35) {
        title.text(sync.val(info.name).substring(0, 33)+"..");
      }
    }

    var icon = $("<div>").appendTo(charDiv);
    icon.css("position", "relative");
    icon.css("background-image", "url('"+(sync.val(info.img) || "/content/icons/Book1000p.png")+"')");
    icon.css("background-size", "contain");
    icon.css("background-position", "center");
    icon.css("background-repeat", "no-repeat");
    icon.css("width", "100%");
    icon.css("height", "6em");
  }
  else if (scope.mode == "list") {
    charContainer.removeClass("flexmiddle");
    charOutline.addClass("flex flexcolumn");

    charDiv.addClass("flex flexrow");
    charDiv.css("cursor", "pointer");

    var icon = $("<img>").appendTo(charDiv);
    icon.attr("src", (sync.val(info.img) || "/content/icons/blankchar.png"));
    icon.attr("width", "auto");
    icon.attr("height", "25px");
    icon.addClass("outline");

    var title = $("<b style='text-align : center;'>"+sync.val(info.name)+"</b>").appendTo(charDiv);
    title.addClass("flexmiddle flex");
  }
  else if (scope.mode == "large") {
    charDiv.css("overflow-y", "hidden");
    charDiv.css("min-width", "25em");

    charDiv.css("cursor", "pointer");

    var title = $("<b style='text-align : center;'>"+sync.val(info.name)+"</b>").appendTo(charDiv);
    title.addClass("flexmiddle");
    title.css("font-size", "1.5em");

    if (sync.val(info.name) && sync.val(info.name).length > 20) {
      title.css("font-size", "1.2em");
      title.css("text-align", "center");
      if (sync.val(info.name).length > 35) {
        title.text(sync.val(info.name).substring(0, 33)+"..");
      }
    }

    var icon = $("<div>").appendTo(charDiv);
    icon.css("position", "relative");
    icon.css("background-image", "url('"+(sync.val(info.img) || "/content/icons/Book1000p.png")+"')");
    icon.css("background-size", "contain");
    icon.css("background-position", "center");
    icon.css("background-repeat", "no-repeat");
    icon.css("width", "auto");
    icon.css("height", "15em");
  }
  charDiv.click(function(ev){
    if (scope.click) {
      scope.click(ev, $(this), obj);
    }
  });

  if (scope.label) {
    var labelDiv = $("<div>").appendTo(icon);
    labelDiv.addClass("alttext background outline subtitle spadding");
    labelDiv.css("position", "absolute");
    if (scope.label instanceof String) {
      labelDiv.append("<i>"+scope.label+"</i>");
    }
    else {
      labelDiv.append(scope.label);
    }
  }

  return charContainer;
});

sync.render("ui_pageList", function(obj, app, scope){
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};
  if (!obj) {
    game.entities.addApp(app);
    return $("<div>");
  }
  var div = $("<div>");

  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("outline background alttext flexrow flexaround");
  if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
    var button = genIcon("duplicate", "Create Page");
    button.attr("title", "Create a Page");
    button.appendTo(optionsBar);
    button.click(function() {
      if (!game.config.data.offline) {
        runCommand("createPage", {data : {}});
      }
      else {
        game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
        game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
        game.entities.data["tempObj"+game.config.data.offline++].data = duplicate(game.templates.page);
        game.entities.update();
      }
    });

    var button = genIcon("book", "Create Adventure");
    button.attr("title", "Create an Adventure");
    button.appendTo(optionsBar);
    button.click(function() {
      if (!game.config.data.offline) {
        runCommand("createAdventure", {data : {}});
      }
      else {
        game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
        game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
        game.entities.data["tempObj"+game.config.data.offline++].data = duplicate(game.templates.adventure);
        game.entities.update();
      }
    });
  }

  var advText = $("<b>").appendTo(div);
  advText.addClass("fit-x flexmiddle");

  var adventures = $("<div>").appendTo(div);
  adventures.addClass("flexrow flexaround flexwrap");

  var pageText = $("<b>").appendTo(div);
  pageText.addClass("fit-x flexmiddle");

  var pages = $("<div>").appendTo(div);
  pages.addClass("flexrow flexaround flexwrap");
  pages.sortable({
    filter : ".pageContent",
    connectWith : ".dropContent",
  });
  for (var index in obj.data) {
    var ent = obj.data[index];
    if (ent && ent.data) {
      if (hasSecurity(getCookie("UserID"), "Visible", ent.data)) {
        if (ent.data["_t"] == "p") {
          pageText.text("Resources");
          var page = sync.render("ui_pageCard")(ent, app, {
            edit : function(ev, ui, charObj) {
              var content = sync.newApp("ui_editPage");

              var popout = ui_popOut({
                title : sync.rawVal(charObj.data.info.name),
                target : $("body"),
                minimize : true,
                maximize : true,
                dragThickness : "0.5em",
                resizable : true,
                style : {width : "80vw", height : "80vh"},
                id : "edit-page-"+charObj.id()
              }, content);
              popout.css("padding", "0px");
              popout.addClass("floating-app");

              charObj.addApp(content);
            },
            click : function(ev, ui, charObj) {
              var content = sync.newApp("ui_renderPage");

              var popout = ui_popOut({
                title : sync.rawVal(charObj.data.info.name),
                target : app,
                align : "bottom",
                minimize : true,
                maximize : true,
                dragThickness : "0.5em",
                resizable : true,
                style : {width : "40vw", height : "70vh"},
              }, content);
              popout.css("padding", "0px");
              popout.addClass("floating-app");

              charObj.addApp(content);
            }
          });
          page.addClass("pageContent");
          page.css("background-color", "white");
          page.attr("index", index);
          page.appendTo(pages);
        }
        else if (ent.data["_t"] == "a") {
          advText.text("Adventures");
          var adv = sync.render("ui_adventureCard")(ent, app, {
            edit : function(ev, ui, charObj) {
              var content = sync.newApp("ui_planner");

              var popout = ui_popOut({
                title : sync.rawVal(charObj.data.info.name),
                target : app,
                minimize : true,
                maximize : true,
                dragThickness : "0.5em",
                resizable : true,
                style : {width : "80vw", height : "80vh"},
                id : "edit-page-"+charObj.id()
              }, content);
              popout.css("padding", "0px");
              popout.addClass("floating-app");

              charObj.addApp(content);
            },
            click : function(ev, ui, charObj) {
              var content = sync.newApp("ui_planner");

              var popout = ui_popOut({
                title : sync.rawVal(charObj.data.info.name),
                target : app,
                minimize : true,
                maximize : true,
                dragThickness : "0.5em",
                resizable : true,
                style : {"max-width" : "none"},
              }, content);
              popout.css("padding", "0px");
              popout.addClass("floating-app");

              charObj.addApp(content);
            }
          });
          adv.css("background-color", "white");
          adv.appendTo(adventures);
        }
      }
    }
  }
  return div;
});

var spacewars = `<style>

/*
-----------------------------
---------Credit goes to : https://css-tricks.com/snippets/css/star-wars-crawl-text/
------------------------------
*/

.scrolling {
  display: flex;
  justify-content: center;
  position: relative;
  height: 800px;
  color: #feda4a;
  font-family: 'Pathway Gothic One', sans-serif;
  font-size: 500%;
  font-weight: 600;
  letter-spacing: 0px;
  line-height: 150%;
  perspective: 400px;
  text-align: justify;
}

.crawl {
  position: relative;
  top: 9999px;
  transform-origin: 50% 100%;
  animation: crawl 60s linear;
}

.crawl > .title {
  font-size: 90%;
  text-align: center;
}

.crawl > .title h1 {
  margin: 0 0 100px;
  text-transform: uppercase;
}

@keyframes crawl {
  0% {
    top: 600px;
    transform: rotateX(20deg)  translateZ(0);
  }
  100% {
    top: -6000px;
    transform: rotateX(25deg) translateZ(-2500px);
  }
}
</style>
<div class='fit-xy' style=' background : #000; overflow : hidden; position:relative;'>
  <div style='height : 40%'></div>

  <section class="scrolling">

    <div class="crawl">

      <div class="title">
        <p>Are you a GM?</p>
        <h1>eval{@:gm()?"Yes":"No"}</h1>
      </div>

      <p>eval{@time}</p>
      <p>eval{@weather}</p>
      <p>eval{@temp}</p>

    </div>

  </section>
  <div style='width : 100%; height : 40%; position : absolute; left : 0; top : 0; background : linear-gradient(to top, transparent, black 75%);'></div>
</div>
`;

var _hasAccepted;

sync.render("ui_resourcePage", function(obj, app, scope){
  scope = scope || {viewOnly : app.attr("viewOnly") == "true", website : app.attr("url"), resourcePath : app.attr("resourcePath")};
  if (!obj) {
    game.config.addApp(app);
    return $("<div>");
  }
  var resourcePath = scope.resourcePath;

  var div = $("<div>");
  div.addClass("flexrow fit-xy");
  var data = obj.data;

  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("foreground flexcolumn");
  optionsBar.css("padding-top", $("#main-nav").height());

  var frameWrap = $("<div>").appendTo(div);
  frameWrap.css("position", "relative");
  frameWrap.css("overflow-y", "hidden");
  function recurseSort(list) {
    list.sort(function(a,b){
      if ((a.name || "").toLowerCase() < (b.name || "").toLowerCase()) {
        return -1;
      }
      else if ((a.name || "").toLowerCase() > (b.name || "").toLowerCase()) {
        return 1;
      }
      return 0;
    });
    for (var i=0; i<list.length; i++) {
      if (list[i] && list[i].res) {
        list[i].res = recurseSort(list[i].res);
      }
    }
    return list;
  }
  obj.data.resources = recurseSort(obj.data.resources);

  function loadTabs(){
    optionsBar.empty();

    function renderTab(tabData, key, fullPath) {
      var tabWrap = $("<div>");
      tabWrap.addClass("lrmargin flexrow bold");
      if (tabData._s && tabData._s.default && tabData._s.default != 1) {
        tabWrap.css("background-color", "rgb(235,235,228)");
      }
      var resourceWrap = $("<div>").appendTo(tabWrap);
      resourceWrap.addClass("flexcolumn fit-x");
      resourceWrap.attr("fullPath", fullPath);
      if (tabData.url) {
        var newApp = sync.newApp("ui_tab").appendTo(resourceWrap);
        newApp.addClass("underline link");
        newApp.css("outline", "none");
        newApp.attr("tabName", tabData.name);
        if (tabData.type == "asset") {
          if (getEnt(tabData.url) && getEnt(tabData.url).data) {
            getEnt(tabData.url).addApp(newApp);
          }
        }
        else {
          sync.render("ui_tab")(null, newApp, null).appendTo(newApp);
        }
        resourceWrap.attr("url", tabData.url);
        resourceWrap.attr("type", tabData.type);
        resourceWrap.click(function(ev){
          app.attr("resourcePath", $(this).attr("fullPath"));
          loadUrl($(this).attr("url"), $(this).attr("type"), $(this).attr("fullPath"));
          ev.stopPropagation();
          ev.preventDefault();
        });
      }
      else {
        if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
          resourceWrap.append("<b class='link lrpadding'>"+tabData.name+"</b>");
          resourceWrap.click(function(ev){
            var actionList = [
              {
                name : "PDF",
                icon : "book",
                click : function(ev, ui){
                  var picker = sync.render("ui_filePicker")(obj, app, {
                    filter : "pdf",
                    change : function(ev, ui2, value) {
                      ui_prompt({
                        target : ui,
                        inputs : {
                          "Page #" : {placeholder : "(Optional)"}
                        },
                        click : function(ev, inputs) {
                          var page;
                          if (inputs["Page #"].val() != null) {
                            page = "#page="+inputs["Page #"].val() || 1;
                          }

                          var resData = {
                            name : value.split("/")[value.split("/").length-1].split(".")[0],
                            url : value + page,
                            type : "pdf"
                          };
                          var resource = sync.traverse(obj.data.resources, fullPath);
                          resource.res = resource.res || [];
                          resource.res.push(resData);
                          obj.sync("updateConfig");
                        }
                      });
                      layout.coverlay("resource-picker");
                    }
                  });
                  var pop = ui_popOut({
                    target : ui,
                    prompt : true,
                    align : "right",
                    id : "resource-picker",
                    style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
                  }, picker);
                  pop.resizable();
                }
              },
              {
                name : "Website",
                icon : "link",
                click : function(ev, ui){
                  ui_prompt({
                    target : ui,
                    inputs : {
                      "Resource Name" : "",
                      "Website URL" : ""
                    },
                    click : function(ev, inputs){
                      if (inputs["Resource Name"].val() || inputs["Website URL"].val()) {
                        var url = inputs["Website URL"].val();
                        if (url.match("https://")) {
                          var tabData = sync.traverse(obj.data.resources, fullPath);
                          tabData.res = tabData.res || [];
                          tabData.res.push({url : url, name : inputs["Resource Name"].val() || url, type : "website"});
                          obj.sync("updateConfig");
                        }
                        else {
                          sendAlert({"text" : "Websites must be secured ( https:// )"});
                        }
                      }
                    }
                  });
                }
              },
              {
                name : "Asset",
                icon : "unchecked",
                click : function(ev, ui){
                  var content = sync.render("ui_assetPicker")(obj, app, {
                    sessionOnly : true,
                    category : "p",
                    select : function(ev, ui, ent, options, entities){
                      var tabData = sync.traverse(obj.data.resources, fullPath);
                      tabData.res = tabData.res || [];
                      tabData.res.push({url : ent.id(), type : "asset"});
                      obj.sync("updateConfig");
                      layout.coverlay("add-asset");
                    }
                  });
                  var pop = ui_popOut({
                    target : $("body"),
                    prompt : true,
                    id : "add-asset",
                    title : "Pick Asset",
                    style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
                  }, content);
                  pop.resizable();
                }
              },
              {
                name : "Image",
                icon : "picture",
                click : function(ev, ui){
                  var picker = sync.render("ui_filePicker")(obj, app, {
                    filter : "img",
                    change : function(ev, ui2, value, name) {
                      var resData = {
                        name : value.split("/")[value.split("/").length-1].split(".")[0],
                        url : value,
                        name : name,
                        type : "img",
                      };
                      var tabData = sync.traverse(obj.data.resources, fullPath);
                      tabData.res = tabData.res || [];
                      tabData.res.push(resData);
                      obj.sync("updateConfig");
                      layout.coverlay("resource-picker");
                    }
                  });
                  var pop = ui_popOut({
                    target : ui,
                    prompt : true,
                    align : "right",
                    id : "resource-picker",
                    style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
                  }, picker);
                  pop.resizable();
                }
              },
              {
                name : "Sub-category",
                click : function(ev, ui){
                  ui_prompt({
                    target : ui,
                    inputs : {
                      "Category Name" : "",
                    },
                    click : function(ev, inputs){
                      if (inputs["Category Name"].val()) {
                        var tabData = sync.traverse(obj.data.resources, fullPath);
                        tabData.res = tabData.res || [];
                        tabData.res.push({name : inputs["Category Name"].val()});
                        obj.sync("updateConfig");
                      }
                    }
                  });
                }
              }
            ];

            ui_dropMenu($(this), actionList, {id : "add-resource"});
            ev.stopPropagation();
            ev.preventDefault();
          });
        }
        else {
          resourceWrap.append("<b class='lrpadding'>"+tabData.name+"</b>");
        }      }
      if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
        resourceWrap.contextmenu(function(ev){
        var ui = $(this);
        var actionList = [];
        actionList.push(
          {
            name : "Rename",
            click : function(ev, ui2) {
              ui_prompt({
                target : ui,
                inputs : {
                  "Rename" : sync.traverse(obj.data.resources, fullPath).name
                },
                click : function(ev, inputs){
                  if (inputs["Rename"].val()) {
                    sync.traverse(obj.data.resources, fullPath).name = inputs["Rename"].val();
                    obj.sync("updateConfig");
                  }
                }
              });
            }
          }
        );
        actionList.push(
          {
            name : "Access",
            click : function(ev, ui2) {
              var content = $("<div>");
              content.addClass("flexcolumn");

              var tabData = sync.traverse(obj.data.resources, fullPath);

              var securityContent = $("<div>").appendTo(content);
              function buildSecurity() {
                var secTbl = {};
                secTbl[getCookie("UserID")] = 1;
                secTbl = sync.traverse(obj.data.resources, fullPath)._s || secTbl;
                var sec = sync.render("ui_rights")(obj, app, {
                  security : secTbl,
                  change : function(ev, ui, userID, newSecurity){
                    sync.traverse(obj.data.resources, fullPath)._s = sync.traverse(obj.data.resources, fullPath)._s || secTbl;
                    if (userID == "default" && newSecurity === "") {
                      sync.traverse(obj.data.resources, fullPath)._s[userID] = "1";
                    }
                    else {
                      sync.traverse(obj.data.resources, fullPath)._s[userID] = newSecurity;
                    }
                    obj.sync("updateConfig");
                    securityContent.empty();
                    buildSecurity().appendTo(securityContent);
                  }
                });
                return sec;
              }
              buildSecurity().appendTo(securityContent);

              ui_popOut({
                target : ui,
                id : "tab-options",
              }, content);
            }
          }
        );
        if (resourceWrap.attr("type") != "asset") {
          actionList.push(
            {
              name : "Change link",
              click : function(ev, ui){
                var tabData = sync.traverse(obj.data.resources, fullPath);
                ui_prompt({
                  target : ui,
                  inputs : {
                    "Resource URL" : tabData.url
                  },
                  click : function(ev, inputs){
                    if (inputs["Resource URL"].val()) {
                      var url = inputs["Resource URL"].val();
                      var tabData = sync.traverse(obj.data.resources, fullPath);
                      tabData.url = inputs["Resource URL"].val();
                      obj.sync("updateConfig");
                    }
                    else {
                      var tabData = sync.traverse(obj.data.resources, fullPath);
                      delete tabData.url;
                      obj.sync("updateConfig");
                    }
                  }
                });
              }
            }
          );
        }
        actionList.push(
          {
            name : "Add resource",
            submenu : [
              {
                name : "PDF",
                icon : "book",
                click : function(ev, ui){
                  var picker = sync.render("ui_filePicker")(obj, app, {
                    filter : "pdf",
                    change : function(ev, ui2, value) {
                      ui_prompt({
                        target : ui,
                        inputs : {
                          "Page #" : {placeholder : "(Optional)"}
                        },
                        click : function(ev, inputs) {
                          var page;
                          if (inputs["Page #"].val() != null) {
                            page = "#page="+inputs["Page #"].val();
                          }

                          var resData = {
                            name : value.split("/")[value.split("/").length-1].split(".")[0],
                            url : value + page,
                            type : "pdf"
                          };
                          var resource = sync.traverse(obj.data.resources, fullPath);
                          resource.res = resource.res || [];
                          resource.res.push(resData);
                          obj.sync("updateConfig");
                        }
                      });
                      layout.coverlay("resource-picker");
                    }
                  });
                  var pop = ui_popOut({
                    target : ui,
                    prompt : true,
                    align : "right",
                    id : "resource-picker",
                    style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
                  }, picker);
                  pop.resizable();
                }
              },
              {
                name : "Website",
                icon : "link",
                click : function(ev, ui){
                  ui_prompt({
                    target : ui,
                    inputs : {
                      "Resource Name" : "",
                      "Website URL" : ""
                    },
                    click : function(ev, inputs){
                      if (inputs["Resource Name"].val() || inputs["Website URL"].val()) {
                        var url = inputs["Website URL"].val();
                        if (url.match("https://")) {
                          var tabData = sync.traverse(obj.data.resources, fullPath);
                          tabData.res = tabData.res || [];
                          tabData.res.push({url : url, name : inputs["Resource Name"].val() || url, type : "website"});
                          obj.sync("updateConfig");
                        }
                        else {
                          sendAlert({"text" : "Websites must be secured ( https:// )"});
                        }
                      }
                    }
                  });
                }
              },
              {
                name : "Asset",
                icon : "unchecked",
                click : function(ev, ui){
                  var content = sync.render("ui_assetPicker")(obj, app, {
                    sessionOnly : true,
                    category : "p",
                    select : function(ev, ui, ent, options, entities){
                      var tabData = sync.traverse(obj.data.resources, fullPath);
                      tabData.res = tabData.res || [];
                      tabData.res.push({url : ent.id(), type : "asset"});
                      obj.sync("updateConfig");
                      layout.coverlay("add-asset");
                    }
                  });
                  var pop = ui_popOut({
                    target : $("body"),
                    prompt : true,
                    id : "add-asset",
                    title : "Pick Asset",
                    style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
                  }, content);
                  pop.resizable();
                }
              },
              {
                name : "Image",
                icon : "picture",
                click : function(ev, ui){
                  var picker = sync.render("ui_filePicker")(obj, app, {
                    filter : "img",
                    change : function(ev, ui2, value, name) {
                      var resData = {
                        name : value.split("/")[value.split("/").length-1].split(".")[0],
                        url : value,
                        name : name,
                        type : "img",
                      };
                      var resource = sync.traverse(obj.data.resources, fullPath);
                      resource.res = resource.res || [];
                      resource.res.push(resData);
                      obj.sync("updateConfig");
                      layout.coverlay("resource-picker");
                    }
                  });
                  var pop = ui_popOut({
                    target : ui,
                    prompt : true,
                    align : "right",
                    id : "resource-picker",
                    style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
                  }, picker);
                  pop.resizable();
                }
              },
              {
                name : "Sub-category",
                click : function(ev, ui){
                  ui_prompt({
                    target : ui,
                    inputs : {
                      "Category Name" : "",
                    },
                    click : function(ev, inputs){
                      if (inputs["Category Name"].val()) {
                        var tabData = sync.traverse(obj.data.resources, fullPath);
                        tabData.res = tabData.res || [];
                        tabData.res.push({name : inputs["Category Name"].val()});
                        obj.sync("updateConfig");
                      }
                    }
                  });
                }
              }
            ]
          }
        );
        if (tabData.url) {
          actionList.push({
            name : "Force players to link",
            click : function(ev, ui){
              runCommand("forceTab", {index : app.attr("tabKey"), path : fullPath});
            }
          });
        }
        actionList.push(
          {
            name : "Remove resource",
            submenu : [
              {
                name : "CONFIRM",
                icon : "trash",
                click : function(ev, ui) {
                  var newPath = "";
                  var pathArray = fullPath.split(".");
                  for (var i=0; i<pathArray.length-1; i++) {
                    newPath += pathArray[i] + ".";
                  }
                  sync.traverse(obj.data.resources, newPath.substring(0, newPath.length-1)).splice(pathArray[pathArray.length-1], 1);
                  obj.sync("updateConfig");
                }
              }
            ]
          }
        );

        ui_dropMenu($(this), actionList, {id : "resource-option"});
        ev.stopPropagation();
        ev.preventDefault();
      });
      }
      var subCat = $("<div>").appendTo(resourceWrap);
      subCat.addClass("flexcolumn subtitle lrpadding lrmargin");
      for (var i in tabData.res) {
        if (tabData.res[i] && (!tabData.res[i]._s || hasSecurity(getCookie("UserID"), "Visible", tabData.res[i]))) {
          renderTab(tabData.res[i], i, fullPath+".res."+i).appendTo(subCat);
        }
      }

      return tabWrap;
    }

    var createWrap = $("<div>").appendTo(optionsBar);
    createWrap.addClass("flexrow alttext flexmiddle");

    var listWrap = $("<div>").appendTo(optionsBar);
    listWrap.addClass("flexcolumn fit-xy");
    listWrap.css("position", "relative");
    listWrap.css("overflow-y", "auto");
    listWrap.css("min-width", "250px");

    var tabList = $("<div>").appendTo(listWrap);
    tabList.addClass("flexcolumn fit-x lrpadding");
    tabList.css("position", "absolute");
    tabList.css("padding-bottom", "75px");

    for (var key in obj.data.resources) {
      if (obj.data.resources[key] && (!obj.data.resources[key]._s || hasSecurity(getCookie("UserID"), "Visible", obj.data.resources[key]))) {
        var tabWrap = $("<div>").appendTo(tabList);
        tabWrap.addClass("flexrow white outline spadding smooth");
        tabWrap.css("font-size", "1.2em");

        if (obj.data.resources[key]._s && obj.data.resources[key]._s.default && obj.data.resources[key]._s.default != 1) {
          tabWrap.css("background-color", "rgb(235,235,228)");
        }

        var tab = renderTab(obj.data.resources[key], key, key).appendTo(tabWrap);
        tab.addClass("flex");

        var remove = genIcon("remove").appendTo(tabWrap);
        remove.attr("index", key);
        remove.click(function(){
          var index = $(this).attr("index");
          var button = $("<button>");
          button.addClass("highlight alttext");
          button.css("font-size", "1.6em");
          button.append("Delete Category");
          button.click(function(){
            delete obj.data.resources[index];
            obj.sync("updateConfig");
            layout.coverlay("clear-category");
          });

          var pop = ui_popOut({
            target : $(this),
            id : "clear-category",
            hideclose : true,
            noCss : true,
            prompt : true,
          }, button);
        });
      }
    }

    if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
      var buttonWrap = $("<div>").appendTo(createWrap);
      buttonWrap.addClass("flexcolumn flexmiddle");

      var add = genIcon("plus", "Add Category...").appendTo(buttonWrap);
      add.attr("title", "Add a new Category");
      add.click(function(){
        obj.data.resources.push({name : "New Category"});
        obj.sync("updateConfig");
      });

      var add = genIcon("", "Copy from your PDFs!").appendTo(buttonWrap);
      add.addClass("subtitle");
      add.attr("title", "Use the PDF app to copy images from PDF");
      add.click(function(){
        var newApp = sync.newApp("ui_pdf", null, {});

        ui_popOut({
          prompt : true,
          target : $("body"),
          style : {width : "60vw", height : "80vh"}
        }, newApp);
      });
    }
  }

  function loadUrl(url, type, resourcePath) {
    frameWrap.empty();
    if (type == "asset") {
      var ent = getEnt(url);

      var frameWrapper = $("<div>").appendTo(frameWrap);
      frameWrapper.addClass("fit-xy");
      frameWrapper.css("position", "relative");
      frameWrapper.css("overflow", "auto");

      var frameWrapper = $("<div>").appendTo(frameWrapper);
      frameWrapper.addClass("flexcolumn flexmiddle fit-x");
      frameWrapper.css("position", "absolute");
      frameWrapper.css("min-height", "100%");
      frameWrapper.css("text-align", "left");

      var newFrame = sync.newApp(assetTypes[ent.data._t].handout || assetTypes[ent.data._t].ui).appendTo(frameWrapper);
      newFrame.attr("viewOnly", true);
      newFrame.removeClass("application");
      newFrame.css("width", assetTypes[ent.data._t].width || "100%");
      newFrame.css("height", assetTypes[ent.data._t].height || frameWrapper.height());
      ent.addApp(newFrame);
    }
    else if (type == "pdf") {
      function isElectron() {
        if (typeof require !== 'function') return false;
        if (typeof window !== 'object') return false;
        try {
          const electron = require('electron');
          if (typeof electron !== 'object') return false;
        } catch(e) {
          return false;
        }
        return true;
      }

      if (isElectron()) {
        var newFrame = $("<iframe>").appendTo(frameWrap);
        newFrame.attr("type", "application/pdf");
        newFrame.attr("src", url);
        newFrame.attr("width", "100%");
        newFrame.attr("height", "100%");
      }
      else {
        var newFrame = $("<object>").appendTo(frameWrap);
        newFrame.attr("type", "application/pdf");
        newFrame.attr("data", url);
        newFrame.attr("width", "100%");
        newFrame.attr("height", "100%");
      }
    }
    else if (type == "img") {
      var split = String(resourcePath).split(".");
      var index = split[split.length-1];
      var newPath = "";
      for (var i in split) {
        newPath += split[i] + ".";
      }
      newPath = newPath.substring(0, newPath.length-2);
      var imageWrapper = $("<div>").appendTo(frameWrap);
      imageWrapper.css("width", "100%");
      imageWrapper.css("height", "100%");
      imageWrapper.css("position", "relative");
      imageWrapper.css("overflow", "auto");
      imageWrapper.css("background-image", "url('"+url+"')");
      imageWrapper.css("background-repeat", "no-repeat");
      imageWrapper.css("background-position", "center");
      imageWrapper.css("background-size", "contain");
      imageWrapper.css("padding-bottom", "1.5em");
      imageWrapper.scroll(function(ev){
        if (($(this).scrollTop()-(imageWrapper.attr("lastScroll") || 0)) < 0 && $(this).scrollTop() == 0 && !imageWrapper.attr("transferring")) {
          var newIndex = Math.max(index-1, 0);
          var newResource = newPath + newIndex;
          var resourceData = sync.traverse(obj.data.resources, newResource);
          if (resourceData.type == type && index != newIndex) {
            imageWrapper.attr("transferring", true);
            index = newIndex;
            var newImg = $("<img>")
            newImg.attr("src", resourceData.url);
            newImg.css("zoom", zoom+"%");
            newImg[0].onload = function(){
              imgContainer.empty();
              imgContainer.append(newImg);
              img = newImg;
              img.css("margin-top", "100px");
              img.css("margin-bottom", "100px");
              imageWrapper.scrollTop(imageWrapper[0].scrollHeight-1);
              setTimeout(function(){imageWrapper.removeAttr("transferring")}, 100);
            }
          }
        }
        else if (($(this).scrollTop()-(imageWrapper.attr("lastScroll") || 0)) > 0 && $(this).scrollTop() + $(this).innerHeight() >= $(this)[0].scrollHeight && !imageWrapper.attr("transferring")) {
          var newIndex = Math.max(Number(index)+1, 0);
          var newResource = newPath + newIndex;
          var resourceData = sync.traverse(obj.data.resources, newResource);
          if (resourceData.type == type && index != newIndex) {
            imageWrapper.attr("transferring", true);
            index = newIndex;
            var newImg = $("<img>")
            newImg.attr("src", resourceData.url);
            newImg.css("zoom", zoom+"%");
            newImg[0].onload = function(){
              imgContainer.empty();
              imgContainer.append(newImg);
              img = newImg;
              img.css("margin-top", "100px");
              img.css("margin-bottom", "100px");
              imageWrapper.scrollTop(1);
              setTimeout(function(){imageWrapper.removeAttr("transferring")}, 100);
            }
          }
        }
        imageWrapper.attr("lastScroll", $(this).scrollTop());
      });

      var imgContainer = $("<div>").appendTo(imageWrapper);
      imgContainer.addClass("flexmiddle");
      imgContainer.css("position", "absolute");
      imgContainer.css("min-width", "100%");

      imgContainer.hide();

      var img = $("<img>").appendTo(imgContainer);
      img.attr("src", url);

      var zoom = 100;

      var zoomContainer = $("<div>").appendTo(frameWrap);
      zoomContainer.addClass("flexcolumn flexmiddle");
      zoomContainer.css("width", "auto");
      zoomContainer.css("position", "absolute");
      zoomContainer.css("left", "100px");
      zoomContainer.css("bottom", "100px");


      var checkboxWrap = $("<div>")//.appendTo(zoomContainer);
      checkboxWrap.addClass("flexmiddle subtitle bold");

      var checkbox = genInput({
        parent : checkboxWrap,
        type : "checkbox",
        style : {"margin-top" : "0px"}
      });
      checkbox.prop("checked", app.attr("scrollNext"));
      //checkboxWrap.append("Scroll to Next");

      var maxZoom = 200;
      var typeI = "range";
      if (layout.mobile) {
        maxZoom = 1000;
        typeI = "number";
      }
      var zoomRange = genInput({
        parent : zoomContainer,
        type : typeI,
        min : 25,
        value : 100,
        step : 5,
        style : {"width": "100px", color : "black"},
        max : maxZoom
      }, 1);
      zoomRange.val(zoom);
      zoomRange.bind("input", function(){
        imgContainer.show();
        imageWrapper.css("background", "none");
        zoom = $(this).val();
        img.css("zoom", zoom + "%");
        img.css("margin-top", "100px");
        img.css("margin-bottom", "100px");
      });
    }
    else if (type == "website") {
      var newFrame = $("<iframe>").appendTo(frameWrap);
      newFrame.attr("src", url);
      newFrame.attr("width", "100%");
      newFrame.attr("height", "100%");
      newFrame.css("border", "none");
      newFrame.css("outline", "none");
    }
  }

  if (!hasSecurity(getCookie("UserID"), "Assistant Master") && !_hasAccepted) {
    optionsBar.addClass("flexmiddle flex alttext");
    optionsBar.removeClass("flexrow flexaround");
    optionsBar.append("<div>Make sure you trust your GM before accessing these resources</div>");

    var confirm = $("<button>").appendTo(optionsBar);
    confirm.addClass("highlight alttext");
    confirm.append("I trust them, and accept what they could show me");
    confirm.click(function(){
      frameWrap.addClass("fit-xy");
      optionsBar.removeClass("flexmiddle flex alttext");
      optionsBar.addClass("flexrow");
      loadTabs();
      if (resourcePath) {
        var resourceData = sync.traverse(obj.data.resources, resourcePath);
        loadUrl(resourceData.url, resourceData.type, resourcePath);
      }
      _hasAccepted = true;
    });
  }
  else {
    optionsBar.removeClass("flexmiddle flex");
    frameWrap.addClass("fit-xy");
    loadTabs();
    if (resourcePath) {
      var resourceData = sync.traverse(obj.data.resources, resourcePath);
      setTimeout(function(){loadUrl(resourceData.url, resourceData.type, resourcePath)}, 100);
    }
  }

  app.removeAttr("forced");

  return div;
});


sync.render("ui_pdf", function(obj, app, scope){
  scope = scope || {viewOnly : app.attr("viewOnly") == "true", pdf : app.attr("url")};
  var div = $("<div>");
  div.addClass("flexcolumn fit-xy");

  var zoom = parseInt(app.attr("zoom")) / 100 || 1;

  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("outline background alttext flexaround flexwrap");
  optionsBar.css("min-width", "200px");
  optionsBar.css("min-height", "22px");
  if (scope.pdf) {
    showPDF(scope.pdf, filePicker.get(0).files[0].name);
  }
  else {
    var filePicker = genInput({
      parent : optionsBar,
      type : "file",
      accept : "application/pdf",
      id : app.attr("id")+"-pdf-upload"
    });
    filePicker.change(function(){
      // Send the object url of the pdf
      showPDF(URL.createObjectURL(filePicker.get(0).files[0]), filePicker.get(0).files[0].name);
    });
  }
  var bookmarkBar = $("<div>");
  bookmarkBar.appendTo(optionsBar);

  var controlBar = $("<div>").appendTo(div);
  controlBar.addClass("outline background alttext flexrow flexaround");

  var pdfCanvasContainer = $("<div>").appendTo(div);
  pdfCanvasContainer.css("flex", "1");
  pdfCanvasContainer.css("position", "relative");
  pdfCanvasContainer.css("overflow", "scroll");

  var pdfCanvas = $("<canvas>").appendTo(pdfCanvasContainer);
  pdfCanvas.css("position", "absolute");
  pdfCanvas.attr("width", Math.round($(window).outerWidth() *(3/4)));
  pdfCanvas.attr("height", Math.round($(window).outerHeight() *(3/4)));
  var PDF,
      CURRENT_PAGE,
      TOTAL_PAGES,
      PAGE_RENDERING_IN_PROGRESS = 0,
      CANVAS = pdfCanvas.get(0).getContext('2d'),
      WIDTH;
  // Initialize and load the PDF
  function showPDF(pdf_url, filename) {
    controlBar.css("min-height", "22px");
    controlBar.empty();
    bookmarkBar.empty();
    pdfCanvasContainer.css("min-width", "200px");
    pdfCanvasContainer.css("min-height", "300px");

    app.attr("PDF_DOC", pdf_url);
    PDFJS.getDocument({url: pdf_url}).then(function(pdf_doc) {
      var list = genIcon("bookmark", "Bookmarks").appendTo(bookmarkBar);
      list.click(function(){
        var bookMarkList = JSON.parse(getCookie("GM_PDF_Bookmarks") || "{}") || {};
        var keys = bookMarkList[filename] || {};
        var options = [];
        for (var key in keys) {
          options.push({
            name : key,
            attr : {key : key},
            submenu : [{
              name : "Delete",
              attr : {
                key : key
              },
              click : function(ev, ui) {
                var bookMarkList = JSON.parse(getCookie("GM_PDF_Bookmarks") || {}) || {};
                delete bookMarkList[filename][ui.attr("key")];
                setCookie("GM_PDF_Bookmarks", JSON.stringify(bookMarkList), 9999999);
              }
            }],
            click : function(ev, ui) {
              var bookMarkList = JSON.parse(getCookie("GM_PDF_Bookmarks") || {}) || {};
              var data = bookMarkList[filename][ui.attr("key")];
              pdfCanvasContainer.scrollTop(data.y);
              pdfCanvasContainer.scrollLeft(data.x);
              zoomRange.val(data.zoom * 100);
              zoomRange.change();
              setTimeout(function(){
                showPage(data.page);
              }, 1);
            }
          });
        }
        var dropMenu = ui_dropMenu($(this), options, {id: "pdf-bookmark-menu"});
      });
      var bookmark = genIcon("star-empty");
      bookmark.css("margin-left", "1em");
      bookmark.appendTo(bookmarkBar);
      bookmark.click(function(){
        ui_prompt({
          target : $(this),
          id : "pdf-bookmark",
          inputs : {
            "Name" : ""
          },
          click : function(ev, inputs) {
            var bookMarkList = JSON.parse(getCookie("GM_PDF_Bookmarks") || "{}") || {};
            bookMarkList[filename] = bookMarkList[filename] || {};
            bookMarkList[filename][(inputs["Name"].val() || "").trim()] = {
              page : CURRENT_PAGE,
              zoom : zoom,
              x : pdfCanvasContainer.scrollLeft(),
              y : pdfCanvasContainer.scrollTop()
            }
            setCookie("GM_PDF_Bookmarks", JSON.stringify(bookMarkList), 9999999);
            bookmark.changeIcon("star");
          }
        });
      });
      PDF = pdf_doc;
      TOTAL_PAGES = PDF.numPages;
      // Load and render a specific page of the PDF
      function showPage(page_no) {
        PAGE_RENDERING_IN_PROGRESS = 1;
        CURRENT_PAGE = page_no;

        PDF.getPage(page_no).then(function(page) {
          // As the canvas is of a fixed width we need to set the scale of the viewport accordingly
          var scale_required = pdfCanvas.get(0).width / page.getViewport(1).width;

          // Get viewport of the page at required scale
          var viewport = page.getViewport(scale_required);
          // Set canvas height
          pdfCanvas.get(0).height = viewport.height;
          if (WIDTH == null) {
            WIDTH = pdfCanvas.get(0).width;
          }
          var renderContext = {
            canvasContext: CANVAS,
            viewport: viewport
          };
          // Render the page contents in the canvas
          page.render(renderContext).then(function() {
            PAGE_RENDERING_IN_PROGRESS = 0;
          });
        });
        current.val(page_no);
        bookmark.changeIcon("star-empty");
        var bookMarkList = JSON.parse(getCookie("GM_PDF_Bookmarks") || "{}") || {};
        if (bookMarkList[filename]) {
          for (var key in bookMarkList[filename]) {
            if (bookMarkList[filename][key].page == CURRENT_PAGE) {
              bookmark.changeIcon("star");
              break;
            }
          }
        }
      }
      controlBar.empty();
      var previous = genIcon("backward").appendTo(controlBar);
      previous.click(function() {
        if(CURRENT_PAGE != 1)
          showPage(--CURRENT_PAGE);
        current.val(CURRENT_PAGE);
      });
      // Next page of the PDF

      var current = genInput({
        parent : controlBar,
        type : "number",
        placeholder : "Page #",
        style : {color : "black", width : "100px", "font-size" : "1em"}
      });
      current.val(CURRENT_PAGE);
      current.change(function(){
        CURRENT_PAGE = Math.round(Number($(this).val()) || 0);
        CURRENT_PAGE = Math.min(Math.max(CURRENT_PAGE, 0), TOTAL_PAGES);
        showPage(CURRENT_PAGE);
      });

      var next = genIcon("forward").appendTo(controlBar);
      next.click(function() {
        if(CURRENT_PAGE != TOTAL_PAGES)
          showPage(++CURRENT_PAGE);
        current.val(CURRENT_PAGE);
      });

      var zoomContainer = $("<div>").appendTo(controlBar);
      zoomContainer.addClass("flexaround");
      zoomContainer.css("width", "auto");

      var zoomOut = genIcon("zoom-out").appendTo(zoomContainer);
      zoomOut.click(function(){
        app.attr("zoom", Math.max(parseInt(zoomRange.val()) - 25, 25));
        zoomRange.val(Math.max(parseInt(zoomRange.val()) - 25, 25));
        zoom = parseInt(app.attr("zoom")) / 100 || 1;
        pdfCanvas.get(0).width = Math.round(WIDTH * zoom);
        showPage(CURRENT_PAGE);
        zoomLabel.text(Math.round(zoom*100) + "%");
      });

      var maxZoom = 200;
      var type = "range";
      if (layout.mobile) {
        maxZoom = 1000;
        type = "number";
      }

      var zoomRange = genInput({
        parent : zoomContainer,
        type : type,
        min : 25,
        value : 100,
        step : 5,
        style : {"width": "100px", color : "black"},
        max : maxZoom
      }, 1);
      zoomRange.val(zoom * 100);
      zoomRange.change(function(){
        app.attr("zoom", $(this).val());
        zoom = parseInt(app.attr("zoom")) / 100 || 1;
        pdfCanvas.get(0).width = Math.round(WIDTH * zoom);
        showPage(CURRENT_PAGE);
        zoomLabel.text(Math.round(zoom*100) + "%");
      });
      var zoomIn = genIcon("zoom-in").appendTo(zoomContainer);
      zoomIn.click(function(){
        app.attr("zoom", Math.min(parseInt(zoomRange.val()) + 25, maxZoom));
        zoomRange.val(Math.min(parseInt(zoomRange.val()) + 25, maxZoom));
        zoom = parseInt(app.attr("zoom")) / 100 || 1;
        pdfCanvas.get(0).width = Math.round(WIDTH * zoom);
        showPage(CURRENT_PAGE);
        zoomLabel.text(Math.round(zoom*100) + "%");
      });

      var zoomLabel = $("<b>").appendTo(zoomContainer);
      zoomLabel.text(Math.round(zoom*100) + "%");
      // Show the first page
      showPage(1);
    }).catch(function(error) {
      // If error re-show the upload button
      alert(error.message);
    });
  }
  return div;
});

sync.render("ui_players", function(obj, app, scope) {
  if (!obj) {
    if (!game.players) {
      var div = $("<div>");
      div.append("connecting");

      return div;
    }

    game.players.addApp(app);
    return $("<div>");
  }
  scope = scope || {height : app.attr("height")};

  var data = obj.data;
  var div = $("<div>");
  div.addClass("flexrow flexmiddle fit-xy");

  $("#player-list").css("left", "");
  $("#player-list").css("right", "0");

  var playerList = $("<div>").appendTo(div);
  playerList.addClass("flexrow flex flexmiddle fit-xy");
  playerList.sortable({
    handle : ".playerPlate",
    connectWith : ".dropContent",
    start : function(ev, ui) {
      $(ui.item).css("height", scope.height || "50px");
    }
  });

  playerList.append("<div class='flex'></div>");

  for (var id in data) {
    if (id != getCookie("UserID")) {
      sync.render("ui_playerToken")(obj, app, {userID : id, centered : true, height : scope.height}).appendTo(playerList);
    }
  }

  if (getCookie("UserID") == "Sandboxer") {
    playerList.remove();

    var referPlate = $("<div>").appendTo(div);
    referPlate.addClass("flexmiddle alttext");
    if (Object.keys(data).length == 1) {
      referPlate.addClass("flex");
    }

    var label = genIcon("log-in", "Sign In to play with friends").appendTo(referPlate);
    label.addClass("lrpadding");
    label.css("pointer-events", "auto");
    label.click(function(){
      var auth = authDialog();
      var pop = ui_popOut({
        target : $(this),
        id : "auth",
        align : "top"
      }, auth);
      pop.addClass("background flexmiddle");
      pop.removeClass("white");
      pop.find(".white").removeClass("white");
      pop.css("border", "1px solid rgba(0,0,0,0.2)");
    });
  }
  else {
    var label;
    if (Object.keys(game.players.data).length <= 1) {
      playerList.removeClass("flex flexmiddle");
      label = genIcon("log-in", "Click to invite your party");
      label.addClass("flex");
    }
    else {
      label = genIcon("log-in");
    }
    label.appendTo(div);
    label.addClass("lrpadding alttext flexmiddle");
    label.css("color", "white");
    label.css("pointer-events", "auto");
    label.css("white-space", "nowrap");
    label.attr("title", "Copies an invite to clipboard");
    label.click(function(){
      var content = $("<div>");
      content.addClass("flexcolumn");

      var button = $("<button>").appendTo(content);
      button.addClass("background alttext padding");
      button.text("From Local Network");
      button.click(function(){
        var input = genInput({
          parent : $(this),
          id : "copy-url",
          value : window.location.href.split("?password")[0],
        });

        if (getCookie("InternalIP")) {
          input.val(getCookie("InternalIP")+":"+getCookie("PrivatePort")+"/join");
        }
        input.focus();
        input.get(0).setSelectionRange(0, input.val().length);

        document.execCommand("copy");
        input.remove();
        sendAlert({text : "Invitation Copied!"});
        layout.coverlay("invite");
      });

      var buttonWrap = $("<div>").appendTo(content);
      buttonWrap.addClass("flexmiddle flexcolumn background alttext padding");
      buttonWrap.append("From the Internet");

      var button = $("<button>").appendTo(buttonWrap);
      button.addClass("spadding highlight alttext subtitle");
      button.css("width", "150px");
      button.text("(No Setup)");
      button.click(function(){
        var input = genInput({
          parent : $(this),
          id : "copy-url",
          value : window.location.href.split("?password")[0],
        });

        if (getCookie("PublicLink")) {
          input.val(decodeURIComponent(getCookie("PublicLink"))+"/join?select=true");
        }

        input.focus();
        input.get(0).setSelectionRange(0, input.val().length);

        document.execCommand("copy");
        input.remove();
        sendAlert({text : "Invitation link copied to clip board! <br> Players join by navigating to <a class='underline' target='_' href='"+(decodeURIComponent(getCookie("PublicLink"))+"/join?select=true")+"'>this link</a> into a web browser!", duration : 6000});
        layout.coverlay("invite");
      });

      var button = $("<button>").appendTo(buttonWrap);
      button.addClass("spadding highlight alttext subtitle");
      button.css("width", "150px");
      button.text("UPnP");
      button.click(function(){
        var input = genInput({
          parent : $(this),
          id : "copy-url",
          value : window.location.href.split("?password")[0],
        });

        if (getCookie("ExternalIP")) {
          input.val(getCookie("ExternalIP")+":"+getCookie("PublicPort")+"/join");
        }
        input.focus();
        input.get(0).setSelectionRange(0, input.val().length);

        document.execCommand("copy");
        input.remove();
        sendAlert({text : "Invitation link copied to clip board! <br> Players join by navigating to <a class='underline' target='_' href='"+(input.val())+"'>this link</a> into a web browser!", duration : 6000});
        layout.coverlay("invite");
      });

      var button = $("<button>").appendTo(buttonWrap);
      button.addClass("spadding highlight alttext subtitle");
      button.css("width", "150px");
      button.text("Port Forwarding");
      button.click(function(){
        var input = genInput({
          parent : $(this),
          id : "copy-url",
          value : window.location.href.split("?password")[0],
        });

        if (getCookie("ExternalIP")) {
          input.val(getCookie("ExternalIP")+":"+getCookie("PrivatePort")+"/join");
        }
        input.focus();
        input.get(0).setSelectionRange(0, input.val().length);

        document.execCommand("copy");
        input.remove();
        sendAlert({text : "Invitation link copied to clip board! <br> Players join by navigating to <a class='underline' target='_' href='"+(input.val())+"'>this link</a> into a web browser!", duration : 6000});
        layout.coverlay("invite");
      });

      var pop = ui_popOut({
        target : $(this),
        noCss : true,
        prompt : true,
        id : "invite",
        style : {"width" : "200px"}
      }, content);
    });
  }

  return div;
});


sync.render("ui_playerToken", function(obj, app, scope) {
  scope = scope || {userID : app.attr("UserID")};

  var id = scope.userID;
  var player = game.players.data[scope.userID];
  if (!player) {
    return $("<div>");
  }
  var playerPlate = $("<div>");
  playerPlate.addClass("playerPlate round flexcolumn");
  playerPlate.attr("id", "player-icon-"+id);
  playerPlate.attr("UserID", id);
  playerPlate.attr("src", "players");
  playerPlate.attr("name", player.displayName);
  playerPlate.attr("index", player.entity);
  playerPlate.css("position", "relative");
  playerPlate.css("pointer-events", "auto");
  playerPlate.css("height", "100%");
  playerPlate.css("min-width", "50px");
  playerPlate.css("margin-right", "0.25em");
  playerPlate.css("margin-left", "0.25em");

  playerPlate.click(function() {
    var playerID = $(this).attr("UserID");
    var playerPlate = $(this);
    if (getCookie("UserID") == playerID || hasSecurity(playerID, "Assistant Master")) {
      var uID = playerID;
      var content = sync.render("ui_assetPicker")(obj, app, {
        rights : "Rights",
        filter : "c",
        hideCreate : true,
        sessionOnly : true,
        select : function(ev, ui, ent, options, entities){
          runCommand("selectPlayerEntity", {id : ent.id(), userID : uID});
          sendAlert({text : "Impersonating Character : " + sync.rawVal(ent.data.info.name)});
          if (uID == getCookie("UserID")) {
            $(".chatType").text("IC");
            $(".chatType").addClass("highlight alttext");
            $(".chatType").attr("title", "In Character");
            $(".application[ui-name='_imperson']").attr("src", sync.rawVal(ent.data.info.img) || "/content/icons/blankchar.png");
            $(".application[ui-name='_imperson']").attr("ICText", sync.rawVal(ent.data.info.name));
            $(".application[ui-name='_imperson']").each(function(){
              sync.updateApp($(this), game.players);
            });
          }
          layout.coverlay("add-asset");
        }
      });
      var pop = ui_popOut({
        target : $(this),
        align : "top",
        prompt : true,
        id : "add-asset",
        title : "Impersonate...",
        style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
      }, content);
      pop.resizable();
    }
    else {
      if ($(this).attr("index") && game.entities.data[$(this).attr("index")] && game.entities.data[$(this).attr("index")].data["_t"] == "c") {
        if (hasSecurity(getCookie("UserID"), "Visible", game.entities.data[$(this).attr("index")].data)) {
          assetTypes["c"].preview(game.entities.data[$(this).attr("index")], $(this));
        }
        //popOut.resizable();
      }
      else if (hasSecurity(getCookie("UserID"), "Assistant Master") || uID == getCookie("UserID")) {
        var uID = playerID;
        var content = sync.render("ui_assetPicker")(obj, app, {
          rights : "Rights",
          filter : "c",
          hideCreate : true,
          sessionOnly : true,
          select : function(ev, ui, ent, options, entities){
            runCommand("selectPlayerEntity", {id : ent.id(), userID : uID});
            sendAlert({text : "Impersonating Character : " + sync.rawVal(ent.data.info.name)});
            if (uID == getCookie("UserID")) {
              $(".chatType").text("IC");
              $(".chatType").addClass("highlight alttext");
              $(".chatType").attr("title", "In Character");
              $(".application[ui-name='_imperson']").attr("src", sync.rawVal(ent.data.info.img) || "/content/icons/blankchar.png");
              $(".application[ui-name='_imperson']").attr("ICText", sync.rawVal(ent.data.info.name));
              $(".application[ui-name='_imperson']").each(function(){
                sync.updateApp($(this), game.players);
              });
            }
            layout.coverlay("add-asset");
          }
        });
        var pop = ui_popOut({
          target : $(this),
          align : "top",
          prompt : true,
          id : "add-asset",
          title : "Impersonate...",
          style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
        }, content);
        pop.resizable();
      }
      else {
        sendAlert({text : "User Has no Character"});
      }
    }
  });
  playerPlate.contextmenu(function(ev){
    var playerID = $(this).attr("UserID");
    var playerPlate = $(this);
    var optionList = [];
    if (hasSecurity(getCookie("UserID"), "Assistant Master") && playerPlate.attr("UserID") != getCookie("UserID")) {
      var admin = [
        {name : "Kick", click : function(ev, ui){
          sendAlert({text : "Kicked"});
          runCommand("kickPlayer", playerPlate.attr("UserID"));
        }},
      ];
      if (hasSecurity(getCookie("UserID"), "Game Master")) {
        if (game.config.data && (game.config.data.players && game.config.data.players[playerPlate.attr("UserID")])) {

        }
        else {
          admin.push({name : "Make Permanent Member", click : function(ev, ui){
            var content = $("<div>");
            content.addClass("flexcolumn flexmiddle");
            content.append("<i style='font-size : 0.8em'>A permanent player will always appear in the 'Rights' menu's of assets.<br>If a permanent player has the rank of Assistant Master, then they will have the option to resume this session anytime they want</i>");

            var button = $("<button>").appendTo(content);
            button.append("Confirm");
            button.click(function(){
              game.config.data.players = game.config.data.players || {};
              game.config.data.players[playerPlate.attr("UserID")] = duplicate(game.players.data[playerPlate.attr("UserID")]);
              game.config.sync("updateConfig");
              layout.coverlay("player-perm");
            });

            ui_popOut({
              target : playerPlate,
              id : "player-perm",
              style : {"width" : "20vw"}
            }, content);
          }});
        }
      }
      optionList.push({name : "Admin", submenu : admin})
    }

    if (getPlayerCharacter(playerPlate.attr("UserID")) != {} && hasSecurity(getCookie("UserID"), "Visible", getPlayerCharacter(playerPlate.attr("UserID")).data)) {
      var character = [
        {name : "Actions", click : function(){
          var actionObj = sync.dummyObj();
          actionObj.data = {context : {c : obj.id()}};

          game.locals["actions"] = game.locals["actions"] || [];
          game.locals["actions"].push(actionObj);

          var newApp = sync.newApp("ui_hotActions");
          newApp.addClass("padding");
          actionObj.addApp(newApp);

          var pop = ui_popOut({
            target : playerPlate,
            minimize : true,
            dragThickness : "0.5em",
            title : getPlayerCharacterName(playerPlate.attr("UserID")),
            align : "left"
          }, newApp);
          pop.resizable();
        }},
        {name : "Sheet", click : function(){
          var content = sync.newApp("ui_characterSheet");
          getPlayerCharacter(playerPlate.attr("UserID")).addApp(content);
          var popOut = ui_popOut({
            target: playerPlate,
            id: "char-summary-"+$(this).attr("index"),
            align: "right",
            dragThickness : "0.5em",
            style : {width : assetTypes["c"].width, height : assetTypes["c"].height}
          }, content);
          popOut.resizable();
        }},
        {name : "Summary", click : function(){
          var content = sync.newApp("ui_characterSummary");
          getPlayerCharacter(playerPlate.attr("UserID")).addApp(content);
          var popOut = ui_popOut({
            target: playerPlate,
            id: "char-summary-"+$(this).attr("index"),
            align: "right",
            dragThickness : "0.5em",
          }, content);
          popOut.resizable();
        }},
      ]
      optionList.push({name : "Character", submenu : character});
    }
    if (playerPlate.attr("UserID") == getCookie("UserID") || hasSecurity(getCookie("UserID"), "Assistant Master")) {
      optionList.push({
        name : "Impersonate...",
        icon : "user",
        click : function(ev, ui) {
          var uID = playerPlate.attr("UserID");
          var content = sync.render("ui_assetPicker")(obj, app, {
            rights : "Rights",
            filter : "c",
            hideCreate : true,
            sessionOnly : true,
            select : function(ev, ui, ent, options, entities){
              runCommand("selectPlayerEntity", {id : ent.id(), userID : uID});
              sendAlert({text : "Impersonating Character : " + sync.rawVal(ent.data.info.name)});
              if (uID == getCookie("UserID")) {
                $(".chatType").text("IC");
                $(".chatType").addClass("highlight alttext");
                $(".chatType").attr("title", "In Character");
                $(".application[ui-name='_imperson']").attr("src", sync.rawVal(ent.data.info.img) || "/content/icons/blankchar.png");
                $(".application[ui-name='_imperson']").attr("ICText", sync.rawVal(ent.data.info.name));
                $(".application[ui-name='_imperson']").each(function(){
                  sync.updateApp($(this), game.players);
                });
              }
              layout.coverlay("add-asset");
            }
          });
          var pop = ui_popOut({
            target : $("body"),
            prompt : true,
            id : "add-asset",
            title : "Impersonate...",
            style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
          }, content);
          pop.resizable();
        }
      });
    }
    var col = {
      name : "Color",
      submenu : [],
    };
    var submenu = [
      "rgba(34,34,34,1)",
      "rgba(187,0,0,1)",
      "rgba(255,153,0,1)",
      "rgba(255,240,0,1)",
      "rgba(0,187,0,1)",
      "rgba(0,115,230,1)",
      "rgba(176,0,187,1)",
      "rgba(255,115,255,1)",
      "rgba(255,255,255,1)",
    ];
    for (var i in submenu) {
      col.submenu.push({
        icon : "tint",
        style : {"background-color" : submenu[i], "color" : "transparent"},
        click : function(ev, ui){
          if (playerID == getCookie("UserID") || hasSecurity(getCookie("UserID"), "Assistant Master")) {
            runCommand("selectPlayerColor", {col : ui.css("background-color"), userID : playerID});
            layout.coverlay("player-color");
          }
        },
      });
    }
    col.submenu.push({
      icon : "cog",
      click : function(){
        if (playerID == getCookie("UserID") || hasSecurity(getCookie("UserID"), "Assistant Master")) {
          var primaryCol = sync.render("ui_colorPicker")(obj, app, {
            hideColor : true,
            custom : true,
            colorChange : function(ev, ui, col){
              runCommand("selectPlayerColor", {col : col, userID : playerID});
              layout.coverlay("player-color");
            }
          });

          ui_popOut({
            target : playerPlate,
            id : "player-color",
          }, primaryCol);
        }
      },
    });
    optionList.push(col);

    if (game.state.data.cards) {
      function draw(deck, number, player) {
        var deckData = game.state.data.cards.decks[deck];
        game.state.data.cards.players = game.state.data.cards.players || {};
        game.state.data.cards.players[player] = game.state.data.cards.players[player] || [];

        var cards = deckData.pool.splice(0, number);
        for (var i in cards) {
          game.state.data.cards.players[player].push(cards[i]);
        }

        game.state.sync("updateState");
      }
      var cards = [];
      if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
        cards.push({
          name : "Discard",
          submenu : [
            {
              name : "All Cards",
              click : function(ev, ui){
                game.state.data.decks.players[playerID];
                game.state.sync("updateState");
              }
            },
            {
              name : "First Card",
              click : function(ev, ui){
                game.state.data.decks.players[playerID].splice(0, 1);
                game.state.sync("updateState");
              }
            },
            {
              name : "Last Card",
              click : function(ev, ui){
                game.state.data.decks.players[playerID].splice(game.state.data.decks.players[playerID].length-1, 1);
                game.state.sync("updateState");
              }
            }
          ]
        });
      }
      if (game.state.data.cards.players[playerID] && game.state.data.cards.players[playerID].length) {
        cards.push({
          name : "Show Hand",
          click : function(){
            var content = $("<div>");
            content.addClass("flexcolumn");

            var namePlate = $("<b>"+(getPlayerCharacterName(playerID) || getPlayerName(playerID))+"</b>").appendTo(content);
            namePlate.addClass("alttext lrpadding subtitle smooth outline");
            namePlate.css("pointer-events", "none");
            namePlate.css("background-color", "rgba(0,0,0,0.6)");
            namePlate.css("padding-right", "2em");

            var newApp = sync.newApp("ui_hand").appendTo(content);
            newApp.addClass("flexmiddle");
            newApp.attr("UserID", playerID);

            game.state.addApp(newApp);

            var pop = ui_popOut({
              target : $("#player-icon-"+playerID),
              id : "hand-"+playerID,
              align : "top",
              noCss : true,
              style : {"min-width" : "70px"},
            }, content);
            pop.attr("UserID", playerID);

            if (game.players.data[playerID].color) {
              pop.css("background-color", game.players.data[playerID].color);
            }
            else {
              pop.addClass("background");
            }
          }
        });
      }
    }
    if (game.state.data && game.state.data.cards && game.state.data.cards.players[playerID] && game.state.data.cards.players[playerID].length) {
      if (cards.length) {
        optionList.push({name : "Playing Cards", submenu : cards});
      }
    }

    optionList.push({
      name : "Send Handout",
      click : function(ev, ui){
        var content = sync.render("ui_assetPicker")(obj, app, {
          rights : "Visible",
          category : "p",
          hideCreate : true,
          sessionOnly : true,
          select : function(ev, ui, ent, options, entities){
            var p = {};
            p[playerPlate.attr("UserID")] = true;
            runCommand("handout", {id : ent.id(), name : "Handout", ui : assetTypes[ent.data._t].handout, players : p});
            layout.coverlay("add-asset");
            sendAlert({text : "Sent"});
          }
        });
        var pop = ui_popOut({
          target : $("body"),
          prompt : true,
          id : "add-asset",
          title : "Hand out...",
          style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
        }, content);
        pop.resizable();
      }
    });
    optionList.push({
      name : "Whisper",
      click : function(ev, ui){
        var prompt = ui_prompt({
          target : playerPlate,
          inputs : {
            "Message" : ""
          },
          click : function(ev, inputs){
            var p = {};
            p[getCookie("UserID")] = true;
            p[playerPlate.attr("UserID")] = true;
            runCommand("chatEvent", {text : "/w "+ inputs["Message"].val(), person : getPlayerCharacterName(getCookie("UserID")), p : p});
            sendAlert({text : "Sent"});
            layout.coverlay(prompt);
          }
        });
      }
    });

    if (playerPlate.attr("UserID") == getCookie("UserID")) {
      optionList.push({name : "Share Reaction", allowExternal : true, click : function(ev, ui){
        var picker = sync.render("ui_filePicker")(obj, app, {
          change : function(ev, ui, val){
            runCommand("reaction", val);
            layout.coverlay("reaction-share");
          }
        });
        var prompt = ui_popOut({
          target : ui,
          prompt : true,
          id : "reaction-share",
          style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
        }, picker);
      }});
      if ($("#web-cam-"+playerID).length && !$("#web-cam-"+playerID).is(":visible")) {
        optionList.push({
          name : "Show Voice/Video Controls",
          click : function(){
            $("#web-cam-"+playerID).show();
          }
        });
        optionList.push({
          name : "Leave Voice/Video Chat",
          click : function(){
            comms.shutdown();
          }
        });
      }
      else {
        /*optionList.push({
          name : "Join Voice/Video Chat",
          click : function(){
            initializeCamera();
          }
        });*/
      }
    }
    else {
      if ($("#web-cam-"+playerID).length) {
        optionList.push({
          name : "Show Voice/Video Controls",
          click : function(){
            $("#web-cam-"+playerID).show();
          }
        });
      }
    }

    var dropMenu = ui_dropMenu($(this), optionList, {id: "dice-app-selection-menu", align : "top"});
    ev.stopPropagation();
    ev.preventDefault();
    return false;
  });


  var imagePlate = $("<div>").appendTo(playerPlate);
  imagePlate.addClass("fit-xy smooth");
  imagePlate.attr("id", "player-image-plate-"+id);
  imagePlate.attr("UserID", id);
  imagePlate.attr("name", player.displayName);
  imagePlate.attr("index", player.entity);
  imagePlate.css("cursor", "pointer");
  imagePlate.css("position", "absolute");

  var iconDiv = $("<div>").appendTo(imagePlate);
  if (scope.centered) {
    iconDiv.addClass("flexmiddle");
  }
  iconDiv.css("height", "100%");

  var icon = $("<div>").appendTo(iconDiv);
  icon.addClass("flexcolumn flexmiddle white round outline");
  icon.attr("UserID", id);
  icon.css("background-image", "url('"+player.img+"')");
  icon.css("background-size", "cover");
  icon.css("background-repeat", "no-repeat");
  icon.css("background-position", "center 30%");
  icon.css("width", scope.height || 48);
  icon.css("height", scope.height || 48);
  icon.css("border-width", "3px");

  var name;

  if (!hasSecurity(id, "Assistant Master")) {
    icon.css("border-color", player.color);

    playerPlate.append("<div class='flex'></div>");
    name = $("<div>").appendTo(playerPlate);
    name.addClass("smooth alttext foreground outline flexmiddle lrpadding bold");
    if (scope.centered) {
      name.addClass("subtitle");
      name.css("max-width", "120px");
    }
    name.attr("displayName", player.displayName);
    name.attr("UserID", id);
    name.css("z-index", "1");
    //if (hasSecurity(id, "Assistant Master")) {
    name.text(getPlayerCharacterName(id) || player.displayName);
    //}
  }
  else {
    icon.css("border-color", "rgba(190,4,15,1.0)");
    icon.append("<div class='flexcolumn smooth alttext fit-x flexmiddle' style='font-family: LifeCraft; background-color:rgba(0,0,0,0.6); position:absolute;'><b class='flex middle' style='margin-top : 2px;'>GM</b></div>");

    playerPlate.append("<div class='flex'></div>");
    name = $("<div>").appendTo(playerPlate);
    name.addClass("smooth alttext foreground outline flexmiddle lrpadding bold");
    if (scope.centered) {
      name.addClass("subtitle");
      name.css("max-width", "120px");
    }
    name.attr("displayName", player.displayName);
    name.attr("UserID", id);
    name.css("z-index", "1");
    if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
      name.text(getPlayerCharacterName(id) || player.displayName);
    }
    else {
      name.text(player.displayName);
    }
  }

  var imageDiv = $("<div>").appendTo(imagePlate);
  imageDiv.addClass("flexcolumn flexmiddle flex");

  if (player.entity) {
    name.addClass("hover2");
  }
  name.click(function(ev){
    var ent = getPlayerCharacter($(this).attr("UserID"));
    if (ent && ent.data) {
      if (hasSecurity(getCookie("UserID"), "Visible", ent.data)) {
        assetTypes["c"].preview(ent, $(this));
      }
      else {
        sendAlert({text : "Insufficient permissions"});
      }
    }
    else {
      sendAlert({text : "No character"});
    }
    ev.stopPropagation();
    ev.preventDefault();
  });

  if (id == getCookie("UserID")) {
    name.attr("displayName", "Me");
    name.text("Me");
  }
  name.attr("title", name.attr("displayName"));

  if (!hasSecurity(id, "Game Master") || id == getCookie("UserID")) { // reveal Players
    if (player.entity && game.entities.data[player.entity]) {
      var ent = game.entities.data[player.entity];
      icon.css("background-image", "url('"+(sync.rawVal(ent.data.info.img) || "/content/icons/blankchar.png")+"')");
    }
  }

  return playerPlate;
});

sync.render("ui_rights", function(obj, app, scope){
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};

  var div = $("<div>");
  div.addClass("padding");
  div.css("min-width", "400px");
  if (!(obj || obj.data || obj.data["_s"]) && !scope.security) {
    return div;
  }

  var type = $("<div>").appendTo(div);
  type.addClass("flexrow subtitle");

  var security = scope.security || obj.data["_s"];

  var blanketRights = $("<button>").appendTo(type);
  blanketRights.addClass("background alttext");
  blanketRights.text("Default Rights");
  blanketRights.click(function(){
    buildRights();
    app.attr("last_rights", "default");
  });

  var individualRights = $("<button>").appendTo(type);
  individualRights.addClass("background alttext");
  individualRights.text("Individual Rights");
  individualRights.click(function(){
    buildRights(true);
    app.attr("last_rights", "indv");
  });

  var rightsContent = $("<div>").appendTo(div);
  rightsContent.addClass("flexrow flexaround flexwrap white");
  rightsContent.css("color", "#333");
  rightsContent.css("text-shadow", "none");

  function buildRights(individual){
    rightsContent.empty();
    rightsContent.addClass("flexaround");
    if (individual) {
      rightsContent.removeClass("flexaround flexwrap");
      individualRights.removeClass("background");
      individualRights.addClass("highlight");
      blanketRights.removeClass("highlight");
      blanketRights.addClass("background");

      var playersContent = $("<div>").appendTo(rightsContent);
      playersContent.addClass("flexcolumn fit-x outline smooth");

      var players = game.players.data;
      for (var id in players) {
        if (!game.config.data.players || !game.config.data.players[id]) {
          var row = $("<div>").appendTo(playersContent);
          row.addClass("flexrow outlinebottom");

          var nameWrap = $("<div>").appendTo(row);
          nameWrap.addClass("flexcolumn flexmiddle flex lrpadding lrmargin");

          if (players[id]) {
            nameWrap.append("<b>"+(players[id].displayName || id)+"</b>");

            for (var key in game.templates.security.player) {
              if (game.templates.security.player[key] == players[id].rank) {
                nameWrap.append("<text class='subtitle'>"+key+"</text>");
                break;
              }
            }
          }
          else {
            nameWrap.text(id);
          }
          var accessControls = $("<div>").appendTo(row);
          accessControls.addClass("flexrow bold flex");

          var val = "No Access";
          for (var key in game.templates.security.object) {
            if (security[id] == game.templates.security.object[key]) {
              val = key;
            }
          }

          var select = $("<select>").appendTo(accessControls);
          select.addClass("flex");
          select.attr("UserID", id);
          select.css("padding", "4px");
          select.css("border", "none");
          select.css("outline", "none");

          if ((id == getCookie("UserID")) || scope.viewOnly || !hasSecurity(getCookie("UserID"), "Owner", obj.data)) {
            select.attr("disabled", true);
            select.css("background-color", "rgb(235,235,228)");
          }
          for (var key in game.templates.security.object) {
            var option = $("<option value='"+key+"'>"+key+"</option>").appendTo(select);
          }

          if (security[id]) {
            select.val(val);
          }
          if (!scope.viewOnly) {
            select.change(function(ev) {
              if (scope.change) {
                scope.change(ev, $(this), $(this).attr("UserID"), game.templates.security.object[$(this).val()]);
              }
              else {
                var sendData = {id : obj.id(), security : {}};
                sendData.security[$(this).attr("UserID")] = game.templates.security.object[$(this).val()];
                runCommand("updateRights", sendData);
              }
            });
          }
        }
      }

      players = game.config.data.players;
      for (var id in players) {
        var row = $("<div>").appendTo(playersContent);
        row.addClass("flexrow outlinebottom");

        var nameWrap = $("<div>").appendTo(row);
        nameWrap.addClass("flexcolumn flexmiddle flex");

        if (players[id]) {
          nameWrap.append("<b>"+(players[id].displayName||id)+"</b>");

          for (var key in game.templates.security.player) {
            if (game.templates.security.player[key] == players[id].rank) {
              nameWrap.append("<text class='subtitle'>"+key+"</text>");
              break;
            }
          }
        }
        else {
          nameWrap.text(id);
        }
        var accessControls = $("<div>").appendTo(row);
        accessControls.addClass("flexrow bold flex");

        var val = "No Access";
        for (var key in game.templates.security.object) {
          if (security[id] == game.templates.security.object[key]) {
            val = key;
          }
        }

        var select = $("<select>").appendTo(accessControls);
        select.addClass("flex");
        select.attr("UserID", id);
        select.css("padding", "4px");
        select.css("border", "none");
        select.css("outline", "none");

        if ((id == getCookie("UserID")) || scope.viewOnly) {
          select.attr("disabled", true);
          select.css("background-color", "rgb(235,235,228)");
        }
        for (var key in game.templates.security.object) {
          var option = $("<option value='"+key+"'>"+key+"</option>").appendTo(select);
        }

        if (security[id]) {
          select.val(val);
        }
        if (!scope.viewOnly) {
          select.change(function(ev) {
            if (scope.change) {
              scope.change(ev, $(this), $(this).attr("UserID"), game.templates.security.object[$(this).val()]);
            }
            else {
              var sendData = {id : obj.id(), security : {}};
              sendData.security[$(this).attr("UserID")] = game.templates.security.object[$(this).val()];
              runCommand("updateRights", sendData);
            }
          });
        }
      }
    }
    else {
      blanketRights.removeClass("background");
      blanketRights.addClass("highlight");
      individualRights.removeClass("highlight");
      individualRights.addClass("background");

      var gmOnly = $("<button>").appendTo(rightsContent);
      gmOnly.append("GM Only");
      if (scope.viewOnly) {
        gmOnly.attr("disabled", true);
      }
      if (security["default"] == "@:gm()" || security["default"] == "@:gm()") {
        gmOnly.addClass("alttext highlight");
      }
      gmOnly.click(function(){
        macro.hide();
        macro.val("@:gm()");
        macro.change();
      });

      var gmOnly = $("<button>").appendTo(rightsContent);
      gmOnly.append("Players");
      if (scope.viewOnly) {
        gmOnly.attr("disabled", true);
      }
      if (security["default"] == "1") {
        gmOnly.addClass("alttext highlight");
      }
      gmOnly.click(function(){
        macro.hide();
        macro.val("1");
        macro.change();
      });

      var gmOnly = $("<button>").appendTo(rightsContent);
      gmOnly.append("Custom Macro");
      if (scope.viewOnly) {
        gmOnly.attr("disabled", true);
      }
      gmOnly.click(function(){
        macro.toggle();
      });

      var macro = genInput({
        classes : "fit-x subtitle",
        parent : rightsContent,
        value : security.default,
        disabled : scope.viewOnly,
        placeholder : "Default Macro",
      });
      macro.change(function(ev){
        if (scope.change) {
          scope.change(ev, $(this), "default", $(this).val());
        }
        else {
          var sendData = {id : obj.id(), security : {}};
          sendData.security["default"] = $(this).val();
          runCommand("updateRights", sendData);
        }
      });
      macro.hide();

      var gmOnly = genIcon("refresh", "Reset to Default").appendTo(rightsContent);
      gmOnly.addClass("flexmiddle lrmargin bold subtitle");
      gmOnly.click(function(){
        macro.hide();
        macro.val("");
        macro.change();
      });
      if (security["default"] == "" || security["default"] == null) {
        gmOnly.hide();
      }
    }
  }
  buildRights(app.attr("last_rights") == "indv");

  return div;
});

sync.render("ui_newDiceResults", function(obj, app, scope) {
  // in this context obj is a list of equations
  var scope = scope || {};

  var div = $("<div>");
  var evData = obj;
  var data = evData.eventData;
  var resContext = {
    diceKeys : duplicate(game.templates.dice.keys),
  };
  resContext["pool"] = data.pool;
  resContext["var"] = data.var;

  var diceDisplay = scope.display || {};

  div.addClass(diceDisplay.classes);
  for (var styKey in diceDisplay.style) {
    div.css(styKey, diceDisplay.results.style[styKey]);
  }

  var rolls = $("<div>").appendTo(div);
  rolls.addClass("flexmiddle flex flexwrap");

  var resultsWrap = $("<div>").appendTo(div);
  resultsWrap.addClass("flexcolumn");
  if (diceDisplay.results) {
    resultsWrap.addClass(diceDisplay.results.classes);

    for (var styKey in diceDisplay.results.style) {
      resultsWrap.css(styKey, diceDisplay.results.style[styKey]);
    }
    if (diceDisplay.results.title) {
      var res = sync.render("ui_processUI")(obj, app, {display : diceDisplay.results.title});
      res.appendTo(resultsWrap);
    }
  }

  var results = $("<div>");
  if (diceDisplay.display) {
    results = sync.render("ui_processUI")(obj, app, {display : diceDisplay.display});
  }
  results.appendTo(resultsWrap);

  if (data.equations.length == 1) {
    var equationContainer = $("<div>").appendTo(rolls);
    equationContainer.addClass("flexmiddle");

    var breakDiv = $("<div>").appendTo(equationContainer);
    breakDiv.addClass("flexcolumn flexmiddle");
    if (sync.reduce(data.equations[0].e, data.equations[0].ctx, true, true) != data.equations[0].r) {
      breakDiv.attr("title", data.equations[0].e + "\n" + sync.reduce(data.equations[0].e, data.equations[0].ctx, true, true));
    }
    else {
      breakDiv.attr("title", data.equations[0].e);
    }

    var breakDown = $("<text>"+data.equations[0].r+"</text>").appendTo(breakDiv);
    breakDown.addClass("subtitle spadding");
  }
  for (var index in data.equations) {
    var dieContainer = $("<div>").appendTo(rolls);
    dieContainer.addClass("flexmiddle");

    var dice = $("<div>").appendTo(dieContainer);
    dice.addClass("flexcolumn flexmiddle");

    var top = $("<text>");
    top.addClass("subtitle");

    data.equations[index].ctx.var = data.var;

    var diceBool = diceDisplay.dice && (diceDisplay.dice.cond == null || sync.eval(diceDisplay.dice.cond, data.equations[index].ctx));
    if (diceBool) {
      if (diceDisplay.dice.width) {
        scope.width = diceDisplay.dice.width;
      }
      if (diceDisplay.dice.height) {
        scope.height = diceDisplay.dice.height;
      }
      if (diceDisplay.dice['font-size']) {
        scope['font-size'] = diceDisplay.dice['font-size'];
      }

      if (diceDisplay.dice.top) {
        top.text(sync.eval(diceDisplay.dice.top, data.equations[index].ctx));
      }
    }
    var total = data.equations[index].v;

    var die = sync.render("ui_dice")(data.equations[index], app, {width : (scope.width || "35px"), height : (scope.height || "35px"), "font-size" : (scope["font-size"] || "1.25em"), value : total});
    die.addClass("lrmargin");

    var bottom = $("<text>");
    bottom.addClass("subtitle");
    if (diceBool) {
      bottom.text(sync.eval(diceDisplay.dice.bottom, data.equations[index].ctx));
    }
    else if (sync.eval("@cond", resContext) || sync.eval("@threshold>=@total", resContext)) {
      die.addClass("highlight outline smooth");
      bottom.text(sync.eval("@Msg", resContext) || "Success");
    }

    var after = $("<div>");
    if (diceBool) {
      for (var key in diceDisplay.dice.results) {
        var resData = diceDisplay.dice.results[key];
        if (resData.cond && sync.eval(resData.cond, data.equations[index].ctx)) {
          die.addClass(resData.classes);
          for (var styKey in resData.style) {
            dice.css(styKey, resData.style[styKey]);
          }
          if (resData.top === "") {
            top.text("");
          }
          else if (resData.top) {
            top.text(sync.eval(resData.top, data.equations[index].ctx));
          }

          if (resData.bottom === "") {
            bottom.text("");
          }
          else if (resData.bottom) {
            bottom.text(sync.eval(resData.bottom, data.equations[index].ctx));
          }
          if (resData.display) {
            after.append(sync.render("ui_processUI")(obj, app, {display : resData.display, context : data.equations[index].ctx}));
          }
          else if (!resData.bottom) {

          }

          if (resData.results) {
            var res = sync.render("ui_processUI")(obj, app, {display : resData.results, context : data.equations[index].ctx});
            if (res.children().length) {
              res.appendTo(results);
            }
          }
        }
      }
    }

    top.appendTo(dice);
    die.appendTo(dice);
    bottom.appendTo(dice);
    after.appendTo(dice);
  }
  if (diceDisplay.results && diceDisplay.results.display) {
    var res = sync.render("ui_processUI")(obj, app, {display : diceDisplay.results.display, context : resContext});
    res.appendTo(results);
  }
  if (results.children().length == 0) {
    resultsWrap.remove();
  }

  return div;
});

sync.render("ui_dicePooler", function(obj, app, scope){
  scope = scope || {};
  var data = obj.data;

  var div = $("<div>");
  div.addClass("flexcolumn flex");
  var pool = game.templates.dice.defaults;
  if (app.attr("show") == "true") {
    pool = Object.keys(game.templates.dice.pool);
  }
  var diceList = $("<div>").appendTo(div);
  diceList.addClass("flexrow fit-x");

  var diceWrap = $("<div>").appendTo(diceList);
  diceWrap.addClass("flexcolumn");

  var dicePoolWrap = $("<div>").appendTo(diceList);
  dicePoolWrap.addClass("flexcolumn flex");

  for (var i=0; i<pool.length; i++) {
    var index = pool[i];
    var diceData = game.templates.dice.pool[index];

    var dice = $("<button>").appendTo(diceWrap);
    dice.addClass("flexmiddle bold lrmargin outline smooth");
    dice.attr("index", index);
    dice.attr("title", diceData.value);
    dice.css("background", "none");
    dice.css("background-color", "#333");
    dice.css("border-radius", "4px");
    dice.css("color", "white");
    dice.css("min-width", "4em");
    dice.css("min-height", "30px");

    var label = $("<div>").appendTo(dice);
    label.css("text-align", "center");
    label.css("pointer-events", "none");
    label.text(index);

    dice.append(label);

    for (var key in diceData.display) {
      dice.css(key, diceData.display[key]);
    }

    dice.click(function() {
      data.dice = data.dice || {};
      data.dice[$(this).attr("index")] = data.dice[$(this).attr("index")] || 0;
      data.dice[$(this).attr("index")] = data.dice[$(this).attr("index")] + 1;

      obj.update();
    });


    var diceCountWrap = $("<div>").appendTo(dicePoolWrap);
    diceCountWrap.addClass("flexrow fit-x");
    diceCountWrap.css("min-height", "30px");
    diceCountWrap.css("position", "relative");
    diceCountWrap.css("overflow", "hidden");

    var diceCountWrap = $("<div>").appendTo(diceCountWrap);
    diceCountWrap.addClass("flexrow");
    diceCountWrap.css("min-height", "30px");
    diceCountWrap.css("position", "absolute");

    if (data.dice && data.dice[index]) {
      if (data.dice[index] > 1) {
        var count = $("<div>").appendTo(diceCountWrap);
        count.addClass("flexmiddle subtitle bold");
        count.append("<text>x"+data.dice[index]+"</text>");
      }
      for (var k=0; k<data.dice[index]; k++) {
        var dice = sync.render("ui_dice")({ctx : {die : index}}, app, {width : "25px", height : "25px", value : ""}).appendTo(diceCountWrap);
        dice.addClass("flexmiddle bold smargin hover2");
        dice.attr("index", index);
        dice.attr("title", index);
        dice.click(function(){
          data.dice[$(this).attr("index")] -= 1;
          if (data.dice[$(this).attr("index")] <= 0) {
            delete data.dice[$(this).attr("index")];
          }
          obj.update();
        });
      }
    }
    else {
      dice.css("opacity", "0.5");
    }
  }

  return div;
});

sync.render("ui_diceEffect", function(obj, app, scope) {
  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");

  var rowWrap = $("<div>").appendTo(div);
  rowWrap.addClass("flexrow flex");

  var actionSelect = $("<div>").appendTo(rowWrap);
  actionSelect.addClass("flexcolumn");

  for (var i in effects) {
    var effectData = effects[i];

    var button = $("<button>").appendTo(actionSelect);
    button.addClass("highlight alttext");
    button.append(effectData.name);
  }

  var targetDiv = $("<div>").appendTo(rowWrap);
  targetDiv.addClass("flexcolumn flex");
  targetDiv.css("position", "relative");
  targetDiv.css("overflow-y", "auto");

  var entList = $("<div>").appendTo(targetDiv);
  entList.addClass("flexcolumn fit-x outline smooth");
  entList.css("position", "absolute");

  for (var id in game.entities.data) {
    var ent = game.entities.data[id];
    if (ent && ent.data._t == "c") {
      var entWrap = $("<div>").appendTo(entList);
      entWrap.addClass("flexcolumn outlinebottom");
      entWrap.attr("index", id);

      var content = sync.render("ui_ent")(ent, entWrap, {
        height : "40px",
        click : function(ev, ui, ent){
          obj.data.targets[ent.id()] = !obj.data.targets[ent.id()];
          obj.update();
        }
      }).appendTo(entWrap);
      content.removeClass("outline");

      if (obj.data.targets[id]) {
        entWrap.addClass("highlight alttext");
        if (effects[0].calc.length) {
          var effectsList = $("<div>").appendTo(entWrap);
          effectsList.addClass("padding background");

          var ctx = {};
          if (game.events.data[obj.data.evID].data) {
            ctx["pool"] = duplicate(game.events.data[obj.data.evID].data.data.pool);
            ctx["loc"] = duplicate(game.events.data[obj.data.evID].data.data.loc);
          }
          ctx[ent.data._t] = duplicate(ent.data);

          for (var i in effects[0].calc) {
            var calcData = effects[0].calc[i];

            var calcPlate = $("<div>").appendTo(effectsList);
            calcPlate.addClass("flexrow flexbetween fit-x");

            var targetPlate = $("<div>").appendTo(calcPlate);
            targetPlate.addClass("flexmiddle");

            var targetName = calcData.target;
            if (targetName.match("\.modifiers")) {
              targetName = targetName.substring(0, targetName.match("\.modifiers").index);
            }
            else {
              calcPlate.append("<b class='lrpadding'> = </b>");
            }

            var target = sync.traverse(ent.data, targetName);
            if (target instanceof Object) {
              targetPlate.append(target.name);
            }
            else {
              targetPlate.append(calcData.target);
            }

            var eqPlate = $("<div>").appendTo(calcPlate);
            eqPlate.addClass("flexmiddle flex lrpadding");

            if (calcData.cond == null || sync.eval(calcData.cond, ctx)) {
              var val = sync.eval(calcData.eq, ctx);

              if (isNaN(val)) {
                eqPlate.append(val);
              }
              else {
                if (val > 0 && calcData.target.match("\.modifiers")) {
                  eqPlate.append("+"+val);
                }
                else {
                  eqPlate.append(val);
                }
              }
            }
            else {
              eqPlate.append("<i>condition not met</i>");
            }
          }
        }
      }
    }
  }

  var equationDiv = $("<div>").appendTo(div);
  equationDiv.addClass("flexcolumn");

  var equation = genInput({
    parent : equationDiv,
    value : "@:armor(human_head)-@total",
  });

  return div;
});

sync.render("ui_hotRolls", function(obj, app, scope) {
var div = $("<div>");
  div.addClass("flexrow flex");

  var char = getPlayerCharacter(getCookie("UserID"));
  if (char && char.data) {
    sync.render("ui_hotActions")(char, app, scope).appendTo(div);
    char.listen["actionUpdate"] = function() {
      if (getPlayerCharacter(getCookie("UserID")) && getPlayerCharacter(getCookie("UserID")).id() == char.id()) {
        obj.update();
        return true;
      }
    }
  }

  return div;
});


sync.render("ui_selfToken", function(obj, app, scope){
  return sync.render("ui_playerToken")(obj, app, {userID : getCookie("UserID"), centered : true, height : "50px"});
});
function replaceAll(str, match, replace) {
  var loop = 0;
  var returnStr = str;
  while (returnStr.length != returnStr.replace(match, replace).length) {
    returnStr = returnStr.replace(match, replace);
    loop++;
    if (loop > 1000) {
      console.log("overflow");
      return returnStr;
    }
  }
  return returnStr;
}

function trim(str) {
  if (str) {
    if (str instanceof Object) {
      // initiative is an example
      return str;
    }
    return str.trim();
  }
  return "";
}

function cleanseNotes(str) {
  var result = replaceAll(str, "\n", "|$br$|");
  result = replaceAll(result, "=", "|$e$|");
  result = replaceAll(result, ":", "|$c$|");
  result = replaceAll(result, ";", "|$s$|");
  result = replaceAll(result, "-", "|$h$|");
  result = replaceAll(result, ")}", "|$pb$|");
  result = replaceAll(result, ">}", "|$lb$|");
  result = replaceAll(result, "]}", "|$bb$|");
  return result;
}

function dirtyNotes(str) {
  var result = replaceAll(str, "|$br$|", "\n");
  result = replaceAll(result, "|$e$|", "=");
  result = replaceAll(result, "|$c$|", ":");
  result = replaceAll(result, "|$s$|", ";");
  result = replaceAll(result, "|$h$|", "-");
  result = replaceAll(result, "|$pb$|", ")}");
  result = replaceAll(result, "|$b$|", ">}");
  result = replaceAll(result, "|$bb$|", "]}");
  return result;
}

var tranny = {};
tranny["apts"] = {
  import : function(data, output, templates) {
    var list = data.split("\n");
    var splitRegex = /([^:]*):(.*)/;
    for (var i in list) {
      var data = list[i];
      var split = splitRegex.exec(data);
      if (trim(data) && split) {
        output.tags["apt_"+split[1]] = 1;
      }
      else {
        output.tags["apt_"+data] = 1;
      }
    }
  },
}
tranny["counters"] = {
  import : function(data, output, templates) {
    var list = data.split("\n");
    var splitRegex = /([^:]*):(.*)/;
    var options = /{([\s\S]*)}/;
    for (var i in list) {
      var data = list[i];
      var split = splitRegex.exec(data);
      if (trim(data) && split && output.counters[split[1]]) {
        var parsed = split[2];
        if (parsed.match(options)) {
            parsed = JSON.parse(parsed);
        }
        if (parsed instanceof Object) {
          merge(output.counters[split[1]], JSON.parse(split[2]), true);
        }
        else {
          if (isNaN(split[2])) {
            sync.rawVal(output.counters[split[1]], split[2]);
          }
          else {
            sync.rawVal(output.counters[split[1]], parseInt(split[2]));
          }
        }
      }
    }
  },
}
tranny["info"] = {
  import : function(data, output, templates) {
    var list = data.split("\n");
    var splitRegex = /([^:]*):(.*)/;
    var options = /{([\s\S]*)}/;
    for (var i in list) {
      var data = list[i];
      var split = splitRegex.exec(data);
      if (trim(data) && split) {
        var parsed = split[2];
        if (parsed.match(options)) {
          parsed = JSON.parse(parsed);
        }
        if (parsed instanceof Object) {
          if (!output.info[split[1]]) {
            output.info[split[1]] = {};
          }
          merge(output.info[split[1]], JSON.parse(split[2]), true);
        }
        else {
          if (split[1] == "notes" || split[1] == "img") {
            sync.rawVal(output.info[split[1]], dirtyNotes(split[2]));
          }
          else {
            sync.rawVal(output.info[split[1]], split[2]);
          }
        }
      }
    }
  },
}
tranny["inventory"] = {
  import : function(data, output, templates) {
    var list = data.split("\n");
    var splitRegex = /([0-9]+)(.*)/;
    var optionsRegex = /\[(.*)\]/;
    var options = /{([\s\S]*)}/;
    var actReg = /(.*)_a/i;
    for (var i in list) {
      var data = list[i] || "";
      // actions
      var actions = data.match(actReg);
      if (actions) {
        data = data.replace(actions[0]);
        actions = JSON.parse(actions[1]);
      }
      var split = splitRegex.exec(data);
      if (trim(data) && split) {
        var newItem = JSON.parse(JSON.stringify(templates.item));
        if (actions) {
          newItem._a = actions;
        }
        var info = newItem.info;
        var equip = newItem.equip;
        var weapon = newItem.weapon;
        var spell = newItem.spell;
        sync.rawVal(info.name, trim(split[2]));
        sync.rawVal(info.quantity, parseInt(split[1]));
        var opts = trim(split[2]).match(optionsRegex);
        if (opts) {
          sync.rawVal(info.name, trim(split[2]).replace(opts[0], ""));
          var itemSplit = opts[1].split(";");
          for (var key in itemSplit) {
            var optionSplit = itemSplit[key].split("=");
            if (optionSplit.length > 1) {
              var refKey = optionSplit[0];
              var refValue = optionSplit[1];
              if (refValue.match(options)) {
                refValue = JSON.parse(refValue);
              }
              if (refKey == "n") {
                sync.rawVal(info.notes, dirtyNotes(refValue));
              }
              else if (refKey == "s") {
                var list = dirtyNotes(refValue).split(",");
                for (var i in list) {
                  newItem.tags = newItem.tags;
                  newItem.tags[list[i]] = 1
                }
              }
              else if (refKey == "u") {
                sync.rawVal(info.img, dirtyNotes(refValue));
              }
              else if (refKey == "w") {
                sync.rawVal(info.weight, parseInt(refValue));
              }
              else if (refKey == "a") {
                if (refValue instanceof Object) {
                  merge(equip.armor, refValue, true);
                }
                else {
                  if (isNaN(refValue)) {
                    sync.rawVal(equip.armor, refValue);
                  }
                  else {
                    sync.rawVal(equip.armor, parseInt(refValue));
                  }
                }
              }
              else {
                if (weapon[refKey]) {
                  if (refValue instanceof Object) {
                    merge(weapon[refKey], refValue, true);
                  }
                  else {
                    sync.rawVal(weapon[refKey], refValue);
                  }
                }
                else if (spell[refKey]) {
                  if (refValue instanceof Object) {
                    merge(spell[refKey], refValue, true);
                  }
                  else {
                    sync.rawVal(spell[refKey], refValue);
                  }
                }
              }
            }
          }
        }
        output.inventory.push(newItem);
      }
    }
  },
}
tranny["skills"] = {
  import : function(data, output, templates) {
    var list = data.split("\n");
    var splitRegex = /(.*)\[(.*)\]/;
    var options = /{([\s\S]*)}/;
    for (var i in list) {
      var data = list[i];
      var split = splitRegex.exec(data);
      if (trim(data)) {
        var skill;
        if (split) {
          skill = sync.newValue(split[1]);
          var itemSplit = split[2].split(";");
          for (var key in itemSplit) {
            var optionSplit = itemSplit[key].split("=");
            if (optionSplit.length > 1) {
              var refKey = optionSplit[0];
              var refValue = optionSplit[1];
              if (refValue.match(options)) {
                refValue = JSON.parse(refValue);
              }
              if (refKey == "r") {
                if (refValue instanceof Object) {
                  sync.rawVal(skill, refValue);
                }
                else {
                  sync.rawVal(skill, parseInt(refValue));
                }
              }
              else {
                if (refValue instanceof Object) {
                  sync.modifier(skill, refKey, refValue);
                }
                else {
                  sync.modifier(skill, refKey, parseInt(refValue));
                }
              }
            }
          }
        }
        else {
          var refValue = trim(data);
          if (refValue.match(options)) {
            skill = JSON.parse(refValue);
          }
          else {
            skill = sync.newValue(trim(data), 1);
          }
        }
        var push = true;
        for (var sID in output.skills) {
          if (output.skills[sID].name == skill.name) {
            output.skills[sID] = skill;
            push = false;
            break;
          }
        }
        if (push) {
          output.skills[Object.keys(output.skills).length + 1] = skill;
        }
      }
    }
  },
}
tranny["specials"] = {
  import : function(data, output, templates) {
    var list = data.split("\n");
    var splitRegex = /([^:]*):(.*)/;
    var options = /{([\s\S]*)}/;
    for (var i in list) {
      var data = list[i];
      var split = splitRegex.exec(data);
      if (trim(data) && split) {
        output.specials[Object.keys(output.specials).length] = sync.newValue(split[1], split[2]);
      }
    }
  },
}

tranny["spellbook"] = {
  import : function(data, output, templates) {
    var list = data.split("\n");
    var splitRegex = /([0-9]+)(.*)/;
    var options = /{([\s\S]*)}/;
    var optionsRegex = /\[(.*)\]/;
    var actReg = /(.*)_a/i;
    for (var i in list) {
      var data = list[i] || "";
      var actions = data.match(actReg);
      if (actions) {
        data = data.replace(actions[0]);
        actions = JSON.parse(actions[1]);
      }
      var split = splitRegex.exec(data);
      if (trim(data) && split) {
        var newItem = JSON.parse(JSON.stringify(templates.item));
        if (actions) {
          newItem._a = actions;
        }
        var newItem = JSON.parse(JSON.stringify(templates.item));
        var info = newItem.info;
        var equip = newItem.equip;
        var weapon = newItem.weapon;
        var spell = newItem.spell;
        sync.rawVal(info.name, trim(split[2]));
        sync.rawVal(info.quantity, parseInt(split[1]));
        var opts = trim(split[2]).match(optionsRegex);
        if (opts) {
          sync.rawVal(info.name, trim(split[2]).replace(opts[0], ""));
          var itemSplit = opts[1].split(";");
          for (var key in itemSplit) {
            var optionSplit = itemSplit[key].split("=");
            if (optionSplit.length > 1) {
              var refKey = optionSplit[0];
              var refValue = optionSplit[1];
              if (refValue.match(options)) {
                refValue = JSON.parse(refValue);
              }
              if (refKey == "n") {
                sync.rawVal(info.notes, dirtyNotes(refValue));
              }
              else if (refKey == "u") {
                sync.rawVal(info.img, dirtyNotes(refValue));
              }
              else if (refKey == "s") {
                var list = dirtyNotes(refValue).split(",");
                for (var i in list) {
                  newItem.tags = newItem.tags;
                  newItem.tags[list[i]] = 1
                }
              }
              else if (refKey == "w") {
                sync.rawVal(info.weight, parseInt(refValue));
              }
              else if (refKey == "a") {
                if (refValue instanceof Object) {
                  merge(equip.armor, refValue, true);
                }
                else {
                  if (isNaN(refValue)) {
                    sync.rawVal(equip.armor, refValue);
                  }
                  else {
                    sync.rawVal(equip.armor, parseInt(refValue));
                  }
                }
              }
              else {
                if (weapon[refKey]) {
                  if (refValue instanceof Object) {
                    merge(weapon[refKey], refValue, true);
                  }
                  else {
                    sync.rawVal(weapon[refKey], refValue);
                  }
                }
                else if (spell[refKey]) {
                  if (refValue instanceof Object) {
                    merge(spell[refKey], refValue, true);
                  }
                  else {
                    sync.rawVal(spell[refKey], refValue);
                  }
                }
              }
            }
          }
        }
        output.spellbook.push(newItem);
      }
    }
  },
}

tranny["stats"] = {
  import : function(data, output, templates) {
    var list = data.split("\n");
    var splitRegex = /([^:]*):(.*)/;
    var options = /{([\s\S]*)}/;
    for (var i in list) {
      var data = list[i];
      var split = splitRegex.exec(data);
      if (trim(data) && split) {
        var refKey = split[1];
        var refValue = split[2];
        if (output.stats[refKey]) {
          if (refValue.match(options)) {
            refValue = JSON.parse(refValue);
          }
          else {
            if (!isNaN(refValue)) {
              refValue = parseInt(refValue);
            }
          }
          if (refValue instanceof Object) {
            merge(output.stats[refKey], refValue, true);
          }
          else {
            sync.rawVal(output.stats[refKey], refValue);
          }
        }
      }
    }
  },
}

tranny["talents"] = {
  import : function(data, output, templates) {
    var list = data.split("\n");
    var splitRegex = /(.*)\[(.*)\]/;
    var options = /{([\s\S]*)}/;
    for (var i in list) {
      var data = list[i];
      var split = splitRegex.exec(data);
      if (trim(data)) {
        if (split) {
          var talent = sync.newValue(split[1]);
          var itemSplit = split[2].split(";");
          for (var key in itemSplit) {
            var optionSplit = itemSplit[key].split("=");
            if (optionSplit.length > 1) {
              var refKey = optionSplit[0];
              var refValue = optionSplit[1];
              if (refKey != "n" && refValue.match(options)) {
                refValue = JSON.parse(refValue);
              }
              if (refKey == "n") {
                sync.rawVal(talent, dirtyNotes(refValue));
              }
              else if (refKey == "f") {
                sync.modifier(talent, "filter", dirtyNotes(refValue));
              }
              else if (refKey == "r") {
                if (refValue instanceof Object) {
                  sync.modifier(talent, "rank", refValue);
                }
                else {
                  sync.modifier(talent, "rank", refValue);
                }
              }
            }
          }
          output.talents[Object.keys(output.talents).length+1] = talent;
        }
        else {
          output.talents[Object.keys(output.talents).length+1] = sync.newValue(trim(data));
        }
      }
    }
  },
}

tranny["traits"] = {
  import : function(data, output, templates) {
    if (output.traits) {
      var list = data.split("\n");
      var splitRegex = /([^:]*):(.*)/;
      for (var i in list) {
        var data = list[i];
        var split = splitRegex.exec(data);
        if (trim(data)) {
          if (split) {
            output.tags["trait_"+trim(split[1])] = 1;
          }
          else {
            output.tags["trait_"+trim(data)] = 1;
          }
        }
      }
    }
  },
}

tranny["tags"] = { // only exists on the client b/c im lazy
  import : function(data, output, templates) {
    var list = data.split("\n");
    var splitRegex = /([^:]*):(.*)/;
    for (var i in list) {
      var data = list[i];
      if (trim(data)) {
        output.tags[trim(data)] = 1;
      }
    }
  },
}

function maxify(data, output, templates) {
  var str = replaceAll(data, "\t", "");
  var lineSplit = /([^\n]*)\n/g;
  var split = lineSplit.exec(str);
  var start = 0;
  while (split) {
    if (tranny[trim(split[1]).replace("-", "").toLowerCase()]) {
      start = split.index;
      break;
    }
    else {
      if (trim(split[1])) {
        merge(output, JSON.parse(trim(split[1])), true);
      }
    }
    split = lineSplit.exec(str);
  }

  // from the start point determine the catergory
  var category = /([\w]*)-\s*\n/;
  //str.substring(start, str.length)
  var res = str.substring(start, str.length).split(category);

  for (var i=0; i<res.length; i++) {
    if (tranny[trim(res[i]).toLowerCase()]) {
      if (trim(res[i+1])) {
        tranny[trim(res[i]).toLowerCase()].import(trim(res[i+1]), output, templates);
      }
    }
  }
}

sync.render("ui_tags", function(obj, app, scope) {
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true"), path : app.attr("path")};

  var div = $("<div>");
  div.addClass("flexrow fit-x");
  div.css("color", "#333");
  div.css("text-shadow", "none");

  var data = sync.traverse(obj.data, (scope.path || ""));
  data.tags = data.tags || {};
  game.templates.tags = game.templates.tags || {};

  if (scope.path) {
    scope.path = scope.path+".";
  }

  var tagList = $("<div>").appendTo(div);
  tagList.addClass("flexrow flexaround flex flexwrap subtitle");

  var createOptions = $("<div>").appendTo(div);
  createOptions.addClass("flexrow flexmiddle");

  var markedTags = false;
  var keys = Object.keys(data.tags) || [];
  keys.sort();

  for (var tagKey in keys) {
    var tag = keys[tagKey];
    if (data.tags[tag]) {
      markedTags = true;
      var tagBubble = $("<div>").appendTo(tagList);
      tagBubble.addClass("flexrow flexbetween smooth lrpadding");
      tagBubble.attr("index", tag);

      var remove = genIcon((!scope.viewOnly)?("remove"):(""), tag)
      remove.addClass("inactive");

      var triangle = $("<div>");
      triangle.css("border-top", "10px solid transparent");
      triangle.css("border-bottom", "10px solid transparent");
      triangle.css("border-left", "10px solid rgba(235, 235, 228, 1)");
      
      if (game.templates.tags && game.templates.tags[tag]) {
        var tagData = game.templates.tags[tag];
        if (tagData.hint) {
          tagBubble.attr("hint", tagData.hint);
        }
        if (tagData.bCol) {
          remove.css("background", tagData.bCol);
          triangle.css("border-left", "10px solid " + tagData.bCol);
        }
        if (tagData.color) {
          tagBubble.css("color", tagData.color);
        }
        /*tagBubble.hover(function(){
          var tag = $(this).attr("index");

          var effectsList = $("<div>");
          effectsList.addClass("flexcolumn subtitle");

          var newTag = game.templates.tags[tag];

          if (newTag.calc.length) {
            var ctx = sync.defaultContext();
            ctx[obj.data._t] = duplicate(obj.data);

            for (var id in newTag.calc) {
              var calcData = newTag.calc[id];

              var calcPlate = $("<div>").appendTo(effectsList);
              calcPlate.addClass("flexrow flexbetween fit-x");

              var targetPlate = $("<div>").appendTo(calcPlate);
              targetPlate.addClass("flexmiddle");

              var targetName = calcData.target;
              if (targetName.match("\.modifiers")) {
                targetName = targetName.substring(0, targetName.match("\.modifiers").index);
              }
              else {
                calcPlate.append("<b class='lrpadding'> = </b>");
              }

              var target = sync.traverse(obj.data, targetName);
              if (target instanceof Object) {
                targetPlate.append(target.name);
              }
              else {
                targetPlate.append(calcData.target);
              }

              var eqPlate = $("<div>").appendTo(calcPlate);
              eqPlate.addClass("flexmiddle flex lrpadding");

              if (!calcData.cond || sync.eval(calcData.cond, ctx)) {
                var val = sync.eval(calcData.eq, ctx);

                if (isNaN(val)) {
                  eqPlate.append(val);
                }
                else {
                  if (val > 0 && calcData.target.match("\.modifiers")) {
                    eqPlate.append("+"+val);
                  }
                  else {
                    eqPlate.append(val);
                  }
                }
              }
              else {
                eqPlate.append("<i>condition not met</i>");
              }
            }
          }
          else {
            effectsList.text("No Effects");
          }

          var pop = ui_popOut({
            target : $(this),
            align : "bottom",
            noCss : true,
            hideclose : true,
            style : {"padding" : "0.5em", "background-color" : "white"},
            id : app.attr("id")+"-hint-dialog"
          }, effectsList);
          pop.hover(function(){layout.coverlay($(this))});
        },
        function(){
          layout.coverlay(app.attr("id")+"-hint-dialog");
        });*/
      }

      remove.appendTo(tagBubble);
      remove.attr("index", tag);
      remove.addClass("bold spadding flexmiddle");


      triangle.appendTo(tagBubble);

      if (!scope.viewOnly) {
        remove.click(function(){
          delete obj.data.tags[$(this).attr("index")];
          if (game.templates.tags[$(this).attr("index")]) {
            var effects = game.templates.tags[$(this).attr("index")].calc;
            for (var eid in effects) {
              if (effects[eid].target.match(".modifiers")) {
                sync.traverse(obj.data, effects[eid].target, "");
              }
            }
          }
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
          layout.coverlay(app.attr("id")+"-hint-dialog");
        });
      }
    }
  }

  if (!scope.viewOnly) {
    data.tags = data.tags || {};

    var newTagInput = genInput({
      type : "list",
      list : "tag-list",
      parent : createOptions,
      placeholder : "Add Tag",
      style : {"width" : "130px"}
    }).addClass("flexmiddle subtitle");
    newTagInput.focus(function(){
      layout.coverlay("tag-list");
      var dataList = $("<datalist>").appendTo(div);
      dataList.attr("id", "tag-list");
      for (var tag in (scope.tagList || game.templates.tags)) {
        if (!data.tags[tag]) {
          var option = $("<option>").appendTo(dataList);
          option.attr("value", tag);
        }
      }
    });
    newTagInput.change(function(){
      var val = ($(this).val() || "").toLowerCase();
      val = replaceAll(val, ".", "");
      var tagSplit = val.split(",");
      for (var i in tagSplit) {
        var val = tagSplit[i];
        if (val && val.trim()) {
          if (!data.tags[val]) {
            data.tags[val] = 1;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
          else {
            sendAlert({text : "Tag already applied"});
            $(this).val();
          }
        }
      }
    });
  }

  return div;
});

sync.render("ui_manageTags", function(obj, app, scope){
  obj.data.templates.tags = obj.data.templates.tags || {};

  var div = $("<div>");
  div.addClass("flexcolumn flexmiddle flex");

  var newTag = genInput({
    parent : div,
    placeholder : "Enter a new Tag",
    classes : "line middle margin",
  });
  newTag.change(function(){
    if ($(this).val()) {
      var tag = $(this).val();
      tag = replaceAll(tag.toLowerCase(), "\.", "");
      tag = replaceAll(tag, "$", "");
      obj.data.templates.tags[tag] = {};
      obj.update();
    }
  });

  var sorted = Object.keys(obj.data.templates.tags);
  sorted.sort(function(a,b){
    return String(a).localeCompare(String(b));
  });

  for (var i in sorted) {
    var tag = sorted[i];

    var tagData = obj.data.templates.tags[tag];

    var tagBubbleWrapWrap = $("<div>").appendTo(div);
    tagBubbleWrapWrap.addClass("flexrow flexaround");

    var tagBubbleWrap = $("<div>").appendTo(tagBubbleWrapWrap);
    tagBubbleWrap.addClass("flexrow lrpadding");

    var tagBubble = $("<div>").appendTo(tagBubbleWrap);
    tagBubble.addClass("flexrow flexbetween smooth lrpadding");
    tagBubble.attr("index", tag);

    var tagName = $("<div>").appendTo(tagBubble);
    tagName.addClass("inactive flexmiddle bold");
    tagName.append(tag);

    var triangle = $("<div>").appendTo(tagBubble);
    triangle.css("border-top", "10px solid transparent");
    triangle.css("border-bottom", "10px solid transparent");
    triangle.css("border-left", "10px solid rgba(235, 235, 228, 1)");

    if (obj.data.templates.tags && obj.data.templates.tags[tag]) {
      var tagData = obj.data.templates.tags[tag];
      if (tagData.bCol) {
        tagName.css("background", tagData.bCol);
        triangle.css("border-left", "10px solid " + tagData.bCol);
      }
      if (tagData.color) {
        tagBubble.css("color", tagData.color);
      }
    }

    var tagBubbleColor = $("<div>").appendTo(tagBubbleWrapWrap);
    tagBubbleColor.addClass("flexrow flex lrpadding");

    var bckCol = $("<div>").appendTo(tagBubbleColor);
    bckCol.addClass("lpadding hover2 outline smooth");
    bckCol.attr("title", "Background Color");
    bckCol.attr("tag", tag);
    bckCol.css("background", tagData.bCol || "rgba(235,235,228,1)");
    bckCol.click(function(){
      var tag = $(this).attr("tag");
      var content = sync.render("ui_colorPicker")(obj, content, {
        hideColor : true,
        custom : true,
        color : tagData.bCol,
        colorChange : function(ev, ui, newCol) {
          obj.data.templates.tags[tag].bCol = newCol;
          bckCol.css("background", newCol);
          layout.coverlay("color-picker");
          obj.update();
        }
      });
      var pop = ui_popOut({
        target : $(this),
        id : "color-picker",
      }, content);
    });

    var textCol = $("<div>").appendTo(tagBubbleColor);
    textCol.addClass("lpadding hover2 outline smooth");
    textCol.attr("title", "Text Color");
    textCol.attr("tag", tag);
    textCol.css("background", tagData.color || "#333");
    textCol.click(function(){
      var tag = $(this).attr("tag");
      var content = sync.render("ui_colorPicker")(obj, content, {
        hideColor : true,
        custom : true,
        color : tagData.color,
        colorChange : function(ev, ui, newCol) {
          obj.data.templates.tags[tag].color = newCol;
          textCol.css("background", newCol);
          layout.coverlay("color-picker");
          obj.update();
        }
      });
      var pop = ui_popOut({
        target : $(this),
        id : "color-picker",
      }, content);
    });

    var remove = genIcon("info-sign").appendTo(tagBubbleColor);
    remove.addClass("flexmiddle bold lrmargin");
    if (!obj.data.templates.tags[tag].hint) {
      remove.addClass("dull");
    }
    remove.attr("title", "Tag Hint");
    remove.attr("tag", tag);
    remove.click(function(){
      var tag = $(this).attr("tag");
      ui_prompt({
        target : $(this),
        inputs : {
          "Tag Hint" : obj.data.templates.tags[tag].hint,
        },
        click : function(ev, inputs){
          if (inputs["Tag Hint"].val()) {
            obj.data.templates.tags[tag].hint = inputs["Tag Hint"].val();
          }
          else {
            delete obj.data.templates.tags[tag].hint;
          }
          obj.update();
        }
      });
    });

    var remove = genIcon("trash").appendTo(tagBubbleColor);
    remove.addClass("destroy flexmiddle bold");
    remove.attr("Remove Tag");
    remove.attr("tag", tag);
    remove.click(function(){
      var tag = $(this).attr("tag");
      delete obj.data.templates.tags[tag];
      obj.update();
    });
  }

  return div;
});

var _cachegen;

function buildDecisionTree(data) {
  var regex = /\n(\t*)([^=^\?^{^\n]*)(\?[\w'\s^\n]+)*=({[0-9]*[\(\[<])/im;
  // construct the regex that matches the indentation and then do it

  function parseOptions(str) {
    var result = null;

    var params = str.match(regex);
    // first seperate the body from the options
    if (params) { // check for nested choices
      var options = str.substring(params.index, str.length);
      var optionsList = options.split("\n"+params[1]+")}");
      optionsList.splice(optionsList.length-1, 1);

      for (var i in optionsList) {
        var params = optionsList[i].match(regex);
        if (params) {
          // Gather all information about what can be chosen
          var choice = {};
          choice.name = params[2];
          choice.tip = params[3];
          if (!isNaN(params[4].charAt(1))) {
            choice.number = parseInt(params[4].charAt(1));
          }
          if (params[4].charAt(1) == "(" || params[4].charAt(2) == "(") {
            choice.exclusive = true;
          }
          optionsList[i] = optionsList[i].replace(params[0], "");
          result = result || [];

          choice.choices = [];
          var choiceList = optionsList[i].split("\n"+params[1]+"	>}");
          choiceList.splice(choiceList.length-1, 1);
          for (var cIndex in choiceList) {
            choiceList[cIndex] = choiceList[cIndex] + "\n"+params[1]+"	>}";
            choice.choices.push(parseData(choiceList[cIndex]));
          }
          result.push(choice);
        }
      }
    }
    return result;
  }

  function parseData(str, abort) {
    var params = str.match(regex);
    if (params) {
      var result = {};
      result.name = params[2];
      result.tip = params[3];
      result.data = str.substring(0, params.index);
      var contents = str.substring(params.index, str.length);
      var correction = contents.match("\n"+params[1]+"[>\\]\\)]}");
      if (correction) {
        contents = contents.substring(0, correction.index);
        contents = contents.replace(params[0], "");

        var split = contents.match(regex);
        // seperate the options from the data
        if (split) {
          result.data = contents.substring(0, split.index);
          result.choices = parseOptions(contents.substring(split.index, contents.length));
        }
        else {
          result.data = contents;
        }
      }
    }
    return result;
  }

  return parseData(data);
}

sync.render("ui_template", function(obj, app, scope){
  if (!obj || !obj.data) {return $("<div>");}

  if ($("#template-hint").length > 0) {
    layout.coverlay($("#template-hint"));
  }

  scope = scope || {viewOnly: app.attr("viewOnly") == "true", local : app.attr("local") == "true"};
  var data = obj.data;
  var div = $("<div>");
  div.addClass("flex flexcolumn");

  var template = obj.data.template;
  if (!template) {
    if (_cachegen) {
      template = duplicate(_cachegen);
    }
    else {
      _cachegen = buildDecisionTree(obj.data.templateText || "\n No Template={<>}");
      template = duplicate(_cachegen);
    }
  }

  var optionContainer = $("<div>").appendTo(div);

  var title = $("<b>").appendTo(optionContainer);
  title.addClass("flexmiddle");
  title.append(template.name);
  title.css("font-size", "1.5em");

  var optionsDiv = $("<div>").appendTo(optionContainer);
  optionsDiv.addClass("flexaround lrpadding");

  var container = $("<div>").appendTo(optionsDiv);
  container.addClass("flexmiddle");
  container.css("width", "auto");

  var check = genInput({
    parent : container,
    type : "checkbox",
    style : {"margin" : "0", "width" : "12px", "height" : "12px"},
  });
  if (!data.options.free) {
    check.prop("checked", true);
  }
  check.change(function(){
    if ($(this).prop("checked") == true) {
      delete data.options.free;
    }
    else {
      data.options.free = true;
    }
    obj.update();
  });

  var namePlate = $("<b>").appendTo(container);
  namePlate.text("Restrictions");

  var container = $("<div>").appendTo(optionsDiv);
  container.addClass("flexmiddle");
  container.css("width", "auto");

  var check = genInput({
    parent : container,
    type : "checkbox",
    style : {"margin" : "0", "width" : "12px", "height" : "12px"},
  });
  if (data.options.all) {
    check.prop("checked", true);
  }
  check.change(function(){
    if ($(this).prop("checked") == true) {
      data.options.all = true;
    }
    else {
      delete data.options.all;
    }
    obj.update();
  });

  var namePlate = $("<b>").appendTo(container);
  namePlate.text("Show All");

  var random = $("<button>").appendTo(optionsDiv);
  random.addClass("subtitle highlight alttext");
  random.append("Random");
  random.click(function(){
    data.text = [];
    function recurseChoose(choice, state){
      if (choice) {
        if (choice.data) {
          data.text[state] = choice.data;
        }
        if (choice.choices && choice.choices.length) {
          var number = choice.number || 1;
          if (choice.exclusive) {
            for (var i=0; i<number; i++) {
              var index = Math.floor(choice.choices.length * Math.random());
              recurseChoose(choice.choices[index], state + "." + index);
              choice.choices.splice(index, 1);
            }
          }
          else {
            // build viable choices
            var choiceSelection = [];
            for (var i=0;i<choice.choices.length; i++) {
              if (choice.choices[i].data) {
                choiceSelection.push(choiceSelection);
              }
              else {
                recurseChoose(choice.choices[i], state + "." + i);
              }
            }

            for (var i=0; i<number; i++) {
              var index = choiceSelection[Math.floor(choiceSelection.length * Math.random())];
              recurseChoose(choice.choices[index], state + "." + index);
            }
          }
        }
      }
    };
    for (var i in template.choices) {
      recurseChoose(duplicate(template.choices[i]), i);
    }
    obj.update();
  });

  var random = $("<button>").appendTo(optionsDiv);
  random.addClass("subtitle background alttext");
  random.append("Reset");
  random.click(function(){
    data.text = {};
    obj.update();
  });

  var choiceColumnWrap = $("<div>").appendTo(div);
  choiceColumnWrap.addClass("flex");
  choiceColumnWrap.css("overflow", "auto");
  choiceColumnWrap.css("position", "relative");
  choiceColumnWrap.scroll(function() {
    app.attr("_lastScrollTop_opt", $(this).scrollTop());
  });

  var choiceColumn = $("<div>").appendTo(choiceColumnWrap);
  choiceColumn.addClass("fit-x");
  choiceColumn.css("position", "absolute");

  var keys = Object.keys(data.text);
  data.override = JSON.parse(JSON.stringify(game.templates.character || {}));
  for (var key in data.text) {
    maxify(data.text[key], data.override, game.templates);
  }

  function buildUI(choice, state, depth, parent) {
    var body = $("<div>"); // this is where the names go
    body.css("font-size", 22 - depth*2);

    var containerT = $("<div>").appendTo(body);
    containerT.addClass("flexrow fit-x");

    var margin = $("<div>").appendTo(containerT);
    margin.addClass("secondary");
    margin.css("width", 15*depth+"px");

    var nonmargin = $("<div>").appendTo(containerT);
    nonmargin.addClass("flexbetween fit-x");
    nonmargin.addClass("flex", "2");

    var container = $("<div>").appendTo(nonmargin);
    container.addClass("flexmiddle lrpadding");
    container.css("width", "auto");

    var namePlate = $("<b>").appendTo(container);
    namePlate.addClass("spadding subtitle");
    namePlate.text(choice.name);

    if (choice.tip) {
      var icon = genIcon("info-sign").appendTo(namePlate);
      icon.attr("tip", choice.tip);
      icon.css("padding-left", "10px");
      icon.click(function(ev) {
        if ($("#template-hint").length > 0) {
          layout.coverlay($("#template-hint"));
        }
        else {
          var popFrame = ui_popOut({
            target: $(this),
            id: "template-hint",
            hideclose : true,
            align : "top",
            style: {"z-index": 2000}
          }, $("<p style='text-align:center; margin: 0;'>"+$(this).attr("tip")+"</p>"));
        }
        ev.stopPropagation();
        return false;
      });
    }

    if (choice.data && depth != 0) {
      containerT.attr("title", "Right Click for details");
      containerT.contextmenu(function(ev){
        var content = $("<div>");
        content.addClass("flexcolumn subtitle spadding");
        content.css("text-align", "left");
        content.css("padding-top", "1em");
        var reg = /(traits|counters|talents|feats|inventory|gear|equipment|skills|stats|info|spells|spellbook|spellslots|psychic|aptitudes|apts|proficiency|other|description|notes|specials|proficiencies|proficient|tags)\s*[-|:|=|;]\s*/ig
        var cleanup = replaceAll(replaceAll(choice.data.trim(), "\t", ""), "\n", "<br>");
        var arr = cleanup.match(reg);
        for (var i=0; i<arr.length; i++) {
          cleanup = cleanup.replace(arr[i], "<b style='font-size : 1.5em; font-family : bolsterbold'>"+arr[i].substring(0,arr[i].length-2)+"</b>");
        }
        content.append("<p>"+cleanup+"</p>");
        content.css("max-height", "25vh");
        content.css("overflow-y", "auto");

        ui_popOut({
          target : $(this),
          align : "right",
          title : "Choice Bonuses",
          id : "option-preview",
          style : {"width": "400px"}
        }, content);

        ev.stopPropagation();
        return false;
      });
      nonmargin.addClass("outlinebottom");
      namePlate.css("font-weight", "normal");
      container.css("padding-left", "4px");

      nonmargin.addClass("hover2");
      nonmargin.css("cursor", "pointer");

      var check = genInput({
        type : "checkbox",
        state : state,
        data : choice.data,
        style : {"margin" : "0", "width" : "12px", "height" : "12px", "margin-left" : "8px"},
      });
      if (data.text[state]) {
        check.prop("checked", true);
      }
      namePlate.before(check);

      if (parent && !parent.cData.exclusive && parent.cData.number) {
        check.change(function(ev) {
          if ($(this).prop("checked") == true) {
            data.text[$(this).attr("state")] = $(this).attr("data");
          }
          else {
            if (!data.options.free) {
              for (var i in keys) {
                if ($(this).attr("state") == keys[i].substring(0, $(this).attr("state").length) && data.text[keys[i]]) {
                  // delete all dependent states
                  delete data.text[keys[i]];
                }
              }
            }
            delete data.text[$(this).attr("state")];
          }
          if (!data.options.all) {
            obj.update();
          }
        });
        var bonus = (data.text[state] || "").length/choice.data.length;
        for (var i=0; i<(bonus+parent.left)-1; i++) {
          var check = genInput({
            type : "checkbox",
            state : state,
            data : choice.data,
            number : i+2,
            style : {"margin" : "0", "width" : "12px", "height" : "12px"},
          });
          namePlate.before(check);
          if (data.text[state] && data.text[state].length >= choice.data.length*(i+2)) {
            check.prop("checked", true);
          }
          check.change(function(ev) {
            if ($(this).prop("checked") == true) {
              data.text[$(this).attr("state")] = "";
              for (var i=0; i<parseInt($(this).attr("number")); i++) {
                data.text[$(this).attr("state")] = data.text[$(this).attr("state")] + $(this).attr("data");
              }
            }
            else {
              delete data.text[$(this).attr("state")];
            }
            if (!data.options.all) {
              obj.update();
            }
            ev.stopPropagation();
            return false;
          });
        }
      }
      else {
        check.css("pointer-events", "none");
        nonmargin.attr("state", state);
        nonmargin.attr("data", choice.data)
        nonmargin.click(function(ev){
          if (check.prop("checked") == true) {
            check.prop("checked", false);
          }
          else {
            check.prop("checked", true);
          }
          if (check.prop("checked") == true) {
            data.text[$(this).attr("state")] = $(this).attr("data");
          }
          else {
            if (!data.options.free) {
              for (var i in keys) {
                if ($(this).attr("state") == keys[i].substring(0, $(this).attr("state").length) && data.text[keys[i]]) {
                  // delete all dependent states
                  delete data.text[keys[i]];
                }
              }
            }
            delete data.text[$(this).attr("state")];
          }
          if (!data.options.all) {
            obj.update();
          }
          ev.stopPropagation();
          return false;
        });
      }
    }
    else {
      if (depth < 2) {
        nonmargin.addClass("foreground");
        nonmargin.css("text-shadow", "0 0 0.25em black")
        nonmargin.css("color", "white");
      }
      else {
        nonmargin.addClass("inactive outlinebottom subtitle");
      }
      nonmargin.addClass("spadding");
      if (choice.exclusive && choice.number) {
        namePlate.text(namePlate.text() + " ("+choice.number+")")
      }
      if (!choice.exclusive && choice.number) {
        namePlate.text(namePlate.text() + " ["+choice.number+"]")
      }
    }

    if (data.text[state] || (!choice.data || choice.data.trim().length == 0) || data.options.all) {
      for (var index in choice.choices) {
        var nextChoice = choice.choices[index];
        if ((nextChoice.choices || nextChoice.data)) {
          // good spot to check permissions to see if we can even check this one
          // check to see if there are any other choices in this Domain
          /*var tempState = state.split(".");
          tempState.splice(tempState.length-1, 1);
          var parentState = "";
          for (var k in tempState) {
            parentState = parentState + tempState[k] + ".";
          }

          if (choice.exclusive && !util.contains(keys, parentState)) {*/
          var show = true;
          var number = 0; // for determining visibility
          if (!data.options.all && !data.options.free) {
            if (choice.exclusive) {
              for (var i in keys) {
                var pArr = keys[i].split(".");
                var pStr = pArr[0];
                for (var j=1; j<pArr.length-1; j++) {
                  pStr = pStr + "." + pArr[j];
                }
                if (state == pStr && state+"."+index != keys[i]) {
                  if (!choice.number) {
                    show = false;
                    break;
                  }
                  else {
                    number = number + 1;
                  }
                }
              }
              if (choice.number && number >= choice.number) {
                show = false;
              }
            }
            else if (choice.number) {
              for (var i in keys) {
                var pArr = keys[i].split(".");
                var pStr = pArr[0];
                for (var j=1; j<pArr.length-1; j++) {
                  pStr = pStr + "." + pArr[j];
                }
                if (state == pStr && data.text[keys[i]]) {
                  // verify how many times it has been picked
                  var ref = keys[i].split(".");
                  var refChoice = choice.choices[ref[ref.length-1]];
                  number = number + data.text[keys[i]].length/refChoice.data.length;
                }
              }
              if (number >= choice.number && !data.text[state+"."+index]) {
                show = false;
              }
            }
          }
          if (show) {
            buildUI(nextChoice, state+"."+index, depth+1, {cData : choice, left : choice.number-number}).appendTo(body);
          }
        }
      }
    }
    return body;
  }

  /*if (!scope.local) {
    var link = genIcon("unchecked", "Use Content Factory").appendTo(div);
    link.click(function(){
      var entList = sync.render("ui_entList")(obj, app, {
        list : game.locals["storage"].data.s,
        filter : "pk",
        click : function(ev, ui, ent){
          obj.data.template = duplicate(ent.data.template);
          obj.update();
          layout.coverlay("select-factory");
        },
      });

      ui_popOut({
        target : $(this),
        id : "select-factory",
      }, entList);
    });
  }*/
  for (var i in template.choices) {
    var category = template.choices[i]; // each one gets a column
    var choiceList = $("<div>").appendTo(choiceColumn);
    buildUI(category, i, 0).addClass("smooth margin outline").css("margin-bottom", "2em").appendTo(choiceList);
  }

  // preserver scroll
  choiceColumnWrap.attr("_lastScrollTop", app.attr("_lastScrollTop_opt"));

  return div;
});

sync.render("_logs", function(obj, app, scope) {
  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");

  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("flexbetween alttext");
  optionsBar.css("font-size", "1.2em");
  optionsBar.css("padding", "3px");

  if (app.attr("freeScroll") == "true") {
    optionsBar.addClass("highlight");
  }
  else {
    optionsBar.addClass("foreground");
  }
  var filters = {
    "Events" : true,
    "Game" : true,
    "Players" : true,
    "Actors" : true,
  };
  var wrap = $("<div>").appendTo(optionsBar);
  wrap.addClass("flex");

  var more = genIcon("plus")//.appendTo(optionsBar);
  more.addClass("lrmargin");
  more.click(function(){
    var chatApp = sync.newApp("_logs").appendTo(app.parent);
    chatApp.addClass("flex");
    chatApp.css("overflow-x", "none");
    chatApp.css("overflow-y", "none");

    game.logs.addApp(chatApp);
  });

  var more = genIcon("cog").appendTo(optionsBar);
  more.addClass("lrmargin");
  more.click(function(){
    var content = $("<div>");
    content.addClass("flexcolumn spadding");

    for (var name in filters) {
      var checkDiv = $("<div>").appendTo(content);
      checkDiv.addClass("flexrow flexbetween");

      var checkDiv = $("<div>").appendTo(checkDiv);
      checkDiv.addClass("bold subtitle flexmiddle");

      var checkbox = genInput({
        parent : checkDiv,
        type : "checkbox",
        index : name,
        style : {"margin" : "0"}
      });
      checkDiv.append(name);
      if (app.attr("show-"+name) != "false") {
        checkbox.prop("checked", true);
      }
      checkbox.change(function(){
        if ($(this).prop("checked")) {
          app.removeAttr("show-"+$(this).attr("index"));
        }
        else {
          app.attr("show-"+$(this).attr("index"), "false");
        }
        obj.update();
      });
    }

    var time = genIcon("time", "Time Stamps");
    time.attr("title", "Toggle Time Stamps");
    time.appendTo(content);
    time.click(function(){
      app.attr("timeStamps", !Boolean(app.attr("timeStamps") == "true"));
      obj.update();
    });

    var del = genIcon("trash", "Destroy Channel");
    del.attr("title", "Destroy channel");
    //del.appendTo(content);
    del.addClass("destroy");
    del.click(function(){
      app.remove();
      obj.update();
      layout.coverlay("channel-options");
    });


    ui_popOut({
      target : $(this),
      title : "Filters",
      id : "channel-options",
    }, content);
  });

  var more = genIcon("trash").appendTo(optionsBar);
  more.addClass("lrmargin");
  more.click(function(){
    ui_prompt({
      target : $(this),
      confirm : "Empty Event log",
      click : function(){
        runCommand("emptyEventLog");
      }
    });
  });

  var chatListed = $("<div>").appendTo(div);
  chatListed.addClass("flex");
  chatListed.css("overflow-x", "none");
  chatListed.css("overflow-y", "scroll");
  chatListed.attr("_lastScrollTop", app.attr("_lastScrollTop"));
  if (app.attr("freeScroll") != "true") {
    setTimeout(function(){chatListed.attr("_lastScrollTop", Number(chatListed[0].scrollHeight) + 100); chatListed.scrollTop(Number(chatListed[0].scrollHeight) + 100); app.removeAttr("freeScroll"); }, 10);
  }

  var chatPlate = $("<div>").appendTo(chatListed);

  chatListed.scroll(function() {
    if (app.is(":visible")) {
      app.attr("_lastScrollTop", $(this).scrollTop());
      if (Math.round($(this).scrollTop() + $(this).outerHeight()) < $(this)[0].scrollHeight) {
        app.attr("freeScroll", "true");
      }
      else {
        app.removeAttr("freeScroll");
        optionsBar.removeClass("highlight");
        optionsBar.addClass("foreground");
      }
      app.attr("_lastScrollLeft", $(this).scrollLeft());
      $(this).attr("_lastScrollTop", $(this).scrollTop());
    }
  });

  function build(list, events, app, startIndex) {
    var start = startIndex || 0;
    //if (layout.mobile) {
      start = Math.max(events.length-200,0);
    //}
    for (var index=start; index<events.length; index++) {
      var chatData = events[index];
      if (chatData.p && !chatData.p[getCookie("UserID")] && !hasSecurity(getCookie("UserID"), "Visible", {_s : chatData.p})) {
        continue;
      }

      var postType = {};

      var repeated = false;
      if (index && ((chatData.user == events[index-1].user) && (chatData.person == events[index-1].person) && (chatData.userID == events[index-1].userID))) {
        repeated = true;
      }

      if (chatData.eID) {
        postType["Actors"] = true;
      }
      if (chatData.eventData) {
        postType["Events"] = true;
      }
      if (chatData.person) {
        postType["Actors"] = true;
        if (chatData.userID) {
          postType["Players"] = true;
        }
      }
      else if (chatData.user) {
        postType["Players"] = true;
      }
      else {
        postType["Game"] = true;
      }

      if (chatData.media) {
        postType["Players"] = true;
      }
      var shouldPost = true;
      if (chatData.p && (!chatData.p[getCookie("UserID")] && !hasSecurity(getCookie("UserID"), "Visible", {_s : chatData.p}))) {
        shouldPost = false;
      }
      for (var key in postType) {
        if (app.attr("show-"+key) == "false") {
          shouldPost = false;
          break;
        }
      }
      if (shouldPost) {
        var chatBubble;
        if (!game.debug) {
          try {
            chatBubble = sync.render("ui_chatBubble")(chatData, app, {hideHeader : repeated, index : index}).appendTo(list);
          }
          catch (err) {
            console.log(err);
            chatBubble = $("<div>"+err+"</div>").appendTo(list);
          }
        }
        else {
          chatBubble = sync.render("ui_chatBubble")(chatData, app, {hideHeader : repeated, index : index}).appendTo(list);
        }
        if (index <= events.length-2 && ((chatData.user == events[index+1].user) && (chatData.person == events[index+1].person) && (chatData.userID == events[index+1].userID))) {
          chatBubble.css("margin-bottom", "0");
          chatBubble.removeClass("outlinebottom");
        }
        else {
          chatBubble.css("margin-bottom", "1.6em");
        }
      }
    }
  }
  build(chatPlate, obj.data.events, app);

  return div;
});

sync.render("ui_chatBubble", function(obj, app, scope){
  var chatData = obj;

  var div = $("<div>");
  div.addClass("fit-x");

  if (chatData.userID) {
    div.addClass("white outlinebottom");
  }

  if (hasSecurity(getCookie("UserID"), "Game Master") && scope.index != null) {
    div.contextmenu(function(ev){
      var index = scope.index;
      var actionsList = [
        {
          name : "Remove Event",
          click : function(){
            runCommand("emptyLogEvent", index);
          }
        }
      ];

      ui_dropMenu($(this), actionsList, {id : "empty-log-event"});
      ev.stopPropagation();
      ev.preventDefault();
      return false;
    });
  }

  var headerPlate = $("<div>").appendTo(div);
  headerPlate.addClass("flexrow fit-x");

  if (Boolean(app.attr("timeStamps") == "true") && chatData.timeStamp) {
    headerPlate.append(genIcon({raw : true, icon : "time"}).addClass("lrmargin flexmiddle subtitle").attr("title", new Date(chatData.timeStamp)));
  }

  var headerPlateWrap = $("<div>").appendTo(headerPlate);
  headerPlateWrap.addClass("flexrow flexmiddle smargin");


  if (!scope.hideHeader) {
    if (chatData.icon) {
      var icon = $("<div>").appendTo(headerPlateWrap);
      icon.addClass("flexcolumn flexmiddle outline");
      icon.css("border-color", "rgba(0,0,0,0.2)");
      icon.attr("src", (chatData.icon || "/content/icons/blankchar.png"));
      icon.css("background-image", "url('"+(chatData.icon || "/content/icons/blankchar.png")+"')");
      icon.css("background-repeat", "no-repeat");
      icon.css("background-size", "cover");
      icon.css("background-position", "50% 10%");
      if (chatData.person) {
        icon.addClass("smooth hover2");
        icon.css("width", "2.8em");
        icon.css("height", "2.8em");
      }
      else {
        icon.addClass("smooth flex hover2");
        icon.css("max-width", "4em");
        icon.css("max-height", "2.8em");
      }
      icon.click(function(ev){
        var image = $(this).attr("src");
        if (chatData.eID) {
          var ent = getEnt(chatData.eID);
          if (ent && ent.data && ent.data.info && ent.data.info.img && hasSecurity(getCookie("UserID"), "Visible", ent.data)) {
            image = sync.rawVal(ent.data.info.img) || sync.rawVal(ent.data.info.img.min) || image;
          }
        }
        assetTypes["img"].preview(ev, $(this), image);
        ev.stopPropagation();
        ev.preventDefault();
      });
      icon.contextmenu(function(ev){
        assetTypes["img"].contextmenu(ev, $(this), $(this).attr("src"));
        ev.stopPropagation();
        ev.preventDefault();
        return false;
      });
    }

    headerPlateWrap.append("<div class='spadding'></div>");

    var namePlate = $("<div>").appendTo(headerPlateWrap);
    namePlate.addClass("flexcolumn");

    namePlate.append("<div class='flex'></div>");

    var nameWrap = $("<text>").appendTo(namePlate);
    nameWrap.addClass("flexrow fit-x");

    var name = $("<text>").appendTo(nameWrap);
    name.css("-webkit-text-stroke-width", "1px");
    name.text(chatData.person || chatData.user);
    if (chatData.eID) {
      var ent = getEnt(chatData.eID);
      if (ent && ent.data && hasSecurity(getCookie("UserID"), "Visible", ent.data)) {
        name.addClass("link");
        name.click(function(ev){
          assetTypes[ent.data._t].preview(ent, $("body"));
        });
        name.contextmenu(function(ev){
          assetTypes[ent.data._t].contextmenu(ent, $("body"));
          return false;
        });
      }
    }
    if (chatData.userID) {
      if (chatData.person && chatData.person != chatData.user) {
        var pNameWrap = $("<text>").appendTo(namePlate);
        pNameWrap.addClass("flexrow fit-x");

        var pName = $("<text>").appendTo(pNameWrap);
        pName.addClass("lrpadding alttext smooth outline bold");
        pName.css("font-size", "0.6em");
        pName.css("background", (chatData.color || "linear-gradient(to top, #222, #333)"));
        pName.text(chatData.user || getPlayerName(chatData.userID));
      }
    }
  }

  var flavorWrap = $("<text>").appendTo(headerPlate);
  flavorWrap.addClass("flexcolumn flex");
  flavorWrap.append("<div class='flex'></div>");

  var flavorText = $("<text>").appendTo(flavorWrap);
  flavorText.addClass("flexrow subtitle");
  flavorText.css("text-align", "right");
  flavorText.css("display", "inline");
  flavorText.text(chatData.flavor);
  if (chatData.flavor) {
    if (!chatData.person && chatData.eID) {
      var ent = getEnt(chatData.eID);
      if (ent && ent.data && hasSecurity(getCookie("UserID"), "Visible", ent.data)) {
        flavorText.addClass("link");
        flavorText.click(function(ev){
          assetTypes[ent.data._t].preview(ent, $("body"));
        });
        flavorText.contextmenu(function(ev){
          assetTypes[ent.data._t].contextmenu(ent, $("body"));
          return false;
        });
      }
    }
  }

  var contentPlate = $("<div>").appendTo(div);
  if (chatData.eventData) {
    if (!chatData.p || hasSecurity(getCookie("UserID"), "Visible", {_s : chatData.p})) {
      if (hasSecurity(getCookie("UserID"), "Trusted Player")) {
        contentPlate.addClass("hover2");
        contentPlate.attr("draggable", true);
        contentPlate.on("dragstart", function(ev){
          _dragTransfer = {roll : duplicate(chatData)};
        });
        contentPlate.on("drop", function(ev){
          _dragTransfer = null;
        });
        contentPlate.click(function(){
          var actionList = util.buildActions(chatData);
          /*
          if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
            actionList.push({
              name : "Edit",
              icon : "edit",
              click : function(ev, ui) {
                var content = $("<div>");
                content.addClass("flexcolumn flex");

                var dummyObj = sync.obj();
                dummyObj.data = {pool : duplicate(game.events.data[evID].data.data.pool)};

                var newApp = sync.newApp("ui_JSON").appendTo(content);
                newApp.attr("lookup", "pool");
                newApp.attr("hideConfirm", true);
                newApp.attr("width", "200px");
                newApp.attr("height", "200px");
                dummyObj.addApp(newApp);

                var confirm = $("<button>").appendTo(content);
                confirm.append("Change Result");
                confirm.click(function(){
                  game.events.data[evID].data.data.pool = dummyObj.data.pool;
                  if (layout.offline) {
                    game.events.data[evID].update();
                    game.logs.update();
                  }
                  else {
                    game.events.data[evID].sync("updateEvent");
                  }
                  layout.coverlay("edit-results");
                });
                var pop = ui_popOut({
                  id : "edit-results",
                  target : ui,
                }, content);
              }
            });
          }
          */
          if (util.getTargets(true).length) {
            actionList.push({
              name : "De-select targets",
              click : function(ev, ui) {
                util.unSelectTargets();
              }
            });
          }

          var pop = ui_dropMenu($(this), actionList, {id : "dice-action", align : "bottom"});
        });
      }

      if (chatData.user) {
        contentPlate.addClass("bold spadding");
      }
      else {
        contentPlate.addClass("lrmargin lrpadding");
        contentPlate.css("font-size", "0.7em");
      }

      var display;
      if (game.templates.display.ui && game.templates.display.ui[chatData.eventData.ui || game.templates.dice.ui]) {
        display = game.templates.display.ui[chatData.eventData.ui || game.templates.dice.ui];
      }
      else {
        display = null;
      }
      var diceRes = sync.render("ui_newDiceResults")(chatData, app, {display : display});
      diceRes.appendTo(contentPlate);
    }
  }
  else if (chatData.ui) {
   sync.render(chatData.ui)(chatData, app, scope).appendTo(contentPlate);
  }
  else if (chatData.media) {
    var mediaContainer = $("<div>").appendTo(contentPlate);
    mediaContainer.addClass("flexcolumn flexmiddle smooth");
    mediaContainer.css("overflow-wrap", "break-word");
    mediaContainer.attr("srcImg", chatData.media);

    var str = chatData.media;
    if (str.length > 30) {
      str = str.substring(0, 30) + "...";
    }
    flavorText.empty();
    flavorText.append("<a href='"+chatData.media+"' target='_'>"+str+"</a>");


    var mediaLink = $("<a>").appendTo(mediaContainer);
    mediaLink.addClass("flexcolumn flexmiddle");
    mediaLink.css("max-width", "100%");
    mediaLink.attr("href", chatData.media);
    mediaLink.attr("target", "_");
    mediaLink.attr("title", chatData.media);
    mediaLink.css("overflow-wrap", "break-word");
    mediaLink.css("word-break", "break-all");
    mediaLink.click(function(ev){
      ev.stopPropagation();
    });
    //mediaLink.css("word-break", "break-all");
    if (util.matchYoutube(chatData.media)) {
      var media = $("<img>");
      media.appendTo(mediaContainer);
      media.css("width", "auto");
      media.css("max-width", "100%");
      media.css("height", "100px");
      media.css("pointer-events", "none");
      media.attr("src", "/content/youtube.ico");
      if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
        mediaContainer.css("cursor", "pointer");
        mediaContainer.click(function(ev){
          util.shareYoutube($(this).attr("srcImg"));
        });
      }
    }
    else {
      var media = ui_processMedia(chatData.media);
      media.appendTo(mediaContainer);
      media.css("width", "auto");
      media.css("max-width", "100%");
      media.css("height", "100px");
      media.css("pointer-events", "none");

      if (media.is("img")) {
        mediaContainer.css("cursor", "pointer");
        mediaContainer.click(function(ev){
          assetTypes["img"].preview(ev, $(this), $(this).attr("srcImg"));
        });
        mediaContainer.contextmenu(function(ev){
          assetTypes["img"].contextmenu(ev, $(this), $(this).attr("srcImg"));
          ev.stopPropagation();
          ev.preventDefault();
          return false;
        });
      }
      else {
        media[0].play();
      }
    }
  }
  else if (chatData.text) {
    contentPlate.addClass("subtitle");
    if (chatData.user) {
      contentPlate.addClass("bold spadding");
      contentPlate.css("padding-left", "1.0em");
      contentPlate.css("padding-right", "1.0em");
    }
    else {
      contentPlate.addClass("lrmargin lrpadding");
      contentPlate.css("font-size", "0.7em");
    }

    if (chatData.text.match("/me") && chatData.text.match("/me").index == 0) {
      flavorWrap.addClass("flexmiddle subtitle");
      headerPlate.css("background-color", "rgb(255,232,204)");
      if (chatData.person == chatData.user) {
        flavorWrap.addClass("flexmiddle");
      }
      flavorWrap.css("font-style", "italic");
      flavorWrap.text(chatData.text.replace("/me", ""));
      contentPlate.hide();
    }
    else if (chatData.text.match("/w") && chatData.text.match("/w").index == 0) {
      if (getCookie("UserID") != chatData.userID) {
        flavorText.append("<i class='subtitle flex flexmiddle spadding'>whispered to you</i>");
      }
      else {
        flavorText.append("<i class='subtitle flex flexmiddle spadding'>you whispered</i>");
      }
      contentPlate.css("background-color", "rgba(66,108,66,0.2)");
      contentPlate.css("font-style", "italic");
      contentPlate.css("font-size", "0.9em");
      contentPlate.text(chatData.text.replace("/w", ""));
    }
    else if (chatData.text.match("/y") && chatData.text.match("/y").index == 0) {
      contentPlate.addClass("padding size3");
      flavorText.text("Yelled Out!");

      contentPlate.css("font-style", "italic");
      contentPlate.css("background-color", "rgba(255,138,0,0.2)");
      contentPlate.text(chatData.text.replace("/y", ""));
    }
    else {
      contentPlate.text(chatData.text);
    }
  }
  if (chatData.display) {
    var ctx = sync.defaultContext();
    merge(ctx, duplicate(chatData.eventData));
    sync.render("ui_processUI")(chatData, app, {display : chatData.display, viewOnly : true, context : ctx}).appendTo(contentPlate);
  }
  return div
});

var _whisperTargets = {};

sync.render("ui_textBox", function(obj, app, scope){
  var data;
  if (obj) {
    data = obj.data;
  }
  var div = $("<div>");
  div.addClass("fit-xy flexcolumn sheet1");

  /*if (!layout.mobile) {
    div.on("dragover", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      if (!_dragTransfer && !$("#"+app.attr("id")+"-drag-overlay").length) {
        var olay = layout.overlay({
          target : app,
          id : app.attr("id")+"-drag-overlay",
          style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
        });
        olay.addClass("flexcolumn flexmiddle alttext");
        olay.css("font-size", "2em");
        olay.append("<b>Drop to Share</b>");
      }
    });
    div.on('drop', function(ev, ui){
      ev.preventDefault();
      ev.stopPropagation();
      var dt = ev.originalEvent.dataTransfer||$(ui.draggable).data("dt");
      if (dt.getData("Text") && dt.getData("Text").trim()) {
        var flavor;
        var icon;
        if (chatType.text() == "IC") {
          icon = newApp.attr("src");
          var ent = getPlayerCharacter(getCookie("UserID"))
          if (!icon && ent && ent.data) {
            icon = sync.rawVal(ent.data.info.img);
          }
          if (newApp.attr("ICText")) {
            flavor = newApp.attr("ICText");
          }
          else {
            flavor = sync.eval("@me.cName", sync.defaultContext());
          }
        }
        util.chatEvent(dt.getData("Text"), flavor, _whisperTargets, input, icon, flavor);
      }
      layout.coverlay(app.attr("id")+"-drag-overlay");
    });

    div.on("dragleave", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      layout.coverlay(app.attr("id")+"-drag-overlay");
    });
  }*/

  var header = $("<div>").appendTo(div);

  var chatList = $("<div>").appendTo(div);
  chatList.addClass("flexcolumn flex3");

  if (game.logs) {
    /*if (isChrome()) {
      var chatApp = sync.newApp("_logs").appendTo(chatList);
      chatApp.addClass("flex");
      chatApp.css("overflow-x", "none");
      chatApp.css("overflow-y", "none");
      chatApp.attr("show-Players", "false");
      chatApp.attr("show-Events", "false");

      game.logs.addApp(chatApp);
    }*/

    var chatApp = sync.newApp("_logs").appendTo(chatList);
    chatApp.addClass("flex3 noSelected");
    chatApp.css("overflow-x", "none");
    chatApp.css("overflow-y", "none");
    //chatApp.attr("show-Game", "false");
    setTimeout(function(){game.logs.addApp(chatApp);}, 10);
  }
  var outlinebottom = $("<div>").appendTo(div);
  outlinebottom.addClass("outlinebottom");

  var textInput = $("<div>").appendTo(div);
  textInput.addClass("flexcolumn");
  textInput.css("background", "#D8D7DD");

  var imperson = $("<div>").appendTo(textInput);
  imperson.addClass("flexrow fit-x lrpadding");

  var chatType = $("<button>").appendTo(imperson);
  chatType.addClass("subtitle mpadding chatType");
  chatType.attr("title", "Out of Character");
  chatType.text("OOC");

  var newApp = sync.newApp("_imperson").appendTo(imperson);
  newApp.css("outline-color", "transparent");
  newApp.attr("ICText", "No Character");
  newApp.attr("src", "/content/icons/blankchar.png");
  game.players.addApp(newApp);

  chatType.click(function(){
    if (chatType.text() == "OOC") {
      chatType.addClass("highlight alttext");
      chatType.attr("title", "In Character");
      chatType.text("IC");
    }
    else {
      chatType.removeClass("highlight alttext");
      chatType.attr("title", "Out of Character");
      chatType.text("OOC");
    }
  });

  var input = $("<textarea>").appendTo(textInput);
  input.addClass("smooth subtitle lrmargin");
  input.attr("placeholder", "Enter Chat Text Here");
  input.css("height", "60px");
  input.css("overflow-x", "hidden");
  input.keypress(function (ev) {
    if (ev.which == 13 && !_down["16"]) {
      var flavor;
      var icon;
      if (chatType.text() == "IC") {
        icon = newApp.attr("src");
        var ent = getPlayerCharacter(getCookie("UserID"))
        if (!icon && ent && ent.data) {
          icon = sync.rawVal(ent.data.info.img);
        }
        if (newApp.attr("ICText")) {
          flavor = newApp.attr("ICText");
        }
        else {
          flavor = sync.eval("@me.cName", sync.defaultContext());
        }
      }
      util.chatEvent(input.val(), flavor, _whisperTargets, input, icon, flavor);
      var text = $(this);
      setTimeout(function(){text.val("");}, 10);
      ev.stopPropagation();
      ev.preventDefault();
    }
  });
  input.keyup(function (ev) {
    if (ev.which == 38) {
      if (_lastChat.length) {
        if (_lastIndex == null) {
          _lastIndex = _lastChat.length;
        }
        _lastIndex--;
        if (_lastChat[_lastIndex] && _lastIndex >= 0) {
          $(this).val(_lastChat[_lastIndex]);
        }
        else {
          _lastIndex = null;
          $(this).val("");
        }
      }
    }
    else if (ev.which == 40) {
      if (_lastIndex != null) {
        _lastIndex = (_lastIndex || 0) + 1;
        if (_lastChat[_lastIndex]) {
          $(this).val(_lastChat[_lastIndex]);
        }
        else {
          _lastIndex = null;
          $(this).val("");
        }
      }
    }
  });

  var wrap = $("<div>").appendTo(textInput);
  wrap.addClass("smooth spadding flexrow flexbetween");

  if (game.templates.dice.defaults && game.templates.dice.defaults.length) {
    var diceWrap = $("<div>").appendTo(wrap);
    diceWrap.addClass("flexrow flexwrap");

    for (var i in game.templates.dice.defaults) {
      var index = game.templates.dice.defaults[i];
      var diceData = game.templates.dice.pool[index];

      var dice = $("<button>").appendTo(diceWrap);
      dice.addClass("flexmiddle subtitle bold lrmargin outline smooth");
      dice.attr("index", index);
      dice.attr("title", "Rolls "+diceData.value);
      dice.css("display", "flex");
      dice.css("background", "none");
      dice.css("background-color", "#333");
      dice.css("color", "white");
      dice.css("border-radius", "4px");

      var label = $("<div>").appendTo(dice);
      label.css("text-align", "center");
      label.css("pointer-events", "none");
      label.text(index.substring(0,Math.min(index.length, 4)));

      dice.append(label);

      for (var key in diceData.display) {
        dice.css(key, diceData.display[key]);
      }

      dice.click(function() {
        snd_diceRoll.play();
        var diceArray = game.templates.dice.pool;
        if (diceArray[$(this).attr("index")]) {
          var equation = "1["+$(this).attr("index")+"]";

          var icon;
          var ic;
          if (chatType.text() == "IC") {
            icon = newApp.attr("src");
            var ent = getPlayerCharacter(getCookie("UserID"))
            if (!icon && ent && ent.data) {
              icon = sync.rawVal(ent.data.info.img);
            }
            ic = newApp.attr("ICText");
          }

          util.processEvent("/r " + equation, "rolled", icon, ic);
        }
      });
    }
  }

  var extendedDice = $("<button>Pools</button>").appendTo(wrap);
  extendedDice.addClass("subtitle lrmargin flexmiddle");
  extendedDice.click(function() {
    var content = $("<div>");
    content.addClass("flex flexcolumn padding");

    game.locals["diceRoll"] = game.locals["diceRoll"] || sync.obj();
    game.locals["diceRoll"].data = game.locals["diceRoll"].data || {};

    var extraDice = sync.newApp("ui_dicePooler").appendTo(content);
    game.locals["diceRoll"].addApp(extraDice);

    var confirmWrap = $("<div>").appendTo(content);
    confirmWrap.addClass("flexrow");

    var checkWrap = $("<div>").appendTo(confirmWrap);
    checkWrap.addClass("flexcolumn lrmargin");

    var check = $("<div>").appendTo(checkWrap);
    check.addClass("flexrow flexmiddle");

    var close = genInput({
      parent : check,
      type : "checkbox",
      style : {"margin-top" : "0"},
    });
    close.prop("checked", true);
    check.append("<b class='subtitle lrpadding'>Close after rolling</b>");
    check.append("<div class='flex'></div>");

    var check = $("<div>").appendTo(checkWrap);
    check.addClass("flexrow flexmiddle");

    var show = genInput({
      parent : check,
      type : "checkbox",
      style : {"margin-top" : "0"},
    });
    show.prop("checked", false);
    show.change(function(){
      if (show.prop("checked") == true) {
        extraDice.attr("show", "true");
      }
      else {
        extraDice.attr("show", "false");
      }
      game.locals["diceRoll"].update();
    });
    check.append("<b class='subtitle lrpadding'>Show all dice types</b>");
    check.append("<div class='flex'></div>");

    var check = $("<div>").appendTo(checkWrap);
    check.addClass("flexrow flexmiddle");

    var show1 = genInput({
      parent : check,
      type : "checkbox",
      style : {"margin-top" : "0"},
    });
    show1.prop("checked", false);
    show1.change(function(){
      if (show.prop("checked") == true) {
        extraDice.attr("total", "true");
      }
      else {
        extraDice.attr("total", "false");
      }
      game.locals["diceRoll"].update();
    });
    check.append("<b class='subtitle lrpadding'>Total up Dice</b>");
    check.append("<div class='flex'></div>");

    var button = $("<button>").appendTo(confirmWrap);
    button.addClass("flex");
    button.append("Roll");
    button.click(function(){
      snd_diceRoll.play();
      var context = sync.defaultContext();

      var equation = "";
      for (var i in game.locals["diceRoll"].data.dice) {
        equation += game.locals["diceRoll"].data.dice[i]+"["+i+"]+";
      }
      equation = equation.substring(0, equation.length-1);

      var icon;
      var ic;
      if (chatType.text() == "IC") {
        icon = newApp.attr("src");
        var ent = getPlayerCharacter(getCookie("UserID"))
        if (!icon && ent && ent.data) {
          icon = sync.rawVal(ent.data.info.img);
        }
        ic = newApp.attr("ICText");
      }
      if (extraDice.attr("total")) {
        var equation = "";
        for (var i in game.locals["diceRoll"].data.dice) {
          if (game.templates.dice.pool[i]) {
            equation += game.locals["diceRoll"].data.dice[i]+game.templates.dice.pool[i].value + "+";
          }
        }
        equation = equation.substring(0, equation.length-1);

        util.processEvent("/r " + equation, "rolled", icon, ic);
      }
      else {
        util.processEvent("/r " + equation, "rolled", icon, ic);
      }
      if (close.prop("checked") == true) {
        $("#dice-popout").hide();
      }
    });


    var button = $("<button>").appendTo(confirmWrap);
    button.addClass("subtitle background alttext");
    button.append("Private");
    button.click(function(){
      snd_diceRoll.play();
      var context = sync.defaultContext();

      var equation = "";
      for (var i in game.locals["diceRoll"].data.dice) {
        equation += game.locals["diceRoll"].data.dice[i]+"["+i+"]+";
      }
      equation = equation.substring(0, equation.length-1);

      var icon;
      var ic;
      if (chatType.text() == "IC") {
        icon = newApp.attr("src");
        var ent = getPlayerCharacter(getCookie("UserID"))
        if (!icon && ent && ent.data) {
          icon = sync.rawVal(ent.data.info.img);
        }
        ic = newApp.attr("ICText");
      }
      var priv = {};
      priv[getCookie("UserID")] = true;
      if (extraDice.attr("total")) {
        var equation = "";
        for (var i in game.locals["diceRoll"].data.dice) {
          if (game.templates.dice.pool[i]) {
            equation += game.locals["diceRoll"].data.dice[i]+game.templates.dice.pool[i].value + "+";
          }
        }
        equation = equation.substring(0, equation.length-1);

        util.processEvent("/r " + equation, "rolled", icon, ic, priv);
      }
      else {
        util.processEvent("/r " + equation, "rolled", icon, ic, priv);
      }
      if (close.prop("checked") == true) {
        $("#dice-popout").hide();
      }
    });

    if (!$("#dice-popout").length) {
      var popout = ui_popOut({
        target : $(this),
        title : "Dice Roller",
        align : "top",
        prompt : true,
        close : function(){
          popout.hide();
        },
        id : "dice-popout",
        style : {"width": "300px"},
      }, content).addClass("prompt");
      popout.resizable();
    }
    else {
      $("#dice-popout").toggle();
      var max = util.getMaxZ(".ui-popout");
      $("#dice-popout").css("z-index", max+1);

    }
  });

  var send = $("<button>").appendTo(wrap);
  send.addClass("subtitle");
  send.text("Send");
  send.click(function(ev){
    var flavor;
    var icon;
    if (chatType.text() == "IC") {
      icon = newApp.attr("src");
      var ent = getPlayerCharacter(getCookie("UserID"))
      if (!icon && ent && ent.data) {
        icon = sync.rawVal(ent.data.info.img);
      }
      if (newApp.attr("ICText")) {
        flavor = newApp.attr("ICText");
      }
      else {
        flavor = sync.eval("@me.cName", sync.defaultContext());
      }
    }
    util.chatEvent(input.val(), flavor, _whisperTargets, input, icon, flavor);
    input.val("");
  });

  var bottomContent = $("<div>").appendTo(textInput);
  bottomContent.addClass("flexrow flex alttext");
  bottomContent.css("position", "relative");

  var cardWrap = $("<div>").appendTo(bottomContent);
  cardWrap.addClass("flexcolumn lrmargin");

  var rolls = sync.newApp("ui_hotRolls");
  rolls.css("outline", "none");
  rolls.css("color", "#333");
  rolls.css("text-shadow", "none");
  rolls.appendTo(cardWrap);
  game.players.addApp(rolls);
  

  return div;
});

sync.render("_imperson", function(obj, app, scope){
  var div = $("<div>");
  div.addClass("flexrow flexbetween");

  var charData = getPlayerCharacter(getCookie("UserID"));
  var charName = getPlayerCharacterName(getCookie("UserID"));

  var iconDiv = $("<div>").appendTo(div);
  iconDiv.addClass("flexrow flexmiddle");

  var icon = $("<div>").appendTo(iconDiv);
  icon.addClass("flexcolumn flexmiddle white round outline hover lrmargin");
  icon.css("background-size", "contain");
  icon.css("background-repeat", "no-repeat");
  icon.css("background-position", "center");
  icon.css("width", "25px");
  icon.css("height", "25px");
  icon.css("margin-left", "4px");
  icon.css("margin-right", "4px");
  icon.css("cursor", "pointer");
  icon.attr("UserID", getCookie("UserID"));
  if (app.attr("src")) {
    icon.css("background-image", "url('"+(app.attr("src"))+"')");
  }
  icon.click(function(){
    var parent = $(this);
    var imgList = sync.render("ui_filePicker")(obj, app, {
      filter : "img",
      value : app.attr("src"),
      change : function(ev, ui, value){
        app.attr("src", value);
        parent.css("background-image", "url('"+value+"')");
        layout.coverlay("icons-picker");
      }
    });

    var pop = ui_popOut({
      target : $(this),
      prompt : true,
      id : "icons-picker",
      align : "top",
      style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
    }, imgList);
    pop.resizable();
  });
  icon.contextmenu(function(){
    app.removeAttr("src");
    $(this).css("background-image", "/content/icons/blankchar.png");
    return false;
  });

  var name = "No Character";
  var refresh;
  if (charData && charData.data) {
    name = sync.rawVal(charData.data.info.name);

    refresh = genIcon("refresh");
    refresh.addClass("subtitle flexmiddle lrpadding");
    refresh.click(function(){
      input.val(name);
      input.change();
      app.attr("ICText", name);
      app.attr("src", sync.rawVal(charData.data.info.img) || "/content/icons/blankchar.png");
      icon.css("background-image", "url('"+(sync.rawVal(charData.data.info.img) || "/content/icons/blankchar.png")+"')");
    });

    /*var actions = $("<button>").appendTo(div);
    actions.addClass("highlight subtitle alttext");
    actions.text("Actions");
    actions.click(function(){
      var actionObj = sync.dummyObj();
      actionObj.data = {context : {c : charData.id()}};

      game.locals["actions"] = game.locals["actions"] || {};
      game.locals["actions"].push(actionObj);

      game.locals["actionsList"] = game.locals["actionsList"] || {};
      game.locals["actionsList"][app.attr("id")+"-"+obj.data._t] = actionObj;

      var actionApp = sync.newApp("ui_renderAction");
      actionObj.addApp(actionApp);

      var pop = ui_popOut({
        target : $(this),
        minimize : true,
        prompt : true,
        dragThickness : "0.5em",
        title : "Action"
      }, actionApp);
      pop.resizable();
    });*/
  }

  if (layout.mobile) {
    var button = $("<button>").appendTo(iconDiv);
    button.append("<b>" + (app.attr("ICText") || name) + "</b>");
    button.click(function(){
      var uID = $(this).attr("UserID");
      var content = $("<div>");

      var list = [];
      for (var i in game.entities.data) {
        if (game.entities.data[i].data._t == "c") {
          list.push(i);
        }
      }
      list.sort(function(obj1, obj2){
        var obj1 = getEnt(obj1);
        var obj2 = getEnt(obj2);
        return (String(sync.rawVal(obj1.data.info.name) || "")).toLowerCase().localeCompare(String(sync.rawVal(obj2.data.info.name) || "").toLowerCase());
      });

      var entList = sync.render("ui_entList")(obj, app, {
        list : list,
        filter : "c",
        rights : "Visible",
        click : function(ev, ui, ent) {
          button.empty();
          button.append("<b>"+sync.rawVal(ent.data.info.name)+"</b>");
          runCommand("selectPlayerEntity", {id : ent.id(), userID : uID});
          sendAlert({text : "Impersonating Character : " + sync.rawVal(ent.data.info.name)});
          $(".chatType").text("IC");
          $(".chatType").addClass("highlight alttext");
          $(".chatType").attr("title", "In Character");
          app.attr("ICText", sync.rawVal(ent.data.info.name));
          app.attr("src", sync.rawVal(ent.data.info.img) || "/content/icons/blankchar.png");
          icon.css("background-image", "url('"+(sync.rawVal(ent.data.info.img) || "/content/icons/blankchar.png")+"')");
          layout.coverlay("select-entity");
        }
      });
      entList.appendTo(content);
      entList.addClass("outline smooth");
      entList.css("max-height", "40vh");
      entList.css("overflow", "auto");

      ui_popOut({
        target : $(this),
        id : "select-entity",
        align : "top",
      }, content);
    });
  }
  else {
    var list = [];
    for (var i in game.entities.data) {
      var ent = game.entities.data[i];
      if (ent && ent.data && game.entities.data[i].data._t == "c" && hasSecurity(getCookie("UserID"), "Rights", ent.data) && !util.contains(list, String(ent.data.info.name.current || ""))) {
        list.push(String(ent.data.info.name.current || ""));
      }
    }
    list.sort(function(obj1, obj2){
      return String(obj1 || "").toLowerCase().localeCompare(String(obj2 || "").toLowerCase());
    });

    var input = genInput({
      parent : iconDiv,
      type : "list",
      list : list
    });
    input.val(app.attr("ICText") || name);
    input.addClass("subtitle middle");
    input.change(function(){
      app.attr("ICText", $(this).val());
      $(".chatType").text("IC");
      $(".chatType").addClass("highlight alttext");
      $(".chatType").attr("title", "In Character");
      layout.coverlay("select-entity");
    });

    input.focus(function(ev){
      if (charData && charData.data && _down["16"]) {
        var content = sync.newApp("ui_characterSummary");
        charData.addApp(content);
        var popOut = ui_popOut({
          target: $(this),
          id: "char-summary-"+charData.id(),
        }, content);
      }
      else {
        var input = $(this);
        $(this).val("");
        var list = [];
        for (var i in game.entities.data) {
          var ent = game.entities.data[i];
          if (ent && ent.data && game.entities.data[i].data._t == "c" && hasSecurity(getCookie("UserID"), "Rights", ent.data) && !util.contains(list, String(ent.data.info.name.current || ""))) {
            list.push(String(ent.data.info.name.current || ""));
          }
        }
        list.sort(function(obj1, obj2){
          return String(obj1 || "").toLowerCase().localeCompare(String(obj2 || "").toLowerCase());
        });
        $(this).autocomplete({
          source: list,
          minLength: 0,
          change : function(){
            input.change();
            for (var i in game.entities.data) {
              var ent = game.entities.data[i];
              if (ent && ent.data && game.entities.data[i].data._t == "c" && String(ent.data.info.name.current || "") == input.val()) {
                if (sync.rawVal(ent.data.info.img)) {
                  app.attr("src", sync.rawVal(ent.data.info.img));
                }
                else {
                  app.removeAttr("src");
                }
                icon.css("background-image", "url('"+(sync.rawVal(ent.data.info.img) || "/content/icons/blankchar.png")+"')");
                break;
              }
            }
          }
        });
      }
      input.contextmenu(function(ev){
        input.val(util.nameBank[Math.floor(util.nameBank.length * Math.random())]);
        input.change();
        $(".chatType").text("IC");
        $(".chatType").addClass("highlight alttext");
        $(".chatType").attr("title", "In Character");
        ev.stopPropagation();
        return false;
      });
      ev.stopPropagation();
      ev.preventDefault();
      return false;
    });
    input.blur(function(){
      input.val(app.attr("ICText") || name);
    });
  }

  if (refresh) {
    refresh.appendTo(iconDiv);
  }

  var commsChat = genIcon("facetime-video", "Voice/Video").appendTo(div);
  commsChat.addClass("subtitle bold flexmiddle");
  commsChat.attr("title", "Voice/Video Chat");
  commsChat.click(function(){
    if (!comms.ready) {
      initializeCamera();
    }
    else {
      //$("#web-cam-"+playerID).show();
      comms.shutdown();
    }
  });

  return div;
});

navigator.getUserMedia = navigator.getUserMedia ||
navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

function initializeCamera(){
  if (!comms.stream) {
    function menu() {
      navigator.mediaDevices.enumerateDevices().then(function(devices) {
        var constraints = {audio : true, video : true};
        var content = $("<div>");
        content.addClass("flexcolumn flex");

        content.append("<b>Audio Device</b>");
        var audioSelect = $("<select>").appendTo(content);
        audioSelect.addClass("fit-x");

        content.append("<b>Video Device</b>");
        var videoSelect = $("<select>").appendTo(content);
        videoSelect.addClass("fit-x");


        for (var i in devices) {
          var devData = devices[i];
          if (devData.kind == "audioinput") {
            audioSelect.append("<option value='"+devData.deviceId+"'>"+devData.label+"</option>");
          }
          if (devData.kind == "videoinput") {
            videoSelect.append("<option value='"+devData.deviceId+"'>"+devData.label+"</option>");
          }
        }
        audioSelect.append("<option value='Disabled'>Disabled</option>");
        audioSelect.change(function(){
          if ($(this).val() == "Disabled") {
            constraints.video = false;
            constraints.audio = false;
          }
          else {
            constraints.audio = {deviceId: $(this).val()};
          }
        });
        videoSelect.append("<option value='Disabled'>Disabled</option>");
        videoSelect.change(function(){
          if ($(this).val() == "Disabled") {
            constraints.video = false;
          }
          else {
            constraints.audio = constraints.audio || true;
            constraints.video = {deviceId: $(this).val()};
          }
        });

        var warning = $("<i>").appendTo(content);
        warning.addClass("flexmiddle subtitle bold")
        warning.text("Make sure your webcam is not being used in any other application");

        var confirm = $("<button>").appendTo(content);
        confirm.addClass("highlight alttext");
        confirm.text("Confirm");
        confirm.click(function(){
          navigator.mediaDevices.getUserMedia(constraints).then(function(stream) {
             comms.stream = stream;
             comms.initialize();
           })
           .catch(function(error) {
             var constraints = {audio : true};
             navigator.mediaDevices.getUserMedia(constraints).then(function(stream) {
               comms.stream = stream;
               comms.initialize();
             })
             .catch(function(error) {
               console.log("navigator.getUserMedia error: ", error);
             });
             console.log("navigator.getUserMedia error trying audio", error);
          });
          layout.coverlay("target-devices");
        });

        ui_popOut({
          target : $("body"),
          id : "target-devices",
          title : "Select Devices",
          style : {"width" : "300px"}
        }, content);
      }).catch(function(err) {
        sendAlert({text : err});
      });
    }
    navigator.mediaDevices.getUserMedia({audio : true, video : true}).then(function(){
      menu();
    }).catch(function(){
      menu();
    });
  }
  else {
    comms.initialize();
  }
}



var comms = {};
comms.peers = {};
comms.showFeed = function(player, stream, extrapop) {
  var id = player || getCookie("UserID");
  stream = stream || comms.stream;
  var content;

  var mediaContainer = $("<div>");
  mediaContainer.addClass("alttext dragcontrol");
  mediaContainer.attr("id", "media-frame-"+id);
  mediaContainer.css("position", "relative");

  var newApp = $("<div>");

  var newCards = $("<div>");

  if (stream.getVideoTracks().length) {
    content = $("<video>").appendTo(mediaContainer);
    content.attr('height', "150px");
    content.attr('width', "auto");

    mediaContainer.contextmenu(function(ev){
      var content = $(this);
      var actionList = [
        {
          name : "Small",
          click : function(){
            newApp.css("font-size", "");
            content.css("font-size", "");
            $(content.children()[0]).height("150px");
          }
        },
        {
          name : "Normal",
          click : function(){
            newApp.css("font-size", "0.8em");
            content.css("font-size", "1.2em");
            $(content.children()[0]).height($(window).height()/4);
          }
        },
        {
          name : "Large",
          click : function(){
            newApp.css("font-size", "0.6em");
            content.css("font-size", "1.6em");
            $(content.children()[0]).height($(window).height()/2);
          }
        },
        {
          name : "Toggle Cards",
          click : function(){
            if (!newCards.is(":visible")) {
              newCards.show();
            }
            else {
              newCards.hide();
            }
          }
        },
        {
          name : "Toggle Character",
          click : function(){
            if (!newApp.is(":visible")) {
              newApp.show();
            }
            else {
              newApp.hide();
            }
          }
        },
      ];

      ui_dropMenu($(this), actionList, {id : "resize-voice"});
      return false;
    });
  }
  else {
    mediaContainer.css("height", "25px");
    mediaContainer.css("width", "150px");

    content = $("<audio>").appendTo(mediaContainer);
    content.attr('height', "1px");
    content.attr('width', "1px");

    mediaContainer.contextmenu(function(ev){
      return false;
    });
  }
  content.addClass("media-src");
  content.attr("id", "media-src-"+id);
  content.attr("defaultVolume", 1);
  content.attr("UserID", id);

  content.attr("autoplay", "1");
  content.attr("src", URL.createObjectURL(stream));
  content.css("pointer-events", "none");
  content.css("transition", "filter 1s");
  content.prop("volume", $("#media-src-"+player).attr("defaultVolume"));

  var channelControls = $("<div>").appendTo(mediaContainer);
  channelControls.addClass("spadding flexaround");

  var cControls = $("<div>").appendTo(channelControls);
  cControls.attr("id", "media-channels-"+id);
  cControls.attr("UserID", id);

  if (stream.getVideoTracks().length) {
    channelControls.addClass("flexcolumn");
    cControls.addClass("flexcolumn");
    channelControls.css("position", "absolute");
    channelControls.css("top", "0");
    channelControls.css("left", "0");
  }
  else {
    channelControls.addClass("flexrow");
    cControls.addClass("flexrow flexaround");
  }

  var chanColors = [
    "rgba(0,200,0,1)",
  ];

  for (var i=1; i<=chanColors.length; i++) {
    var channel = $("<div>").appendTo(cControls);
    channel.addClass("alttext spadding subtitle foreground smooth outline");
    channel.attr("channel", i);
    channel.attr("UserID", id);
    channel.attr("title", "Channel " + i);
    channel.css("background-color", chanColors[i-1]);
    channel.css("opacity", "0.5");
    channel.text("Whisper");
    if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
      channel.css("cursor", "pointer");
      channel.click(function(){
        var channels = {};
        $("#media-channels-"+id).children().each(function(){
          if ($(this).attr("channel")) {
            if ($(this).css("opacity") == "1") {
              channels[$(this).attr("channel")] = true;
            }
          }
        });
        if (!channels[$(this).attr("channel")]) {
          channels[$(this).attr("channel")] = true;
        }
        else {
          delete channels[$(this).attr("channel")];
        }
        runCommand("comms", {cmd : "channel", players : [$(this).attr("UserID")], channels : channels});
      });
    }
  }

  if (!hasSecurity(getCookie("UserID"), "Assistant Master")) {
    cControls.hide();
  }

  var deafen = genIcon("headphones").appendTo(channelControls);
  deafen.attr("id", "deafen-"+id);
  deafen.attr("title", "Deafen");
  deafen.attr("UserID", id);
  deafen.css("opacity", "0.5");
  deafen.click(function(){
    if (deafen.css("opacity") == "0.5") {
      if (!hasSecurity(getCookie("UserID"), "Assistant Master")) {
        comms.deafen(id, true);
      }
      else {
        runCommand("comms", {cmd : "deafen", players : [$(this).attr("UserID")]});
      }
    }
    else {
      if (!hasSecurity(getCookie("UserID"), "Assistant Master")) {
        comms.undeafen(id, true);
      }
      else {
        runCommand("comms", {cmd : "undeafen", players : [$(this).attr("UserID")]});
      }
    }
  });

  var mute = genIcon("volume-off").appendTo(channelControls);
  mute.attr("id", "mute-"+id);
  mute.attr("title", "Mute");
  mute.attr("UserID", id);
  mute.css("opacity", "0.5");
  mute.click(function(){
    if (mute.css("opacity") == "0.5") {
      if (!hasSecurity(getCookie("UserID"), "Assistant Master")) {
        comms.mute(id, true);
      }
      else {
        runCommand("comms", {cmd : "mute", players : [$(this).attr("UserID")]});
      }
    }
    else {
      if (!hasSecurity(getCookie("UserID"), "Assistant Master")) {
        comms.unmute(id, true);
      }
      else {
        runCommand("comms", {cmd : "unmute", players : [$(this).attr("UserID")]});
      }
    }
  });

  var reveal = genIcon("eye-close").appendTo(channelControls);
  reveal.attr("id", "reveal-"+id);
  reveal.attr("title", "Hide");
  reveal.attr("UserID", id);
  reveal.css("opacity", "0.5");

  if ((getCookie("UserID") == player || hasSecurity(getCookie("UserID"), "Assistant Master")) && content.is("video")) {
    reveal.click(function(){
      if (reveal.css("opacity") == "0.5") {
        runCommand("comms", {cmd : "hide", players : [$(this).attr("UserID")]});
        reveal.css("opacity", "1.0");
      }
      else {
        runCommand("comms", {cmd : "reveal", players : [$(this).attr("UserID")]});
        reveal.css("opacity", "0.5");
      }
    });
  }

  var localControls = $("<div>");
  localControls.addClass("flexrow spadding smooth");
  localControls.css("background-color", "rgba(0,0,0,0.4)");

  if (stream.getVideoTracks().length) {
    localControls.appendTo(mediaContainer);
    localControls.css("position", "absolute");
    localControls.css("top", "0");
    localControls.css("right", "0");
  }
  else {
    localControls.appendTo(channelControls);
  }

  if (id == getCookie("UserID")) {
    var localDeafen = genIcon("headphones").appendTo(localControls);
    localDeafen.addClass("lrmargin");
    localDeafen.attr("id", "local-deafen-"+id);
    localDeafen.attr("title", "Local Deafen");
    localDeafen.attr("UserID", id);
    localDeafen.css("opacity", "0.5");
    localDeafen.click(function(){
      if (localDeafen.css("opacity") == "1") {
        comms.undeafen(id, true);
      }
      else {
        comms.deafen(id, true);
      }
    });
  }

  var localMute = genIcon("volume-off").appendTo(localControls);
  localMute.addClass("lrmargin");
  localMute.attr("id", "local-mute-"+id);
  localMute.attr("title", "Local Mute");
  localMute.attr("UserID", id);
  localMute.css("opacity", "0.5");
  localMute.click(function(){
    if (localMute.css("opacity") == "1") {
      comms.unmute(id, true);
      if (getCookie("UserID") == $(this).attr("UserID")) {
        runCommand("comms", {cmd : "localUnMute"});
      }
    }
    else {
      comms.mute(id, true);
      if (getCookie("UserID") == $(this).attr("UserID")) {
        runCommand("comms", {cmd : "localMute"});
      }
    }
  });

  var target;
  $(".playerPlate").each(function(){
    if ($(this).attr("UserID") == id) {
      target = $(this);
    }
  });
  if (target) {
    if (stream.getVideoTracks().length) {
      newApp = sync.newApp("ui_playerToken").appendTo(mediaContainer);
      newApp.attr("viewOnly", true);
      newApp.attr("UserID", id);
      newApp.css("height", "50px");
      newApp.css("color", "#333");
      newApp.css("text-shadow", "none");
      newApp.css("position", "absolute");
      newApp.css("bottom", "0");
      newApp.css("left", "0");

      game.players.addApp(newApp);


      newCards = sync.newApp("ui_hand").appendTo(mediaContainer);
      newCards.addClass("flexmiddle");
      newCards.attr("UserID", id);
      newCards.css("height", "50px");
      newCards.css("color", "#333");
      newCards.css("text-shadow", "none");
      newCards.css("position", "absolute");
      newCards.css("bottom", "0");
      newCards.css("right", "0");
      newCards.css("overflow", "hidden");

      game.state.addApp(newCards);

      if (hasSecurity(player, "Game Master")) {
        content.css("filter", "brightness(0)");
        reveal.css("opacity", "1.0");
      }
      else {
        newApp.css("font-size", "0.8em");
        mediaContainer.css("font-size", "1.2em");
      }
    }
    content[0].oncanplay = function(){
      content[0].play();
    };
    content[0].onerror = function(err){
      console.log(err);
    }
    var title = game.players.data[id].displayName;
    var pop = ui_popOut({
      target : target,
      id : "web-cam-"+id,
      align : "bottom",
      title : title,
      dragThickness : "0px",
      close : function(){
        pop.fadeOut();
        return false;
      }
    }, mediaContainer);
    pop.addClass("smooth subtitle web-cam");
    util.dockReveal(pop);
  }
}

comms.setup = function(id, stream){
  // build all the peer connections
  var pc = new RTCPeerConnection({"iceServers" : [
    {url : "stun:stun1.l.google.com:19302"},
    {url : "stun:stun2.l.google.com:19302"},
    {url : "stun:stun3.l.google.com:19302"},
    {url : "stun:stun4.l.google.com:19302"},
    {url : "stun:stun.stunprotocol.org:3478"},
  ]});

  pc.onicecandidate = function(evt) {
    if (evt.candidate) {
      connection.socket.emit("p2p", {"sdp" : JSON.stringify({candidate: evt.candidate, type : evt.type, target : evt.target}), target : id});
    }
  };

  // once remote stream arrives, show it in the remote video element
  pc.onaddstream = function (evt) {
    comms.peers[id].stream = evt.stream;
    comms.showFeed(id, evt.stream);
  };

  pc.onremovestream = function(ev){

  }

  pc.onnegotiationneeded = function() {

  }

  pc.close = function(){
    $("#web-cam-"+id).remove();
    delete comms.peers[id];
  }

  if (comms.stream) {
    pc.addStream(comms.stream);
  }
  comms.peers[id] = pc;
}

comms.shutdown = function(){
  if (comms.stream.getVideoTracks() && comms.stream.getVideoTracks().length) {
    comms.stream.getVideoTracks()[0].stop();
  }
  if (comms.stream.getAudioTracks() && comms.stream.getAudioTracks().length) {
    comms.stream.getAudioTracks()[0].stop();
  }
  comms.stream = null;
  for (var i in comms.peers) {
    if (comms.peers[i].stream) {
      if (comms.peers[i].stream.getVideoTracks() && comms.peers[i].stream.getVideoTracks().length) {
        comms.peers[i].stream.getVideoTracks()[0].stop();
      }
      if (comms.peers[i].stream.getAudioTracks() && comms.peers[i].stream.getAudioTracks().length) {
        comms.peers[i].stream.getAudioTracks()[0].stop();
      }
    }
    comms.peers[i].close();
    delete comms.peers[i];
  }
  comms.ready = false;
  runCommand("comms", {cmd : "disconnect"});
  $(".web-cam").remove();
}

comms.message = function(evt) {
  if (!comms.ready) {
    return false;
  }
  if (evt.readied) {
    if (!evt.initiator) {
      if (comms.ready) {
        connection.socket.emit("p2p", {initiator : evt.from, readied : true, ready : true, target : evt.from});
      }
      else {
        connection.socket.emit("p2p", {initiator : evt.from, readied : true, ready : false, target : evt.from});
      }
    }
    else if (evt.ready && evt.readied) {
      comms.offer(evt.from);
    }
    return false;
  }
  if (!comms.peers[evt.from]) {
    if (game.players.data[evt.from]) {
      comms.setup(evt.from, true);
    }
    else {
      return false;
    }
  }
  var pc = comms.peers[evt.from];
  var signal = JSON.parse(evt.sdp);
  if (signal.sdp) {
    comms.answer(evt.from, signal);
  }
  else {
    var iceCandidate = new RTCIceCandidate(signal.candidate);
    iceCandidate.from = evt.from;
    pc.addIceCandidate(iceCandidate);
  }
}

comms.offer = function(id) {
  var pc = comms.peers[id];
  pc.createOffer(function(desc){
    pc.setLocalDescription(desc, function(){
      connection.socket.emit("p2p", {"sdp": JSON.stringify(desc), target : id});
    }, function(error){console.log(error)});
  },
  function(fail){
    console.log("Connection Failed", fail);
  });
}

comms.answer = function(id, signal) {
  var pc = comms.peers[id];
  pc.setRemoteDescription(new RTCSessionDescription(signal),
    function(){
      if (pc.remoteDescription.type == 'offer') {
        pc.createAnswer(function(desc){
          pc.setLocalDescription(desc, function() {
            connection.socket.emit("p2p", {"sdp": JSON.stringify(desc), target : id});
          }, function(error){console.log(error)});
        },
        function(fail){
          console.log("Connection Failed", fail);
          comms.setup(); // re-setup cuz this failed
        });
      }
    },
    function(fail){
      console.log("Connection Failed", fail);
    }
  );
}
comms.update = function() {
  // get local settings
  var localDeafen = $("#local-deafen-"+getCookie("UserID")).attr("deafen");

  var localChannels = {};
  $("#media-channels-"+getCookie("UserID")).children().each(function(){
    if ($(this).attr("channel")) {
      if ($(this).css("opacity") == "1") {
        localChannels[$(this).attr("channel")] = true;
      }
    }
  });

  $(".media-src").each(function(){
    if ($(this).attr("UserID") != getCookie("UserID")) {
      var player = $(this).attr("UserID");
      var channels = {};
      $("#media-channels-"+player).children().each(function(){
        if ($(this).attr("channel")) {
          if ($(this).css("opacity") == "1") {
            channels[$(this).attr("channel")] = true;
          }
        }
      });

      var localMute = $("#local-mute-"+player).attr("muted");
      var channelMatch = false;
      for (var key in localChannels) {
        if (channels[key] && localChannels[key] == channels[key]) {
          channelMatch = true;
        }
      }
      var channelList = (Object.keys(channels).length == 0 && Object.keys(localChannels).length == 0);
      if ((!channelList && !channelMatch) || $("#media-src-"+player).attr("muted") == "true" || $("#media-src-"+getCookie("UserID")).attr("deafen") == "true" || localDeafen || localMute) {
        $("#media-src-"+player).prop("volume", 0);
        if (!channelList && !channelMatch) {
          $("#media-src-"+player).css("opacity", "0");
        }
        else {
          $("#media-src-"+player).css("opacity", "1");
        }
      }
      else if (channelList || channelMatch) {
        $("#media-src-"+player).prop("volume", $("#media-src-"+player).attr("defaultVolume"));
        $("#media-src-"+player).css("opacity", "1");
      }
    }
  });
}

comms.deafen = function(player, local) {
  if (local) {
    $("#local-deafen-"+player).attr("deafen", true);
    $("#local-deafen-"+player).css("opacity", "1");
    comms.mute(player, true);
  }
  else {
    $("#media-src-"+player).attr("deafen", true);
    $("#deafen-"+player).css("opacity", "1");
    comms.mute(player);
  }

  comms.update(player);
}

comms.undeafen = function(player, local) {
  if (local) {
    $("#local-deafen-"+player).removeAttr("deafen");
    $("#local-deafen-"+player).css("opacity", "0.5");
    comms.unmute(player, true);
  }
  else {
    $("#media-src-"+player).removeAttr("deafen");
    $("#deafen-"+player).css("opacity", "0.5");
    comms.unmute(player);
  }

  comms.update(player);
}

comms.mute = function(player, local) {
  if (local) {
    $("#local-mute-"+player).attr("muted", true);
    $("#local-mute-"+player).css("opacity", "1");
    if (comms.stream) {
      comms.stream.getAudioTracks()[0].enabled = false;
    }
    runCommand("")
  }
  else {
    $("#media-src-"+player).attr("muted", true);
    $("#mute-"+player).css("opacity", "1");
    if ($("#web-cam-"+player).length && $("#web-cam-"+player).attr("docked")) {
      util.dockHide($("#web-cam-"+player));
    }
  }
  comms.update(player);
}

comms.localMute = function(player){
  if ($("#web-cam-"+player).length && $("#web-cam-"+player).attr("docked")) {
    util.dockHide($("#web-cam-"+player));
  }
}

comms.localUnMute = function(player){
  if ($("#web-cam-"+player).length && $("#web-cam-"+player).attr("docked")) {
    util.dockReveal($("#web-cam-"+player));
  }
}

comms.reveal = function(player){
  if ($("#media-src-"+player).length) {
    $("#media-src-"+player).css("filter", "brightness(1)");
    if ($("#web-cam-"+player).length && $("#web-cam-"+player).attr("docked")) {
      util.dockReveal($("#web-cam-"+player));
    }
  }
}

comms.hide = function(player){
  if ($("#media-src-"+player).length) {
    $("#media-src-"+player).css("filter", "brightness(0)");
    if ($("#web-cam-"+player).length && $("#web-cam-"+player).attr("docked")) {
      util.dockHide($("#web-cam-"+player));
    }
  }
}

comms.unmute = function(player, local) {
  if (local) {
    $("#local-mute-"+player).removeAttr("muted");
    $("#local-mute-"+player).css("opacity", "0.5");
    if (comms.stream) {
      comms.stream.getAudioTracks()[0].enabled = true;
    }
  }
  else {
    $("#media-src-"+player).removeAttr("muted", true);
    $("#mute-"+player).css("opacity", "0.5");
    if ($("#web-cam-"+player).length && $("#web-cam-"+player).attr("docked")) {
      util.dockReveal($("#web-cam-"+player));
    }
  }
  comms.update(player);
}

comms.channel = function(player, channels) {
  $("#media-channels-"+player).children().each(function(){
    if ($(this).attr("channel")) {
      if (channels[$(this).attr("channel")]) {
        $(this).css("opacity", "1");
      }
      else {
        $(this).css("opacity", "0.5");
      }
    }
  });

  comms.update(player);
}

comms.initialize = function(){
  comms.ready = true;
  comms.showFeed(getCookie("UserID"), comms.stream, true);
  $("#media-src-"+getCookie("UserID")).prop("volume", 0);
  for (var id in game.players.data) {
    if (getCookie("UserID") != id) {
      if (!comms.peers[id]) {
        comms.setup(id, true);
        connection.socket.emit("p2p", {readied : true, target : id});
      }
      else if (comms.stream) {
        comms.peers[id].addStream(comms.stream);
      }
    }
  }
}

sync.render("ui_workshop", function(obj, app, scope){
  return $("<div>");
});


function ogg_import(xml, override) {
  searchObj = {};
  searchObj["Skills"] = function(src, output) {

    var skillKeys = {
      "RANGHVY" : "raH",
      "RANGLT" : "raL",
      "SW" : "str",
      "LTSABER" : "lig",
      "PILOTSP" : "pls",
      "PILOTPL" : "plp",
    }

    src = src.CharSkill;

    for (var key in src) {
      // each skill
      var current = 0;
      var mods = {};

      if (src[key]["isCareer"] && src[key]["isCareer"]["#text"]) {
        current = 1;
      }
      if (src[key]["Rank"]) {
        for (var rIndex in src[key]["Rank"]) {
          if (rIndex != "#text") {
            if (rIndex == "PurchasedRanks") {
              mods["rank"] = (mods["ranks"] || 0) + parseInt(src[key]["Rank"][rIndex]["#text"] || 0);
            }
            else if (rIndex != "NonCareerRanks") {
              mods[rIndex] = (mods[rIndex] || 0) + parseInt(src[key]["Rank"][rIndex]["#text"] || 0);
            }
          }
        }
      }
      if (src[key]["Key"] && src[key]["Key"]["#text"] != null) {
        if (src[key]["Key"]["#text"].length > 2 && !skillKeys[src[key]["Key"]["#text"]]) {
          var matched = false;
          for (var i in output.skills) {
            if (output.skills[i].name.toLowerCase().match(src[key]["Key"]["#text"].toLowerCase())) {
              output.skills[i].current = current;
              output.skills[i].modifiers = mods;
              matched = true;
              break;
            }
          }
          if (!matched) {
            output.skills[src[key]["Key"]["#text"]] = output.skills[src[key]["Key"]["#text"]] || sync.newValue(src[key]["Key"]["#text"], current, null, null, mods);
          }
        }
        else {
          output.skills[skillKeys[src[key]["Key"]["#text"]]].current = current;
          output.skills[skillKeys[src[key]["Key"]["#text"]]].modifiers = mods;
        }
      }
      else {
        var skillVal = sync.newValue(src[key]["Key"]["#text"], current, null, null, mods);
        output.skills[src[key]["Key"]["#text"]] = (skillVal);
      }
    }
  };

  searchObj["Career"] = function(src, output) {
    var current;
    var mods = {};
    if (src["CareerKey"]) {
      current = src["CareerKey"]["#text"];
    }
    if (src["StartingSpecKey"]) {
      current = current + " - " + src["StartingSpecKey"]["#text"];
    }
    output.info.career.current = current;
  };

  searchObj["Experience"] = function(src, output) {
    var current;
    var mods = {};
    for (var key in src["ExperienceRanks"]) {
      // each additon
      if (src["ExperienceRanks"][key]) {
        mods[key] = parseInt(src["ExperienceRanks"][key]["#text"] || 0);
      }
    }
    output.counters.exp.modifiers = mods;
    for (var key in src["UsedExperience"]) {
      // each additon
      if (src["UsedExperience"][key]) {
        current = (current || 0) + parseInt(src["UsedExperience"][key]["#text"] || 0);
      }
    }
    output.counters.exp.current = current;
  };

  searchObj["Characteristics"] = function(src, output) {
    for (var key in src["CharCharacteristic"]) {
      var statData = src["CharCharacteristic"][key];
      if (statData) {
        var stat = statData["Key"]["#text"].charAt(0) + statData["Key"]["#text"].substring(1,statData["Key"]["#text"].length).toLowerCase();

        var current = 0;
        var mods = {};
        var rank = statData["Rank"];
        if (!output.stats[stat]) {
          for (var statIndex in output.stats) {
            if (output.stats[statIndex].name == statData["Name"]["#text"]) {
              stat = statIndex;
              break;
            }
          }
        }
        for (var rIndex in rank) {
          if (rank[rIndex] && rank[rIndex]["#text"]) {
            if (!current) {
              current = parseInt(rank[rIndex]["#text"]);
            }
            else {
              mods[rIndex] = parseInt(rank[rIndex]["#text"]);
            }
          }
        }
        console.log(mods);
        output.stats[stat].current = current;
        output.stats[stat].modifiers = mods;
      }
    }
  };
  searchObj["Species"] = function(src, output) {
    if (src["SpeciesKey"]) {
      output.info.race.current = src["SpeciesKey"]["#text"];
    }
  };
  searchObj["Description"] = function(src, output) {
    output.info.notes.current = '<h2 style="margin: 0; font-size: 1.4em; font-weight: bold;" data-mce-style="margin: 0; font-size: 1.4em; font-weight: bold;">Description</h2><hr style="display: block; width: 100%; height: 1px; background-color: grey; margin-top: 0px; margin-bottom: 0.5em;" data-mce-style="display: block; width: 100%; height: 1px; background-color: grey; margin-top: 0px; margin-bottom: 0.5em;">';
    if (src["CharName"]) {
      output.info.name.current = src["CharName"]["#text"];
    }
    for (var index in src) {
      if (index != "CharName" && src[index] && src[index]["#text"]) {
        output.info.notes.current = (output.info.notes.current || "") + "<p><b>"+index + "&nbsp;-&nbsp;</b>" + src[index]["#text"] + "</p>";
      }
    }
  };
  searchObj["Credits"] = function(src, output) {
    if (src["#text"]) {
      var item = JSON.parse(JSON.stringify(game.templates.item));
      sync.rawVal(item.info.name, "Credits");
      sync.rawVal(item.info.quantity, parseInt(src["#text"]));
    }
  };

  searchObj["Specializations"] = function(src, output) {
    var obj = {
      "ADV" : "Adversary",
      "ANAT" : "Anatomy Lessons",
      "ALLTERDRIV" : "All-Terrain Driver",
      "ARM" : "Armor Master",
      "ARMIMP" : "Armor Master (Improved)",
      "BACT" : "Bacta Specialist",
      "BADM" : "Bad Motivator",
      "BAL" : "Balance",
      "BAR" : "Barrage",
      "BASICTRAIN" : "Basic Combat Training",
      "BLA" : "Black Market Contacts",
      "BLO" : "Blooded",
      "BOD" : "Body Guard",
      "BOUGHT" : "Bought Info",
      "BRA" : "Brace",
      "BRI" : "Brilliant Evasion",
      "BYP" : "Bypass Security",
      "CAREPLAN" : "Careful Planning",
      "CLEVERSOLN" : "Clever Solution",
      "COD" : "Codebreaker",
      "COM" : "Command",
      "COMMPRES" : "Commanding Presence",
      "CONF" : "Confidence",
      "CONT" : "Contraption",
      "CONV" : "Convincing Demeanor",
      "COORDASS" : "Coordinated Assault",
      "CREATKILL" : "Creative Killer",
      "CRIPV" : "Crippling Blow",
      "DEAD" : "Dead to Rights",
      "DEADIMP" : "Dead to Rights (Improved)",
      "DEADACC" : "Deadly Accuracy",
      "DEPSHOT" : "Debilitating Shot",
      "DEDI" : "Dedication",
      "DEFDRI" : "Defensive Driving",
      "DEFSLI" : "Defensive Slicing",
      "DEFSLIIMP" : "Defensive Slicing (Improved)",
      "DEFSTA" : "Defensive Stance",
      "DISOR" : "Disorient",
      "DODGE" : "Dodge",
      "DURA" : "Durable",
      "DYNFIRE" : "Dynamic Fire",
      "ENDUR" : "Enduring",
      "EXHPORT" : "Exhaust Port",
      "EXTRACK" : "Expert Tracker",
      "FAMSUNS" : "Familiar Suns",
      "FERSTR" : "Feral Strength",
      "FLDCOMM" : "Field Commander",
      "FLDCOMMIMP" : "Field Commander (Improved)",
      "FINETUN" : "Fine Tuning",
      "FIRECON" : "Fire Control",
      "FORAG" : "Forager",
      "FORCEWILL" : "Force of Will",
      "FORCERAT" : "Force Rating",
      "FORMONME" : "Form On Me",
      "FRENZ" : "Frenzied Attack",
      "FULLSTOP" : "Full Stop",
      "FULLTH" : "Full Throttle",
      "FULLTHIMP" : "Full Throttle (Improved)",
      "FULLTHSUP" : "Full Throttle (Supreme)",
      "GALMAP" : "Galaxy Mapper",
      "GEARHD" : "Gearhead",
      "GREASE" : "Greased Palms",
      "GRIT" : "Grit",
      "HARDHD" : "Hard Headed",
      "HARDHDIMP" : "Hard Headed (Improved)",
      "HEIGHT" : "Heightened Awareness",
      "HERO" : "Heroic Fortitude",
      "HIDD" : "Hidden Storage",
      "HOLDTOG" : "Hold Together",
      "HUNT" : "Hunter",
      "INCITE" : "Incite Rebellion",
      "INDIS" : "Indistinguishable",
      "INSIGHT" : "Insight",
      "INSPRHET" : "Inspiring Rhetoric",
      "INSPRHETIMP" : "Inspiring Rhetoric (Improved)",
      "INSPRHETSUP" : "Inspiring Rhetoric (Supreme)",
      "INTENSFOC" : "Intense Focus",
      "INTENSPRE" : "Intense Presence",
      "INTIM" : "Intimidating",
      "INVENT" : "Inventor",
      "INVIG" : "Invigorate",
      "ITSNOTTHATBAD" : "It's Not that Bad",
      "JUMP" : "Jump Up",
      "JURY" : "Jury Rigged",
      "KILL" : "Kill With Kindness",
      "KNOCK" : "Knockdown",
      "KNOWSOM" : "Know Somebody",
      "KNOWSPEC" : "Knowledge Specialization",
      "KNOWSCH" : "Known Schematic",
      "LETSRIDE" : "Let's Ride",
      "LETHALBL" : "Lethal Blows",
      "MASDOC" : "Master Doctor",
      "MASDRIV" : "Master Driver",
      "MASGREN" : "Master Grenadier",
      "MASLEAD" : "Master Leader",
      "MASMERC" : "Master Merchant",
      "MASSHAD" : "Master of Shadows",
      "MASPIL" : "Master Pilot",
      "MASSLIC" : "Master Slicer",
      "MASSTAR" : "Master Starhopper",
      "MENTFOR" : "Mental Fortress",
      "NATBRAW" : "Natural Brawler",
      "NATCHARM" : "Natural Charmer",
      "NATDOC" : "Natural Doctor",
      "NATDRIV" : "Natural Driver",
      "NATENF" : "Natural Enforcer",
      "NATHUN" : "Natural Hunter",
      "NATLEAD" : "Natural Leader",
      "NATMAR" : "Natural Marksman",
      "NATNEG" : "Natural Negotiator",
      "NATOUT" : "Natural Outdoorsman",
      "NATPIL" : "Natural Pilot",
      "NATPRO" : "Natural Programmer",
      "NATROG" : "Natural Rogue",
      "NATSCH" : "Natural Scholar",
      "NATTIN" : "Natural Tinkerer",
      "NOBFOOL" : "Nobody's Fool",
      "OUTDOOR" : "Outdoorsman",
      "OVEREM" : "Overwhelm Emotions",
      "OVERDEF" : "Overwhelm Defenses",
      "PHYSTRAIN" : "Physical Training",
      "PLAUSDEN" : "Plausible Deniability",
      "POINTBL" : "Point Blank",
      "PWRBLST" : "Powerful Blast",
      "PRECAIM" : "Precise Aim",
      "PRESPNT" : "Pressure Point",
      "QUICKDR" : "Quick Draw",
      "QUICKFIX" : "Quick Fix",
      "QUICKST" : "Quick Strike",
      "RAPREA" : "Rapid Reaction",
      "RAPREC" : "Rapid Recovery",
      "REDUNSYS" : "Redundant Systems",
      "RESEARCH" : "Researcher",
      "RESOLVE" : "Resolve",
      "RESPSCHOL" : "Respected Scholar",
      "SCATH" : "Scathing Tirade",
      "SCATHIMP" : "Scathing Tirade (Improved)",
      "SCATHSUP" : "Scathing Tirade (Supreme)",
      "SECWIND" : "Second Wind",
      "SELDETON" : "Selective Detonation",
      "SENSDANG" : "Sense Danger",
      "SENSDEMO" : "Sense Emotions",
      "SHORTCUT" : "Short Cut",
      "SIDESTEP" : "Side Step",
      "SITAWARE" : "Situational Awareness",
      "SIXSENSE" : "Sixth Sense",
      "SKILLJOCK" : "Skilled Jockey",
      "SKILLSLIC" : "Skilled Slicer",
      "SLEIGHTMIND" : "Sleight of Mind",
      "SMOOTHTALK" : "Smooth Talker",
      "SNIPSHOT" : "Sniper Shot",
      "SOFTSP" : "Soft Spot",
      "SOLREP" : "Solid Repairs",
      "SOUNDINV" : "Sound Investments",
      "SPARECL" : "Spare Clip",
      "SPKBIN" : "Speaks Binary",
      "STALK" : "Stalker",
      "STNERV" : "Steely Nerves",
      "STIMAP" : "Stim Application",
      "STIMAPIMP" : "Stim Application (Improved)",
      "STIMAPSUP" : "Stim Application (Supreme)",
      "STIMSPEC" : "Stimpack Specialization",
      "STRSMART" : "Street Smarts",
      "STRGEN" : "Stroke of Genius",
      "STRONG" : "Strong Arm",
      "STUNBL" : "Stunning Blow",
      "STUNBLIMP" : "Stunning Blow (Improved)",
      "SUPREF" : "Superior Reflexes",
      "SURG" : "Surgeon",
      "SWIFT" : "Swift",
      "TACTTRAIN" : "Tactical Combat Training",
      "TARGBL" : "Targeted Blow",
      "TECHAPT" : "Technical Aptitude",
      "TIME2GO" : "Time to Go",
      "TIME2GOIMP" : "Time to Go (Improved)",
      "TINK" : "Tinkerer",
      "TOUCH" : "Touch of Fate",
      "TOUGH" : "Toughened",
      "TRICK" : "Tricky Target",
      "TRUEAIM" : "True Aim",
      "UNCANREAC" : "Uncanny Reactions",
      "UNCANSENS" : "Uncanny Senses",
      "UNSTOP" : "Unstoppable",
      "UTIL" : "Utility Belt",
      "UTINNI" : "Utinni!",
      "VEHTRAIN" : "Vehicle Combat Training",
      "WELLROUND" : "Well Rounded",
      "WELLTRAV" : "Well Travelled",
      "WHEEL" : "Wheel and Deal",
      "WORKLIKECHARM" : "Works Like A Charm",
      "PIN" : "Pin",
      "MUSEUMWORTHY" : "Museum Worthy",
      "BRNGITDWN" : "Bring It Down",
      "HUNTERQUARRY" : "Hunter's Quarry",
      "HUNTQIMP" : "Hunter's Quarry (Improved)",
      "BURLY" : "Burly",
      "FEARSOME" : "Fearsome",
      "HEAVYHITTER" : "Heavy Hitter",
      "HEROICRES" : "Heroic Resilience",
      "IMPDET" : "Improvised Detonation",
      "IMPDETIMP" : "Improvised Detonation (Improved)",
      "LOOM" : "Loom",
      "RAINDEATH" : "Rain of Death",
      "STEADYNERVES" : "Steady Nerves",
      "TALKTALK" : "Talk the Talk",
      "WALKWALK" : "Walk the Walk",
      "IDEALIST" : "Idealist",
      "AAO" : "Against All Odds",
      "ANIMALBOND" : "Animal Bond",
      "ANIMALEMP" : "Animal Empathy",
      "ATARU" : "Ataru Technique",
      "BODIMP" : "Body Guard (Improved)",
      "CALMAURA" : "Calming Aura",
      "CALMAURAIMP" : "Calming Aura (Improved)",
      "CENTBEING" : "Center of Being",
      "CENTBEINGIMP" : "Center of Being (Improved)",
      "CIRCLESHELTER" : "Circle of Shelter",
      "COMPTECH" : "Comprehend Technology",
      "CONDITIONED" : "Conditioned",
      "CONTPLAN" : "Contingency Plan",
      "COUNTERST" : "Counterstrike",
      "DEFCIRCLE" : "Defensive Circle",
      "DEFTRAIN" : "Defensive Training",
      "DISRUPSTRIKE" : "Disruptive Strike",
      "DJEMSODEFL" : "Djem So Deflection",
      "DRAWCLOSER" : "Draw Closer",
      "DUELTRAIN" : "Duelist's Training",
      "ENHLEAD" : "Enhanced Leader",
      "FALLAVAL" : "Falling Avalanche",
      "FEINT" : "Feint",
      "FORCEASSAULT" : "Force Assault",
      "FORCEPROT" : "Force Protection",
      "FOREWARN" : "Forewarning",
      "HAWKSWOOP" : "Hawk Bat Swoop",
      "HEALTRANCE" : "Healing Trance",
      "HEALTRANCEIMP" : "Healing Trance (Improved)",
      "IMBUEITEM" : "Imbue Item",
      "INTUITEVA" : "Intuitive Evasion",
      "INTUITIMP" : "Intuitive Improvements",
      "INTUITSHOT" : "Intuitive Shot",
      "INTUITSTRIKE" : "Intuitive Strike",
      "KEENEYED" : "Keen Eyed",
      "KNOWPOW" : "Knowledge is Power",
      "KNOWHEAL" : "Knowledgeable Healing",
      "MAKFIN" : "Makashi Finish",
      "MAKFLOUR" : "Makashi Flourish",
      "MAKTECH" : "Makashi Technique",
      "MASTART" : "Master Artisan",
      "MENTBOND" : "Mental Bond",
      "MENTTOOLS" : "Mental Tools",
      "MULTOPP" : "Multiple Opponents",
      "NATBLADE" : "Natural Blademaster",
      "NATMYSTIC" : "Natural Mystic",
      "NIMTECH" : "Niman Technique",
      "NOWYOUSEE" : "Now You See Me",
      "ONEUNI" : "One With The Universe",
      "PARRY" : "Parry",
      "PARRYIMP" : "Parry (Improved)",
      "PARRYSUP" : "Parry (Supreme)",
      "PHYSICIAN" : "Physician",
      "PREEMAVOID" : "Preemptive Avoidance",
      "PREYWEAK" : "Prey on the Weak",
      "QUICKMOVE" : "Quick Movement",
      "REFLECT" : "Reflect",
      "REFLECTIMP" : "Reflect (Improved)",
      "REFLECTSUP" : "Reflect (Supreme)",
      "RESDISARM" : "Resist Disarm",
      "SABERSW" : "Saber Swarm",
      "SABERTHROW" : "Saber Throw",
      "SARSWEEP" : "Sarlacc Sweep",
      "SENSEADV" : "Sense Advantage",
      "SHAREPAIN" : "Share Pain",
      "SHIENTECH" : "Shien Technique",
      "SHROUD" : "Shroud",
      "SLIPMIND" : "Slippery Minded",
      "SORESUTECH" : "Soresu Technique",
      "STRATFORM" : "Strategic Form",
      "SUMDJEM" : "Sum Djem",
      "TERRIFY" : "Terrify",
      "TERRIFYIMP" : "Terrify (Improved)",
      "FORCEALLY" : "The Force Is My Ally",
      "UNITYASSAULT" : "Unity Assault",
      "VALFACT" : "Valuable Facts",
      "BADCOP" : "Bad Cop",
      "BIGGESTFAN" : "Biggest Fan",
      "CONGENIAL" : "Congenial",
      "COORDODGE" : "Coordination Dodge",
      "DISBEH" : "Distracting Behavior",
      "DISBEHIMP" : "Distracting Behavior (Improved)",
      "DECEPTAUNT" : "Deceptive Taunt",
      "GOODCOP" : "Good Cop",
      "NATATHL" : "Natural Athlete",
      "NATMERCH" : "Natural Merchant",
      "THROWCRED" : "Throwing Credits",
      "UNRELSKEP" : "Unrelenting Skeptic",
      "UNRELSKEPIMP" : "Unrelenting Skeptic (Improved)",
      "BEASTWRANG" : "Beast Wrangler",
      "BOLSTARMOR" : "Bolstered Armor",
      "CORSEND" : "Corellian Sendoff",
      "CORSENDIMP" : "Corellian Sendoff (Improved)",
      "CUSTCOOL" : "Customized Cooling Unit",
      "EXHANDLER" : "Expert Handler",
      "FANCPAINT" : "Fancy Paint Job",
      "FORTVAC" : "Fortified Vacuum Seal",
      "HIGHGTRAIN" : "High-G Training",
      "KOITURN" : "Koiogran Turn",
      "LARGEPROJ" : "Larger Project",
      "NOTTODAY" : "Not Today",
      "OVERAMMO" : "Overstocked Ammo",
      "REINFRAME" : "Reinforced Frame",
      "SHOWBOAT" : "Showboat",
      "SIGVEH" : "Signature Vehicle",
      "SOOTHTONE" : "Soothing Tone",
      "SPUR" : "Spur",
      "SPURIMP" : "Spur (Improved)",
      "SPURSUP" : "Spur (Supreme)",
      "TUNEDTHRUST" : "Tuned Maneuvering Thrusters",
      "CALLEM" : "Call 'Em",
      "DISARMSMILE" : "Disarming Smile",
      "DONTSHOOT" : "Don't Shoot!",
      "DOUBLEORNOTHING" : "Double or Nothing",
      "DOUBLEORNOTHINGIMP" : "Double or Nothing (Improved)",
      "DOUBLEORNOTHINGSUP" : "Double or Nothing (Supreme)",
      "FORTFAVORBOLD" : "Fortune Favors the Bold",
      "GUNSBLAZING" : "Guns Blazing",
      "JUSTKID" : "Just Kidding!",
      "QUICKDRIMP" : "Quickdraw (Improved)",
      "SECCHANCE" : "Second Chances",
      "SORRYMESS" : "Sorry About the Mess",
      "SPITFIRE" : "Spitfire",
      "UPANTE" : "Up the Ante",
      "WORKLIKECHARM" : "Works Like a Charm",
      "BADPRESS" : "Bad Press",
      "BLACKMAIL" : "Blackmail",
      "CUTQUEST" : "Cutting Question",
      "DISCREDIT" : "Discredit",
      "ENCCOMM" : "Encoded Communique",
      "ENCWORD" : "Encouraging Words",
      "INKNOW" : "In The Know",
      "INKNOWIMP" : "In The Know (Improved)",
      "INFORM" : "Informant",
      "INTERJECT" : "Interjection",
      "KNOWALL" : "Know-It-All",
      "PLAUSDENIMP" : "Plausible Deniability (Improved)",
      "POSSPIN" : "Positive Spin",
      "POSSPINIMP" : "Positive Spin (Improved)",
      "RESEARCHIMP" : "Researcher (Improved)",
      "SUPPEVI" : "Supporting Evidence",
      "THORASS" : "Thorough Assessment",
      "TWISTWORD" : "Twisted Words",
      "DRIVEBACK" : "Drive Back",
      "ARMSUP" : "Armor Master (Supreme)",
      "BALEGAZE" : "Baleful Gaze",
      "BLINDSPOT" : "Blind Spot",
      "GRAPPLE" : "Grapple",
      "NOESC" : "No Escape",
      "OVERBAL" : "Overbalance",
      "PRECSTR" : "Precision Strike",
      "PRIMEPOS" : "Prime Positions",
      "PRESSHOT" : "Prescient Shot",
      "PROPAIM" : "Prophetic Aim",
      "REINITEM" : "Reinforce Item",
      "SUPPRFIRE" : "Suppressing Fire",
      "CALMCOMM" : "Calm Commander",
      "CLEVCOMM" : "Clever Commander",
      "COMMPRESIMP" : "Commanding Presence (Improved)",
      "CONFIMP" : "Confidence (Improved)",
      "MASINST" : "Master Instructor",
      "MASSTRAT" : "Master Strategist",
      "NATINST" : "Natural Instructor",
      "READANY" : "Ready for Anything",
      "READANYIMP" : "Ready for Anything (Improved)",
      "THATHOWDONE" : "That's How It's Done",
      "WELLREAD" : "Well Read",
      "CUSTLOAD" : "Custom Loadout",
      "CYBERNETICIST" : "Cyberneticist",
      "DEFTMAKER" : "Deft Maker",
      "ENGREDUN" : "Engineered Redundancies",
      "EYEDET" : "Eye for Detail",
      "ENERGTRANS" : "Energy Transfer",
      "MACHMEND" : "Machine Mender",
      "MOREMACH" : "More Machine Than Man",
      "OVERCHARGE" : "Overcharge",
      "OVERCHARGEIMP" : "Improved Overcharge",
      "OVERCHARGESUP" : "Supreme Overcharge",
      "REROUTEPROC" : "Reroute Processors",
      "RESOURCEREFIT" : "Resourceful Refit",
      "SPKBINIMP" : "Improved Speaks Binary",
      "SPKBINSUP" : "Supreme Speaks Binary",
    }

    var charSpec = src["CharSpecialization"];
    for (var _ in charSpec["Talents"]) {
      for (var index in charSpec["Talents"][_]) {
        var charTalent = charSpec["Talents"][_][index];
        if (charTalent["Key"] && charTalent["Key"]["#text"]) {
          var selected = "";
          if (charTalent["SelectedSkills"]) {
            for (var key in charTalent["SelectedSkills"]) {
              if (charTalent["SelectedSkills"][key] && charTalent["SelectedSkills"][key]["#text"]) {
                if (skillRef[charTalent["SelectedSkills"][key]["#text"]]) {
                  selected = selected + game.templates.character.skills[skillRef[charTalent["SelectedSkills"][key]["#text"]]].name + "\n";
                }
                else {
                  selected = selected + charTalent["SelectedSkills"][key]["#text"] + "\n";
                }
              }
            }
          }
          if (charTalent["Purchased"]) {
            var insert = true;
            for (var tIndex in output.talents) {
              if (output.talents[tIndex].name == obj[charTalent["Key"]["#text"]]) {
                output.talents[tIndex] = sync.newValue(obj[charTalent["Key"]["#text"]], selected, null, null, {"rank" : "Spec Tree - " + charSpec["Name"]["#text"]});
                insert = false;
                break;
              }
            }
            if (insert) {
              output.talents[obj[charTalent["Key"]["#text"]]] = sync.newValue(obj[charTalent["Key"]["#text"]], selected, null, null, {"rank" : "Spec Tree - " + charSpec["Name"]["#text"]});
            }
          }
        }
      }
    }
  }

  searchObj["Attributes"] = function(src, output) {
    var wTotal = 0;
    for (var key in src["WoundThreshold"]) {
      if (src["WoundThreshold"][key] && src["WoundThreshold"][key]["#text"]) {
        wTotal = parseInt(wTotal) + parseInt(src["WoundThreshold"][key]["#text"]);
      }
    }
    output.counters.wounds.current = wTotal;
    output.counters.wounds.max = wTotal;

    var sTotal = 0;
    for (var key in src["StrainThreshold"]) {
      if (src["StrainThreshold"][key] && src["StrainThreshold"][key]["#text"]) {
        sTotal = parseInt(sTotal) + parseInt(src["StrainThreshold"][key]["#text"]);
      }
    }
    output.counters.stress.current = sTotal;
    output.counters.stress.max = sTotal;

    if (src["DefenseRanged"]) {
      output.counters.rdf.current = parseInt(src["DefenseRanged"]["#text"] || 0);
    }
    if (src["DefenseMelee"]) {
      output.counters.mdf.current = parseInt(["DefenseMelee"]["#text"] || 0);
    }
  }

  var weapon = {
    "BLASTHOLD" : {name : "Holdout Blaster", d : 5, r : "wrShort", s : "Ranged - Light (Ag)", c : "4"},
    "BLASTHOLDTT24" : {name : "TT24 Holdout Blaster", d : 6, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "MILHOLDBLAST" : {name : "Military Holdout Blaster", d : 6, r : "wrShort", s : "Ranged - Light (Ag)", c : "3"},
    "VARHOLDBLAST" : {name : "Variable Holdout Blaster", d : 7, r : "wrShort", s : "Ranged - Light (Ag)", c : "4"},
    "QUICKFIRE" : {name : "Model Q4 Quickfire", d : 5, r : "wrShort", s : "Ranged - Light (Ag)", c : "3"},
    "12DEFEND" : {name : "12 Defender", d : 5, r : "wrShort", s : "Ranged - Light (Ag)", c : "5"},
    "DEFSPBLAST" : {name : "Defender Sporting Blaster Pistol", d : 5, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "ELG3ABLAST" : {name : "ELG-3A Blaster Pistol", d : 6, r : "wrShort", s : "Ranged - Light (Ag)", c : "4"},
    "BLASTLT" : {name : "Light Blaster Pistol", d : 5, r : "wrMedium", s : "Ranged - Light (Ag)", c : "4"},
    "BLASTLTHL27" : {name : "HL-27 Light Blaster Pistol", d : 5, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "POCKPIS" : {name : "Pocket Blaster Pistol", d : 5, r : "wrShort", s : "Ranged - Light (Ag)", c : "3"},
    "BLASTPIS" : {name : "Blaster Pistol", d : 6, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "BLASTPISCDEF" : {name : "CDEF Blaster Pistol", d : 5, r : "wrMedium", s : "Ranged - Light (Ag)", c : "4"},
    "BLASTPISK23" : {name : "Relby-K23 Blaster Pistol", d : 6, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "DUELPIS" : {name : "Dueling Pistol", d : 9, r : "wrShort", s : "Ranged - Light (Ag)", c : "2"},
    "BLASTPISXL2" : {name : "XL-2 'Flashfire' Blaster Pistol", d : 5, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "BLASTPISH7" : {name : "H-7 'Equalizer' Blaster Pistol", d : 7, r : "wrMedium", s : "Ranged - Light (Ag)", c : "2"},
    "BLASTPISDR45" : {name : "DR-45 'Dragoon' Cavalry Blaster", d : 8, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "BLASTCARBDR45" : {name : "DR-45 'Dragoon' Cavalry Blaster (Carbine Mode)", d : 8, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "3"},
    "BLASTBOONTA" : {name : "Boonta Blaster", d : 6, r : "wrShort", s : "Ranged - Light (Ag)", c : "3"},
    "BLASTATAPULSE" : {name : "Greff-Timms ATA Pulse-Wave Blaster", d : 5, r : "wrShort", s : "Ranged - Light (Ag)", c : "3"},
    "BLASTPISHVY" : {name : "Heavy Blaster Pistol", d : 7, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "BLASTPISHVYGEO" : {name : "Geonosian Heavy Blaster Pistol", d : 7, r : "wrMedium", s : "Ranged - Light (Ag)", c : "2"},
    "SECURITYS5" : {name : "Security S-5 Heavy Blaster Pistol", d : 7, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "KO-2HSP" : {name : "KO-2 Heavy Stun Pistol", d : 8, r : "wrShort", s : "Ranged - Light (Ag)", c : "0"},
    "MODEL44BLASTPIST" : {name : "Model 44 Blaster Pistol", d : 6, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "MODEL80BLASTPIST" : {name : "Model 80 Blaster Pistol", d : 6, r : "wrMedium", s : "Ranged - Light (Ag)", c : "2"},
    "IR5BLASTPIST" : {name : "IR-5 'Intimidator' Blaster Pistol", d : 5, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "BLASTPISHVYCR2" : {name : "CR-2 Heavy Blaster Pistol", d : 7, r : "wrMedium", s : "Ranged - Light (Ag)", c : "4"},
    "SITE145PISTOL" : {name : "Site-145 Replica Blaster Pistol", d : 6, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "X30LANCER" : {name : "x-30 Lancer", d : 5, r : "wrLong", s : "Ranged - Light (Ag)", c : "4"},
    "BLASTPISTDL19C" : {name : "DL-19C Blaster Pistol", d : 5, r : "wrMedium", s : "Ranged - Light (Ag)", c : "4"},
    "DL7HBLASTPISTHVY" : {name : "DL-7h Heavy Blaster Pistol", d : 8, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "BLASTPISHH50" : {name : "HH-50 Heavy Blaster Pistol", d : 7, r : "wrShort", s : "Ranged - Light (Ag)", c : "3"},
    "MONCALBAT" : {name : "Mon Calamari Battle Baton", d : 5, r : "wrMedium", s : "Ranged - Light (Ag)", c : "4"},
    "ENSLING" : {name : "Energy Slingshot", d : 3, r : "wrShort", s : "Ranged - Light (Ag)", c : "0"},
    "BLASTCARB" : {name : "Blaster Carbine", d : 9, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "3"},
    "BLASTCARBGEO" : {name : "Geonosian Blaster Carbine", d : 9, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "2"},
    "OK98BLASTCARB" : {name : "OK-98 Blaster Carbine", d : 9, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "3"},
    "BLASTCARBE5" : {name : "E5 Blaster Carbine", d : 9, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "3"},
    "BOLACARB" : {name : "Bola Carbine", d : 8, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "3"},
    "DLS12HBR" : {name : "DLS-12 Heavy Blaster Carbine", d : 10, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "3"},
    "BLASTRIF" : {name : "Blaster Rifle", d : 9, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "3"},
    "BLASTRIFGEO" : {name : "Geonosian Blaster Rifle", d : 9, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "2"},
    "BLASTRIFSKZ" : {name : "SKZ Sporting Blaster Rifle", d : 8, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "4"},
    "BLASTLANCE" : {name : "Weequay Blaster Lance", d : 8, r : "wrExtreme", s : "Ranged - Heavy (Ag)", c : "3"},
    "BLASTRIFDDCMR6" : {name : "DDC-MR6 Modular Rifle", d : 7, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "3"},
    "ACPREPEATER" : {name : "ACP Repeater Gun", d : 7, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "3"},
    "ACPARRAYGUN" : {name : "ACP Array Gun", d : 6, r : "wrShort", s : "Ranged - Heavy (Ag)", c : "3"},
    "SWE2SONIC" : {name : "SWE/2 Sonic Rifle", d : 8, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "6"},
    "BLASTRIFHVY" : {name : "Heavy Blaster Rifle", d : 10, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "3"},
    "DHXBLASTRIFHVY" : {name : "DH-X Heavy Blaster Rifle", d : 10, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "3"},
    "E11SNIPER" : {name : "E-11S Sniper Rifle", d : 10, r : "wrExtreme", s : "Ranged - Heavy (Ag)", c : "3"},
    "LBR9STUNRIFLE" : {name : "LBR-9 Stun Rifle", d : 10, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "0"},
    "BLASTLTREP" : {name : "Light Repeating Blaster", d : 11, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "3"},
    "SE14RBLASTLTREP" : {name : "SE-14r Light Repeating Blaster", d : 6, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "BLASTHVYREP" : {name : "Heavy Repeating Blaster", d : 15, r : "wrLong", s : "Gunnery (Ag)", c : "2"},
    "VXBLASTREP" : {name : "VX 'Sidewinder' Repeating Blaster", d : 12, r : "wrLong", s : "Gunnery (Ag)", c : "3"},
    "HOBBLASTREPHVY" : {name : "HOB Heavy Repeating Blaster", d : 15, r : "wrExtreme", s : "Gunnery (Ag)", c : "3"},
    "D29REPULSOR" : {name : "D-29 Repulsor Rifle", d : 8, r : "wrMedium", s : "Gunnery (Ag)", c : "4"},
    "MONCALSPBLAST" : {name : "Mon Calamari Spear Blaster (Blaster)", d : 8, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "3"},
    "MONCALSPBLASTSP" : {name : "Mon Calamari Spear Blaster (Spear)", d : 8, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "ELECTPULSEDIS" : {name : "Electromag-Pulse Disruptor", d : 5, r : "wrEngaged", s : "Melee (Br)", c : "4"},
    "BOWCAST" : {name : "Bowcaster", d : 10, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "3"},
    "BLASTION" : {name : "Ion Blaster", d : 10, r : "wrShort", s : "Ranged - Light (Ag)", c : "5"},
    "DROIDDIS" : {name : "Droid Disruptor", d : 6, r : "wrShort", s : "Ranged - Light (Ag)", c : "3"},
    "DISRPIS" : {name : "Disruptor Pistol", d : 10, r : "wrShort", s : "Ranged - Light (Ag)", c : "2"},
    "DISRRIF" : {name : "Disruptor Rifle", d : 10, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "2"},
    "SLUGPIS" : {name : "Slugthrower Pistol", d : 4, r : "wrShort", s : "Ranged - Light (Ag)", c : "5"},
    "SLUGPISASP9" : {name : "ASP-9 'Vrelt' Autopistol", d : 4, r : "wrShort", s : "Ranged - Light (Ag)", c : "5"},
    "FIVERSLUGPIST" : {name : "Model C 'Fiver' Pistol", d : 5, r : "wrShort", s : "Ranged - Light (Ag)", c : "4"},
    "SLUGKD30" : {name : "KD-30 'Dissuader' Pistol", d : 4, r : "wrShort", s : "Ranged - Light (Ag)", c : "5"},
    "STEALTH2VX" : {name : "Stealth-2VX Palm Shooter", d : 1, r : "wrShort", s : "Ranged - Light (Ag)", c : "5"},
    "VODRANRIFLE" : {name : "Vodran Hunting Rifle", d : 7, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "4"},
    "SLUGRIF" : {name : "Slugthrower Rifle", d : 7, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "5"},
    "SLUGRIFMKV" : {name : "Mark V 'Sand Panther' Hunting Rifle", d : 7, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "5"},
    "ASSAULTSLUGCARB" : {name : "FYR Assault Carbine", d : 6, r : "wrShort", s : "Ranged - Heavy (Ag)", c : "5"},
    "SLUGRIFSELSHARD" : {name : "Selonian Shard Shooter", d : 5, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "3"},
    "MODEL77" : {name : "Model 77 Air Rifle", d : 6, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "0"},
    "MODEL38" : {name : "Model 38 Sharpshooter's Rifle", d : 8, r : "wrExtreme", s : "Ranged - Heavy (Ag)", c : "3"},
    "MODEL38DET" : {name : "Model 38 Sharpshooter's Rifle (Detonator Round)", d : 8, r : "wrExtreme", s : "Ranged - Heavy (Ag)", c : "3"},
    "HAMMER" : {name : "KS-23 Hammer", d : 8, r : "wrShort", s : "Ranged - Heavy (Ag)", c : "4"},
    "DFD1" : {name : "DF-D1 Duo-Flechette Rifle", d : 9, r : "wrShort", s : "Ranged - Heavy (Ag)", c : "3"},
    "VERPSHATPIS" : {name : "Verpine Shatter Pistol", d : 8, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "VERPSHATRIF" : {name : "Verpine Shatter Rifle", d : 12, r : "wrExtreme", s : "Ranged - Heavy (Ag)", c : "3"},
    "VERPSHATHVYRIF" : {name : "Verpine Heavy Shatter Rifle", d : 15, r : "wrExtreme", s : "Gunnery (Ag)", c : "2"},
    "BOLA" : {name : "Bola/Net", d : 2, r : "wrShort", s : "Ranged - Light (Ag)", c : "0"},
    "ELECTRONET" : {name : "Electronet", d : 6, r : "wrEngaged", s : "Melee (Br)", c : "6"},
    "FLAME" : {name : "Flame Projector", d : 8, r : "wrShort", s : "Ranged - Heavy (Ag)", c : "2"},
    "MISS" : {name : "Missile Tube", d : 20, r : "wrExtreme", s : "Gunnery (Ag)", c : "2"},
    "L70ACID" : {name : "L70 Acid Projector", d : 6, r : "wrShort", s : "Ranged - Heavy (Ag)", c : "2"},
    "NETGUN" : {name : "AO14 'Aranea' Net Gun", d : 3, r : "wrShort", s : "Ranged - Heavy (Ag)", c : "0"},
    "STOKHLI" : {name : "Stokhli Spray Stick", d : 0, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "0"},
    "RIOTRIFLE" : {name : "R-88 Supressor Riot Rifle", d : 8, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "0"},
    "TANGLEGUN" : {name : "Tangle Gun", d : 1, r : "wrShort", s : "Ranged - Heavy (Ag)", c : "4"},
    "FRAGGR" : {name : "Frag Grenade", d : 8, r : "wrShort", s : "Ranged - Light (Ag)", c : "4"},
    "STUNGR" : {name : "Stun Grenade", d : 8, r : "wrShort", s : "Ranged - Light (Ag)", c : "0"},
    "THERMDET" : {name : "Thermal Detonator", d : 20, r : "wrShort", s : "Ranged - Light (Ag)", c : "2"},
    "THERMDETMINI" : {name : "Mini Thermal Detonator", d : 12, r : "wrShort", s : "Ranged - Light (Ag)", c : "2"},
    "APGREN" : {name : "Armor Piercing Grenade", d : 13, r : "wrShort", s : "Ranged - Light (Ag)", c : "3"},
    "N4NOISEGREN" : {name : "N-4 Noise Grenade", d : 4, r : "wrShort", s : "Ranged - Light (Ag)", c : "6"},
    "WIPE3GREN" : {name : "Wipe-3 Data-Purge Grenade", d : 0, r : "wrShort", s : "Ranged - Light (Ag)", c : "0"},
    "HICMERCYGREN" : {name : "HIC 'Mercy' Grenade", d : 5, r : "wrShort", s : "Ranged - Light (Ag)", c : "0"},
    "SPOREBSTUNGREN" : {name : "Spore/B Stun Grenade", d : 6, r : "wrShort", s : "Ranged - Light (Ag)", c : "3"},
    "AVMINE" : {name : "Anti-Vehicle Mine", d : 25, r : "wrEngaged", s : "Mechanics (Int)", c : "2"},
    "APMINE" : {name : "Anti-Personnel Mine", d : 12, r : "wrEngaged", s : "Mechanics (Int)", c : "3"},
    "KNOCKMINE" : {name : "Knockout Mine", d : 5, r : "wrShort", s : "Ranged - Light (Ag)", c : "0"},
    "GLOPGRND" : {name : "Glop Grenade", d : 0, r : "wrShort", s : "Ranged - Light (Ag)", c : "0"},
    "INFERGREND" : {name : "D-24 Inferno Grenade", d : 8, r : "wrShort", s : "Ranged - Light (Ag)", c : "3"},
    "CONCGREND" : {name : "G2 Concussion Grenade", d : 10, r : "wrShort", s : "Ranged - Light (Ag)", c : "5"},
    "IONGREND" : {name : "Lightning 22 Ion Grenade", d : 10, r : "wrShort", s : "Ranged - Light (Ag)", c : "5"},
    "PLASGREND" : {name : "NOVA40 Plasma Grenade", d : 12, r : "wrShort", s : "Ranged - Light (Ag)", c : "3"},
    "HVYFRGGREND" : {name : "Mk.4 Heavy Frag Grenade", d : 9, r : "wrShort", s : "Ranged - Light (Ag)", c : "4"},
    "POISONGR" : {name : "Poison Gas Grenade", d : 0, r : "wrShort", s : "Ranged - Light (Ag)", c : "0"},
    "CONCMISSILEMK10" : {name : "Mk.10 Concussion Missile", d : 14, r : "wrExtreme", s : "Gunnery (Ag)", c : "4"},
    "FRAGMISSILEC88" : {name : "C-88 Fragmentation Missile", d : 12, r : "wrExtreme", s : "Gunnery (Ag)", c : "4"},
    "PLASMISSILESK44" : {name : "SK-44 Plasma Missile", d : 16, r : "wrMedium", s : "Gunnery (Ag)", c : "3"},
    "INCENMISSILEC908" : {name : "C-908 Incendiary Missile", d : 10, r : "wrExtreme", s : "Gunnery (Ag)", c : "3"},
    "BARADIUMCHRG" : {name : "Baradium Charge", d : 3, r : "wrLong", s : "Mechanics (Int)", c : "0"},
    "DETONITECHRG" : {name : "Detonite Charge", d : 15, r : "wrShort", s : "Mechanics (Int)", c : "0"},
    "PLASMACHRG" : {name : "Plasma Charge", d : 9, r : "wrMedium", s : "Mechanics (Int)", c : "0"},
    "PROTONGRNAD" : {name : "Proton Grenade", d : 10, r : "wrShort", s : "Mechanics (Int)", c : "0"},
    "COMPBOW" : {name : "Corellian Compound Bow", d : 5, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "5"},
    "COMPBOWEXP" : {name : "Corellian Compound Bow (Explosive Tipped)", d : 6, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "COMPBOWSTUN" : {name : "Corellian Compound Bow (Stun)", d : 6, r : "wrMedium", s : "Ranged - Light (Ag)", c : "0"},
    "STYANAX" : {name : "Styanax Lance", d : 8, r : "wrShort", s : "Ranged - Heavy (Ag)", c : "3"},
    "CZ28FLAME" : {name : "CZ-28 Flamestrike", d : 9, r : "wrShort", s : "Gunnery (Ag)", c : "2"},
    "FC1FLECHETTE" : {name : "FC1 Flechette Launcher (Anti-Infantry)", d : 8, r : "wrMedium", s : "Gunnery (Ag)", c : "3"},
    "FC1FLECHETTEVEH" : {name : "FC1 Flechette Launcher (Anti-Vehicle)", d : 10, r : "wrMedium", s : "Gunnery (Ag)", c : "2"},
    "GRENADLAUNCHZ50" : {name : "Z50 Grenade Launcher", d : 8, r : "wrMedium", s : "Gunnery (Ag)", c : "4"},
    "MINTORPLAUNCH" : {name : "Mini-Torpedo Launcher", d : 8, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "2"},
    "MINTORPAP" : {name : "Mini-Torpedo, Anti-Personnel", d : 8, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "2"},
    "MINTORPARMP" : {name : "Mini-Torpedo, Armor Piercing", d : 12, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "3"},
    "MINTORPINK" : {name : "Mini-Torpedo, Ink", d : 0, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "0"},
    "MINTORPION" : {name : "Mini-Torpedo, Ion", d : 10, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "2"},
    "MINTORPNET" : {name : "Mini-Torpedo, Net", d : 0, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "0"},
    "MINTORPSTUN" : {name : "Mini-Torpedo, Stun", d : 8, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "2"},
    "AURBOOM" : {name : "Aurateran Boomerang", d : 4, r : "wrMedium", s : "Ranged - Light (Ag)", c : "5"},
    "GUNGATL" : {name : "Gungan Atlatl", d : 5, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "GUNGPLAS" : {name : "Gungan Plasma Ball", d : 5, r : "wrShort", s : "Ranged - Light (Ag)", c : "3"},
    "LONGBOW" : {name : "Long Bow", d : 5, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "5"},
    "BRASS" : {name : "Brass Knuckles", d : 0, r : "wrEngaged", s : "Brawl (Br)", c : "4"},
    "SHOCKGL" : {name : "Shock Gloves", d : 0, r : "wrEngaged", s : "Brawl (Br)", c : "5"},
    "REFCORTCAUNT" : {name : "Refined Cortosis Gauntlets", d : 0, r : "wrEngaged", s : "Brawl (Br)", c : "4"},
    "BLSTKNUK" : {name : "Blast Knuckles", d : 0, r : "wrEngaged", s : "Brawl (Br)", c : "4"},
    "VAMBLADES1" : {name : "S-1 Vamblade (Single)", d : 0, r : "wrEngaged", s : "Brawl (Br)", c : "3"},
    "VAMBLADE2S1" : {name : "S-1 Vamblade (Paired)", d : 0, r : "wrEngaged", s : "Brawl (Br)", c : "3"},
    "VIBROKNUK" : {name : "Vibroknucklers", d : 0, r : "wrEngaged", s : "Brawl (Br)", c : "2"},
    "BACKHANDSHKGLV" : {name : "Backhand Shock Gloves", d : 0, r : "wrEngaged", s : "Brawl (Br)", c : "3"},
    "NEEDLEGLOVES" : {name : "Needle Gloves", d : 0, r : "wrEngaged", s : "Brawl (Br)", c : "5"},
    "SHIELDGAUNT" : {name : "Shield Gauntlet", d : 0, r : "wrEngaged", s : "Brawl (Br)", c : "5"},
    "KNIFE" : {name : "Combat Knife", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "CUTLASSCOR" : {name : "Corellian Cutlass", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "LONGWHIP" : {name : "Longeing Whip", d : 0, r : "wrShort", s : "Melee (Br)", c : "5"},
    "PERSUADER" : {name : "Sorosuub 'Persuader' Shock Prod", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "4"},
    "CERBLADE" : {name : "Ceremonial Blade", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "STAFFOFF" : {name : "Staff of Office", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "4"},
    "ANCIENTSWORD" : {name : "Ancient Sword", d : 0, r : "wrEngaged", s : "LTSABER", c : "3"},
    "CORTSHIELD" : {name : "Cortosis Shield", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "6"},
    "CORTSWORD" : {name : "Cortosis Sword", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "ELECSTAFF" : {name : "Electrostaff", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "REFCORTSTAFF" : {name : "Refined Cortosis Staff", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "5"},
    "GAFF" : {name : "Gaffi Stick", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "FLASHSTICK" : {name : "Drall Flashstick", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "0"},
    "FORCEP" : {name : "Force Pike", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "DIIRO" : {name : "Diiro", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "CORALPIKE" : {name : "Coral Pike", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "ENERGYLANCE" : {name : "Energy Lance", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "CS12STUNMAST" : {name : "CS-12 Stun Master", d : 6, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "ENERGYBUCK" : {name : "Energy Buckler", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "5"},
    "PARRVIBRO" : {name : "Parrying Vibroblade", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "PARRDAGG" : {name : "Parrying Dagger", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "CRYOWHIP" : {name : "Rodian Cryogen Whip", d : 0, r : "wrShort", s : "Melee (Br)", c : "3"},
    "SITHSHIELD" : {name : "Sith Shield", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "4"},
    "SNAPBATON" : {name : "Snap Baton", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "4"},
    "BARDLANCE" : {name : "Bardottan Electrolance", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "GUNGPOLE" : {name : "Gungan Electropole", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "4"},
    "GUNGPOLET" : {name : "Gungan Electropole (thrown)", d : 0, r : "wrShort", s : "Ranged - Light (Ag)", c : "4"},
    "GUNGPES" : {name : "Gungan Personal Energy Shield", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "5"},
    "TRAINSTICK" : {name : "Training Stick", d : 0, r : "wrEngaged", s : "LTSABER", c : "5"},
    "VOSSWARSP" : {name : "Voss Warspear", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "4"},
    "VOSSWARSPT" : {name : "Voss Warspear (thrown)", d : 0, r : "wrShort", s : "Ranged - Light (Ag)", c : "4"},
    "WEIKGS" : {name : "Weik Greatsword", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "THERMCUTW" : {name : "Thermal Cutter", d : 4, r : "wrEngaged", s : "Melee (Br)", c : "4"},
    "SVT300" : {name : "SVT-300 Stun Cloak", d : 7, r : "wrEngaged", s : "Brawl (Br)", c : "3"},
    "LTSABER" : {name : "Lightsaber", d : 10, r : "wrEngaged", s : "LTSABER", c : "1"},
    "LTSABERBASIC" : {name : "Basic Lightsaber", d : 6, r : "wrEngaged", s : "LTSABER", c : "2"},
    "LTSABERDBL" : {name : "Double-Bladed Lightsaber", d : 6, r : "wrEngaged", s : "LTSABER", c : "2"},
    "LTSABERPIKE" : {name : "Lightsaber Pike", d : 6, r : "wrEngaged", s : "LTSABER", c : "2"},
    "LTSABERSHOTO" : {name : "Shoto", d : 5, r : "wrEngaged", s : "LTSABER", c : "2"},
    "LTSABERTRAIN" : {name : "Training Lightsaber", d : 6, r : "wrEngaged", s : "LTSABER", c : "0"},
    "LTSABERGUASH" : {name : "Guard Shoto", d : 5, r : "wrEngaged", s : "LTSABER", c : "2"},
    "LTSABERTEMGUAPIKE" : {name : "Temple Guard Lightsaber Pike", d : 6, r : "wrEngaged", s : "LTSABER", c : "2"},
    "LTSABERBASICHILT" : {name : "Basic Lightsaber Hilt", d : 0, r : "wrEngaged", s : "LTSABER", c : "0"},
    "LTSABERDBLHILT" : {name : "Double-Bladed Lightsaber Hilt", d : 0, r : "wrEngaged", s : "LTSABER", c : "0"},
    "LTSABERPIKEHILT" : {name : "Lightsaber Pike Hilt", d : 0, r : "wrEngaged", s : "LTSABER", c : "0"},
    "LTSABERSHOTOHILT" : {name : "Shoto Hilt", d : 0, r : "wrEngaged", s : "LTSABER", c : "0"},
    "LTSABERTEMGUAPIKEHILT" : {name : "Temple Guard Lightsaber Pike Hilt", d : 0, r : "wrEngaged", s : "LTSABER", c : "0"},
    "LTSABERGUASHHILT" : {name : "Guard Shoto Hilt", d : 0, r : "wrEngaged", s : "LTSABER", c : "0"},
    "LTSABERLODAKA" : {name : "Master Lodaka's Lightsaber", d : 10, r : "wrEngaged", s : "LTSABER", c : "1"},
    "TRUNCH" : {name : "Truncheon", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "5"},
    "STUNCLUB" : {name : "Stun Club", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "PULSEDRILL" : {name : "G9-GP Pulse Drill", d : 5, r : "wrEngaged", s : "Melee (Br)", c : "4"},
    "PULSEDRILLGX" : {name : "G9-GX Pulse Drill", d : 5, r : "wrEngaged", s : "Melee (Br)", c : "4"},
    "BEAMDRILLJ7B" : {name : "J-7b Beamdrill", d : 9, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "ENTRENCHTOOL" : {name : "Entrenching Tool (Improvised)", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "4"},
    "GLAIVESEL" : {name : "Selonian Glaive", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "VIBAX" : {name : "Vibro-ax", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "VIBKN" : {name : "Vibroknife", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "STVIBKN" : {name : "Stealth Vibroknife", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "VIBSW" : {name : "Vibrosword", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "SWORDCANE" : {name : "Sword Cane", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "VIBROSPR" : {name : "Huntsman Vibrospear", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "VIBROSAW" : {name : "Mk. VIII Vibrosaw", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "FUSCUT" : {name : "Fusion Cutter", d : 5, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "RYYKBLADE" : {name : "Ryyk Blade", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "VIBROGRTSWRDVX" : {name : "VX 'Czerhander' Vibro-Greatsword", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "THERMAXMOD7" : {name : "Model 7 Therm-Ax", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "RIOTSHIELD" : {name : "Riot Shield", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "6"},
    "MOLSTILETTO" : {name : "Molecular Stiletto", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "STUNBATON" : {name : "Stun Baton", d : 2, r : "wrEngaged", s : "Melee (Br)", c : "6"},
    "THNDRBOLT" : {name : "Thunderbolt Shock Prod", d : 5, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "ARGGAROK" : {name : "Arg'garok", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "VIBROGLAIVE" : {name : "Vibro-Glaive", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "MORCORTSTAFF" : {name : "Morgukai Cortosis Staff", d : 8, r : "wrEngaged", s : "Melee (Br)", c : "1"},
    "NEURWHIP" : {name : "Neuronic Whip", d : 0, r : "wrShort", s : "Melee (Br)", c : "4"},
    "TUSKPIKE" : {name : "Tuskbeast Pike", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "AUTOBLAST" : {name : "Auto-Blaster", d : 3, r : "wrClose", s : "Gunnery (Ag)", c : "5"},
    "BLASTCANLT" : {name : "Light Blaster Cannon", d : 4, r : "wrClose", s : "Gunnery (Ag)", c : "4"},
    "BLASTCANHVY" : {name : "Heavy Blaster Cannon", d : 5, r : "wrClose", s : "Gunnery (Ag)", c : "4"},
    "CML" : {name : "Concussion Missile Launcher", d : 6, r : "wrShort", s : "Gunnery (Ag)", c : "3"},
    "AFCML" : {name : "Alternating-Fire Concussion Missile Launcher", d : 6, r : "wrShort", s : "Gunnery (Ag)", c : "3"},
    "ACML" : {name : "Assault Concussion Missile Launcher", d : 7, r : "wrShort", s : "Gunnery (Ag)", c : "3"},
    "CMLHK" : {name : "Hunter Killer Concussion Missile Launcher", d : 7, r : "wrShort", s : "Gunnery (Ag)", c : "3"},
    "IONLT" : {name : "Light Ion Cannon", d : 5, r : "wrClose", s : "Gunnery (Ag)", c : "4"},
    "IONMED" : {name : "Medium Ion Cannon", d : 6, r : "wrShort", s : "Gunnery (Ag)", c : "4"},
    "IONHVY" : {name : "Heavy Ion Cannon", d : 7, r : "wrMedium", s : "Gunnery (Ag)", c : "4"},
    "IONLONG" : {name : "Long-Barrelled Ion Cannon", d : 9, r : "wrLong", s : "Gunnery (Ag)", c : "4"},
    "IONBATT" : {name : "Battleship Ion Cannon", d : 9, r : "wrMedium", s : "Gunnery (Ag)", c : "4"},
    "LASERLT" : {name : "Light Laser Cannon", d : 5, r : "wrClose", s : "Gunnery (Ag)", c : "3"},
    "LASERMED" : {name : "Medium Laser Cannon", d : 6, r : "wrClose", s : "Gunnery (Ag)", c : "3"},
    "LASERHVY" : {name : "Heavy Laser Cannon", d : 6, r : "wrShort", s : "Gunnery (Ag)", c : "3"},
    "LASERPTDEF" : {name : "Point Defense Laser Cannon", d : 5, r : "wrClose", s : "Gunnery (Ag)", c : "3"},
    "LASERLONG" : {name : "Long-Nosed Laser Cannon", d : 6, r : "wrClose", s : "Gunnery (Ag)", c : "3"},
    "PTL" : {name : "Proton Torpedo Launcher", d : 8, r : "wrShort", s : "Gunnery (Ag)", c : "2"},
    "LASERQUAD" : {name : "Quad Laser Cannon", d : 5, r : "wrClose", s : "Gunnery (Ag)", c : "3"},
    "TRACTLT" : {name : "Light Tractor Beam", d : 0, r : "wrClose", s : "Gunnery (Ag)", c : "3"},
    "TRACTMED" : {name : "Medium Tractor Beam", d : 0, r : "wrShort", s : "Gunnery (Ag)", c : "0"},
    "TRACTHVY" : {name : "Heavy Tractor Beam", d : 0, r : "wrShort", s : "Gunnery (Ag)", c : "0"},
    "TURBOLT" : {name : "Light Turbolaser", d : 9, r : "wrMedium", s : "Gunnery (Ag)", c : "3"},
    "TURBOMED" : {name : "Medium Turbolaser", d : 10, r : "wrLong", s : "Gunnery (Ag)", c : "3"},
    "TURBOHVY" : {name : "Heavy Turbolaser", d : 11, r : "wrLong", s : "Gunnery (Ag)", c : "3"},
    "RIOTSHIELD" : {name : "Riot Shield", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "6"},
    "MOLSTILETTO" : {name : "Molecular Stiletto", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "STUNBATON" : {name : "Stun Baton", d : 2, r : "wrEngaged", s : "Melee (Br)", c : "6"},
    "THNDRBOLT" : {name : "Thunderbolt Shock Prod", d : 5, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "SUPPRESSCANNON" : {name : "Light Suppression Cannon", d : 10, r : "wrClose", s : "Gunnery (Ag)", c : "0"},
    "ELECHARPOON" : {name : "Electromagnetic Harpoon", d : 0, r : "wrClose", s : "Gunnery (Ag)", c : "0"},
    "CONGRENLAUNCH" : {name : "Concussion Grenade Launcher", d : 10, r : "wrExtreme", s : "Gunnery (Ag)", c : "4"},
    "PROTONBOMB" : {name : "Proton Bomb Release Chute", d : 7, r : "wrClose", s : "Gunnery (Ag)", c : "4"},
    "PROTONBAY" : {name : "Proton Bomb Bay", d : 7, r : "wrClose", s : "Gunnery (Ag)", c : "2"},
    "BEAMDRILHVY" : {name : "Heavy Beamdrill", d : 5, r : "wrShort", s : "Gunnery (Ag)", c : "3"},
    "BEAMDRIL" : {name : "Beamdrill", d : 5, r : "wrShort", s : "Gunnery (Ag)", c : "3"},
    "MINIROCKET" : {name : "Mini-Rocket Launcher", d : 3, r : "wrClose", s : "Gunnery (Ag)", c : "4"},
    "MASSDRIVMSL" : {name : "Mass Driver Missile Launchers", d : 14, r : "wrExtreme", s : "Gunnery (Ag)", c : "3"},
    "MISSILEPACK" : {name : "Missile Pack", d : 0, r : "wrExtreme", s : "Gunnery (Ag)", c : "0"},
    "MISSILEPACKMINI" : {name : "Mini-Missile Pack", d : 0, r : "wrExtreme", s : "Gunnery (Ag)", c : "0"},
    "MINIMISSILETUBE" : {name : "MM-XT Mini-Missile Tube", d : 0, r : "wrExtreme", s : "Gunnery (Ag)", c : "0"},
    "TRACTOR213" : {name : "Grappler 213 Tactical Tractor Beam", d : 0, r : "wrClose", s : "Gunnery (Ag)", c : "0"},
    "MISSCONCMINI" : {name : "Concussion Missile (Mini)", d : 4, r : "wrShort", s : "Gunnery (Ag)", c : "4"},
    "MISSJAM" : {name : "Jammer Missile", d : 0, r : "wrShort", s : "Gunnery (Ag)", c : "0"},
    "MISSDECOY" : {name : "Decoy Missile", d : 0, r : "wrShort", s : "Gunnery (Ag)", c : "0"},
    "MISSJAMMINI" : {name : "Jammer Missile (Mini)", d : 0, r : "wrClose", s : "Gunnery (Ag)", c : "0"},
    "MISSUNGROCK" : {name : "Unguided Rocket", d : 5, r : "wrShort", s : "Gunnery (Ag)", c : "3"},
    "MISSUNGROCKMINI" : {name : "Unguided Rocket (Mini)", d : 3, r : "wrEngaged", s : "Gunnery (Ag)", c : "4"},
    "ROTREPBLASTCAN" : {name : "Rotary Repeating Blaster Cannon", d : 15, r : "wrExtreme", s : "Gunnery (Ag)", c : "2"},
    "LASCAN" : {name : "Laser Cannon", d : 9, r : "wrExtreme", s : "Gunnery (Ag)", c : "3"},
    "FLAKLT" : {name : "Light Flak Cannon", d : 5, r : "wrClose", s : "Gunnery (Ag)", c : "3"},
    "FLAKMED" : {name : "Medium Flak Cannon", d : 5, r : "wrShort", s : "Gunnery (Ag)", c : "3"},
    "FLAKHVY" : {name : "Heavy Flak Cannon", d : 6, r : "wrShort", s : "Gunnery (Ag)", c : "3"},
    "VL6" : {name : "VL-6 Warhead Launcher System", d : 6, r : "wrShort", s : "Gunnery (Ag)", c : "3"},
    "A95STING" : {name : "A95 Stingbeam", d : 5, r : "wrEngaged", s : "Ranged - Light (Ag)", c : "3"},
    "L7LIGHTPISTOL" : {name : "L7 Light Blaster Pistol", d : 6, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "411HOLDOUT" : {name : "411 Holdout Blaster", d : 4, r : "wrMedium", s : "Ranged - Light (Ag)", c : "4"},
    "M53QUICKTRIGGER" : {name : "Model 53 'Quicktrigger' Blaster Pistol", d : 6, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "M1NOVAVIPER" : {name : "Model-1 'Nova Viper' Blaster Pistol", d : 7, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "C10DRAGONEYE" : {name : "C-10 'Dragoneye Reaper' Heavy Blaster Pistol", d : 8, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "RENHEAVYBLAST" : {name : "'Renegade' Heavy Blaster Pistol", d : 8, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "HBT4HUNTING" : {name : "HBt-4 Hunting Blaster", d : 10, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "3"},
    "VES700PULSE" : {name : "VES-700 Pulse Rifle", d : 8, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "3"},
    "FDROIDDISABLER" : {name : "Droid Disabler", d : 12, r : "wrShort", s : "Ranged - Light (Ag)", c : "3"},
    "FWG5FLECHETTE" : {name : "FWG-5 Flechette Pistol", d : 6, r : "wrShort", s : "Ranged - Light (Ag)", c : "3"},
    "8GAUGESCATTER" : {name : "8-Gauge Scatter Gun", d : 7, r : "wrShort", s : "Ranged - Heavy (Ag)", c : "6"},
    "ASCIANTHROWDAG" : {name : "Ascian Throwing Dagger", d : 0, r : "wrShort", s : "Ranged - Light (Ag)", c : "2"},
    "KNOCKOUTGRENADE" : {name : "Knockout Grenade", d : 12, r : "wrShort", s : "Ranged - Light (Ag)", c : "0"},
    "TAGCRYOPROJ" : {name : "Cryoban Projector", d : 6, r : "wrShort", s : "Ranged - Heavy (Ag)", c : "2"},
    "SSB1STATIC" : {name : "SSB-1 Static Pistol", d : 2, r : "wrShort", s : "Ranged - Light (Ag)", c : "4"},
    "SHOCKBOOTS" : {name : "Shock Boots", d : 0, r : "wrEngaged", s : "Brawl (Br)", c : "5"},
    "PUNCHDAGGER" : {name : "Punch Dagger", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "3"},
    "BLADEBREAKER" : {name : "Blade-Breaker", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "4"},
    "VIBRORAPIER" : {name : "Vibrorapier", d : 0, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "LTTRACTCOUPLE" : {name : "Light Tractor Beam Coupler", d : 0, r : "wrClose", s : "Gunnery (Ag)", c : "1"},
    "TORPLAUNCH" : {name : "Torpedo Launcher", d : 6, r : "wrMedium", s : "Gunnery (Ag)", c : "3"},
    "PROTTORPHVY" : {name : "Heavy Proton Torpedo Launcher", d : 10, r : "wrMedium", s : "Gunnery (Ag)", c : "2"},
    "CLUSTERBOMB" : {name : "Cluster Bomb Launcher", d : 6, r : "wrClose", s : "Gunnery (Ag)", c : "3"},
    "IONTHRUST" : {name : "Ion Thruster Gun", d : 5, r : "wrShort", s : "Ranged - Heavy (Ag)", c : "4"},
    "MULTIGOO" : {name : "Multi-Goo Gun", d : 2, r : "wrShort", s : "Ranged - Light (Ag)", c : "0"},
    "REPULSORGUN" : {name : "Repulsor Gun", d : 3, r : "wrShort", s : "Ranged - Heavy (Ag)", c : "5"},
    "RIVETGUN" : {name : "Rivet Gun", d : 4, r : "wrEngaged", s : "Ranged - Light (Ag)", c : "3"},
    "HANDGRID" : {name : "Hand Grinder", d : 4, r : "wrEngaged", s : "Melee (Br)", c : "4"},
    "WELDINGROD" : {name : "Welding Rod", d : 3, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "BMWEAPTEMP1" : {name : "Fist Weapon (Template)", d : 3, r : "wrEngaged", s : "Brawl (Br)", c : "4"},
    "BMWEAPTEMP2" : {name : "Blunt Weapon (Template)", d : 3, r : "wrEngaged", s : "Melee (Br)", c : "5"},
    "BMWEAPTEMP3" : {name : "Shield (Template)", d : 3, r : "wrEngaged", s : "Melee (Br)", c : "5"},
    "BMWEAPTEMP4" : {name : "Bladed Weapon (Template)", d : 3, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "BMWEAPTEMP5" : {name : "Vibro-weapon (Template)", d : 3, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "BMWEAPTEMP6" : {name : "Powered Melee Weapon (Template)", d : 3, r : "wrEngaged", s : "Melee (Br)", c : "2"},
    "RWEAPTEMP1" : {name : "Simple Projectile Weapon (Template)", d : 4, r : "wrShort", s : "Ranged - Light (Ag)", c : "5"},
    "RWEAPTEMP2" : {name : "Solid Projectile Pistol (Template)", d : 4, r : "wrShort", s : "Ranged - Light (Ag)", c : "5"},
    "RWEAPTEMP3" : {name : "Solid Projectile Rifle (Template)", d : 7, r : "wrMedium", s : "Ranged - Heavy (Ag)", c : "5"},
    "RWEAPTEMP4" : {name : "Energy Pistol (Template)", d : 6, r : "wrMedium", s : "Ranged - Light (Ag)", c : "3"},
    "RWEAPTEMP5" : {name : "Energy Rifle (Template)", d : 9, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "3"},
    "RWEAPTEMP6" : {name : "Heavy Energy Rifle (Template)", d : 10, r : "wrLong", s : "Ranged - Heavy (Ag)", c : "3"},
    "RWEAPTEMP7" : {name : "Missile Launcher (Template)", d : 0, r : "wrEngaged", s : "Gunnery (Ag)", c : "0"},
    "RWEAPTEMP8" : {name : "Missile (Template)", d : 20, r : "wrExtreme", s : "Gunnery (Ag)", c : "2"},
    "RWEAPTEMP9" : {name : "Grenade (Template)", d : 8, r : "wrShort", s : "Ranged - Light (Ag)", c : "4"},
    "RWEAPTEMP10" : {name : "Mine (Template)", d : 12, r : "wrEngaged", s : "Mechanics (Int)", c : "3"},
  };

  var armor = {
    "AEG" : {name : "Adverse Environmental Gear", s : 1},
    "AC" : {name : "Armored Clothing", s : 1},
    "ARMROBE" : {name : "Armored Robes", s : 2},
    "CONROBE" : {name : "Concealing Robes", s : 1},
    "HBA" : {name : "Heavy Battle Armor", s : 2},
    "HC" : {name : "Heavy Clothing", s : 1},
    "LAM" : {name : "Laminate", s : 2},
    "PDS" : {name : "Personal Deflector Shield", s : 0},
    "PAD" : {name : "Padded Armor", s : 2},
    "ENVIROSUIT" : {name : "Enviro-suit", s : 2},
    "CRASHSUIT" : {name : "A/KT Shockrider Crash Suit", s : 2},
    "UTILITYVEST" : {name : "A/KT Tracker Utility Vest", s : 0},
    "MOUNTARMOR" : {name : "A/KT Mountaineer Armor", s : 1},
    "CATCHVEST" : {name : "Catch Vest", s : 1},
    "NOMADCOAT" : {name : "Nomad Greatcoat", s : 1},
    "MODARMORIII" : {name : "Type III 'Berethron' Personal Modular Armor", s : 1},
    "FLIGHTTX3" : {name : "TX-3 Combat Flight Suit", s : 0},
    "BEASTHIDE" : {name : "Beast-Hide Armor", s : 1},
    "CHARGESUIT" : {name : "'Storm' Charge Suit", s : 2},
    "FLAKVEST" : {name : "Mk. III Flak Vest", s : 1},
    "PROTECTOR" : {name : "Protector 1 Combat Armor", s : 2},
    "STEELSKIN" : {name : "Mk.II 'Steelskin' Anti-Concussive Armor", s : 3},
    "POWARMOR" : {name : "PX-11 'Battlement' Powered Armor", s : 3},
    "TAILOREDJACKET" : {name : "Tailored Armored Jacket", s : 2},
    "REINFENVIRO" : {name : "Reinforced Environment Gear", s : 1},
    "RIOTARMOR" : {name : "Mk.IV Riot Armor", s : 1},
    "WINGCOMMANDER" : {name : "A/KT Wing Commander Armored Flight Suit", s : 1},
    "RIDINGTACK" : {name : "Caballerin-Series Riding Tack", s : 0},
    "CAPARIBEAST" : {name : "Capari-Series Padded Beast Armor", s : 2},
    "DESTRIBEAST" : {name : "Destri-Series Laminated Beast Armor", s : 4},
    "MEGAFAUNA" : {name : "H-Series Megafauna Carriage", s : 0},
    "HUTTSHELLARMOR" : {name : "Hutt Shell Armor", s : 2},
    "SAKSHADOW" : {name : "Sakiyan Shadowsuit", s : 1},
    "BLASTVEST" : {name : "Blast Vest", s : 1},
    "MIMETICSUIT" : {name : "Mimetic Suit", s : 1},
    "SMUGGLERSTRENCHCOAT" : {name : "Smuggler's Trenchcoat", s : 1},
    "BANAL" : {name : "Banal Apparel", s : 0},
    "CARGOCL" : {name : "Cargo Apparel", s : 0},
    "DIPROBE" : {name : "Diplomat's Robes", s : 0},
    "FLAREJACK" : {name : "Flare Jacket", s : 1},
    "HAULHARN" : {name : "Hauling Harness", s : 1},
    "HOLOCOST" : {name : "Holographic Costume", s : 0},
    "LECOUT" : {name : "Lector's Outfit", s : 1},
    "NOBREG" : {name : "Noble Regalia", s : 0},
    "PERFATT" : {name : "Performer's Attire", s : 0},
    "POWCAPARM" : {name : "Powered Capacitive Armor", s : 1},
    "RESPROBES" : {name : "Resplendent Robes", s : 1},
    "SECSKIN" : {name : "Second Skin Armor", s : 1},
    "BODYSUIT" : {name : "Polis Masson Bodysuit", s : 1},
    "LEVPOWARM" : {name : "Leviathan Power Armor", s : 2},
    "VERPFIBUARM" : {name : "Verpine Fiber Ultramesh Armor", s : 1},
    "CRESHARMOR" : {name : "Cresh 'Luck' Armor", s : 2},
    "JEDIBA" : {name : "Jedi Battle Armor", s : 2},
    "JEDITEMGUAARM" : {name : "Jedi Temple Guard Armor", s : 1},
    "JEDITRAINSUITW" : {name : "Jedi Training Suit (Weighted)", s : 2},
    "JEDITRAINSUIT" : {name : "Jedi Training Suit (Unweighted)", s : 2},
    "KAVDANNPA" : {name : "Kav-Dann Power Armor", s : 2},
    "KOROHALFVEST" : {name : "Koromondian Half-Vest", s : 1},
    "RIOTARM" : {name : "Riot Armor", s : 2},
    "ARMTEMP1" : {name : "Reinforced Clothing (Template)", s : 1},
    "ARMTEMP2" : {name : "Light Armor (Template)", s : 2},
    "ARMTEMP3" : {name : "Customizable Armor (Template)", s : 1},
    "ARMTEMP4" : {name : "Deflective Armor (Template)", s : 1},
    "ARMTEMP5" : {name : "Combat Armor (Template)", s : 2},
    "ARMTEMP6" : {name : "Segmented Armor (Template)", s : 2},
    "ARMTEMP7" : {name : "Augmentaive Armor (Template)", s : 2},
    "CLOAKCOAT" : {name : "Cloaking Coat", s : 1},
    "MECHUTILSUIT" : {name : "Mechanic's Utility Suit", s : 2},
    "N57" : {name : "N-57 Armor", s : 2},
    "P14" : {name : "P-14 Hazardous Industry Suit", s : 2},
  };

  searchObj["Weapons"] = function(src, output) {
    for (var key in src.CharWeapon) {
      // each skill
      if (src["CharWeapon"][key] && src["CharWeapon"][key]["ItemKey"] && src["CharWeapon"][key]["ItemKey"]["#text"]) {
        var item = JSON.parse(JSON.stringify(game.templates.item));
        if (weapon[src["CharWeapon"][key]["ItemKey"]["#text"]]) {
          item.info.name.current = weapon[src["CharWeapon"][key]["ItemKey"]["#text"]].name;
          item.info.skill.current = weapon[src["CharWeapon"][key]["ItemKey"]["#text"]].s;
          item.weapon.damage.current = weapon[src["CharWeapon"][key]["ItemKey"]["#text"]].d;
          item.weapon.range.current = weapon[src["CharWeapon"][key]["ItemKey"]["#text"]].r;
          item.weapon.crit.current = weapon[src["CharWeapon"][key]["ItemKey"]["#text"]].c;
          output.inventory.push(item);
        }
        else {
          item.info.name.current = src["CharWeapon"][key]["ItemKey"]["#text"];
          output.inventory.push(item);
        }
      }
    }
  }
  searchObj["Armor"] = function(src, output) {
    for (var key in src.CharArmor) {
      if (src["CharArmor"][key] && src["CharArmor"][key]["ItemKey"] && src["CharArmor"][key]["ItemKey"]["#text"]) {
        var item = JSON.parse(JSON.stringify(game.templates.item));
        if (armor[src["CharArmor"][key]["ItemKey"]["#text"]]) {
          item.info.name.current = armor[src["CharArmor"][key]["ItemKey"]["#text"]].name;
          item.equip.armor.current = armor[src["CharArmor"][key]["ItemKey"]["#text"]].s;
          output.inventory.push(item);
        }
        else {
          item.info.name.current = src["CharArmor"][key]["ItemKey"]["#text"];
          output.inventory.push(item);
        }
      }
    }
  }
  searchObj["Gear"] = function(src, output) {
    for (var key in src.CharGear) {
      if (src["CharGear"][key] && src["CharGear"][key]["ItemKey"] && src["CharGear"][key]["ItemKey"]["#text"]) {
        var item = JSON.parse(JSON.stringify(game.templates.item));
        item.info.name.current = src["CharGear"][key]["ItemKey"]["#text"];
        output.inventory.push(item);
      }
    }
  }

  // create it right here
  function recurseSearch(src, keys, output) {
    for (var key in src) {
      if (src[key] instanceof Object) {
        if (src[key] && keys[key]) {
          keys[key](src[key], output);
        }
        else {
          recurseSearch(src[key], keys, output);
        }
      }
    }
  }
  recurseSearch(xml, searchObj, override);
}

function pcgen_import(xml, override) {
  var table = {};
  var list = xml.nodehandler.nodehandler;
  for (var key in list) {
    var data = list[key]["@attributes"];
    table[data.name] = list[key]["nodehandler"];
  }
  var importRule = {};
  importRule["Combat"] = function(src, override) {
    for (var key in src) {
      var data = src[key];
      if (data["@attributes"]) {
        if (data["@attributes"].name.toLowerCase().match("current hp")) {
          sync.rawVal(override.counters.hp, eval(data["@attributes"].name.match(diceNumber)[0]));
          override.counters.hp.max = eval(data["@attributes"].name.match(diceNumber)[0]);
        }
        else if (data["@attributes"].name.toLowerCase().match(" Saving Throw")) {
          var options = data.list.option;
          var saving = sync.rawVal(override.counters.saving);
          for (var i in options) {
            for (var j in saving) {
              var match = options[i]["#text"].toLowerCase().match(saving[j].name.toLowerCase());
              if (match) {
                var firstNumber = /[+-]\d+/;
                var d = firstNumber.exec(options[i]["#text"]);
                sync.rawVal(saving[j], eval(d[0]));
              }
            }
          }
          sync.rawVal(override.counters.saving, saving);
        }
        else if (data["@attributes"].name.toLowerCase() == "weapons") {
          for (var j in data.nodehandler) {
            var item = data.nodehandler[j];

            var newItem = duplicate(game.templates.item);
            sync.val(newItem.info.name, item["@attributes"].name);
            var dmgreg = /Damage\s*\[(\d*d\d+\+\d*)/i
            var weaponInf = item.nodehandler[0].nodehandler.text["#text"].match(dmgreg);

            if (weaponInf) {
              sync.rawVal(newItem.weapon.damage, weaponInf[1]);
            }
            override.inventory.push(newItem);
          }
        }
      }
    }
  }
  importRule["Description"] = function(src, override) {
    output.info.notes.current = '<h2 style="margin: 0; font-size: 1.4em; font-weight: bold;" data-mce-style="margin: 0; font-size: 1.4em; font-weight: bold;">Description</h2><hr style="display: block; width: 100%; height: 1px; background-color: grey; margin-top: 0px; margin-bottom: 0.5em;" data-mce-style="display: block; width: 100%; height: 1px; background-color: grey; margin-top: 0px; margin-bottom: 0.5em;">';

    for (var key in src) {
      var data = src[key];
      if (data.text["#text"]) {
        override.info.notes.current = (override.info.notes.current || "") + "<p>" + data.text["#text"] + "</p>";
      }
    }
  }
  importRule["Details"] = function(src, override) {
    for (var key in src) {
      var data = src[key];
      for (var j in override.info) {
        if (data["@attributes"].name.toLowerCase().match(override.info[j].name.toLowerCase())) {
          if (j == "name") {
            sync.rawVal(override.info[j], data.text["#text"]);
          }
          else {
            sync.rawVal(override.info[j], (sync.rawVal(override.info[j]) || "") + " " + data.text["#text"]);
          }
        }
        else if (data["@attributes"].name.toLowerCase() == "speed") {
          var firstNumber = /[+-]*\d+/;
          var match = firstNumber.exec(data.text["#text"]);
          if (match) {
            sync.rawVal(override.counters.speed, eval(match[0]));
          }
        }
        else if (data["@attributes"].name.toLowerCase() == "abilities") {
          for (var i in data.grid.row) {
            var stt = data.grid.row[i];
            for (var s in override.stats) {
              if (s.toLowerCase() == stt.cell[0]["#text"].toLowerCase().trim()) {
                sync.rawVal(override.stats[s], parseInt(stt.cell[1]["#text"]));
                sync.modifier(override.stats[s], "Stat-Bonus", Math.floor(sync.rawVal(override.stats[s])/30*15) + -5);
              }
            }
          }
        }
        else if (data["@attributes"].name.toLowerCase() == "skills") {
          for (var i in data.grid.row) {
            var stt = data.grid.row[i];
            for (var j in override.skills) {
              if (override.skills[j].name.toLowerCase().match(stt.cell[0]["#text"].toLowerCase().trim())) {
                if (eval(stt.cell[2]["#text"])) {
                  sync.rawVal(override.skills[j], 1);
                  sync.modifier(override.skills[j], "rank", eval(stt.cell[2]["#text"]));
                }
                break;
              }
            }
          }
        }
      }
    }
  }
  importRule["Equipment"] = function(src, override) {
    for (var key in src) {
      var data = src[key];
      var newItem = duplicate(game.templates.item);
      sync.val(newItem.info.name, data["@attributes"].name);
      sync.rawVal(newItem.info.notes, data.text["#text"]);
      var weaponInf = data.text["#text"].split("\n");
      var push = true;
      for (var i in weaponInf) {
        if (weaponInf[i].toLowerCase().match("damage")) {
          // all weapons are taken care of in combat section
          push = false;
          break;
        }
      }
      if (push) {
        override.inventory.push(newItem);
      }
    }
  }
  importRule["Magic"] = function(src, override) {
    for (var key in src) {
      var data = src[key];
      if (data.nodehandler) {
        var spells = data.nodehandler.nodehandler;
        for (var j in spells) {
          var firstNumber = /\d+/;
          var spellLevel = spells[j]["@attributes"].name.match(firstNumber);
          var actualSpells = spells[j].text["#text"].split("\n");

          actualSpells.splice(0, 1);
          actualSpells.splice(actualSpells.length, 1);
          for (var b=0; b<actualSpells.length; b=b+4) {
            if (actualSpells[b+3] != null) {
              var newItem = duplicate(game.templates.item);
              sync.val(newItem.info.name, actualSpells[b+0]);
              sync.modifier(newItem.spell.required, "level", spellLevel[0]);
              sync.rawVal(newItem.info.notes, (sync.rawVal(newItem.info.notes) || "") + actualSpells[b+1]);
              sync.rawVal(newItem.info.notes, (sync.rawVal(newItem.info.notes) || "") + actualSpells[b+2]);
              sync.rawVal(newItem.info.notes, (sync.rawVal(newItem.info.notes) || "") + actualSpells[b+3]);
              override.spellbook.push(newItem);
            }
            else {
              break;
            }
          }
        }
      }
    }
  }
  importRule["Misc."] = function(src, override) {
    for (var key in src) {
      var data = src[key];
      if (data["@attributes"].name.toLowerCase().match("languages")) {
        var lang = data.text["#text"].split(",");
        for (var k in lang) {
          if (lang[k].trim()) {
            override.proficient["Language "+lang[k].trim()] = true;
          }
        }
      }
      else if(data["@attributes"].name && data.text && data.text["#text"]) {
        sync.rawVal(override.info.notes, (sync.rawVal(override.info.notes) || "") + data["@attributes"].name + " : " + data.text["#text"] + "\n");
      }
    }
  }
  importRule["Special Abilities"] = function(src, override) {
    for (var key in src) {
      var data = src[key];
      if (data.text) {
        var split = (data.text["#text"] || "").split("\n");
        for (var i in split) {
          if (split[i] && split[i].trim()) {
            override.talents.push(sync.newValue(split[i]));
          }
        }
      }
    }
  }
  importRule["Weapon Summary"] = function(src, override) {
    for (var key in src) {
      var data = src[key];
      var newItem = duplicate(game.templates.item);
      sync.val(newItem.info.name, data["@attributes"].name);
      sync.rawVal(newItem.info.notes, data.text["#text"]);
      var weaponInf = data.text["#text"].split("\n");
      var push = true;
      for (var i in weaponInf) {
        if (weaponInf[i].toLowerCase().match("damage")) {
          // all weapons are taken care of in combat section
          push = false;
          break;
        }
      }
      if (push) {
        override.inventory.push(newItem);
      }
    }
  }
  console.log(table);
  for (var key in table) {
    if (importRule[key]) {
      importRule[key](table[key], override);
    }
  }
}

sync.render("ui_renderHelp", function(obj, app, scope){
  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");
  div.load("https://files.gmforge.io/file/help/main.html", function( response, status, xhr ) {
    if (status == "error") {
      var reload = $("<button>").appendTo(div);
      reload.append("Unable to load docs");
    }
  });

  return div;
});

sync.render("ui_quickSearch", function(obj, app, scope) {
  var div = $("<div>");

  var searchWrap = $("<div>").appendTo(div);
  searchWrap.addClass("flexrow size4 white");

  var categories = {
    "c" : {n : "Actors", i : "user", ui : "ui_characterSheetv2", width : assetTypes["c"].width, height : assetTypes["c"].height},
    "i" : {n : "Elements", i : "briefcase", ui : "ui_renderItemv2", width : assetTypes["i"].width, height : assetTypes["i"].height},
  };

  var buttonWrap = $("<div>").appendTo(searchWrap);
  buttonWrap.addClass("flexrow");

  for (var i in categories) {
    var button = $("<button>").appendTo(buttonWrap);
    if (i == obj.data.filter) {
      button.addClass("highlight alttext");
      button.append(genIcon(categories[i].i));
    }
    else {
      button.append(genIcon(categories[i].i).css("color", "#333"));
    }
    button.attr("type", i);
    button.attr("title", categories[i].n);
    button.click(function(){
      obj.data.filter = $(this).attr("type");
      obj.update();
    });
  }

  var search = genInput({
    parent : searchWrap,
    classes : "fit-x line lrpadding lrmargin",
    placeholder : "Search for " + assetTypes[obj.data.filter].n,
  });
  search.bind("input", function(ev){
    buildResults($(this).val());
  });


  var searchList = $("<div>").appendTo(div);
  searchList.addClass("scroll-y");
  searchList.css("max-height", "200px");

  var cache = [];
  for (var i in game.locals["workshop"].data) {
    var entryData = game.locals["workshop"].data[i];
    if (!game.config.data.library || !game.config.data.library.packs || hasSecurity(getCookie("UserID"), "Visible", game.config.data.library.packs[i])) {
      for (var j in entryData.data.content) {
        var contentList = entryData.data.content[j];
        if (contentList._t == obj.data.filter) {
          for (var k in contentList.data) {
            var content = contentList.data[k];

            cache.push(contentList.data[k]);

            var ent = sync.render("ui_ent")({id : function(){return false},data : contentList.data[k]}, app, {height : 25}).appendTo(searchList);
            ent.addClass("white");
            ent.attr("draggable", true);
            ent.attr("index", cache.length-1);
            ent.on("dragstart", function(ev){
              var dt = ev.originalEvent.dataTransfer;
              dt.setData("OBJ", JSON.stringify(cache[$(this).attr("index")]));
            });
          }
        }
      }
    }
  }
  function buildResults(text){
    var term = (text || "").toLowerCase();
    searchList.children().each(function(){
      if ($(this).attr("index") && term) {
        var ent = cache[$(this).attr("index")];
        if (ent) {
          var name;
          if (obj.data.filter == "t" || obj.data.filter == "s") {
            name = (sync.rawVal(ent.name) || "").toLowerCase();
          }
          else {
            name = (sync.rawVal(ent.info.name) || "").toLowerCase();
          }
          var hide = false;
          for (var tag in ent.tags) {
            if (tag.match(String(term))) {
              hide = true;
              break;
            }
          }
          if (name.match(String(term))) {
            hide = true;
          }
          if (!hide) {
            $(this).hide();
          }
          else {
            $(this).show();
          }
        }
      }
      else {
        $(this).fadeIn();
      }
    });
  }

  return div;
});

sync.render("ui_armorValue", function(obj, app, scope) {
  var itemData = scope.itemData || obj.data;
  var char;
  if (scope.cref) {
    char = getEnt(scope.cref);
  }

  var newScope = duplicate(scope);

  newScope.url = "/content/icons/ShieldOutline1000p.png";
  newScope.body = {"body" : {url: "/content/icons/ShieldOutline1000p.png", coords: ["25%", 0], size: ["50%","100%"]}};
  newScope.target = scope.target;
  if (!scope.target && scope.lookup) {
    newScope.target = sync.traverse(obj.data, scope.lookup);
  }
  newScope.colorize = newScope.colorize || function(ui) {};
  newScope.click = function(e, ui) {
    if (_down["17"]) { // fuck firefox, seriously
      sync.rawVal(scope.target, parseInt(sync.rawVal(scope.target) || 0)-1);
    }
    else {
      sync.rawVal(scope.target, parseInt(sync.rawVal(scope.target) || 0)+1);
    }
    obj.update();
  };
  newScope.displayText = function(ui, key) {
    ui.css("border", "none");
    var text = sync.rawVal(newScope.target) || 0;
    if (char) {
      var bonus = sync.result("@:armor(,1)", {c : duplicate(char.data), i : duplicate(itemData)});
      if (bonus) {
        text = text + "("+bonus+")";
      }
    }
    ui.text(text);
  };

  var div = $("<div>");
  div.addClass("flexcolumn flexmiddle");

  if (scope.target && scope.target.name) {
    var title = $("<b>").appendTo(div);
    title.addClass("fit-x flexaround");
    if (!scope.viewOnly) {
      var remove = genIcon("minus").appendTo(title);
      remove.click(function(){
        sync.rawVal(scope.target, parseInt(sync.rawVal(scope.target) || 0)-1);
        obj.update();
      });
    }
    title.append(scope.target.name);
    if (!scope.viewOnly) {
      var add = genIcon("plus").appendTo(title);
      add.click(function(){
        sync.rawVal(scope.target, parseInt(sync.rawVal(scope.target) || 0)+1);
        obj.update();
      });
    }
  }

  var bodyContainer = $("<div>").appendTo(div);
  bodyContainer.addClass("flexmiddle");

  var body = sync.render("ui_body")(obj, app, newScope).appendTo(bodyContainer);
  body.css("width", scope.width || "80px");
  body.css("height", scope.height || "80px");

  return div;
});

sync.render("ui_armorParted", function(obj, app, scope) {
  var itemData = scope.itemData || obj.data;
  var char;
  if (scope.cref) {
    char = game.entities.data[scope.cref];
  }

  var newScope = duplicate(scope);
  newScope.colorize = newScope.colorize || function(ui) {};
  newScope.click = function(ev, ui) {
    var target = scope.target;
    var val = sync.rawVal(scope.target) || {};

    if (_down["17"]) {
      val[ui.attr("data-index")] = (parseInt(val[ui.attr("data-index")]) || 0) - 1;
    }
    else {
      val[ui.attr("data-index")] = (parseInt(val[ui.attr("data-index")]) || 0) + 1;
    }
    var empty = true;
    for (var key in val) {
      if (val[key] != null && val[key] != 0) {
        empty = false;
        break;
      }
    }
    if (empty) {
      sync.rawVal(scope.target, "");
    }
    else {
      sync.rawVal(scope.target, val);
    }
    obj.update();
  };
  newScope.displayText = function(ui, key) {
    ui.css("border", "none");
    var val = sync.rawVal(newScope.target) || {};
    var text = (val[key] || 0);
    if (char) {
      var itemArmor = newScope.target;
      var bonus = sync.result("@:armor(,1)", {c : duplicate(char.data), i : duplicate(itemData)});
      if (bonus) {
        text = Number(text) + Number(bonus);
      }
      text = text;
    }

    ui.text(text);
  };

  var div = $("<div>");
  div.addClass("flexcolumn flexmiddle");

  if (scope.target && scope.target.name) {
    var title = $("<b>").appendTo(div);
    title.addClass("fit-x flexaround");
    if (!scope.viewOnly) {
      var remove = genIcon("minus").appendTo(title);
      remove.click(function(){
        var val = sync.rawVal(scope.target) || {};
        for (var key in val) {
          val[key] = parseInt(val[key])-1;
        }
        var empty = true;
        for (var key in val) {
          if (val[key] != null && val[key] != 0) {
            empty = false;
            break;
          }
        }
        if (empty) {
          sync.rawVal(newScope.target, "");
        }
        else {
          sync.rawVal(newScope.target, val);
        }
        obj.update();
      });
    }
    if (!scope.hideTitle) {
      title.append(scope.target.name);
    }
    if (!scope.viewOnly) {
      var add = genIcon("plus").appendTo(title);
      add.click(function(){
        var val = sync.rawVal(scope.target) || {};
        for (var key in val) {
          val[key] = parseInt(val[key])+1;
        }
        var empty = true;
        for (var key in val) {
          if (val[key] != null && val[key] != 0) {
            empty = false;
            break;
          }
        }
        if (empty) {
          sync.rawVal(newScope.target, "");
        }
        else {
          sync.rawVal(newScope.target, val);
        };
        obj.update();
      });
    }
  }

  var bodyContainer = $("<div>").appendTo(div);
  bodyContainer.addClass("flexmiddle");

  var body = sync.render("ui_body")(obj, app, newScope).appendTo(bodyContainer);
  body.css("width", scope.width || "80px");
  body.css("height", scope.height || "80px");

  return div;
});

sync.render("ui_armorBonuses", function(obj, app, scope) {
  var itemData = scope.itemData || obj.data;
  var char;
  if (scope.cref) {
    char = game.entities.data[scope.cref];
  }

  var div = $("<div>");
  div.addClass("flexcolumn flexmiddle");

  div.append("<b>Stat Bonuses</b>");

  var checkContainer = $("<div>").appendTo(div);
  checkContainer.addClass("flexrow flexwrap");

  for (var key in game.templates.character.stats) {
    var check = $("<div>").appendTo(checkContainer);
    check.addClass("flexmiddle lrpadding");
    check.css("width", "50%");

    var dex = genInput({
      parent : check,
      type : "checkbox",
      stat : key,
      style : {"margin-top" : "0"},
      disabled : scope.viewOnly,
    });
    if (sync.modifier(scope.target, key) != null) {
      dex.prop("checked", true);
    }
    dex.change(function(){
      var ui = $(this);
      var statKey = $(this).attr("stat");
      if (ui.prop("checked")) {
        sync.modifier(scope.target, statKey, replaceAll(sync.rawVal(game.templates.display.sheet.rules.statBonus), "stat", statKey));
      }
      else {
        sync.removeModifier(scope.target, statKey);
      }
      obj.update();
    });
    var dexLabel = $("<b>+"+key+"</b>").appendTo(check);
    dexLabel.addClass("subtitle");

    var val = sync.modifier(scope.target, key);
    if (val != null && !isNaN(val)) {
      dexLabel.append("(max : "+val+")");
    }
  }

  return div;
});

sync.render("ui_calc", function(obj, app, scope) {
  var div = $("<div>");

  return div;
});

sync.render("ui_checkbox", function(obj, app, scope) {
  var div = $("<div>");
  div.addClass("flexmiddle");

  var data = obj.data;
  var value = sync.traverse(data, scope.lookup);

  scope.style = scope.style || {};
  scope.style["margin-top"] = "0px";

  var checkbox = genInput({
    parent : div,
    disabled : scope.viewOnly,
    type : "checkbox",
    style : scope.style
  });
  scope.cond = scope.cond || "@_value_ == @_checked_";
  if (scope.cond && sync.eval(scope.cond, {"c" : duplicate(data), _value_ : value, _checked_ : scope.checked})) {
    checkbox.prop("checked", true);
  }
  scope.saveInto = scope.saveInto || scope.lookup;
  if (scope.saveInto) {
    checkbox.change(function(){
      var ctx = sync.defaultContext();
      ctx["c"] = duplicate(data);
      var val = sync.traverse(obj.data, scope.saveInto);
      if ($(this).prop("checked") == true) {
        if (val instanceof Object) {
          sync.rawVal(val, sync.eval(scope.checked, ctx));
        }
        else {
          sync.traverse(obj.data, scope.saveInto, sync.eval(scope.checked, ctx));
        }
      }
      else {
        if (val instanceof Object) {
          sync.val(val, sync.eval(scope.unchecked, ctx));
        }
        else {
          sync.traverse(obj.data, scope.saveInto, sync.eval(scope.unchecked, ctx));
        }
      }
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });
  }

  if (scope.text) {
    div.append("<text>"+scope.text+"</text>");
  }

  return div;
});

sync.render("ui_crits", function(obj, app, scope){
  var div = $("<div>");
  div.addClass("flexcolumn flexmiddle");

  var data = obj.data;

  var title = $("<div>").appendTo(div);
  title.append("<b>Critical Damage</b>");
  if (!scope.viewOnly) {
    var icon = genIcon("plus").appendTo(title);
    icon.addClass("create");
    icon.click(function() {
      ui_prompt({
        target : $(this),
        id : "add-crit",
        inputs : {
          "Critical" : ""
        },
        click : function(ev, inputs) {
          data.crits.push(sync.newValue("Crit", inputs["Critical"].val()));
          obj.sync("updateAsset");
          layout.coverlay("add-crit");
        }
      });
    });
  }
  for (var k in data.crits) {
    var crit = genIcon("", sync.val(data.crits[k])).appendTo(div);
    crit.css("background-color", "white");
    crit.attr("index", k);
    crit.addClass("subtitle");
    crit.click(function(){
      data.crits.splice($(this).attr("index"), 1);
      obj.sync("updateAsset");
    });
  }
  return div;
});

sync.render("ui_editable", function(obj, app, scope){
  scope = scope || {
    viewOnly : app.attr("viewOnly") == "true",
    lookup : app.attr("lookup"),
    increment : Number(app.attr("increment")),
    bar : app.attr("bar") == "true",
  };

  var data = obj.data;
  var value = sync.traverse(data, scope.lookup);

  var valueBar = $("<div>");

  if (value && (!obj.data._s || hasSecurity(getCookie("UserID"), "Visible", obj.data))) {
    valueBar.addClass("flexrow flexmiddle");

    var infoPlate = $("<div>").appendTo(valueBar);
    infoPlate.addClass("flexmiddle");
    if (scope.viewOnly || !scope.increment) {
      infoPlate.addClass("lrpadding");
    }

    if (!scope.viewOnly && (!obj.data._s || hasSecurity(getCookie("UserID"), "Rights", obj.data)) && scope.increment) {
      var remove = genIcon("refresh").appendTo(infoPlate);
      remove.addClass("lrpadding");
      remove.click(function(ev){
        value.modifiers = {};
        obj.sync("updateAsset");
        ev.stopPropagation();
      });

      var remove = genIcon("minus").appendTo(infoPlate);
      remove.addClass("lrpadding");
      remove.click(function(ev){
        sync.val(value, Number(sync.val(value))-scope.increment);
        obj.sync("updateAsset");
        ev.stopPropagation();
      });
    }

    var woundLabel = $("<b>").appendTo(infoPlate);
    woundLabel.css("white-space", "nowrap");
    if (value.max) {
      woundLabel.text(value.name+":"+sync.val(value)+"/"+value.max);
    }
    else {
      woundLabel.text(value.name+":"+sync.val(value));
    }
    woundLabel.addClass("flexmiddle");
    if (!scope.viewOnly && scope.ui) {
      woundLabel.addClass("hover2");
      woundLabel.css("pointer-events", "auto");
      woundLabel.css("text-decoration", "underline");

      woundLabel.click(function(){
        var newApp = sync.newApp(scope.ui);
        newApp.attr("lookup", scope.lookup);
        newApp.attr("viewOnly", scope.viewOnly);

        obj.addApp(newApp);
        ui_popOut({
          target : $(this),
          id : "assign",
        }, newApp);
      });
    }

    if (!scope.viewOnly && (!obj.data._s || hasSecurity(getCookie("UserID"), "Rights", obj.data)) && scope.increment) {
      var add = genIcon("plus").appendTo(infoPlate);
      add.addClass("lrpadding");
      add.click(function(ev){
        sync.val(value, Number(sync.val(value))+scope.increment);
        obj.sync("updateAsset");
        ev.stopPropagation();
      });
    }

    if (scope.bar) {
      var barWrap = $("<div>").appendTo(valueBar);
      barWrap.addClass("flex");

      sync.render("ui_progressBar")(obj, app, scope).appendTo(barWrap);
    }
  }
  return valueBar;
});

sync.render("ui_diceVisual", function(obj, app, scope) {
  var div = $("<div>");
  div.addClass(scope.classes);

  var ctx = sync.defaultContext();
  ctx[obj.data._t] = duplicate(obj.data);

  var query = sync.executeQuery(sync.eval(duplicate(scope.eq), ctx), ctx, !scope.roll);
  for (var index in query.equations) {
    sync.render("ui_dice")(query.equations[index], app, {width : sync.eval(scope.diceSize, ctx), height : sync.eval(scope.diceSize, ctx)}).appendTo(div);
  }

  return div;
});

var _lastBuilder = "edit";

var classesList = [
  [
    "flexcolumn",
    "flexrow",
    "flexcontainer",
    "scroll-x",
    "scroll-y",
    "flexaround",
    "flexbetween",
    "flexmiddle",
  ],
  [
    "flex",
    "flex2",
    "flex3",
    "fit-x",
    "fit-y",
    "fit-xy",
    "padding",
    "margin",
  ],
  [
    "white",
    "button",
    "highlight alttext",
    "background alttext",
    "foreground alttext",
    "hover",
    "hover2",
  ],
  [
    "subtitle",
    "size1",
    "size2",
    "size3",
    "size4",
    "size5",
    "size6",
    "size7",
    "size8",
  ],
  [
    "smooth",
    "outline",
    "outlinebottom",
    "lightoutline",
    "hardoutline",
  ]
];

sync.render("ui_addElement", function(obj, app, scope){
  scope = scope || {
    viewOnly: (app.attr("viewOnly") == "true"),
    path : app.attr("lookup"),
    closeTarget : app.attr("closeTarget"),
  };

  var path = scope.path;

  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");

  function rebuild(type){
    _lastBuilder = type;
    div.empty();

    var replace = path.replace(app.attr("id")+"_0", "");
    while (replace.match("-")) {
      replace = replace.replace("-", ".");
    }
    if (replace[0] == ".") {
      replace = replace.substring(1, replace.length);
    }
    var contentData = sync.traverse(obj.data._d.content, replace);

    var tabMenuWrap = $("<div>").appendTo(div);

    var tabMenu = $("<div>").appendTo(tabMenuWrap);
    tabMenu.addClass("flexrow fit-x");
    tabMenu.css("white-space", "nowrap");

    var editButton = $("<div>").appendTo(tabMenu);
    editButton.addClass("spadding subtitle flex flexmiddle");
    editButton.text("Configure");
    editButton.click(function(){
      rebuild("edit");
    });

    var jsonButton = $("<div>")//.appendTo(tabMenu);
    jsonButton.addClass("spadding subtitle flex flexmiddle");
    jsonButton.text("Edit JSON");
    jsonButton.click(function(){
      rebuild("json");
    });

    var simpleButton = $("<div>").appendTo(tabMenu);
    simpleButton.addClass("spadding subtitle flex flexmiddle");
    simpleButton.text("Add Attributes");
    simpleButton.click(function(){
      rebuild("attributes");
    });

    var elementButton = $("<div>").appendTo(tabMenu);
    elementButton.addClass("spadding subtitle flex flexmiddle");
    elementButton.text("Add Elements");
    elementButton.click(function(){
      rebuild("elements");
    });

    if (!contentData.display || contentData.tabs) {
      simpleButton.hide();
      elementButton.hide();
    }

    var flex = $("<div>").appendTo(tabMenu);
    flex.addClass("flex");

    var topButton = $("<div>").appendTo(tabMenu);
    topButton.addClass("spadding subtitle foreground alttext hover2 outline");
    topButton.attr("title", "Send Element to the top of its container");
    topButton.append(genIcon("arrow-up"));
    topButton.click(function(){
      var replace = path.replace(app.attr("id")+"_0", "");
      while (replace.match("-")) {
        replace = replace.replace("-", ".");
      }
      if (replace[0] == ".") {
        replace = replace.substring(1, replace.length);
      }

      var index = replace.split("\.");
      index = index[index.length-1];
      var final = replace.substring(0, replace.length-1-index.length);
      var arr = sync.traverse(obj.data._d.content, final);
      if (arr && Array.isArray(arr)) {
        util.insert(arr, 0, arr.splice(index, 1)[0]);
        obj.update();
      }
      layout.coverlay(scope.closeTarget);
    });

    var bottomButton = $("<div>").appendTo(tabMenu);
    bottomButton.addClass("spadding subtitle foreground alttext hover2 outline");
    bottomButton.attr("title", "Send Element to the bottom of its container");
    bottomButton.append(genIcon("arrow-down"));
    bottomButton.click(function(){
      var replace = path.replace(app.attr("id")+"_0", "");
      while (replace.match("-")) {
        replace = replace.replace("-", ".");
      }
      if (replace[0] == ".") {
        replace = replace.substring(1, replace.length);
      }

      var index = replace.split("\.");
      index = index[index.length-1];
      var final = replace.substring(0, replace.length-1-index.length);
      var arr = sync.traverse(obj.data._d.content, final);
      if (arr && Array.isArray(arr)) {
        arr.push(arr.splice(index, 1)[0]);
        obj.update();
      }
      layout.coverlay(scope.closeTarget);
    });

    var deleteButton = $("<div>").appendTo(tabMenu);
    deleteButton.addClass("spadding subtitle highlight alttext hover2 outline");
    deleteButton.append(genIcon("trash"));
    deleteButton.click(function(){
      var replace = path.replace(app.attr("id")+"_0", "");
      while (replace.match("-")) {
        replace = replace.replace("-", ".");
      }
      if (replace[0] == ".") {
        replace = replace.substring(1, replace.length);
      }

      var index = replace.split("\.");
      index = index[index.length-1];
      var final = replace.substring(0, replace.length-1-index.length);
      var arr = sync.traverse(obj.data._d.content, final);
      if (arr && Array.isArray(arr)) {
        arr.splice(index, 1);
        obj.update();
      }
      layout.coverlay(scope.closeTarget);
    });


    var content = $("<div>").appendTo(div);
    content.addClass("flex flexcolumn");

    if (type == "attributes") {
      elementButton.addClass("button");
      editButton.addClass("button");
      jsonButton.addClass("button");
      simpleButton.addClass("highlight alttext");

      var listWrap = $("<div>").appendTo(content);
      listWrap.addClass("foreground");
      listWrap.css("overflow", "auto");
      listWrap.css("max-height", "600px");
      listWrap.css("width", "400px");

      var keys = {};
      var template = {stats : "", info : "", counters : ""};
      for (var key in template) {
        var templateWrap = $("<div>").appendTo(listWrap);
        templateWrap.addClass("flexcolumn");

        templateWrap.append("<b class='alttext lrmargin'>"+key+"</b>");

        var templateData = $("<div>").appendTo(templateWrap);
        templateData.addClass("flexcolumn white outline smooth padding");

        var pathKey = key;
        for (var subKey in obj.data[key]) {
          pathKey = key + "." + subKey;
          if (pathKey != "info.notes" && pathKey != "info.img") {
            var attrOption = $("<div>").appendTo(templateData);
            attrOption.addClass("flexrow subtitle button lrmargin");
            attrOption.attr("path", pathKey);
            if (!keys[subKey]) {
              attrOption.append("<text class='flexmiddle' style='width:100px'>"+subKey+"</text>");
              keys[subKey] = true;
            }
            else {
              attrOption.append("<text class='flexmiddle' style='width:100px'>"+pathKey+"</text>");
            }
            attrOption.append("<b>"+obj.data[key][subKey].name+"</b>");
            attrOption.click(function(){
              var replace = path.replace(app.attr("id")+"_0", "");
              while (replace.match("-")) {
                replace = replace.replace("-", ".");
              }
              if (replace[0] == ".") {
                replace = replace.substring(1, replace.length);
              }
              var target = sync.traverse(obj.data._d.content, replace);
              target.display = target.display || [];
              target.display.push({
                classes : "flexrow",
                target : $(this).attr("path"),
                edit : {classes : "line lrmargin"}
              });
              obj.update();
              if (!_down[17]) {
                layout.coverlay(scope.closeTarget);
              }
            });
          }
        }
      }
    }
    else if (type =="elements") {
      simpleButton.addClass("button");
      editButton.addClass("button");
      jsonButton.addClass("button");
      elementButton.addClass("highlight alttext");

      var listWrap = $("<div>").appendTo(content);
      listWrap.addClass("foreground");
      listWrap.css("overflow", "auto");
      listWrap.css("max-height", "600px");
      listWrap.css("width", "400px");

      var interfaces = duplicate(util.interfaces);

      for (var category in interfaces) {
        var templateWrap = $("<div>").appendTo(listWrap);
        templateWrap.addClass("flexcolumn");
        templateWrap.append("<b class='alttext lrmargin'>"+category+"</b>");

        var templateData = $("<div>").appendTo(templateWrap);
        templateData.addClass("flexcolumn white outline smooth padding");

        for (var key in interfaces[category]) {
          var intData = interfaces[category][key];

          var inputWrap = $("<div>").appendTo(templateData);
          inputWrap.addClass("button lrmargin flexmiddle subtitle");
          inputWrap.attr("index", key);
          inputWrap.attr("category", category);
          inputWrap.text(key);
          inputWrap.click(function(){
            var inputData = duplicate(interfaces[$(this).attr("category")][$(this).attr("index")]);
            function submitData() {
              if (!path) {
                obj.data._d.content.display = obj.data._d.content.display || [];
                obj.data._d.content.display.push(inputData.content);
              }
              else {
                var replace = path.replace(app.attr("id")+"_0", "");
                while (replace.match("-")) {
                  replace = replace.replace("-", ".");
                }
                if (replace[0] == ".") {
                  replace = replace.substring(1, replace.length);
                }
                var target = sync.traverse(obj.data._d.content, replace);
                target.display = target.display || [];
                target.display.push(inputData.content);
              }
              obj.update();
              if (!_down[17]) {
                layout.coverlay(scope.closeTarget);
              }
            }
            if (!inputData.arguments) {
              submitData();
            }
            else {
              var inputs = {};

              for (var arg in inputData.arguments) {
                var argData = inputData.arguments[arg];
                inputs[arg] = {};
                if (argData.datalist) {
                  var dataList = []

                  if (argData.datalist == "character") {
                    var template = {stats : "", info : "", counters : ""};
                    for (var key in template) {
                      var pathKey = key;
                      for (var subKey in obj.data[key]) {
                        pathKey = key + "." + subKey;
                        if (pathKey != "info.notes" && pathKey != "info.img") {
                          dataList.push(pathKey);
                        }
                      }
                    }
                  }
                  else {
                    for (var i in argData.datalist) {
                      dataList.push(argData.datalist[i]);
                    }
                  }

                  inputs[arg] = {
                    type : "list",
                    list : dataList
                  };
                }
                inputs[arg].category = $(this).attr("category");
                inputs[arg].index = $(this).attr("index");
                inputs[arg].arg = arg;
                inputs[arg].placeholder = argData.placeholder;
                inputs[arg].value = argData.default;
              }

              ui_prompt({
                target : $(this),
                inputs : inputs,
                click : function(ev, inputs){
                  for (var key in inputs) {
                    var inputEl = inputs[key];
                    var intData = interfaces[inputEl.attr("category")][inputEl.attr("index")];
                    var argData = interfaces[inputEl.attr("category")][inputEl.attr("index")].arguments[inputEl.attr("arg")];
                    inputData.content = JSON.parse(replaceAll(JSON.stringify(inputData.content), inputEl.attr("arg"), inputEl.val()));
                  }
                  submitData();
                },
              });
            }
          });
        }
      }
    }
    else if (type == "edit") {
      simpleButton.addClass("button");
      elementButton.addClass("button");
      jsonButton.addClass("button");
      editButton.addClass("highlight alttext");

      var editOptionsWrap = $("<div>").appendTo(content);
      editOptionsWrap.addClass("flexrow flex");

      var categoryList = $("<div>").appendTo(editOptionsWrap);
      categoryList.addClass("flexcolumn background");

      var catBuild = {
        "Layout" : function(parent) {
          var fullWrap = $("<div>").appendTo(typeOptionsWrap);
          fullWrap.addClass("flexcolumn");

          util.fonts

          var inputWrap = $("<div>").appendTo(fullWrap);
          inputWrap.addClass("flexrow flexbetween subtitle");
          inputWrap.append("<b style='white-space:nowrap'>Font</b>");
          inputWrap.css("margin-bottom", "0.5em");

          var fontList = {"Default" : ""};
          for (var i in util.fonts) {
            fontList[util.fonts[i]] = util.fonts[i];
          }

          var font = genInput({
            parent : inputWrap,
            classes : "line fit-x lrmargin lrpadding",
            select : fontList,
            value : (contentData.style && contentData.style["font-family"])?(contentData.style["font-family"]):("Default")
          });
          font.change(function(){
            contentData.style = contentData.style || {};
            contentData.style["font-family"] = ($(this).val() || "");
            rebuild("edit");
            obj.update();
          });

          var inputWrap = $("<div>").appendTo(fullWrap);
          inputWrap.addClass("flexrow flexbetween subtitle");
          inputWrap.append("<b style='white-space:nowrap'>Visual Properties</b>");

          var classes = genInput({
            parent : inputWrap,
            classes : "line fit-x lrmargin lrpadding",
            value : contentData.classes,
          });
          classes.val((contentData.classes || "") + " ");
          classes.change(function(){
            contentData.classes = ($(this).val() || "").trim();
            rebuild("edit");
            obj.update();
          });

          var classesShow = genIcon("list-alt", "List").appendTo(inputWrap);
          classesShow.attr("title", "Show a List of Common Properties");
          classesShow.click(function(){
            categoryList.toggle();
            app.attr("sampleToggle", !categoryList.is(":visible"));
          });

          var remove = genIcon("trash").appendTo(inputWrap);
          remove.addClass("lrmargin destroy");

          var categoryList = $("<div>").appendTo(fullWrap);
          categoryList.addClass("flexrow flexwrap subtitle");
          if (app.attr("sampleToggle") == "true" && app.attr("sampleToggle") == true) {
            categoryList.hide();
          }

          for (var i in classesList) {
            var catList = $("<div>").appendTo(categoryList);
            catList.addClass("flexcolumn flex lrmargin");

            for (var j in classesList[i]) {
              var checkWrap = $("<div>").appendTo(catList);
              checkWrap.addClass("flexrow subtitle hover2");

              var checkbox = genInput({
                parent : checkWrap,
                type : "checkbox",
                style : {"width" : "10px", "height" : "10px"}
              });
              if (classes.val() && classes.val().match(classesList[i][j] + " ")) {
                checkbox.prop("checked", true);
              }
              var title = $("<b>").appendTo(checkWrap);
              title.addClass("flexmiddle");
              title.css("white-space", "nowrap");
              title.text(classesList[i][j]);

              checkWrap.attr("val", classesList[i][j]);
              checkWrap.click(function(){
                if (classes.val().match($(this).attr("val") + " ")) {
                  $($(this).children()[0]).prop("checked", false);
                  classes.val(classes.val().replace($(this).attr("val") + " ", ""));
                  classes.val(classes.val().replace("  ", " "));
                  if (classes.val()[0] == " ") {
                    classes.val(classes.val().substring(1, classes.val().length));
                  }
                  classes.change();
                }
                else {
                  $($(this).children()[0]).prop("checked", true);
                  classes.val(classes.val() + " " + $(this).attr("val") + " ");
                  classes.val(classes.val().replace("  ", " "));
                  if (classes.val()[0] == " ") {
                    classes.val(classes.val().substring(1, classes.val().length));
                  }
                  classes.change();
                }
              });
            }
          }
          fullWrap.append("<div class='padding'></div>");

          var inputWrap = $("<div>").appendTo(parent);
          inputWrap.addClass("flexrow flexbetween subtitle");
          inputWrap.append("<i>Children</i>");

          var remove = genIcon("trash", "Delete Children").appendTo(inputWrap);
          remove.addClass("lrmargin destroy");
          remove.click(function(){
            contentData.display = [];
            sendAlert({text : "Children deleted"});
            rebuild("edit");
            obj.update();
          });

          var inputWrap = $("<div>").appendTo(parent);
          inputWrap.addClass("flexrow flexbetween subtitle");
          inputWrap.append("<i>CSS Styling, edit in JSON</i>");

          var remove = genIcon("trash").appendTo(inputWrap);
          remove.addClass("lrmargin destroy");
          remove.click(function(){
            delete contentData.display;
            rebuild("edit");
            obj.update();
          });
        },
        "Input" : function(parent) {
          var dataList = [];

          var template = {stats : "", info : "", counters : ""};
          for (var tKey in template) {
            var pathKey = tKey;
            for (var subKey in obj.data[tKey]) {
              pathKey = tKey + "." + subKey;
              if (pathKey != "info.notes" && pathKey != "info.img") {
                dataList.push(pathKey);
              }
            }
          }
          if (!contentData.tabs && !contentData.display) {
            var targetAttribute = $("<div>").appendTo(parent);
            targetAttribute.addClass("flexrow flexbetween subtitle");
            targetAttribute.append("<b class='flex'>Attribute(target)</b>");

            var input = genInput({
              parent : targetAttribute,
              classes : "flex",
              list : dataList,
              value : contentData.target,
              style : {"width" : "125px"},
            });
            input.change(function(){
              contentData.target = $(this).val();
              rebuild("edit");
              obj.update();
            });
          }

          var fullWrap = $("<div>").appendTo(parent);
          fullWrap.addClass("flexcolumn");

          var inputWrap = $("<div>").appendTo(fullWrap);
          inputWrap.addClass("flexrow flexbetween fit-x");
          inputWrap.append("<b class='underline flex'>Type</b>");

          var typeVal = "Input";
          if (contentData.tabs || contentData.display) {
            typeVal = "Tab";
          }
          else if (contentData.click || contentData.diceable) {
            typeVal = "Button";

            var clickType = "calc";
            if (contentData.diceable) {
              clickType = "dice";

              var wrap = $("<div>").appendTo(fullWrap);
              wrap.addClass("flexrow flexbetween fit-x");
              wrap.append("<text class='bold'>Roll Message</text>");

              var input = genInput({
                parent : wrap,
                classes : "line subtitle",
                style : {"width" : "200px"},
                value : contentData.diceable.msg,
              });
              input.change(function(){
                contentData.diceable.msg = $(this).val();
                rebuild("edit");
                obj.update();
              });

              var wrap = $("<div>").appendTo(fullWrap);
              wrap.addClass("flexrow flexbetween fit-x");
              wrap.append("<text class='bold'>Pool Equation</text>");

              var input = genInput({
                parent : wrap,
                classes : "line subtitle",
                style : {"width" : "200px"},
                value : contentData.diceable.data,
              });
              input.change(function(){
                contentData.diceable.data = $(this).val();
                contentData.scope.eq = $(this).val();
                rebuild("edit");
                obj.update();
              });

              var wrap = $("<div>").appendTo(fullWrap);
              wrap.addClass("flexrow flexbetween fit-x");
              wrap.append("<text class='bold'>Dice Size</text>");

              var input = genInput({
                parent : wrap,
                classes : "line subtitle",
                style : {"width" : "50px"},
                value : contentData.scope.diceSize,
              });
              input.change(function(){
                contentData.scope.diceSize = $(this).val();
                rebuild("edit");
                obj.update();
              });
            }
            else if (contentData.click.action != null) {
              clickType = "action";

              var wrap = $("<div>").appendTo(fullWrap);
              wrap.addClass("flexrow flexbetween fit-x");
              wrap.append("<text class='bold'>Action to Roll</text>");

              var actionList = {};
              for (var key in game.templates.actions.c) {
                actionList[key] = key;
              }

              for (var actKey in obj.data._a) {
                actionList[actKey] = actKey;
              }

              var input = genInput({
                parent : wrap,
                classes : "line subtitle",
                select : actionList,
                value : contentData.click.action,
              });
              input.change(function(){
                contentData.click.action = $(this).val();
                rebuild("edit");
                obj.update();
              });


              var wrap = $("<div>").appendTo(fullWrap);
              wrap.addClass("flexrow flexbetween fit-x");
              wrap.append("<text class='bold'>Flavor Text</text>");

              var input = genInput({
                parent : wrap,
                classes : "line subtitle",
                value : contentData.click.msg,
              });
              input.change(function(){
                contentData.click.msg = $(this).val();
                rebuild("edit");
                obj.update();
              });

              if (game.templates.actions.c[contentData.click.action]) {
                contentData.click.options = contentData.click.options || {};

                input.attr("placeholder", game.templates.actions.c[contentData.click.action].eventData.msg);

                var optionList = $("<div>").appendTo(fullWrap);
                optionList.addClass("flexcolumn spadding");

                optionList.append("<b>Action Options</b>");
                for (var key in game.templates.actions.c[contentData.click.action].options) {
                  var optionData = game.templates.actions.c[contentData.click.action].options[key];

                  var wrap = $("<div>").appendTo(optionList);
                  wrap.addClass("flexrow flexbetween fit-x subtitle");
                  wrap.append("<text class='bold'>"+key+"</text>");

                  if (optionData === true) {
                    var input = genInput({
                      parent : wrap,
                      classes : "line subtitle",
                      option : key,
                      value : contentData.click.options[key],
                    });
                    input.change(function(){
                      contentData.click.options = contentData.click.options || {};
                      contentData.click.options[$(this).attr("option")] = $(this).val();
                      rebuild("edit");
                      obj.update();
                    });
                  }
                  else if (optionData instanceof Object){
                    var dupeOptions = [];
                    for (var i in optionData) {
                      dupeOptions.push(String(optionData[i]));
                    }

                    var input = genInput({
                      parent : wrap,
                      classes : "line subtitle",
                      list : dupeOptions,
                      option : key,
                      value : contentData.click.options[key],
                    });
                    input.change(function(){
                      contentData.click.options = contentData.click.options || {};
                      contentData.click.options[$(this).attr("option")] = $(this).val();
                      rebuild("edit");
                      obj.update();
                    });
                  }
                }
              }

            }
            else if (contentData.click.calc) {
              clickType = "calc";

              fullWrap.append(sync.render("ui_math")(obj, app, {calc : contentData.click.calc}));
            }
            var buttonType = genInput({
              parent : inputWrap,
              classes : "lrmargin",
              select : {
                "Change Attributes" : "calc",
                "Roll Action" : "action",
              },
              value : clickType
            });
            buttonType.change(function(){
              var val = $(this).val();
              if (val == "action") {
                contentData.click = contentData.click || {};
                contentData.click.action = Object.keys(game.templates.actions.c)[0] || "";
                delete contentData.click.calc;
                delete contentData.diceable;
              }
              else if (val == "calc") {
                contentData.click = contentData.click || {};
                contentData.click.calc = [];
                delete contentData.click.action;
                delete contentData.diceable;
              }
              else if (val == "dice") {
                var replace = path.replace(app.attr("id")+"_0", "");
                while (replace.match("-")) {
                  replace = replace.replace("-", ".");
                }
                if (replace[0] == ".") {
                  replace = replace.substring(1, replace.length);
                }
                sync.traverse(obj.data._d.content, replace, {
                  diceable : {msg : "Dice Roll", data : "1[fate]+1[proficiency]+1[d20]"},
                  ui : "ui_diceVisual",
                  scope : {
                    "classes": "flexrow flexmiddle flexwrap",
                    "diceSize": "8px",
                    "eq": "1[fate]+1[proficiency]+1[d20]"
                  }
                });
              }
              rebuild("edit");
              obj.update();
            });
          }
          else if (contentData.ui == "ui_checkbox") {
            typeVal = "Checkbox";

            var wrap = $("<div>").appendTo(fullWrap);
            wrap.addClass("flexrow flexbetween fit-x");
            wrap.append("<text class='bold'>Checked value</text>");

            var input = genInput({
              parent : wrap,
              classes : "line subtitle",
              style : {"width" : "200px"},
              value : contentData.scope.checked,
            });
            input.change(function(){
              contentData.scope.checked = $(this).val();
              rebuild("edit");
              obj.update();
            });

            var wrap = $("<div>").appendTo(fullWrap);
            wrap.addClass("flexrow flexbetween fit-x");
            wrap.append("<text class='bold'>Unchecked Value</text>");

            var input = genInput({
              parent : wrap,
              classes : "line subtitle",
              style : {"width" : "200px"},
              value : contentData.scope.unchecked,
            });
            input.change(function(){
              contentData.scope.unchecked = $(this).val();
              rebuild("edit");
              obj.update();
            });

            var wrap = $("<div>").appendTo(fullWrap);
            wrap.addClass("flexrow flexbetween fit-x");
            wrap.append("<text class='bold'>Title (optional)</text>");

            var input = genInput({
              parent : wrap,
              classes : "line subtitle",
              style : {"width" : "200px"},
              value : contentData.scope.text,
            });
            input.change(function(){
              contentData.scope.text = $(this).val();
              rebuild("edit");
              obj.update();
            });
          }
          else if (contentData.edit) {
            if (contentData.edit.select) {
              typeVal = "Dropdown";

              var listWrap = $("<div>").appendTo(fullWrap);
              listWrap.addClass("flexcolumn");

              var newListWrap = $("<div>").appendTo(listWrap);
              newListWrap.addClass("fit-x flexmiddle subtitle bold");
              newListWrap.append(genIcon("plus", "New Option"));
              newListWrap.click(function(){
                ui_prompt({
                  target : $(this),
                  inputs : {
                    "Display 'Value'" : {placeholder : ""}
                  },
                  click : function(ev, inputs) {
                    if (inputs["Display 'Value'"].val()) {
                      contentData.edit.select = contentData.edit.select || {};
                      contentData.edit.select[inputs["Display 'Value'"].val()] = inputs["Display 'Value'"].val();
                      rebuild("edit");
                      obj.update();
                    }
                  }
                })
              });

              for (var j in contentData.edit.select) {
                var listEntryWrap = $("<div>").appendTo(listWrap);
                listEntryWrap.addClass("flexrow flexbetween");

                listEntryWrap.append("<div class='flex flexmiddle white outline smooth lrpadding subtitle bold'>"+j+"</div>");

                var input = genInput({
                  classes : "flex subtitle",
                  parent : listEntryWrap,
                  placeholder : "Override Value, saved into " + contentData.target,
                  value : (contentData.edit.select[j]!=j)?(contentData.edit.select[j]):(""),
                  index : j
                });
                input.change(function(){
                  contentData.edit.select = contentData.edit.select || {};
                  contentData.edit.select[$(this).attr("index")] = $(this).val();
                  rebuild("edit");
                  obj.update();
                });

                var remove = genIcon("remove").appendTo(listEntryWrap);
                remove.addClass("lrmargin destroy");
                remove.attr("index", j);
                remove.click(function(){
                  contentData.edit.select = contentData.edit.select || {};
                  delete contentData.edit.select[$(this).attr("index")];
                  rebuild("edit");
                  obj.update();
                });
              }

            }
            else if (contentData.edit.list) {
              typeVal = "Autofill";

              var listWrap = $("<div>").appendTo(fullWrap);
              listWrap.addClass("flexcolumn");

              var newListWrap = $("<div>").appendTo(listWrap);
              newListWrap.addClass("fit-x flexmiddle subtitle bold");
              newListWrap.append(genIcon("plus", "New Option"));
              newListWrap.click(function(){
                contentData.edit.list = contentData.edit.list || [];
                contentData.edit.list.push("");
                rebuild("edit");
                obj.update();
              });

              for (var j in contentData.edit.list) {
                var listEntryWrap = $("<div>").appendTo(listWrap);
                listEntryWrap.addClass("flexrow flexbetween");

                var input = genInput({
                  classes : "fit-x subtitle",
                  parent : listEntryWrap,
                  placeholder : "Autofill Text",
                  value : contentData.edit.list[j],
                  index : j
                });
                input.change(function(){
                  contentData.edit.list = contentData.edit.list || [];
                  contentData.edit.list[$(this).attr("index")] = $(this).val();
                  rebuild("edit");
                  obj.update();
                });

                var remove = genIcon("remove").appendTo(listEntryWrap);
                remove.addClass("lrmargin destroy");
                remove.attr("index", j);
                remove.click(function(){
                  contentData.edit.list = contentData.edit.list || [];
                  contentData.edit.list.splice($(this).attr("index"), 1);
                  rebuild("edit");
                  obj.update();
                });
              }
            }
            else if (contentData.edit.type == "number") {
              typeVal = "Number";

              var optionWrap = $("<div>").appendTo(fullWrap);
              optionWrap.addClass("flexrow subtitle lrpadding lrmargin");
              optionWrap.append("<b class='flex'>Minimum</b>");

              var min = genInput({
                parent : optionWrap,
                type : "Number",
                placeholder : "Min",
                value : contentData.edit.min
              });

              var optionWrap = $("<div>").appendTo(fullWrap);
              optionWrap.addClass("flexrow subtitle lrpadding lrmargin");
              optionWrap.append("<b class='flex'>Maximum</b>");

              var max = genInput({
                parent : optionWrap,
                type : "Number",
                placeholder : "Max",
                value : contentData.edit.max
              });

              var optionWrap = $("<div>").appendTo(fullWrap);
              optionWrap.addClass("flexrow subtitle lrpadding lrmargin");
              optionWrap.append("<b class='flex'>Increment Step</b>");

              var step = genInput({
                parent : optionWrap,
                type : "Number",
                placeholder : "Step",
                value : contentData.edit.step
              });
            }
            else if (contentData.edit.type == "textarea") {
              typeVal = "Text Area";
            }
            else {
              typeVal = "Input";
            }
          }
          else {
            typeVal = "Label";
          }
          var select = genInput({
            parent : inputWrap,
            select : {
              "Autofill" : "Autofill",
              "Button" : "Button",
              "Checkbox" : "Checkbox",
              "Dropdown" : "Dropdown",
              "Input" : "Input",
              "Label" : "Label",
              "Number" : "Number",
              "Text Area" : "Text Area",
            },
            style : {"width" : "125px"},
            value : typeVal
          });
          select.change(function(){
            var typeVal = $(this).val();
            var replace = path.replace(app.attr("id")+"_0", "");
            while (replace.match("-")) {
              replace = replace.replace("-", ".");
            }
            if (replace[0] == ".") {
              replace = replace.substring(1, replace.length);
            }
            if (typeVal == "Dropdown") {
              sync.traverse(obj.data._d.content, replace, {
                classes : contentData.classes,
                style : contentData.style,
                name : "",
                target : contentData.target,
                edit : {select : {}}
              });
            }
            else if (typeVal == "Autofill") {
              sync.traverse(obj.data._d.content, replace, {
                classes : contentData.classes,
                style : contentData.style,
                name : "",
                target : contentData.target,
                edit : {classes : "line", list : []}
              });
            }
            else if (typeVal == "Number") {
              contentData.edit.type = "number";
              sync.traverse(obj.data._d.content, replace, {
                classes : contentData.classes,
                style : contentData.style,
                name : "",
                target : contentData.target,
                edit : {classes : "line", type : "number"}
              });
            }
            else if (typeVal == "Text Area") {
              sync.traverse(obj.data._d.content, replace, {
                classes : contentData.classes,
                style : contentData.style,
                name : "",
                target : contentData.target,
                edit : {type : "textarea"}
              });
            }
            else if (typeVal == "Checkbox"){
              sync.traverse(obj.data._d.content, replace, {
                classes : contentData.classes,
                style : contentData.style,
                name : "",
                target : contentData.target,
                ui : "ui_checkbox",
                scope : {}
              });
            }
            else if (typeVal == "Button"){
              sync.traverse(obj.data._d.content, replace, {
                classes : contentData.classes,
                style : contentData.style,
                name : "",
                target : contentData.target,
                click : {calc : []}
              });
            }
            else if (typeVal == "Label") {
              sync.traverse(obj.data._d.content, replace, {
                classes : contentData.classes,
                style : contentData.style,
                target : contentData.target,
              });
            }
            else {
              typeVal = "Input";
              sync.traverse(obj.data._d.content, replace, {
                classes : contentData.classes,
                style : contentData.style,
                name : "",
                target : contentData.target,
                edit : {classes : "line"}
              });
            }
            rebuild("edit");
            obj.update();
          });
        },
        "Tabs" : function(parent) {
          var fullWrap = $("<div>").appendTo(typeOptionsWrap);
          fullWrap.addClass("flexcolumn flex");

          if (contentData.tabs) {
            var inputWrap = $("<div>").appendTo(fullWrap);
            inputWrap.addClass("flexrow flexbetween subtitle");
            inputWrap.append("<b style='white-space:nowrap'>Default Tab</b>");

            var selectTabs = {};
            for (var i in contentData.tabs) {
              selectTabs[i] = i;
            }

            var defaultTab = genInput({
              parent : inputWrap,
              classes : "line fit-x lrmargin lrpadding",
              placeholder : "Default Tab",
              select : selectTabs,
              value : contentData.tab,
            });
            defaultTab.change(function(){
              contentData.tab = ($(this).val() || "").trim();
              rebuild("edit");
              obj.update();
            });
          }


          var tabList = $("<div>").appendTo(fullWrap);
          tabList.addClass("flexrow flexwrap subtitle");

          var tabContent = $("<div>").appendTo(fullWrap);
          tabContent.addClass("flexcolumn flex");

          for (var i in contentData.tabs) {
            var button = $("<button>").appendTo(tabList);
            button.addClass("spadding");
            button.attr("tab", i);
            button.append("<text class='subtitle'>"+i+"</text>");
            button.click(function(){
              tabList.children().removeClass("highlight alttext");
              $(this).addClass("highlight alttext");
              tabContent.empty();

              var json = genInput({
                parent : tabContent,
                classes : "flex subtitle",
                type : "textarea",
                tab : $(this).attr("tab"),
                value : JSON.stringify(contentData.tabs[$(this).attr("tab")], 2, 2)
              });
              json.change(function(){
                try {
                  var replace = path.replace(app.attr("id")+"_0", "");
                  while (replace.match("-")) {
                    replace = replace.replace("-", ".");
                  }
                  if (replace[0] == ".") {
                    replace = replace.substring(1, replace.length);
                  }
                  var contentData = sync.traverse(obj.data._d.content, replace);
                  contentData.tabs[$(this).attr("tab")] = JSON.parse($(this).val(), 2, 2);
                  delete contentData.tabs[$(this).attr("tab")].style;
                  obj.update();
                }
                catch(e) {
                  sendAlert({text : "Error Parsing"});
                }
              });
            });

            var remove = genIcon("remove").appendTo(button);
            remove.attr("tab", i);
            remove.click(function(){
              delete contentData.tabs[$(this).attr("tab")];
              rebuild("edit");
              obj.update();
            });
          }

          var newTab = $("<div>").appendTo(tabList);
          newTab.addClass("create flexmiddle spadding");
          newTab.append(genIcon("plus", "New Tab"));
          newTab.click(function(){
            ui_prompt({
              target : app,
              inputs : {"Tab Name" : ""},
              click : function(ev, inputs) {
                if (inputs["Tab Name"].val()) {
                  if (contentData.tabs && contentData.tabs[inputs["Tab Name"].val()]) {
                    sendAlert({text : "Tab Already Exists"});
                  }
                  else {
                    contentData.tabs = contentData.tabs || {};
                    contentData.tab = contentData.tab || inputs["Tab Name"].val();
                    contentData.tabs[inputs["Tab Name"].val()] = {
                      classes : "flexcolumn flex scroll-y",
                      scrl : inputs["Tab Name"].val(),
                      display : []
                    };
                    rebuild("edit");
                    obj.update();
                  }
                }
                else {
                  sendAlert({text : "Enter a Tab Name"});
                }
              }
            })
          });
        },
        "Raw JSON" : function(parent) {
          rebuild("json");
          app.removeAttr("submenu");
        }
      };
      if (!app.attr("submenu")) {
        app.attr("submenu", "Layout");
      }
      for (var key in catBuild) {
        var button = $("<button>").appendTo(categoryList);
        button.addClass("subtitle");
        button.attr("key", key);
        if (app.attr("submenu") == key) {
          button.addClass("highlight alttext");
        }
        button.text(key);
        button.click(function(){
          app.attr("submenu", $(this).attr("key"));
          rebuild("edit");
        });
      }

      var typeOptionsWrap = $("<div>").appendTo(editOptionsWrap);
      typeOptionsWrap.addClass("flexcolumn flex spadding smooth outline scroll-xy");
      catBuild[app.attr("submenu") || "Layout"](typeOptionsWrap);
    }
    else if (type == "json") {
      simpleButton.addClass("button");
      elementButton.addClass("button");
      editButton.addClass("button");
      jsonButton.addClass("highlight alttext");

      var replace = path.replace(app.attr("id")+"_0", "");
      while (replace.match("-")) {
        replace = replace.replace("-", ".");
      }
      var select = sync.newApp("ui_JSON").appendTo(content);
      select.attr("lookup", "_d.content"+replace);
      select.attr("closeTarget", "json-editor");
      obj.addApp(select);
    }
  }

  rebuild(_lastBuilder || "attributes");

  return div;
});

sync.render("ui_elementMenu", function(obj, app, scope){
  scope = scope || {
    viewOnly: (app.attr("viewOnly") == "true"),
    lookup : app.attr("lookup"),
    textEdit : app.attr("textEdit") == "true",
    hideConfirm : app.attr("hideConfirm") == "true",
    closeTarget : app.attr("closeTarget"),
    width : app.attr("width"),
    height : app.attr("height")
  };

  var data = obj.data;
  var value = obj.data;
  if (scope.lookup) {
    value = sync.traverse(data, scope.lookup || "");
  }

  var div = $("<div>");
  div.addClass("flex");

  var tabMenu = $("<div>").appendTo(div);
  tabMenu.addClass("flexrow");

  var simpleButton = $("<div>").appendTo(tabMenu);
  simpleButton.addClass("spadding subtitle");
  simpleButton.text("Simple");
  simpleButton.click(function(){
    app.removeAttr("JSON");
    obj.update();
  });

  var elementButton = $("<div>").appendTo(tabMenu);
  elementButton.addClass("spadding subtitle");
  elementButton.text("Edit JSON");
  elementButton.click(function(){
    app.attr("JSON", true);
    obj.update();
  });
  if (!app.attr("JSON")) {
    elementButton.addClass("button");
    simpleButton.addClass("highlight alttext");

    for (var key in value) {
      var inputWrap = $("<div>").appendTo(div);
      inputWrap.addClass("flexrow");

      inputWrap.append("<b class='lrpadding subtitle'>"+key+"</b>");

      if (value[key] instanceof Object) {
        inputWrap.addClass("inactive subtitle");
        inputWrap.append("<i class='flex lrpadding subtitle flexmiddle'> Too Complicated </i>");
      }
      else {
        inputWrap.addClass("padding");

        var input = genInput({
          classes : "line subtitle fit-x lrmargin",
          parent : inputWrap,
          value : value[key],
          lookup : scope.lookup + "." + key,
        });
        input.change(function(){
          sync.traverse(obj.data, $(this).attr("lookup"), $(this).val());
          obj.update();
        });
      }
    }

  }
  else {
    simpleButton.addClass("button");
    elementButton.addClass("highlight alttext");

    sync.render("ui_JSON")(obj, app, scope).appendTo(div);
  }


  return div;
});

const applyKeyReg = new RegExp("@applyKey", 'g');
const applyTargetReg = new RegExp("@applyTarget", 'g');

sync.render("ui_entryList", function(obj, app, scope){
  if (!obj) {return $("<div>");}
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true"), minimized : (app.attr("minimized") == "true")};

  var data = obj.data;
  var div = $("<div>");
  div.addClass("fit-xy");

  var value = sync.traverse(data, scope.lookup);

  if (value === false) {
    sync.traverse(data, scope.lookup, []);
  }

  var context = sync.defaultContext();
  context[obj.data._t || "c"] = obj.data;
  var ignore = scope.ignore;

  var keys;
  if (scope.list) {
    keys = {};
    for (var i in scope.list) {
      keys[scope.list[i]] = true;
    }
  }

  if (hasSecurity(getCookie("UserID"), "Rights", obj.data) && scope.reposition) {
    div.addClass(scope.drop);
    div.sortable({
      filter : ".sortableContent",
      connectWith : scope.connectWith,
      over : function(ev, ui){
        if ($(ui.item).attr("index") != null && $(ui.item).attr("index") != obj.id() && $(ui.item).attr("key") != null && $(ui.item).attr("path") != null) {
          if (!$("#"+app.attr("id")+scope.drop+"-drag-overlay").length) {
            var olay = layout.overlay({
              target : div,
              id : app.attr("id")+scope.drop+"-drag-overlay",
              style : {"background-color" : "rgba(0,0,0,0.5)"}
            });
            olay.addClass("flexcolumn flexmiddle alttext");
            olay.css("font-size", "2em");
            olay.css("pointer-events", "none");
            olay.css("z-index", util.getMaxZ(".ui-popout"));
            olay.append("<b>Drop</b>");
          }
        }
      },
      out : function(ev, ui) {
        layout.coverlay(app.attr("id")+scope.drop+"-drag-overlay");
      },
      receive : function(ev, ui) {
        var otherEnt = getEnt($(ui.item).attr("index"));
        if (otherEnt) {
          var otherValue = sync.traverse(otherEnt.data, $(ui.item).attr("path"));
          var newValue = otherValue[$(ui.item).attr("key")];
          if (newValue) {
            value.push(duplicate(newValue));
            if (hasSecurity(getCookie("UserID"), "Rights", otherEnt.data)) {
              otherValue.splice($(ui.item).attr("key"), 1);
              otherEnt.sync("updateAsset");
            }

            obj.sync("updateAsset");
          }
          else {
            sendAlert({text : "No data provided"});
          }
        }
        layout.coverlay(app.attr("id")+scope.drop+"-drag-overlay");
      },
      update : function(ev, ui) {
        var newIndex;
        var count = 0;
        $(ui.item).attr("ignore", true);
        div.children().each(function(){
          if ($(this).attr("ignore")){
            newIndex = count;
          }
          count += 1;
        });
        if (newIndex != null && value.length) {
          var old = value.splice($(ui.item).attr("key"), 1);
          if (old[0]) {
            util.insert(value, newIndex, old[0]);
          }
          obj.sync("updateAsset");
        }
      }
    });
  }

  var displayStr = JSON.stringify(scope.applyUI);

  for (var index in (keys || value)) {
    var entryData = value[index];
    var ignoring = false;

    if (ignore) {
      if (ignore instanceof String) {
        ignoring = sync.eval(ignore, context);
      }
      else if (ignore instanceof Object) {
        ignoring = util.contains(ignore, index);
      }
    }
    if (!ignoring) {
      var entryData = value[index];

      var entryWrap = $("<div>").appendTo(div);
      entryWrap.addClass("flexcolumn flex sortableContent");
      entryWrap.attr("key", index);
      entryWrap.attr("index", obj.id());
      entryWrap.attr("path", scope.lookup);

      context["applyTarget"] = scope.lookup+"."+index;
      context["applyKey"] = index;

      var display = displayStr.replace(applyKeyReg, index);
      display = display.replace(applyTargetReg, scope.lookup+"."+index);

      display = JSON.parse(display);
      if (display.cond == null || sync.eval(display.cond, context)) {
        var ui = sync.render("ui_processUI")(obj, app, {display : display, context : context, viewOnly : scope.viewOnly}).appendTo(entryWrap);
      }
    }
  }

  return div;
});

const skillKeyReg = new RegExp("@skillKey", 'g');
const skillTargetReg = new RegExp("@skillTarget", 'g');
const statKeyReg = new RegExp("@statKey", 'g');

sync.render("ui_skillList", function(obj, app, scope){
  if (!obj) {return $("<div>");}
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true"), minimized : (app.attr("minimized") == "true")};

  var data = obj.data;
  var div = $("<div>");
  div.addClass("fit-xy");

  if (scope.classes) {
    div.addClass(scope.classes);
  }

  var value = sync.traverse(data, scope.lookup);

  if (value === false) {
    sync.traverse(data, scope.lookup, {});
  }
  var context = sync.defaultContext();
  context[obj.data._t || "c"] = obj.data;
  var ignore = scope.ignore;

  var keys;
  if (scope.list) {
    keys = {};
    for (var i in scope.list) {
      keys[scope.list[i]] = true;
    }
  }

  var skillRegex = /\((.+)\)/;
  var displayStr = JSON.stringify(scope.applyUI);
  for (var index in (keys || value)) {
    if (data.skills[index]) {
      var entryData = value[index];
      var ignoring = false;

      context["skill"] = data.skills[index];
      context["skillKey"] = index;

      if (ignore) {
        if (ignore instanceof String) {
          ignoring = sync.eval(ignore, context);
        }
        else if (ignore instanceof Object) {
          ignoring = util.contains(ignore, index);
        }
      }
      if (!ignoring) {
        var entryWrap = $("<div>").appendTo(div);
        if (!scope.entryClasses) {
          entryWrap.addClass("flexcolumn flex");
        }
        else {
          entryWrap.addClass(scope.entryClasses);
        }

        var statRes;
        if (!_skillCache[data.skills[index].name]) {
          statRes = skillRegex.exec(data.skills[index].name);
          if (statRes) {
            _skillCache[data.skills[index]] = statRes[1];
          }
        }
        else {
          statRes = _skillCache[data.skills[index]];
        }

        if (statRes && data.stats[statRes[1]]) {
          context["stat"] = data.stats[statRes[1]];
          context["statKey"] = statRes[1];
        }
        var display = displayStr.replace(skillKeyReg, index);
        display = display.replace(skillTargetReg, scope.lookup + "." + index);
        if (statRes && statRes[1]) {
          display = display.replace(statKeyReg, statRes[1]);
        }
        else {
          display = display.replace(statKeyReg, "");
        }
        display = JSON.parse(display);
        if (display.cond == null || sync.eval(display.cond, context)) {
          var ui = sync.render("ui_processUI")(obj, app, {display : display, context : context, viewOnly : scope.viewOnly, time : true}).appendTo(entryWrap);
        }
      }
    }
  }

  return div;
});

sync.render("ui_expCounter", function(obj, app, scope){
  var div = $("<div>");
  div.addClass("flexcolumn flexmiddle");

  var data = obj.data;
  var value = sync.traverse(data, scope.lookup);

  var counter = $("<div>").appendTo(div);
  counter.addClass("middle outline spadding smooth");
  counter.css("background-color", "white");
  counter.append("<div><b>" + value.name +"</b></div>");

  var counterDiv = $("<div>").appendTo(counter);
  counterDiv.addClass("subtitle");

  if (scope.level) {
    var level = sync.traverse(obj.data, scope.level) || scope.level;
    var levelDiv = $("<div>").appendTo(counterDiv);
    levelDiv.addClass("flexaround flexwrap");
    if (!scope.viewOnly) {
      var levelMinus = genIcon("minus").appendTo(levelDiv);
      levelMinus.click(function(){
        sync.val(level, sync.val(level) - 1);
        obj.sync("updateAsset");
      });
    }
    var levelVal = $("<b>").appendTo(levelDiv);
    levelVal.append((level.name || "") + " " + sync.val(level));
    if (!scope.viewOnly) {
      var levelPlus = genIcon("plus").appendTo(levelDiv);
      levelPlus.click(function(){
        sync.val(level, sync.val(level) + 1);
        obj.sync("updateAsset");
      });
    }
  }

  counterDiv.append("<div>Cur : "+sync.modified(value, (sync.rawVal(value) * -1))+"</div>");
  counterDiv.append("<div>Total : "+sync.modified(value, 0)+"</div>");

  var expBar = $("<div>").appendTo(counterDiv);
  expBar.addClass("flexaround");
  if (!scope.viewOnly) {
    var reduce = genIcon("minus");
    reduce.appendTo(expBar);
    reduce.click(function(){
      var popOut = ui_prompt({
        target : $(this),
        id : "exp-reduce",
        inputs : {
          "Reduce Experience" : {
            value : 5,
            type : "number",
            min : 0,
            step : 5,
          },
        },
        click : function(ev, inputs) {
          sync.rawVal(value, sync.rawVal(value)+parseInt(inputs["Reduce Experience"].val()));
          obj.sync("updateAsset");
        }
      });
    });

    var edit = genIcon("pencil");
    edit.attr("title", "Advanced");
    edit.appendTo(expBar);
    edit.click(function(){
      var content = sync.newApp("ui_modifiers");
      content.attr("viewOnly", scope.viewOnly);
      content.attr("lookup", "counters.exp");
      content.attr("text", "Spent " + value.name);
      content.attr("modText", "Earned Experience");
      content.attr("total", "R@counters.exp-M@counters.exp");
      obj.addApp(content);

      ui_popOut({
        target : $(this),
        align : "top",
        id : "modify-exp"
      }, content);
    });

    var add = genIcon("plus");
    add.appendTo(expBar);
    add.click(function(){
      var popOut = ui_prompt({
        target : $(this),
        id : "exp-add",
        inputs : {
          "Reason" : {
            placeholder : "Why did you add this?"
          },
          "Add Experience" : {
            value : 5,
            type : "number",
            min : 0,
            step : 5,
          },
        },
        click : function(ev, inputs) {
          if (inputs["Reason"].val()) {
            sync.modifier(value, inputs["Reason"].val(), sync.modifier(value, inputs["Reason"].val()) + parseInt(inputs["Add Experience"].val()));
          }
          else {
            sync.modifier(value, "added", sync.modifier(value, "added") + parseInt(inputs["Add Experience"].val()));
          }
          obj.sync("updateAsset");
        }
      });
    });
  }

  return div;
});

sync.render("ui_token", function(obj, app, scope){
  var data = obj.data;
  var value = sync.traverse(data, scope.lookup);

  var def = "/content/icons/blankchar.png";
  if (data._t && data._t == "p") {
    def = "/content/icons/Scroll1000p.png";
  }

  var img = $("<img>");
  img.attr("src" , (value.min || sync.rawVal(value) || def));
  img.addClass(scope.classes);
  img.css("width", scope.width || "auto");
  img.css("min-width", "10px");
  img.css("min-height", "30px");
  img.css("height", scope.height || "30px");
  if (!scope.viewOnly) {
    img.addClass("hover2");
    img.click(function(){
      var imgList = sync.render("ui_filePicker")(obj, app, {
        filter : "img",
        value : value.min,
        change : function(ev, ui, val){
          value.min = val;
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
          layout.coverlay("icons-picker");
        }
      });

      var pop = ui_popOut({
        target : $(this),
        prompt : true,
        id : "icons-picker",
        align : "top",
        style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
      }, imgList);
      pop.resizable();
    });
  }
  img.contextmenu(function(ev){
    assetTypes["img"].contextmenu(ev, $(this), (value.min || sync.rawVal(value) || def));
    ev.stopPropagation();
    ev.preventDefault();
    return false;
  });
  return img;
});

sync.render("ui_image", function(obj, app, scope){
  scope = scope || {
    viewOnly : app.attr("viewOnly") == "true",
    image : app.attr("img"),
    lookup : app.attr("lookup") || "info.img",
    classes : app.attr("classes"),
    mode : app.attr("mode")
  };
  scope.lookup = scope.lookup || app.attr("lookup") || "info.img";
  var data = obj.data;
  var value = sync.traverse(obj.data, scope.lookup);

  var def = "/content/icons/blankchar.png";
  if (data._t && data._t == "p") {
    def = "/content/icons/Scroll1000p.png";
  }
  else if (data._t && data._t == "i") {
    def = "/content/icons/Chest1000p.png";
  }
  def = scope.def || def;

  var imgContainer = $("<div>");
  imgContainer.addClass("flex");
  imgContainer.css("background-image", "url('"+ (sync.rawVal(scope.image || value) || def) +"')");
  imgContainer.css("background-size", scope.fit || "contain");
  imgContainer.css("background-repeat", "no-repeat");
  imgContainer.css("background-position", "center");
  imgContainer.contextmenu(function(ev){
    assetTypes["img"].contextmenu(ev, $(this), (sync.rawVal(scope.image || value) || def));
    ev.stopPropagation();
    ev.preventDefault();
    return false;
  });

  if (scope.mode == "preview") {
    imgContainer.css("background-size", "cover");
    imgContainer.css("background-repeat", "no-repeat");
    imgContainer.css("background-position", "center 25%");
  }

  if (app.attr("showTemp") && obj.data._flags && obj.data._flags["temp"]) {
    imgContainer.addClass("flexmiddle");
    imgContainer.append("<b class='inactive smooth smargin spadding' style='font-size : 8px; color:#333; text-shadow:none;' title='Assets tagged with `temp` are deleted when their tokens are removed from a map'>Temp.</b>");
  }

  if (scope.classes) {
    imgContainer.addClass(scope.classes);
  }
  if (scope.title) {
    var context = scope.context || sync.defaultContext();
    if (!scope.context) {
      context[obj.data._t || "c"] = duplicate(obj.data);
    }
    imgContainer.append("<text>"+sync.eval(scope.title, context)+"</text>");
  }

  if (!scope.viewOnly) {
    imgContainer.addClass("hover2");
    imgContainer.click(function(ev) {
      var imgList = sync.render("ui_filePicker")(obj, app, {
        filter : "img",
        value : sync.rawVal(value),
        change : function(ev, ui, val){
          sync.rawVal(value, val);
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
          layout.coverlay("icons-picker");
        }
      });

      var pop = ui_popOut({
        target : $(this),
        prompt : true,
        id : "icons-picker",
        align : "top",
        style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
      }, imgList);
      pop.resizable();
      ev.stopPropagation();
      ev.preventDefault();
    });
  }

  return imgContainer;
});

sync.render("ui_avatarIcon", function(obj, app, scope){
  var data = obj.data;
  var value = sync.traverse(data, scope.lookup);

  var img = $("<div>");
  img.addClass("flex");
  img.css("background-image", "url('"+ (sync.rawVal(scope.image || value) || "/content/icons/blankchar.png") +"')");
  img.css("background-size", "contain");
  img.css("background-repeat", "no-repeat");
  img.css("background-position", "center");

  return img;
});


sync.render("ui_icon", function(obj, app, scope){
  var div = $("<i>");

  var data = obj.data;
  var value = sync.traverse(data, scope.lookup);

  if (sync.rawVal(scope.image || value)) {
    var img = $("<img>");
    img.attr("height", scope.height || "25px");
    img.attr("width", scope.width || "auto");
    img.attr("src", sync.rawVal(scope.image || value));
    return img;
  }

  return div;
});

sync.render("ui_link", function(obj, app, scope){

  scope = scope || {};
  scope.lookup = scope.lookup || app.attr("lookup");
  if (scope.attr && !(scope.attr instanceof Object)) {
    scope.attr = duplicate(scope);
  }

  var data = obj.data;
  var value = sync.traverse(data, scope.lookup);

  var div = genIcon(sync.eval(scope.icon, scope.context || {c : obj.data}), sync.eval(scope.name, scope.context || {c : obj.data}));
  if (scope.classes) {
    div.addClass(scope.classes);
  }
  if (scope.style) {
    for (var i in scope.style) {
      div.css(i, scope.style[i]);
    }
  }
  if (scope.click) {
    div.click(function(){
      if ((scope.cond == null || sync.eval(scope.cond, scope.context))) {
        var content = sync.newApp(scope.click);
        content.attr("lookup", scope.lookup);
        for (var i in scope.attr) {
          content.attr(i, scope.attr[i]);
        }
        obj.addApp(content);

        var pop = ui_popOut({
          target : $(this),
          id : app.attr("id")+"-"+scope.lookup+"-"+scope.click,
          style : {width : scope.width, height : scope.height}
        }, content);
        pop.resizable();
      }
    });
  }
  return div;
});

sync.render("ui_math", function(obj, app, scope){
  scope = scope || {viewOnly : app.attr("viewOnly"), update : function(newList){}};

  var div = $("<div>");
  div.addClass("flex scroll-y scroll-x");

  var char;

  var ctx = sync.defaultContext();
  ctx[obj.data._t] = obj.data;
  if (scope.cref) {
    char = getEnt(scope.cref);
    ctx[char.data._t] = duplicate(char.data);
  }

  function buildCalcPlate(index, parent) {
    var calcData = scope.calc[index];
    var calcWrap = $("<div>").appendTo(parent);
    calcWrap.addClass("flexrow flexmiddle");

    var dataList = [];

    var template = {stats : "", info : "", counters : ""};

    for (var tKey in template) {
      var pathKey = tKey;
      if (scope.cref) {
        for (var subKey in char.data[tKey]) {
          pathKey = tKey + "." + subKey;
          if (pathKey != "info.notes" && pathKey != "info.img") {
            dataList.push(pathKey);
          }
        }
      }
      else {
        for (var subKey in obj.data[tKey]) {
          pathKey = tKey + "." + subKey;
          if (pathKey != "info.notes" && pathKey != "info.img") {
            dataList.push(pathKey);
          }
        }
      }
    }


    var condition = genIcon("question-sign").appendTo(calcWrap);
    condition.addClass("subtitle spadding");
    if (calcData.cond) {
      if (sync.eval(calcData.cond, ctx)) {
        condition.addClass("create");
      }
      else {
        condition.addClass("destroy");
      }
    }
    condition.click(function(){
      ui_prompt({
        target : $(this),
        id : "change-condition",
        inputs : {
          "Condition" : $("<textarea>").css("height", "100px").addClass("fit-x subtitle").attr("disabled", scope.viewOnly).text(scope.calc[index].cond),
        },
        click : function(ev, inputs) {
          scope.calc[index].cond = String(inputs["Condition"].val() || "");
          rebuild();
        }
      });
    });

    var targetInput = genInput({
      parent : calcWrap,
      classes : "subtitle line",
      list : dataList,
      style : {"width" : "125px"},
      value : calcData.target,
      viewOnly : scope.viewOnly
    });
    targetInput.change(function(){
      scope.calc[index].target = $(this).val();
      rebuild();
    });

    calcWrap.append("<text class='flexmiddle lrmargin subtitle'>=</text>");

    var targetInput = genInput({
      parent : calcWrap,
      classes : "flex2 subtitle line middle",
      value : calcData.eq,
      viewOnly : scope.viewOnly
    });
    targetInput.change(function(){
      scope.calc[index].eq = $(this).val();
      rebuild();
    });

    calcWrap.append("<text class='flexmiddle lrmargin subtitle'>=</text>");

    var result = $("<div>").appendTo(calcWrap);
    result.addClass("bold flexmiddle subtitle lrpadding");
    result.attr("title", "Resulting Value, written into " + scope.calc[index].target);
    result.text(sync.eval(scope.calc[index].eq, ctx));

    var remove = genIcon("remove").appendTo(calcWrap);
    remove.addClass("destroy subtitle spadding");
    remove.click(function(){
      scope.calc.splice(index, 1);
      rebuild();
    });
  }

  function rebuild() {
    div.empty();

    var buildList = {};
    for (var j in scope.calc) {
      var calcData = scope.calc[j];

      buildList[calcData.cond || ""] = buildList[calcData.cond || ""] || [];
      buildList[calcData.cond || ""].push(j);
    }

    for (var cond in buildList) {
      var category = $("<div>").appendTo(div);
      category.addClass("flexcolumn spadding smooth outline");

      if (cond) {
        var condLabel = $("<text>").appendTo(category);
        condLabel.addClass("subtitle outlinebottom");

        if (sync.eval(cond, ctx)) {
          condLabel.addClass("create");
        }
        else {
          category.addClass("inactive");
          condLabel.addClass("destroy");
        }
        condLabel.text(cond);
      }
      for (var k in buildList[cond]) {
        buildCalcPlate(buildList[cond][k], category);
      }
      if (!scope.viewOnly) {
        var addCalc = $("<div>").appendTo(category);
        addCalc.addClass("subtitle create flexmiddle");
        addCalc.attr("cond", cond);
        addCalc.append(genIcon("plus", "Add Calculation"));
        addCalc.click(function(ev){
          scope.calc.push({target : "", cond : $(this).attr("cond"), eq : ""});
          rebuild();
        });
      }
      category.css("margin-bottom", "0.5em");
    }
    if (!div.children().length) {
      if (!scope.viewOnly) {
        var addCalc = $("<div>").appendTo(div);
        addCalc.addClass("subtitle create flexmiddle");
        addCalc.append(genIcon("plus", "Add Calculation"));
        addCalc.click(function(ev){
          scope.calc.push({target : "", eq : ""});
          rebuild();
        });
      }
    }
  }
  rebuild();

  return div;
});

sync.render("ui_maxbox", function(obj, app, scope) {
  scope = scope || {viewOnly : app.attr("viewOnly") == "true", lookup : app.attr("lookup")};
  var div = $("<div>");

  if (scope.title) {
    var title = $("<div>").appendTo(div);
    title.addClass("flexmiddle");
    title.append("<b>"+scope.title+"</b>");
  }
  var data = obj.data;
  var value = sync.traverse(obj.data, scope.lookup);

  var counter = $("<div>").appendTo(div);
  counter.addClass("middle outline smooth spadding");
  counter.css("background-color", "white");
  counter.append("<div><b>" + value.name +"</b></div>");

  var counterDiv = $("<div>").appendTo(counter);
  counterDiv.addClass("flexaround");

  var curDiv = $("<div>").appendTo(counterDiv);
  curDiv.append("<div style='font-size: 0.8em'>Cur</div>");
  var input = genInput({
    parent : curDiv,
    min : value.min || 0,
    value : value,
    disabled : scope.viewOnly,
    style : {"width" : "30px", "text-align" : "center"}
  });
  input.change(function(){
    value.max = Math.max(Number($(this).val()), value.max);
    sync.val(value, Number($(this).val()));
    obj.sync("updateAsset");
  });

  var maxDiv = $("<div>").appendTo(counterDiv);
  maxDiv.append("<div style='font-size: 0.8em'>Max</div>");
  var maxInput = genInput({
    parent : maxDiv,
    min : 0,
    value : value.max,
    disabled : scope.viewOnly,
    style : {"width" : "30px", "text-align" : "center"}
  });
  maxInput.change(function(){
    value.max = Number($(this).val());
    obj.sync("updateAsset");
  });

  return div;
});

sync.render("ui_modifiers", function(obj, app, scope) {
  scope = scope || {
    viewOnly : (app.attr("viewOnly") == "true"),
    modsOnly : (app.attr("modsOnly") == "true"),
    total : (app.attr("total")),
    text : app.attr("text") || "",
    modText : app.attr("modText") || ""
  };
  scope.lookup = scope.lookup || app.attr("lookup");

  var value = sync.traverse(obj.data, scope.lookup);
  var content = $("<div>");
  content.addClass("flexcolumn subtitle spadding smooth");
  content.css("background-color", "white");

  var title = $("<div>").appendTo(content);
  title.addClass("fit-x flexmiddle");

  if (scope.text) {
    title.append("<b>"+scope.text+"</b>");
  }
  else {
    title.append("<b>"+value.name+"</b>");
  }
  if (!scope.modsOnly) {
    var edit = genInput({
      parent : content,
      value : sync.rawVal(value),
      viewOnly : scope.viewOnly
    }).addClass("flexmiddle");
    edit.addClass("flex");
    edit.change(function(){
      sync.rawVal(value, parseInt($(this).val()));
      obj.sync("updateAsset");
    });
  }

  if (!scope.viewOnly) {
    var plus = genIcon("plus").appendTo(title);
    plus.addClass("create");
    plus.click(function(){
      ui_prompt({
        target : $(this),
        inputs : {"Modifier Name" : "", "Value" : ""},
        click : function(ev, inputs, options) {
          if (inputs["Modifier Name"].val().valid()) {
            sync.modifier(value, inputs["Modifier Name"].val(), parseInt(inputs["Value"].val()));
            obj.sync("updateAsset");
          }
        }
      });
    });
  }

  if (scope.total !== "") {
    var total = 0;
    if (scope.modsOnly) {
      total += sync.modified(value, 0);
    }
    if (scope.total) {
      total += sync.eval(scope.total, {c : duplicate(obj.data)});
    }
  }

  if (scope.modText) {
    content.append("<div class='fit-x flexmiddle subtitle'><text>"+scope.modText+"</text></div>");
  }

  var mods = $("<div>").appendTo(content);
  for (var i in value.modifiers) {
    var modRow = $("<div>").appendTo(mods);
    modRow.addClass("flexrow fit-x subtitle");

    var label = $("<b>").appendTo(modRow);
    label.addClass("lrpadding flexmiddle");
    label.text(i);
    label.css("min-width", "60px");

    var val = genInput({
      classes : "line",
      parent : modRow,
      value : value.modifiers[i],
      placeholder : "Enter modifier amount (Macro)",
      index : i,
      disabled : scope.viewOnly
    }).addClass("flex");
    val.change(function(){
      sync.modifier(value, $(this).attr("index"), $(this).val());
      obj.update();
    });
    var remove = genIcon("remove").appendTo(modRow);
    remove.addClass("destroy flexmiddle");
    remove.attr("index", i);
    remove.click(function(){
      sync.removeModifier(value, $(this).attr("index"));
      obj.update();
    });
  }
  if (scope.total !== "") {
    var bold = $("<b>").appendTo(content);
    bold.addClass("fit-x flexmiddle bold");
    bold.append(total);
  }

  return content;
});

/*sync.render("ui_processUI", function(obj, app, scope) {
  if (!scope.context) {
    scope.context = scope.context || sync.defaultContext();
    if (obj.data) {
      scope.context[obj.data._t] = duplicate(obj.data);
    }
  }
  function build(sData, lastLookup) {
    var newScope = scope;
    var section = $("<div>");
    var returnSection;
    if (scope.markup) {
      section.attr("id", (scope.markup || "")+lastLookup);
      if (sData.display && (!sData.classes || sData.classes.match("flexcontainer"))) {
        if (!sData.style || sData.style.position != "absolute") {
          section.css("background", "rgba(235,235,228,0.05)");
          section.css("padding-top", "12px");
          section.css("padding-left", "4px");
          section.css("padding-right", "4px");
          section.css("padding-bottom", "4px");
          section.css("border", "2px dashed rgba(55,55,55,0.2)");

          returnSection = section;

          if (sData.classes) {
            section.addClass(sData.classes);
          }

          var section = $("<div>").appendTo(section);
        }
      }
    }
    for (var cssIndex in sData.style) {
      section.css(cssIndex, sData.style[cssIndex]);
    }

    if (sData.classes) {
      section.addClass(sData.classes); //
    }
    if (sData.hint) {
      section.attr("title", sync.eval(sData.hint, scope.context));
    }
    if (sData.title) {
      section.attr("title", sData.title);
    }
    if (sData.tabs) {
      var tabList = $("<div>").appendTo(section);
      tabList.addClass(sData.listClass || "flexrow");

      var content = $("<div>").appendTo(section);
      content.addClass(sData.contentClass || "flex flexcolumn");

      for (var k in sData.tabs) {
        var tabData = sData.tabs[k];
        if (tabData && !tabData.cond || sync.eval(tabData.cond, scope.context)) {
          var tab = $("<div>").appendTo(tabList);
          tab.attr((sData.tabKey || "tabKey"), k);
          tab.text(k);
          tab.click(function(){
            tabList.children().removeClass(sData.selectClass || "highlight alttext subtitle spadding smooth outline").addClass(sData.tabClass || "subtitle button spadding smooth");
            $(this).removeClass(sData.tabClass || "subtitle button spadding smooth").addClass(sData.selectClass || "highlight alttext subtitle spadding smooth outline");
            app.attr((sData.tabKey || "tabKey"), $(this).attr((sData.tabKey || "tabKey")));
            content.empty();
            build(sData.tabs[$(this).attr((sData.tabKey || "tabKey"))], lastLookup+"-tab-"+$(this).attr("tabKey")).appendTo(content);
          });
          if (k == (app.attr((sData.tabKey || "tabKey")) || sData.tab)) {
            tab.addClass(sData.selectClass || "highlight alttext subtitle spadding smooth outline");
            tab.click();
          }
          else {
            tab.addClass(sData.tabClass || "subtitle button spadding smooth");
          }
        }
      }
    }
    else {
      if (sData.scrl) {
        section.attr("_lastScrollTop", app.attr("_scrltop_"+sData.scrl));
        section.attr("_lastScrollLeft", app.attr("_scrlleft_"+sData.scrl));
        section.scroll(function(){
          app.attr("_scrltop_"+sData.scrl, $(this).scrollTop());
          app.attr("_scrlleft_"+sData.scrl, $(this).scrollLeft());
        });
      }

      if (sData.datalist) {
        var value = sync.traverse(obj.data, sData.target);
        var applyKey = sData.dataKey || "%dataKey%";
        var applyTarget = sData.dataTarget || "%dataTarget%";
        var newScope = duplicate(scope);
        newScope.viewOnly = scope.viewOnly;
        delete newScope.markup;
        merge(newScope, sData.scope);
        for (var key in value) {
          var dat = value[key];
          if (sData.datalist) {
            newScope.name = key;
            newScope.display = JSON.stringify(sData.datalist);
            newScope.display = newScope.display.replace(new RegExp(applyKey, 'g'), key);
            newScope.display = newScope.display.replace(new RegExp(applyTarget, 'g'), sData.target + "." + key);
            newScope.display = JSON.parse(newScope.display);

            if ((!sData.list || util.contains(sData.list, key)) && (!sData.ignore || !util.contains(sData.ignore, key))) {
              sync.render("ui_processUI")(obj, app, newScope).appendTo(section);
            }
          }
        }
      }
      if (sData.click) {
        if (sData.click instanceof Object) {
          section.contextmenu(function(ev){
            if (sData.click.action) {
              var refObj = obj;
              if (!obj.data._t && getPlayerCharacter(getCookie("UserID")) && getPlayerCharacter(getCookie("UserID")).data) {
                refObj = getPlayerCharacter(getCookie("UserID"));
              }
              if (refObj.data._t == "c" || refObj.data._t == "i") {
                var actionObj = sync.dummyObj();
                actionObj.data = {context : {c : refObj.id()}, options : sData.click.options, action : sData.click.action, actionData : duplicate(game.templates.actions.c[sData.click.action] || {}),  msg : sData.click.msg};

                if (refObj.data._a) {
                  actionObj.actionData = duplicate(obj.data._a[sData.click.action]);
                }

                game.locals["actionsList"] = game.locals["actionsList"] || {};
                game.locals["actionsList"][app.attr("id")+"-"+obj.data._t] = actionObj;

                var actionApp = sync.newApp("ui_renderAction");
                actionObj.addApp(actionApp);

                var pop = ui_popOut({
                  target : $(this),
                  minimize : true,
                  prompt : true,
                  dragThickness : "0.5em",
                  title : "Action"
                }, actionApp);
                pop.resizable();
              }
            }
            ev.stopPropagation();
            ev.preventDefault();
            return false;
          });
          section.click(function(ev){
            if (sData.click.calc) {
              // apply this effect
              var ctx = sync.defaultContext();
              ctx[obj.data._t] = duplicate(obj.data);
              var changed = false;
              for (var i in sData.click.calc) {
                var calcData = sData.click.calc[i];
                if (!calcData.cond || sync.eval(calcData.cond, ctx)) {
                  var result = sync.eval(calcData.eq, ctx);
                  if (calcData.target.substring(0, Math.min(calcData.target.length, 4)) == "tags") {
                    // apply/remove tag effects
                    if (result) {
                      result = 1;
                      var val = calcData.target.split(".");
                      if (val.length > 0 && val[1]) {
                        val = val[1];
                        // apply tag effects
                        if (game.templates.tags[val]) {
                          var effects = game.templates.tags[val].calc;
                          // resolve effect
                          for (var eid in effects) {
                            if (effects[eid].cond == null || sync.eval(effects[eid].cond, ctx)) {
                              sync.traverse(obj.data, effects[eid].target, sync.eval(effects[eid].eq, ctx));
                              changed = true;
                            }
                          }
                        }
                      }
                    }
                    else {
                      // remove the tag
                      result = 0;
                      var val = calcData.target.split(".");
                      if (val.length > 0 && val[1]) {
                        val = val[1];
                        // apply tag effects
                        if (game.templates.tags[val]) {
                          var effects = game.templates.tags[val].calc;
                          // resolve effect
                          for (var eid in effects) {
                            if (effects[eid].target.match(".modifiers")) {
                              sync.traverse(obj.data, effects[eid].target, "");
                              changed = true;
                            }
                          }
                        }
                      }
                    }
                  }
                  else {
                    var target = sync.traverse(obj.data, calcData.target);
                    if (target instanceof Object) {
                      sync.rawVal(target, result);
                    }
                    else {
                      sync.traverse(obj.data, calcData.target, result);
                    }
                    changed = true;
                  }
                }
              }
              if (changed) {
                obj.sync("updateAsset");
              }
            }
            else if (sData.click.action) {
              var refObj = obj;
              if (!obj.data._t && getPlayerCharacter(getCookie("UserID")) && getPlayerCharacter(getCookie("UserID")).data) {
                refObj = getPlayerCharacter(getCookie("UserID"));
              }

              if (refObj.data._t == "c" || refObj.data._t == "i") {
                var ctx = sync.defaultContext();
                ctx[refObj.data._t] = duplicate(refObj.data);
                var actions = duplicate(game.templates.actions[refObj.data._t]);

                for (var actKey in refObj.data._a) {
                  actions[actKey] = duplicate(refObj.data._a[actKey]);
                }
                var actionData = actions[sData.click.action];
                var addStr = "";
                var str = actionData.eventData.data;
                var final = "";
                var vMatch = variableRegex.exec(str);
                // save localVaribles
                var cmps = /([\/><\!\~\=])/;

                var varTable = duplicate(actionData.eventData.var) || {};

                ctx.eval = ctx.eval || {};
                for (var key in sData.click.options) {
                  varTable[key] = sync.eval(sData.click.options[key], ctx);
                  ctx.eval[key] = varTable[key];
                }

                var pullTable = duplicate(actionData.pull);
                var targets = util.getTargets();
                for (var k in targets) {
                  var tg = getEnt(targets[k]);
                  if (tg && tg.data) {
                    for (var key in pullTable) {
                      var contxt = {c : duplicate(tg.data)};
                      varTable[key] = sync.eval(pullTable[key], contxt);
                      ctx.eval[key] = varTable[key];
                    }
                  }
                }

                var context = sync.context(actionData.eventData.data, ctx);
                for (var key in context.context) {
                  if (varTable[key]) {
                    context.context[key] = duplicate(varTable[key]);
                  }
                }

                while (vMatch) {
                  if (vMatch[2] && vMatch[4] && vMatch[4][0] == "=") {
                    var stack = [0];
                    for (var i=1; i<vMatch[4].length; i++) {
                      if (vMatch[4][i] == "=" && !((vMatch[4][i-1] || "").match(cmps) || (vMatch[4][i+1] || "").match(cmps))) {
                        stack.push(i);
                      }
                      else if (vMatch[4][i] == ";") {
                        stack.pop();
                        if (stack.length == 0) {
                          stack = i+1; // record the successful index
                          break;
                        }
                      }
                    }
                  }
                  if (!(stack instanceof Object)) {
                    var newStr = vMatch[1]+(vMatch[2] || "");
                    if (context.context[vMatch[2]]) {
                      newStr += "="+sync.val(context.context[vMatch[2]])+";"
                    }
                    else {
                      newStr += vMatch[4].substring(0, stack);
                    }
                    final += newStr;
                    vMatch[0] = (vMatch[1] || "") +(vMatch[2] || "") + (vMatch[3] || "") + vMatch[4].substring(0, stack);
                  }
                  str = str.replace(vMatch[0], "");
                  vMatch = variableRegex.exec(str);
                }
                for (var i in context.context) {
                  if (!final.match(i)) {
                    final += "$"+i+"="+sync.val(context.context[i])+";";
                  }
                }
                final += context.str;
                for (var key in varTable) {
                  varTable[key] = sync.eval(varTable[key], ctx);
                }
                var icon = sync.rawVal(refObj.data.info.img);
                var msg;
                if (sData.click.msg) {
                  msg = sync.eval(sData.click.msg, ctx);
                }
                else {
                  if (actionData.flavors) {
                    var choices = [];
                    for (var i in actionData.flavors) {
                      if (!actionData.flavors[i].cond || sync.eval(actionData.flavors[i].cond, ctx)) {
                        choices.push(duplicate(actionData.flavors[i]));
                      }
                    }
                    var choice = Math.floor(Math.random() * choices.length);
                    icon = actionData.flavors[choice].icon || icon;
                    msg = sync.eval(actionData.flavors[choice].msg, ctx);
                  }
                  else {
                    icon = actionData.eventData.icon || icon;
                    msg = sync.eval(actionData.eventData.msg, ctx);
                  }
                }
                if (sData.click.icon) {
                  icon = sData.click.icon;
                }

                var eventData = {
                  person : sync.rawVal(ctx.c.info.name),
                  icon : icon,
                  flavor : msg,
                  eID : obj.id(),
                  eventData : sync.executeQuery(final, ctx),
                };
                eventData.eventData.ui = actionData.eventData.ui;
                eventData.eventData.var = varTable;

                if (actionData.effects) {
                  var effectData = {};
                  ctx["pool"] = eventData.data.pool;
                  for (var k in targets) {
                    var tg = getEnt(targets[k]);
                    if (tg && tg.data) {
                      effectData[targets[k]] = [];
                      for (var i in actionData.effects) {
                        var calcData = duplicate(actionData.effects[i]);
                        if (calcData.cond == null || sync.eval(calcData.cond, ctx)) {
                          delete calcData.cond;
                          calcData.eq = sync.eval(calcData.eq, ctx);
                          effectData[targets[k]].push(calcData);
                        }
                      }
                    }
                  }
                  eventData.effects = effectData;
                }

                if (sData.click.private) {
                  var priv = {};
                  priv[getCookie("UserID")] = true;
                  eventData.p = priv;
                }
                runCommand("chatEvent", eventData);
                setTimeout(function(){
                  for (var i in actionData.followup) {
                    if (actionData.followup[i].cond == null || sync.eval(actionData.followup[i].cond, ctx)) {
                      var eventData = {
                        person : sync.rawVal(ctx.c.info.name),
                        eID : obj.id(),
                        icon : actionData.followup[i].icon,
                        flavor : sync.eval(actionData.followup[i].msg, ctx),
                        eventData : sync.executeQuery(actionData.followup[i].data, ctx),
                      };
                      eventData.eventData.ui = actionData.followup[i].ui;
                      eventData.eventData.var = varTable;
                      if (sData.click.private) {
                        var priv = {};
                        priv[getCookie("UserID")] = true;
                        eventData.p = priv;
                      }
                      runCommand("chatEvent", eventData);
                    }
                  }
                }, 100);
              }
              ev.stopPropagation();
              ev.preventDefault();
            }
            else if ((obj.data._t == "c") && hasSecurity(getCookie("UserID"), "Rights", obj.data)) {
              if (sData.click.create) {
                if (sData.click.create == "skills" || sData.click.create == "talents" || sData.click.create == "specials") {
                  ui_prompt({
                    target : $(this),
                    inputs : {
                      "Name" : "",
                    },
                    click : function(ev, inputs) {
                      if (inputs["Name"].val()) {
                        var lookupData = sync.traverse(obj.data, sData.click.create);
                        lookupData[inputs["Name"].val().toLowerCase().replace(/ /g,"_")] = sync.newValue(inputs["Name"].val());
                        obj.sync("updateAsset");
                      }
                    }
                  });
                }
                else if (sData.click.create == "inventory") {
                  obj.data.inventory.push(duplicate(game.templates.item));
                  obj.update();
                }
                else if (sData.click.create == "spellbook") {
                  obj.data.spellbook.push(duplicate(game.templates.item));
                  obj.update();
                }
              }
              else if (sData.click.edit && sData.target) {
                var lookupValue = sync.traverse(obj.data, sData.target);
                if (sData.click.edit == "inventory" || lookupValue._t == "i") {
                  var frame = $("<div>");
                  frame.addClass("flex flexcolumn");

                  game.locals["editItem"] = game.locals["editItem"] || sync.obj("editItem");
                  game.locals["editItem"].data = duplicate(lookupValue);

                  merge(game.locals["editItem"].data, duplicate(game.templates.item));

                  var newApp = sync.newApp("ui_renderItem").appendTo(frame);
                  newApp.attr("char-ref", obj.id());
                  newApp.attr("viewOnly", scope.viewOnly);
                  if (lookupValue._s && !hasSecurity(getCookie("UserID"), "Owner", obj.data) && !hasSecurity(getCookie("UserID"), "Rights", lookupValue))  {
                    newApp.attr("viewOnly", true);
                  }
                  newApp.attr("local", "true");

                  game.locals["editItem"].addApp(newApp);

                  if (!scope.viewOnly) {
                    var confirm = $("<button>").appendTo(frame);
                    confirm.addClass("fit-x");
                    confirm.append("Confirm");
                    confirm.click(function(){
                      sync.traverse(obj.data, sData.target, duplicate(game.locals["editItem"].data));
                      obj.sync("updateAsset");
                      layout.coverlay("edit-item");
                    });
                  }
                  var pop = ui_popOut({
                    id : "edit-item",
                    target : app,
                    maximize : true,
                    minimize : true,
                    style : {"width" : assetTypes["i"].width, "height" : assetTypes["i"].height}
                  }, frame);
                  pop.resizable();
                }
                else if (sData.click.edit == "spellbook") {
                  var frame = $("<div>");
                  frame.addClass("flex");

                  game.locals["editSpell"] = game.locals["editSpell"] || sync.obj("editSpell");
                  game.locals["editSpell"].data = duplicate(lookupValue);

                  merge(game.locals["editSpell"].data, duplicate(game.templates.item));

                  var newApp = sync.newApp("ui_renderItem").appendTo(frame);
                  newApp.attr("spell", "true");
                  game.locals["editSpell"].addApp(newApp);

                  if (!scope.viewOnly) {
                    var confirm = $("<button>").appendTo(frame);
                    confirm.addClass("fit-x");
                    confirm.append("Confirm");
                    confirm.click(function(){
                      sync.traverse(obj.data, sData.target, duplicate(game.locals["editSpell"].data));
                      obj.sync("updateAsset");
                      layout.coverlay("edit-spell");
                    });
                  }
                  var pop = ui_popOut({
                    target : app,
                    maximize : true,
                    minimize : true,
                    style : {"width" : assetTypes["i"].width, "height" : assetTypes["i"].height}
                  }, frame);
                  pop.resizable();
                }
                else if (sData.click.edit == "talents" || sData.click.edit == "specials") {
                  var frame = $("<div>");
                  frame.addClass("flexcolumn flex");

                  var talentData = duplicate(lookupValue);

                  game.locals["editTalent"] = game.locals["editTalent"] || sync.obj("editTalent");
                  game.locals["editTalent"].data = duplicate(game.templates.page);
                  game.locals["editTalent"].data._t = "t";

                  game.locals["editTalent"].data.info.name = sync.newValue("Name", duplicate(talentData.name));
                  game.locals["editTalent"].data.info.img = sync.newValue("Img", null);
                  game.locals["editTalent"].data.info.notes = sync.newValue("Notes", duplicate(talentData.current));

                  var newApp = sync.newApp("ui_editPage").appendTo(frame);
                  newApp.attr("autosave", true);
                  newApp.attr("entry", true);
                  game.locals["editTalent"].addApp(newApp);

                  var confirm = $("<button>").appendTo(frame);
                  confirm.addClass("fit-x");
                  confirm.append("Confirm");
                  confirm.click(function(){
                    if (sync.rawVal(game.locals["editTalent"].data.info.name)) {
                      sync.traverse(obj.data, sData.target+".name", duplicate(game.locals["editTalent"].data.info.name.current));
                      sync.traverse(obj.data, sData.target+".current", duplicate(game.locals["editTalent"].data.info.notes.current));
                      obj.sync("updateAsset");
                      layout.coverlay("edit-talent");
                    }
                    else {
                      sendAlert({text : "Name required"});
                    }
                  });

                  var pop = ui_popOut({
                    target : app,
                    id : "edit-talent",
                    title : "Editing",
                    style : {width : "400px", height : "400px"}
                  }, frame);
                  pop.resizable();
                }
              }
              else if (sData.click.view && sData.target) {
                if (sData.click.view == "talents" || sData.click.view == "specials") {
                  var frame = $("<div>");
                  frame.addClass("flexcolumn flex");

                  var talentData = duplicate(sync.traverse(obj.data, sData.target));

                  var viewTalent = sync.obj("viewTalent");
                  viewTalent.data = duplicate(game.templates.page);
                  viewTalent.data._t = "t";
                  sync.rawVal(viewTalent.data.info.name, duplicate(talentData.name));
                  sync.rawVal(viewTalent.data.info.notes, duplicate(talentData.current));

                  var newApp = sync.newApp("ui_renderPage").appendTo(frame);
                  newApp.attr("viewOnly", true);
                  viewTalent.addApp(newApp);

                  var pop = ui_popOut({
                    target : app,
                    id : "view-talent",
                    title : sync.rawVal(talentData.name),
                    style : {width : "400px", height : "400px"}
                  }, frame);
                  pop.resizable();
                }
              }
              else if (sData.click.delete && (sData.target || sData.click.target) && hasSecurity(getCookie("UserID"), "Rights", obj.data)) {
                sync.traverse(obj.data, (sData.target || sData.click.target), "");
                obj.sync("updateAsset");
              }
            }
          });
        }
        else {
          section.click(function(ev){
            var newApp = sync.newApp(sData.click);
            obj.addApp(newApp);

            var pop = ui_popOut({
              target : $(this),
              minimize : true,
              dragThickness : "0.5em",
              style : {"min-width" : "100px"},
            }, newApp);
            pop.resizable();
            ev.stopPropagation();
            ev.preventDefault();
          });
        }
      }
      if (sData.diceable && sData.diceable.data) {
        section.click(function(ev){
          var context = sync.defaultContext();
          context[obj.data._t] = duplicate(obj.data);
          if (sData.target) {
            context["target"] = duplicate(sync.traverse(obj.data, sData.target));
          }
          var eventData = duplicate(sData.diceable);
          if (!sData.noRoll) {
            eventData.data = sync.eval(eventData.data, context);
          }
          _diceable(ev, $(this), eventData, context);

          ev.stopPropagation();
          ev.preventDefault();
        });
      }
      if (sData.target && (!sData.click || (!sData.click.edit && !sData.click.view))) {
        newScope = duplicate(scope);
        newScope.lookup = (scope.lookup || "") + sData.target;
        newScope.viewOnly = scope.viewOnly;
        merge(newScope, sData.scope);
        if (sData.ui) {
          newScope.target = sync.traverse(obj.data, newScope.lookup);
          if (sData.passContext) {
            newScope.context = duplicate(scope.context);
          }
          var ui = sync.render(sData.ui)(obj, app, newScope);
          if (ui) {
            ui.appendTo(section);
          }
        }
        else if (!sData.datalist) {
          var value = sync.traverse(obj.data, newScope.lookup);
          if (value === false) { // field was not found
            // obviously it belongs here
             value = sync.traverse(obj.data, newScope.lookup, sync.newValue());
          }
          if (value instanceof Object) {
            if ((sData.edit || value.current != null || value.name != null)) {
              var val = $("<text>");
              if (sData.edit) {
                if (value.name || sData.name) {
                  var name = $("<b>").appendTo(section);
                  if ((sData.name || sData.name === "")) {
                    if (sData.link) {
                      name = genIcon(sData.link, sync.eval((sData.name === "")?("''"):(sData.name), scope.context)).appendTo(section);
                    }
                    else if (sData.icon) {
                      name.addClass("flexmiddle");
                      name.text(sync.eval((sData.name === "")?("''"):(sData.name), scope.context));
                      name.append(genIcon({icon : sData.icon, raw : true}));
                    }
                    else {
                      name.text(sync.eval((sData.name === "")?("''"):(sData.name), scope.context));
                    }
                  }
                  else {
                    name.text(value.name + " ");
                  }
                  name.css("white-space", "nowrap");
                }
                var edit = {
                  parent : section,
                  value : value,
                  obj : obj,
                  cmd : sData.cmd || "updateAsset",
                  disabled : scope.viewOnly,
                  style : {"width" : "100%"}
                };
                if (sData.edit instanceof Object) {
                  merge(edit, duplicate(sData.edit), true);
                }
                sData.edit.disabled = scope.viewOnly;
                var input = genInput(edit);
              }
              else {
                var bool = false;
                if (value.min != null && value.min) {
                  val.text(val.text() + value.min + "/");
                  bool = true;
                }
                if (sync.val(value) || sync.val(value) == "0") {
                  val.text(val.text() + sync.val(value));
                  bool = true;
                }
                if (value.max != null) {
                  val.text(val.text() + "/" + value.max);
                  bool = true;
                }
                if (bool) {
                  if (value.name || (sData.name || sData.name === "")) {
                    var name = $("<b>").appendTo(section);

                    if ((sData.name || sData.name === "")) {
                      if (sData.link) {
                        name = genIcon(sData.link, sync.eval((sData.name === "")?("''"):(sData.name), scope.context)).appendTo(section);
                      }
                      else if (sData.icon) {
                        name.addClass("flexmiddle");
                        name.text(sync.eval((sData.name === "")?("''"):(sData.name), scope.context));
                        name.append(genIcon({icon : sData.icon, raw : true}));
                      }
                      else {
                        name.text(sync.eval((sData.name === "")?("''"):(sData.name), scope.context));
                      }
                    }
                    else {
                      name.text(value.name + " ");
                    }
                    name.css("white-space", "nowrap");
                  }
                  val.appendTo(section);
                }
              }
            }
            else {
              var newScope = duplicate(scope);
              newScope.viewOnly = scope.viewOnly;
              merge(newScope, sData.scope);
              for (var key in value) {
                var dat = value[key];
                if (sData.applyUI) {
                  newScope.name = key;
                  if (sData.applyUI instanceof Object) {
                    newScope.display = JSON.stringify(sData.applyUI.display);
                    newScope.display = newScope.display.replace(new RegExp("@applyKey", 'g'), key);
                    newScope.display = newScope.display.replace(new RegExp("@applyTarget", 'g'), sData.target + "." + key);
                    newScope.display = JSON.parse(newScope.display);
                    if (!sData.applyUI.list || util.contains(sData.applyUI.list, key)) {
                      if (sData.applyUI.cond == null || sync.eval(sData.applyUI.cond, scope.context)) {
                        sync.render("ui_processUI")(obj, app, newScope).appendTo(section);
                      }
                    }
                  }
                  else {
                    if (sData.applyUI.cond == null || sync.eval(sData.applyUI.cond, scope.context)) {
                      var ui = sync.render(sData.applyUI)(obj, app, newScope);
                      if (ui) {
                        ui.appendTo(section);
                      }
                    }
                  }
                }
                else {
                  var newSection = $("<div>").appendTo(section);
                  if (sData.scope && sData.scope.classes) {
                    newSection.addClass(sData.scope.classes);
                  }
                  var val = $("<text>");
                  var bool = false;
                  if (dat.min != null && dat.min) {
                    val.text(val.text() + dat.min + "/");
                    bool = true;
                  }
                  if (sync.val(dat) || sync.val(dat) == "0") {
                    val.text(val.text() + sync.val(dat));
                    bool = true;
                  }
                  if (dat.max != null) {
                    val.text(val.text() + "/" + dat.max);
                    bool = true;
                  }
                  if (bool) {
                    if (dat.name || (sData.name || sData.name === "")) {
                      var name = $("<b>").appendTo(newSection);

                      if ((sData.name || sData.name === "")) {
                        if (sData.link) {
                          name = genIcon(sData.link, sync.eval((sData.name === "")?("''"):(sData.name), scope.context)).appendTo(section);
                        }
                        else if (sData.icon) {
                          name.addClass("flexmiddle");
                          name.text(sync.eval((sData.name === "")?("''"):(sData.name), scope.context));
                          name.append(genIcon({icon : sData.icon, raw : true}));
                        }
                        else {
                          name.text(sync.eval((sData.name === "")?("''"):(sData.name), scope.context));
                        }
                      }
                      else if (sData.scope && sData.scope.key) {
                        name.text(key+ " ");
                      }
                      else {
                        name.text(dat.name + " ");
                      }
                    }
                    val.appendTo(newSection);
                  }
                }
              }
            }
          }
          else {
            var val = $("<text>").appendTo(section);
            val.text(sData.name);
          }
        }
      }
      else if (!sData.datalist) {
        if (sData.name || sData.link || sData.icon) {
          var name = $("<text>").appendTo(section);
          if (sData.link) {
            name = genIcon(sData.link, sync.eval((sData.name === "")?("''"):(sData.name), scope.context)).appendTo(section);
          }
          else if (sData.icon) {
            name.text(sync.eval((sData.name === "")?("''"):(sData.name), scope.context));
            name.append(genIcon({icon : sData.icon, raw : true}));
          }
          else {
            name.text(sync.eval((sData.name === "")?("''"):(sData.name), scope.context));
          }
        }
        if (sData.ui) {
          var newScope = duplicate(sData.scope || {});
          if (newScope && newScope.viewOnly == null) {
            newScope.viewOnly = scope.viewOnly;
          }
          if (sData.passContext) {
            newScope.context = duplicate(scope.context);
          }
          sync.render(sData.ui)(obj, app, newScope).appendTo(section);
        }
        if (sData.value) {
          var value = $("<text>").appendTo(section);
          value.text(sync.eval(sData.value, scope.context));
        }
      }
      for (var j in sData.display) {
        var limit = 1;
        if (!sData.display[j].cond || sync.eval(sData.display[j].cond, scope.context)) {
          if (sData.display[j].count) { // repeated entries, mostly for dice rolling
            limit = sync.eval(sData.display[j].count, scope.context);
          }
          for (var rpCount=0; rpCount<limit; rpCount++) {
            build(sData.display[j], lastLookup+"-display-"+j).appendTo(section);
          }
        }
      }
      for (var k in sData.apps) {
        var newScope = duplicate(sData.scope || {});
        newScope.viewOnly = scope.viewOnly;
        sync.render(sData.apps[k])(obj, app, newScope).appendTo(section);
      }
    }
    return returnSection || section;
  }

  var buildResult;
  if (scope.display instanceof Object) {
    buildResult = build(scope.display, app.attr("id")+"_0");
  }
  else {
    var parsed = (scope.display || "").replace(new RegExp("href=", 'g'), "linksrc=");
    buildResult = $("<div>").addClass("fit-xy flexcolumn").append($.parseHTML(parsed));
    // parse the result to find stuff

    buildResult.find("loop").each(function(){
      var build = $(this).html();

      $(this).empty();

      var count = $(this).attr("count");
      if (isNaN(count)) {
        count = sync.eval(count, scope.context);
      }

      for (var i=0; i<count; i++) {
        var text = build.replace(new RegExp("%"+($(this).attr("replace") || "index")+"%", 'g'), i);
        text = text.replace(new RegExp("%"+("count")+"%", 'g'), count);
        $(this).append(text);
      }
    });

    buildResult.find("list").each(function(){
      var build = $(this).html();

      $(this).empty();
      if ($(this).attr("target")) {
        var value = sync.traverse(obj.data, $(this).attr("target"));
        if (value === false) {
          value = sync.traverse(obj.data, $(this).attr("target"), {});
        }

        var ignore = {};
        if ($(this).attr("ignore")) {
          var newIgnore = $(this).attr("ignore").split(",");
          for (var key in newIgnore) {
            ignore[newIgnore[key].trim()] = true;
          }
        }

        var list;
        if ($(this).attr("keys")) {
          value = $(this).attr("keys").split(",");
        }
        else {
          list = value;
        }

        for (var key in list) {
          if (!ignore[key]) {
            var text = build.replace(new RegExp("%"+($(this).attr("replace") || "index")+"%", 'g'), key);
            text = text.replace(new RegExp("%"+($(this).attr("replace") || "path")+"%", 'g'), obj.data._t + "." + $(this).attr("target") + "." + key);
            $(this).append(text);
          }
        }
      }
    });

    buildResult.find("bank").each(function(){
      var build = $(this).html();

      $(this).empty();
      if ($(this).attr("target")) {
        var value = sync.traverse(obj.data, $(this).attr("target"));
        if (value === false) {
          value = sync.traverse(obj.data, $(this).attr("target"), {});
        }

        var ignore = {};
        if ($(this).attr("ignore")) {
          var newIgnore = $(this).attr("ignore").split(",");
          for (var key in newIgnore) {
            ignore[newIgnore[key]] = true;
          }
        }

        var list;
        if ($(this).attr("keys")) {
          value = $(this).attr("keys").split(",");
        }
        else {
          list = value;
        }

        for (var key in list) {
          if (!ignore[key]) {
            var text = build.replace(new RegExp("%"+($(this).attr("replace") || "index")+"%", 'g'), key);
            text = text.replace(new RegExp("%"+($(this).attr("replace") || "path")+"%", 'g'), obj.data._t + "." + $(this).attr("target") + "." + key);
            $(this).append(text);
          }
        }
      }
    });

    buildResult.find("popout").each(function(){
      var parsed = $(this).html();

      var runReplace = /traverse{([^}]*)}/i;
      var replaced = runReplace.exec(parsed);
      var loop = 0;
      while (replaced) {
        var macro = replaced[1];
        parsed = parsed.replace(replaced[0], "traverse[{["+macro+"]}]") ;

        replaced = runReplace.exec(parsed);
        loop++;
        if (loop > 10000) {
          break;
        }
      }

      runReplace = /eval{([^}]*)}/i;
      replaced = runReplace.exec(parsed);
      loop = 0;
      while (replaced) {
        var macro = replaced[1];
        parsed = parsed.replace(replaced[0], "eval[{["+macro+"]}]");

        replaced = runReplace.exec(parsed);
        loop++;
        if (loop > 10000) {
          break;
        }
      }

      $(this).html(parsed);
      $(this).hide();
    });

    buildResult.find("prompt").each(function(){
      var parsed = $(this).html();

      var runReplace = /traverse{([^}]*)}/i;
      var replaced = runReplace.exec(parsed);
      var loop = 0;
      while (replaced) {
        var macro = replaced[1];
        parsed = parsed.replace(replaced[0], "traverse[{["+macro+"]}]") ;

        replaced = runReplace.exec(parsed);
        loop++;
        if (loop > 10000) {
          break;
        }
      }

      runReplace = /eval{([^}]*)}/i;
      replaced = runReplace.exec(parsed);
      loop = 0;
      while (replaced) {
        var macro = replaced[1];
        parsed = parsed.replace(replaced[0], "eval[{["+macro+"]}]");

        replaced = runReplace.exec(parsed);
        loop++;
        if (loop > 10000) {
          break;
        }
      }

      $(this).html(parsed);
      $(this).hide();
    });

    buildResult.find("display").each(function(){
      var parsed = $(this).html();

      var runReplace = /traverse{([^}]*)}/i;
      var replaced = runReplace.exec(parsed);
      var loop = 0;
      while (replaced) {
        var macro = replaced[1];
        parsed = parsed.replace(replaced[0], "traverse[{["+macro+"]}]") ;

        replaced = runReplace.exec(parsed);
        loop++;
        if (loop > 10000) {
          break;
        }
      }

      runReplace = /eval{([^}]*)}/i;
      replaced = runReplace.exec(parsed);
      loop = 0;
      while (replaced) {
        var macro = replaced[1];
        parsed = parsed.replace(replaced[0], "eval[{["+macro+"]}]");

        replaced = runReplace.exec(parsed);
        loop++;
        if (loop > 10000) {
          break;
        }
      }

      $(this).html(parsed);
    });

    parsed = buildResult.html();

    var runReplace = /traverse{([^}]*)}/i;
    var replaced = parsed.match(runReplace);
    var loop = 0;
    while (replaced) {
      var macro = replaced[1];
      var retVal = sync.traverse(obj.data, macro);
      if (retVal === false) {
        retVal = "";
      }
      parsed = parsed.replace(replaced[0], retVal);

      replaced = parsed.match(runReplace);
      loop++;
      if (loop > 10000) {
        break;
      }
    }

    runReplace = /eval{([^}]*)}/i;
    replaced = parsed.match(runReplace);
    loop = 0;
    var macroCache = {};

    while (replaced) {
      var macro = replaced[1];
      if (!macroCache[macro]) {
        macroCache[macro] = sync.eval(macro.replace(new RegExp("&amp;", "g"), "&").replace(new RegExp("&gt;", "g"), ">").replace(new RegExp("&lt;", "g"), "<"), scope.context);
      }
      parsed = parsed.replace(replaced[0], macroCache[macro]);

      replaced = parsed.match(runReplace);
      loop++;
      if (loop > 10000) {
        break;
      }
    }

    buildResult.html(parsed);

    var liveTabs = {};

    buildResult.find("tabs").each(function(){
      var tabPrefix = $(this).attr("tab-category") || "";
      var tabSelected = $(this).attr("tab-selected") || "";
      var tabSelectedStyle = $(this).attr("tab-selected-style") || "";

      $(this).find("tab").each(function(){
        $(this).attr("name", $(this).attr("name") || ($(this).text() || "").trim());
        if (!app.attr(tabPrefix) && $(this).attr("primary")) {
          $(this).attr("class", tabSelected || $(this).attr("class") || "highlight alttext outline smooth spadding");
          $(this).attr("style", $(this).attr("style") || tabSelectedStyle);
          liveTabs[tabPrefix] = $(this).attr("name");
        }
        else if ($(this).attr("name") == app.attr(tabPrefix)){
          $(this).attr("class", tabSelected || $(this).attr("class") || "highlight alttext outline smooth spadding");
          $(this).attr("style", $(this).attr("style") || tabSelectedStyle);
          liveTabs[tabPrefix] = $(this).attr("name");
        }
        else {
          $(this).attr("class", $(this).attr("class") || "button bold outline smooth spadding");
          $(this).click(function(){
            app.attr(tabPrefix, $(this).attr("name"));
            obj.update();
          });
        }
      });
    });

    for (var key in liveTabs) {
      if (key) {
        buildResult.find("["+key+"]").each(function(){
          if ($(this).attr(key) != liveTabs[key]) {
            $(this).remove();
          }
        });
      }
    }

    buildResult.find("textarea").each(function(){
      var value = sync.traverse(obj.data, $(this).attr("target"));
      if (value === false) { // field was not found
        // obviously it belongs here
        value = sync.traverse(obj.data, $(this).attr("target"), sync.newValue());
      }

      genInput({
        type : "textarea",
        min : $(this).attr("min"),
        max : $(this).attr("max"),
        step : $(this).attr("step"),
        value : value,
        obj : obj,
        cmd : "updateAsset",
        disabled : scope.viewOnly,
      }, null, $(this));
    });
    buildResult.find("input").each(function(){
      var value = sync.traverse(obj.data, $(this).attr("target"));
      if (value === false) { // field was not found
        // obviously it belongs here
        value = sync.traverse(obj.data, $(this).attr("target"), sync.newValue());
      }

      var selectData;
      $(this).find("option").each(function(){
        selectData = selectData || [];
        selectData.push($(this).text());
      });

      if ($(this).attr("mod") && !(value instanceof Object)) {
        value = sync.traverse(obj.data, $(this).attr("target"), sync.newValue(null, value));
      }

      genInput({
        type : $(this).attr("type"),
        min : $(this).attr("min"),
        max : $(this).attr("max"),
        step : $(this).attr("step"),
        checked : ($(this).attr("type") == "checkbox" || $(this).attr("type") == "radio")?($(this).attr("check")):(null),
        unchecked : ($(this).attr("type") == "checkbox" || $(this).attr("type") == "radio")?($(this).attr("uncheck")):(null),
        raw : ($(this).attr("field") != "name")?($(this).attr("field")):(null),
        mod : $(this).attr("mod"),
        name : ($(this).attr("field") == "name")?(true):(null),
        list : selectData,
        value : value,
        obj : obj,
        cmd : "updateAsset",
        disabled : scope.viewOnly,
      }, null, $(this));
      if ($(this).attr("isChecked") == true || $(this).attr("isChecked") == "true"){
        $(this).prop("checked", true);
      }
    });

    buildResult.find("datalist").each(function(){
      var value = sync.traverse(obj.data, $(this).attr("target"));
      if (value === false) { // field was not found
        // obviously it belongs here
        value = sync.traverse(obj.data, $(this).attr("target"), sync.newValue());
      }

      var selectData;
      $(this).find("option").each(function(){
        selectData = selectData || [];
        selectData.push($(this).attr("value") || $(this).text());
      });

      var wrap = $("<div>");

      var input = genInput({
        parent : wrap,
        classes : $(this).attr("class"),
        type : $(this).attr("type"),
        min : $(this).attr("min"),
        max : $(this).attr("max"),
        step : $(this).attr("step"),
        list : selectData,
        value : value,
        obj : obj,
        cmd : "updateAsset",
        disabled : scope.viewOnly,
      });
      input.attr("style", $(this).attr("style"));
      $(this).replaceWith($(wrap.children()[0]));
    });


    buildResult.find("select").each(function(){
      var value = sync.traverse(obj.data, $(this).attr("target"));
      if (value === false) { // field was not found
        // obviously it belongs here
        value = sync.traverse(obj.data, $(this).attr("target"), sync.newValue());
      }

      var selectData = {};
      $(this).find("option").each(function(){
        selectData[$(this).text()] = $(this).attr("value") || $(this).text();
      });

      genInput({
        select : selectData,
        min : $(this).attr("min"),
        max : $(this).attr("max"),
        step : $(this).attr("step"),
        value : value,
        obj : obj,
        cmd : "updateAsset",
        disabled : scope.viewOnly,
      }, null, $(this));
    });
    buildResult.find("[cond]").each(function(){
      if ($(this).attr("cond") == 0 || $(this).attr("cond") == "0" || $(this).attr("cond") == "false" || !sync.eval($(this).attr("cond"), scope.context)) {
        $(this).remove();
      }
    });
    buildResult.on('click', '[edit]', function(ev){
      if (!$(this).is("input") && !$(this).is(":focus")) {
        var el = $(this);
        el.keydown(function(e) {
          // trap the return key being pressed
          if (e.keyCode === 13 && !_down[16]) {
            // insert 2 br tags (if only one br tag is inserted the cursor won't go to the next line)
            el.blur();
            // prevent the default behaviour of return key pressed
            return false;
          }
        });
        el.attr('contenteditable','true');
        var tgt = el.attr("edit");

        var val = sync.traverse(obj.data,tgt);

        if (val instanceof Object) {
          el.html(sync.rawVal(val));
        }
        else {
          el.html(val);
        }

        var save = function(){
            el.attr('contenteditable','false');
            if(el.html().trim().replace("\n","")=="")
            {
                el.css("min-width","10px");
                el.css("min-height","10px");
                el.css("border-bottom","1px solid");
            }

            if (val instanceof Object) {
              sync.rawVal(val, el.html().replace("<br>", ""));
            }
            else {
              sync.traverse(obj.data, tgt, el.html().replace("<br>", ""));
            }
            obj.sync("updateAsset")
            //alert("Saved!");
        };
        el.one('blur', save).focus();
      }
    });

    buildResult.find("click").each(function(){
      // prompt
      // pool
      if (!$(this).parent().attr("class") && !$(this).parent().attr("style") && !$(this).parent().is("button")) {
        $(this).parent().addClass("underline link");
      }
      var clickData = $(this);
      $(this).find("setAttr").hide();
      $(this).find("create").hide();
      $(this).find("change").hide();
      $(this).find("chat").hide();
      $(this).find("display").hide();
      $(this).find("delete").hide();
      $(this).find("prompt").hide();
      $(this).find("popout").hide();
      $(this).find("var").hide();
      $(this).find("view").hide();

      $(this).parent().click(function(ev){
        var ctx = sync.defaultContext();
        ctx[obj.data._t] = duplicate(obj.data);

        var saveTable = {};

        $(this).find("var").each(function(){
          $.each( $(this)[0].attributes, function ( index, attribute ) {
            saveTable[attribute.name] = sync.eval(attribute.value, ctx);
            ctx.eval = saveTable;
          });
        });
        ctx.eval = saveTable;

        function execute(){
          var varTable = {};
          $(this).find("var").each(function(){
            $.each( $(this)[0].attributes, function ( index, attribute ) {
              varTable[attribute.name] = sync.eval(attribute.value, ctx);
              ctx.eval = varTable;
            });
          });
    
          ctx.eval = varTable;

          for (var k in saveTable) {
            ctx.eval[k] = saveTable[k];
          }

          clickData.find("create").each(function(){
            if ($(this).attr("type") && $(this).attr("target")) {
              var lookup = $(this).attr("target");
              var type = $(this).attr("type").toLowerCase();
              var lookupData = sync.traverse(obj.data, lookup);
              for (var key in game.templates.elements) {
                if (key.toLowerCase() == type) {
                  type = key;
                }
              }

              if (game.templates.elements && game.templates.elements[type]) {
                if (lookupData && lookupData instanceof Object) {
                  var newObj = duplicate(game.templates.elements[type]);
                  if (Array.isArray(lookupData)) {
                    lookupData.push(newObj);
                    obj.sync("updateAsset");
                  }
                  else {
                    ui_prompt({
                      target : app,
                      inputs : {
                        "Name" : "",
                      },
                      click : function(ev, inputs) {
                        if (inputs["Name"].val()) {
                          newObj._dropKey = inputs["Name"].val().toLowerCase().replace(/ /g,"_");
                          sync.rawVal(newObj.info.name, inputs["Name"].val());
                          lookupData[inputs["Name"].val().toLowerCase().replace(/ /g,"_")] = newObj;
                          obj.sync("updateAsset");
                        }
                      }
                    });
                  }
                }
              }
              else {
                sendAlert({text : "Element not found!"});
              }
            }
          });

          clickData.find("popout").each(function(){
            $(this).hide();
            if ($(this).attr("src")) {
              var src = $("<div>").load("/html/" + $(this).attr("src"), function(response, status, xhr) {
                $(this).find("[close]").each(function(){
                  $(this).attr("close", "sheet-popout-"+$(this).attr("id"));
                });
                var newScope = duplicate(scope);
                var parsed = $(this).html();
                var loop = 0;
                var rg =/\[{\[/;
                while (parsed.match(rg)) {
                  parsed = parsed.replace("\[{\[", "{");
                  loop++;
                  if (loop > 10000) {
                    break;
                  }
                }
                var rg1 = /\]}\]/;
                while (parsed.match(rg1)) {
                  parsed = parsed.replace("\]}\]", "}");
                  loop++;
                  if (loop > 10000) {
                    break;
                  }
                }

                newScope.display = parsed;

                var pop = ui_popOut({
                  id : "sheet-popout-"+$(this).attr("id"),
                  target : $("body"),
                  title : $(this).attr("title"),
                  style : {"width" : $(this).attr("width") || "400px", "height" : $(this).attr("height") || "400px"}
                }, sync.render("ui_processUI")(obj, app, newScope));
                pop.resizable();
              });
            }
            else {
              $(this).find("[close]").each(function(){
                $(this).attr("close", "sheet-popout-"+$(this).attr("id"));
              });
              var newScope = duplicate(scope);

              var parsed = $(this).html();
              var loop = 0;
              var rg =/\[{\[/;
              while (parsed.match(rg)) {
                parsed = parsed.replace("\[{\[", "{");
                loop++;
                if (loop > 10000) {
                  break;
                }
              }
              var rg1 = /\]}\]/;
              while (parsed.match(rg1)) {
                parsed = parsed.replace("\]}\]", "}");
                loop++;
                if (loop > 10000) {
                  break;
                }
              }

              newScope.display = parsed;

              var pop = ui_popOut({
                id : "sheet-popout-"+$(this).attr("id"),
                target : $("body"),
                title : $(this).attr("title"),
                style : {"width" : $(this).attr("width") || "400px", "height" : $(this).attr("height") || "400px"}
              }, sync.render("ui_processUI")(obj, app, newScope));
              pop.resizable();
            }
          });

          clickData.find("change").each(function(){
            $(this).hide();
            var lookupTarget = $(this).attr("target");
            var lookupValue = sync.traverse(obj.data, lookupTarget);

            if (lookupValue._t == "i") {
              var frame = $("<div>");
              frame.addClass("flex flexcolumn");

              game.locals["editItem"] = game.locals["editItem"] || sync.obj("editItem");
              game.locals["editItem"].data = duplicate(lookupValue);

              merge(game.locals["editItem"].data, duplicate(game.templates.item));

              var newApp = sync.newApp("ui_renderItemv2").appendTo(frame);
              newApp.attr("char-ref", obj.id());
              newApp.attr("viewOnly", scope.viewOnly);

              var split = lookupTarget.split(".");

              newApp.attr("path", lookupTarget.replace("."+split[split.length-1], ""));
              newApp.attr("index", split[split.length-1]);

              if (lookupValue._s && !hasSecurity(getCookie("UserID"), "Owner", obj.data) && !hasSecurity(getCookie("UserID"), "Rights", lookupValue))  {
                newApp.attr("viewOnly", true);
              }
              newApp.attr("local", "true");

              game.locals["editItem"].addApp(newApp);

              if (!scope.viewOnly) {
                var confirm = $("<button>").appendTo(frame);
                confirm.addClass("fit-x");
                confirm.append("Confirm");
                confirm.click(function(){
                  sync.traverse(obj.data, lookupTarget, duplicate(game.locals["editItem"].data));
                  obj.sync("updateAsset");
                  layout.coverlay("edit-item");
                });
              }
              var pop = ui_popOut({
                id : "edit-item",
                target : app,
                maximize : true,
                minimize : true,
                style : {"width" : assetTypes["i"].width, "height" : assetTypes["i"].height}
              }, frame);
              pop.resizable();
            }
            else {
              var frame = $("<div>");
              frame.addClass("flexcolumn flex");

              var talentData = duplicate(lookupValue);

              game.locals["editTalent"] = game.locals["editTalent"] || sync.obj("editTalent");
              game.locals["editTalent"].data = duplicate(game.templates.page);
              game.locals["editTalent"].data._t = "t";

              game.locals["editTalent"].data.info.name = sync.newValue("Name", duplicate(talentData.name));
              game.locals["editTalent"].data.info.img = sync.newValue("Img", null);
              game.locals["editTalent"].data.info.notes = sync.newValue("Notes", duplicate(talentData.current));

              var newApp = sync.newApp("ui_editPage").appendTo(frame);
              newApp.attr("autosave", true);
              newApp.attr("entry", true);
              game.locals["editTalent"].addApp(newApp);

              var confirm = $("<button>").appendTo(frame);
              confirm.addClass("fit-x");
              confirm.append("Confirm");
              confirm.click(function(){
                if (sync.rawVal(game.locals["editTalent"].data.info.name)) {
                  sync.traverse(obj.data, lookupTarget+".name", duplicate(game.locals["editTalent"].data.info.name.current));
                  sync.traverse(obj.data, lookupTarget+".current", duplicate(game.locals["editTalent"].data.info.notes.current));
                  obj.sync("updateAsset");
                  layout.coverlay("edit-talent");
                }
                else {
                  sendAlert({text : "Name required"});
                }
              });

              var pop = ui_popOut({
                target : app,
                id : "edit-talent",
                style : {width : "400px", height : "400px"}
              }, frame);
              pop.resizable();
            }
          });

          clickData.find("view").each(function(){
            $(this).hide();
            var frame = $("<div>");
            frame.addClass("flexcolumn flex");

            var talentData = duplicate(sync.traverse(obj.data, $(this).attr("target")));

            var viewTalent = sync.obj("viewTalent");
            viewTalent.data = duplicate(game.templates.page);
            viewTalent.data._t = "t";
            sync.rawVal(viewTalent.data.info.name, duplicate(talentData.name));
            sync.rawVal(viewTalent.data.info.notes, duplicate(talentData.current));

            var newApp = sync.newApp("ui_renderPage").appendTo(frame);
            newApp.attr("viewOnly", true);
            viewTalent.addApp(newApp);

            var pop = ui_popOut({
              target : app,
              id : "view-talent",
              title : sync.rawVal(talentData.name),
              style : {width : "400px", height : "400px"}
            }, frame);
            pop.resizable();
          });

          clickData.find("delete").each(function(){
            $(this).hide();
            sync.traverse(obj.data, $(this).attr("target"), "");
            obj.sync("updateAsset");
          });

          var changed = false;
          clickData.find("setAttr").each(function(){
            $(this).hide();

            var calcData = {target : $(this).attr("target"), eq : $(this).attr("value"), cond : $(this).attr("condition")};

            if (!calcData.cond || sync.eval(calcData.cond, ctx)) {
              var result = sync.eval(calcData.eq, ctx);

              var target = sync.traverse(obj.data, calcData.target);
              if (target instanceof Object) {
                sync.rawVal(target, result);
              }
              else {
                sync.traverse(obj.data, calcData.target, result);
              }
              changed = true;
            }
          });
          if (changed) {
            obj.sync("updateAsset");
          }

          clickData.find("chat").each(function(){
            $(this).hide();
            var chatObj = $(this);
            var chatData = {};
            var targets = util.getTargets();

            $.each( $(this)[0].attributes, function ( index, attribute ) {
              if (attribute.name != "classes" && attribute.name != "style") {
                chatData[attribute.name] = sync.eval(attribute.value, ctx);
              }
            });


            $(this).find("pull").each(function(){
              for (var k in targets) {
                var tg = getEnt(targets[k]);
                if (tg && tg.data) {
                  $.each( $(this)[0].attributes, function ( index, attribute ) {
                    ctx.eval[attribute.name] = sync.eval(attribute.value, {c : duplicate(tg.data)});
                  });
                }
              }
            });

            var effectData;

            $(this).find("effect").each(function(){
              $(this).hide();
              effectData = effectData || {};
              var calcData = {target : $(this).attr("target"), eq : $(this).attr("eq"), cond : $(this).attr("cond")};

              for (var k in targets) {
                var tg = getEnt(targets[k]);
                if (tg && tg.data) {
                  effectData[targets[k]] = [];
                  if (calcData.cond == null || sync.eval(calcData.cond, ctx)) {
                    calcData.eq = sync.eval(calcData.eq, ctx);
                    effectData[targets[k]].push(calcData);
                  }
                }
              }
            });

            chatData.person = chatData.person || sync.rawVal(obj.data.info.name);
            chatData.icon = chatData.icon || sync.rawVal(obj.data.info.img);
            chatData.color = chatData.color || game.players.data[getCookie("UserID")].color;
            chatData.eID = obj.id();
            chatData.effects = effectData;

            if ($(this).attr("roll")) {
              delete chatData.eventData;
              chatData.eventData = sync.executeQuery($(this).attr("roll"), ctx);
              chatData.eventData.var = ctx.eval;
              chatData.eventData.ui = $(this).attr("roll-ui");
            }
            else if ($(this).attr("text")) {
              chatData.text = sync.eval(chatData.text, ctx);
            }
            else {
              clickData.find("display").each(function(){
                var parsed = $(this).html();
                var loop = 0;
                var rg =/\[{\[/;
                while (parsed.match(rg)) {
                  parsed = parsed.replace("\[{\[", "{");
                  loop++;
                  if (loop > 10000) {
                    break;
                  }
                }
                var rg1 = /\]}\]/;
                while (parsed.match(rg1)) {
                  parsed = parsed.replace("\]}\]", "}");
                  loop++;
                  if (loop > 10000) {
                    break;
                  }
                }

                var runReplace = /traverse{([^}]*)}/i;
                var replaced = parsed.match(runReplace);
                var loop = 0;
                while (replaced) {
                  var macro = replaced[1];
                  var retVal = sync.traverse(obj.data, macro);
                  if (retVal === false) {
                    retVal = "";
                  }
                  parsed = parsed.replace(replaced[0], retVal);

                  replaced = parsed.match(runReplace);
                  loop++;
                  if (loop > 10000) {
                    break;
                  }
                }

                runReplace = /eval{([^}]*)}/i;
                replaced = parsed.match(runReplace);
                loop = 0;
                var macroCache = {};
                
                while (replaced) {
                  var macro = replaced[1];
                  if (!macroCache[macro]) {
                    macroCache[macro] = sync.eval(macro.replace(new RegExp("&amp;", "g"), "&").replace(new RegExp("&gt;", "g"), ">").replace(new RegExp("&lt;", "g"), "<"), ctx);
                  }
                  parsed = parsed.replace(replaced[0], macroCache[macro]);

                  replaced = parsed.match(runReplace);
                  loop++;
                  if (loop > 10000) {
                    break;
                  }
                }
                chatData.display = parsed;
              });
              util.unSelectTargets();
            }

            if ($(this).attr("private") && sync.eval($(this).attr("private"), ctx)) {
              var priv = {};
              priv[getCookie("UserID")] = true;
              chatData.p = priv;
            }

            $(this).find("save").each(function(){
              var tempCtx;
              if (chatData.eventData) {
                tempCtx = duplicate(ctx);
                tempCtx["pool"] = duplicate(chatData.eventData.pool);
              }

              $.each( $(this)[0].attributes, function ( index, attribute ) {
                saveTable[attribute.name] = sync.eval(attribute.value, tempCtx || ctx);
              });
            });

            runCommand("chatEvent", chatData);
          });
        }

        if (clickData.find("prompt").length) {
          if ($("#"+"sheet-popout-"+clickData.find("prompt").attr("id")).length) {
            $("#"+"sheet-popout-"+clickData.find("prompt").attr("id")+"-confirm").click();
          }
          else {
            var content = $("<div>");
            content.addClass("flexcolumn flex");

            clickData.find("prompt").each(function(){
              var parsed = $(this).html();
              var loop = 0;
              var rg =/\[{\[/;
              while (parsed.match(rg)) {
                parsed = parsed.replace("\[{\[", "{");
                loop++;
                if (loop > 10000) {
                  break;
                }
              }
              var rg1 = /\]}\]/;
              while (parsed.match(rg1)) {
                parsed = parsed.replace("\]}\]", "}");
                loop++;
                if (loop > 10000) {
                  break;
                }
              }

              var runReplace = /traverse{([^}]*)}/i;
              var replaced = parsed.match(runReplace);
              var loop = 0;
              while (replaced) {
                var macro = replaced[1];
                var retVal = sync.traverse(obj.data, macro);
                if (retVal === false) {
                  retVal = "";
                }
                parsed = parsed.replace(replaced[0], retVal);

                replaced = parsed.match(runReplace);
                loop++;
                if (loop > 10000) {
                  break;
                }
              }

              runReplace = /eval{([^}]*)}/i;
              replaced = parsed.match(runReplace);
              loop = 0;
              var macroCache = {};

              while (replaced) {
                var macro = replaced[1];
                if (!macroCache[macro]) {
                  macroCache[macro] = sync.eval(macro.replace(new RegExp("&amp;", "g"), "&").replace(new RegExp("&gt;", "g"), ">").replace(new RegExp("&lt;", "g"), "<"), ctx);
                }
                parsed = parsed.replace(replaced[0], macroCache[macro]);

                replaced = parsed.match(runReplace);
                loop++;
                if (loop > 10000) {
                  break;
                }
              }
              content.append(parsed);
            });

            content.find("userselect").each(function(){
              var style = $(this).attr("style");
              var classStyle = $(this).attr("class");
              var varName = $(this).attr("varname");
              var value = sync.eval($(this).attr("value"), ctx);
              var input = genInput({
                select : selectData,
                min : $(this).attr("min"),
                max : $(this).attr("max"),
                step : $(this).attr("step"),
                value : value,
                disabled : scope.viewOnly,
              });
              saveTable[varName] = value;

              input.attr("style", style);
              input.attr("class", classStyle);
              $(this).replaceWith(input);
              input.change(function(){
                saveTable[varName] = $(this).val();
              });
            });
            content.find("userinput").each(function(){
              var selectData;
              var style = $(this).attr("style");
              var classStyle = $(this).attr("class");

              var varName = $(this).attr("varname");
              var value = sync.eval($(this).attr("value"), ctx);
              $(this).find("option").each(function(){
                selectData = selectData || [];
                selectData.push($(this).text());
              });
              var input = genInput({
                type : $(this).attr("type"),
                min : $(this).attr("min"),
                max : $(this).attr("max"),
                step : $(this).attr("step"),
                checked : ($(this).attr("type") == "checkbox" || $(this).attr("type") == "radio")?($(this).attr("check")):(null),
                unchecked : ($(this).attr("type") == "checkbox" || $(this).attr("type") == "radio")?($(this).attr("uncheck")):(null),
                list : selectData,
                value : value,
                disabled : scope.viewOnly,
              });
              saveTable[varName] = value;
              input.attr("style", style);
              input.attr("class", classStyle);
              $(this).replaceWith(input);
              var options = {type : $(this).attr("type"), checked : $(this).attr("check"), unchecked : $(this).attr("uncheck")};
              input.change(function(){
                if (options.type == "checkbox" || options.type == "radio") {
                  if (input.val() == options.checked) {
                    input.prop("checked", true);
                    saveTable[varName] = options.checked;
                  }
                  else {
                    input.prop("checked", false);
                    saveTable[varName] = options.unchecked;
                  }
                }
                else {
                  saveTable[varName] = $(this).val();
                }
              });
              if ($(this).attr("isChecked") == true || $(this).attr("isChecked") == "true"){
                $(this).prop("checked", true);
              }
            });

            var button = $("<button>").appendTo(content);
            button.attr("id", "sheet-popout-"+clickData.find("prompt").attr("id")+"-confirm");
            button.text("Confirm");
            button.click(function(){
              execute();
              layout.coverlay(pop);
            });

            var pop = ui_popOut({
              id : "sheet-popout-"+clickData.find("prompt").attr("id"),
              target : (clickData.find("prompt").attr("align"))?($(this).parent()):($("body")),
              title : clickData.find("prompt").attr("title"),
              align : clickData.find("prompt").attr("align"),
              style : {"width" : clickData.find("prompt").attr("width"), "height" : clickData.find("prompt").attr("height")}
            }, content);
            pop.resizable();
          }
        }
        else {
          execute();
          if ($(this).attr("close")) {
            layout.coverlay($(this).attr("close"));
          }
        }
        ev.stopPropagation();
      });
    });

    buildResult.find("ui").each(function(){
      var newScope = {};
      newScope.viewOnly = scope.viewOnly;

      $.each( $(this)[0].attributes, function ( index, attribute ) {
        if (attribute.name.match("scope-")) {
          newScope[attribute.name.replace("scope-", "")] = attribute.value;
        }
      });
      var result = sync.render($(this).attr("name"))(obj, app, newScope);
      if ($(this).attr("class")) {
        result.attr("class", $(this).attr("class"));
      }
      if ($(this).attr("style")) {
        result.attr("style", $(this).attr("style"));
      }
      $(this).replaceWith(result);
    });

    buildResult.find("list").each(function(){
      var sortTarget = $(this).attr("target");
      var sortableHook = $(this).attr("connect");
      var sortList = [".compendiumContent"];
      if (sortableHook) {
        sortList.push("list."+sortableHook);
        if (!$(this).hasClass(sortableHook)) {
          $(this).addClass(sortableHook);
        }
      }
      var div = $(this);

      $(this).children().each(function(index){
        $(this).attr("index", obj.id());
        $(this).data("item", JSON.stringify(sync.traverse(obj.data, sortTarget+"."+index)));
      });

      $(this).addClass(sortableHook);
      $(this).sortable({
        connectWith : [".dropContent", "."+sortableHook],
        over : function(ev, ui){
          if ($(ui.item).attr("index") != null && $(ui.item).attr("index") != obj.id() && $(ui.item).attr("key") != null) {
            if (!$("#"+app.attr("id")+sortableHook+"-drag-overlay").length) {
              var olay = layout.overlay({
                target : div,
                id : app.attr("id")+sortableHook+"-drag-overlay",
                style : {"background-color" : "rgba(0,0,0,0.5)"}
              });
              olay.addClass("flexcolumn flexmiddle alttext");
              olay.css("font-size", "2em");
              olay.css("pointer-events", "none");
              olay.css("z-index", util.getMaxZ(".ui-popout"));
              olay.append("<b>Drop</b>");
            }
          }
        },
        out : function(ev, ui) {
          layout.coverlay(app.attr("id")+sortableHook+"-drag-overlay");
        },
        update : function(ev, ui) {
          var newData = [];
          div.children().each(function(){
            newData.push(JSON.parse($(this).data("item")));
          });
          var value = sync.traverse(obj.data, sortTarget, newData);
          obj.sync("updateAsset");
        }
      });
    });

    buildResult.find("bank").each(function(){
      var sortTarget = $(this).attr("target");
      var sortableHook = $(this).attr("connect");
      var sortList = [".compendiumContent"];
      if (sortableHook) {
        sortList.push("bank."+sortableHook);
        if (!$(this).hasClass(sortableHook)) {
          $(this).addClass(sortableHook);
        }
      }
      var div = $(this);

      $(this).children().each(function(index){
        $(this).attr("index", obj.id());
        var list = sync.traverse(obj.data, sortTarget);
        $(this).data("item", JSON.stringify(sync.traverse(obj.data, sortTarget+"."+Object.keys(list)[index])));
        $(this).data("dropKey", sync.traverse(obj.data, sortTarget+"."+Object.keys(list)[index])._dropKey);
      });

      $(this).addClass(sortableHook);
      $(this).sortable({
        connectWith : [".dropContent", "."+sortableHook],
        over : function(ev, ui){
          if ($(ui.item).attr("index") != null && $(ui.item).attr("index") != obj.id() && $(ui.item).attr("key") != null) {
            if (!$("#"+app.attr("id")+sortableHook+"-drag-overlay").length) {
              var olay = layout.overlay({
                target : div,
                id : app.attr("id")+sortableHook+"-drag-overlay",
                style : {"background-color" : "rgba(0,0,0,0.5)"}
              });
              olay.addClass("flexcolumn flexmiddle alttext");
              olay.css("font-size", "2em");
              olay.css("pointer-events", "none");
              olay.css("z-index", util.getMaxZ(".ui-popout"));
              olay.append("<b>Drop</b>");
            }
          }
        },
        out : function(ev, ui) {
          layout.coverlay(app.attr("id")+sortableHook+"-drag-overlay");
        },
        update : function(ev, ui) {
          var newData = {};
          div.children().each(function(){
            newData[$(this).data("dropKey")] = JSON.parse($(this).data("item"));
          });
          var value = sync.traverse(obj.data, sortTarget, newData);
          obj.sync("updateAsset");
        }
      });
    });

    buildResult.find(".scroll").each(function(){
      $(this).attr("_lastScrollTop-", app.attr("_lastScrollTop-"+"idplaceholder"));
      $(this).attr("_lastScrollLeft-", app.attr("_lastScrollLeft-"+"idplaceholder"));
      $(this).scroll(function(){
        app.attr("_lastScrollTop-"+"idplaceholder", $(this).scrollTop());
        app.attr("_lastScrollLeft-"+"idplaceholder", $(this).scrollLeft());
      });
    });
    buildResult.find(".scroll-xy").each(function(){
      $(this).attr("_lastScrollTop-", app.attr("_lastScrollTop-"+"idplaceholder"));
      $(this).attr("_lastScrollLeft-", app.attr("_lastScrollLeft-"+"idplaceholder"));
      $(this).scroll(function(){
        app.attr("_lastScrollTop-"+"idplaceholder", $(this).scrollTop());
        app.attr("_lastScrollLeft-"+"idplaceholder", $(this).scrollLeft());
      });
    });
    buildResult.find(".scroll-x").each(function(){
      $(this).attr("_lastScrollTop-", app.attr("_lastScrollTop-"+"idplaceholder"));
      $(this).attr("_lastScrollLeft-", app.attr("_lastScrollLeft-"+"idplaceholder"));
      $(this).scroll(function(){
        app.attr("_lastScrollTop-"+"idplaceholder", $(this).scrollTop());
        app.attr("_lastScrollLeft-"+"idplaceholder", $(this).scrollLeft());
      });
    });
    buildResult.find(".scroll-y").each(function(){
      $(this).attr("_lastScrollTop-", app.attr("_lastScrollTop-"+"idplaceholder"));
      $(this).attr("_lastScrollLeft-", app.attr("_lastScrollLeft-"+"idplaceholder"));
      $(this).scroll(function(){
        app.attr("_lastScrollTop-"+"idplaceholder", $(this).scrollTop());
        app.attr("_lastScrollLeft-"+"idplaceholder", $(this).scrollLeft());
      });
    });
  }
  return buildResult;
});*/

sync.render("ui_processUI", function(obj, app, scope) {
  if (!scope.context) {
    scope.context = scope.context || sync.defaultContext();
    if (obj.data) {
      scope.context[obj.data._t] = duplicate(obj.data);
    }
  }
  function build(sData, lastLookup) {
    var newScope = scope;
    var section = $("<div>");
    var returnSection;
    if (scope.markup) {
      section.attr("id", (scope.markup || "")+lastLookup);
      if (sData.display && (!sData.classes || sData.classes.match("flexcontainer"))) {
        if (!sData.style || sData.style.position != "absolute") {
          section.css("background", "rgba(235,235,228,0.05)");
          section.css("padding-top", "12px");
          section.css("padding-left", "4px");
          section.css("padding-right", "4px");
          section.css("padding-bottom", "4px");
          section.css("border", "2px dashed rgba(55,55,55,0.2)");

          returnSection = section;

          if (sData.classes) {
            section.addClass(sData.classes);
          }

          var section = $("<div>").appendTo(section);
        }
      }
    }
    for (var cssIndex in sData.style) {
      section.css(cssIndex, sData.style[cssIndex]);
    }

    if (sData.classes) {
      section.addClass(sData.classes); //
    }
    if (sData.hint) {
      section.attr("title", sync.eval(sData.hint, scope.context));
    }
    if (sData.title) {
      section.attr("title", sData.title);
    }
    if (sData.tabs) {
      var tabList = $("<div>").appendTo(section);
      tabList.addClass(sData.listClass || "flexrow");

      var content = $("<div>").appendTo(section);
      content.addClass(sData.contentClass || "flex flexcolumn");

      for (var k in sData.tabs) {
        var tabData = sData.tabs[k];
        if (tabData && !tabData.cond || sync.eval(tabData.cond, scope.context)) {
          var tab = $("<div>").appendTo(tabList);
          tab.attr((sData.tabKey || "tabKey"), k);
          tab.text(k);
          tab.click(function(){
            tabList.children().removeClass(sData.selectClass || "highlight alttext subtitle spadding smooth outline").addClass(sData.tabClass || "subtitle button spadding smooth");
            $(this).removeClass(sData.tabClass || "subtitle button spadding smooth").addClass(sData.selectClass || "highlight alttext subtitle spadding smooth outline");
            app.attr((sData.tabKey || "tabKey"), $(this).attr((sData.tabKey || "tabKey")));
            content.empty();
            build(sData.tabs[$(this).attr((sData.tabKey || "tabKey"))], lastLookup+"-tab-"+$(this).attr("tabKey")).appendTo(content);
          });
          if (k == (app.attr((sData.tabKey || "tabKey")) || sData.tab)) {
            tab.addClass(sData.selectClass || "highlight alttext subtitle spadding smooth outline");
            tab.click();
          }
          else {
            tab.addClass(sData.tabClass || "subtitle button spadding smooth");
          }
        }
      }
    }
    else {
      if (sData.scrl) {
        section.attr("_lastScrollTop", app.attr("_scrltop_"+sData.scrl));
        section.attr("_lastScrollLeft", app.attr("_scrlleft_"+sData.scrl));
        section.scroll(function(){
          app.attr("_scrltop_"+sData.scrl, $(this).scrollTop());
          app.attr("_scrlleft_"+sData.scrl, $(this).scrollLeft());
        });
      }

      if (sData.datalist) {
        var value = sync.traverse(obj.data, sData.target);
        var applyKey = sData.dataKey || "%dataKey%";
        var applyTarget = sData.dataTarget || "%dataTarget%";
        var newScope = duplicate(scope);
        newScope.viewOnly = scope.viewOnly;
        delete newScope.markup;
        merge(newScope, sData.scope);
        for (var key in value) {
          var dat = value[key];
          if (sData.datalist) {
            newScope.name = key;
            newScope.display = JSON.stringify(sData.datalist);
            newScope.display = newScope.display.replace(new RegExp(applyKey, 'g'), key);
            newScope.display = newScope.display.replace(new RegExp(applyTarget, 'g'), sData.target + "." + key);
            newScope.display = JSON.parse(newScope.display);

            if ((!sData.list || util.contains(sData.list, key)) && (!sData.ignore || !util.contains(sData.ignore, key))) {
              sync.render("ui_processUI")(obj, app, newScope).appendTo(section);
            }
          }
        }
      }
      if (sData.click) {
        if (sData.click instanceof Object) {
          section.contextmenu(function(ev){
            if (sData.click.action) {
              var refObj = obj;
              if (!obj.data._t && getPlayerCharacter(getCookie("UserID")) && getPlayerCharacter(getCookie("UserID")).data) {
                refObj = getPlayerCharacter(getCookie("UserID"));
              }
              if (refObj.data._t == "c" || refObj.data._t == "i") {
                var actionObj = sync.dummyObj();
                actionObj.data = {context : {c : refObj.id()}, options : sData.click.options, action : sData.click.action, actionData : duplicate(game.templates.actions.c[sData.click.action] || {}),  msg : sData.click.msg};

                if (refObj.data._a) {
                  actionObj.actionData = duplicate(obj.data._a[sData.click.action]);
                }

                game.locals["actionsList"] = game.locals["actionsList"] || {};
                game.locals["actionsList"][app.attr("id")+"-"+obj.data._t] = actionObj;

                var actionApp = sync.newApp("ui_renderAction");
                actionObj.addApp(actionApp);

                var pop = ui_popOut({
                  target : $(this),
                  minimize : true,
                  prompt : true,
                  dragThickness : "0.5em",
                  title : "Action"
                }, actionApp);
                pop.resizable();
              }
            }
            ev.stopPropagation();
            ev.preventDefault();
            return false;
          });
          section.click(function(ev){
            if (sData.click.calc) {
              // apply this effect
              var ctx = sync.defaultContext();
              ctx[obj.data._t] = duplicate(obj.data);
              var changed = false;
              for (var i in sData.click.calc) {
                var calcData = sData.click.calc[i];
                if (!calcData.cond || sync.eval(calcData.cond, ctx)) {
                  var result = sync.eval(calcData.eq, ctx);
                  if (calcData.target.substring(0, Math.min(calcData.target.length, 4)) == "tags") {
                    // apply/remove tag effects
                    if (result) {
                      result = 1;
                      var val = calcData.target.split(".");
                      if (val.length > 0 && val[1]) {
                        val = val[1];
                        // apply tag effects
                        if (game.templates.tags[val]) {
                          var effects = game.templates.tags[val].calc;
                          // resolve effect
                          for (var eid in effects) {
                            if (effects[eid].cond == null || sync.eval(effects[eid].cond, ctx)) {
                              sync.traverse(obj.data, effects[eid].target, sync.eval(effects[eid].eq, ctx));
                              changed = true;
                            }
                          }
                        }
                      }
                    }
                    else {
                      // remove the tag
                      result = 0;
                      var val = calcData.target.split(".");
                      if (val.length > 0 && val[1]) {
                        val = val[1];
                        // apply tag effects
                        if (game.templates.tags[val]) {
                          var effects = game.templates.tags[val].calc;
                          // resolve effect
                          for (var eid in effects) {
                            if (effects[eid].target.match(".modifiers")) {
                              sync.traverse(obj.data, effects[eid].target, "");
                              changed = true;
                            }
                          }
                        }
                      }
                    }
                  }
                  else {
                    var target = sync.traverse(obj.data, calcData.target);
                    if (target instanceof Object) {
                      sync.rawVal(target, result);
                    }
                    else {
                      sync.traverse(obj.data, calcData.target, result);
                    }
                    changed = true;
                  }
                }
              }
              if (changed) {
                obj.sync("updateAsset");
              }
            }
            else if (sData.click.action) {
              var refObj = obj;
              if (!obj.data._t && getPlayerCharacter(getCookie("UserID")) && getPlayerCharacter(getCookie("UserID")).data) {
                refObj = getPlayerCharacter(getCookie("UserID"));
              }

              if (refObj.data._t == "c" || refObj.data._t == "i") {
                var ctx = sync.defaultContext();
                ctx[refObj.data._t] = duplicate(refObj.data);
                var actions = duplicate(game.templates.actions[refObj.data._t]);

                for (var actKey in refObj.data._a) {
                  actions[actKey] = duplicate(refObj.data._a[actKey]);
                }
                var actionData = actions[sData.click.action];
                var addStr = "";
                var str = actionData.eventData.data;
                var final = "";
                var vMatch = variableRegex.exec(str);
                // save localVaribles
                var cmps = /([\/><\!\~\=])/;

                var varTable = duplicate(actionData.eventData.var) || {};

                ctx.eval = ctx.eval || {};
                for (var key in sData.click.options) {
                  varTable[key] = sync.eval(sData.click.options[key], ctx);
                  ctx.eval[key] = varTable[key];
                }

                var pullTable = duplicate(actionData.pull);
                var targets = util.getTargets();
                for (var k in targets) {
                  var tg = getEnt(targets[k]);
                  if (tg && tg.data) {
                    for (var key in pullTable) {
                      var contxt = {c : duplicate(tg.data)};
                      varTable[key] = sync.eval(pullTable[key], contxt);
                      ctx.eval[key] = varTable[key];
                    }
                  }
                }

                var context = sync.context(actionData.eventData.data, ctx);
                for (var key in context.context) {
                  if (varTable[key]) {
                    context.context[key] = duplicate(varTable[key]);
                  }
                }

                while (vMatch) {
                  if (vMatch[2] && vMatch[4] && vMatch[4][0] == "=") {
                    var stack = [0];
                    for (var i=1; i<vMatch[4].length; i++) {
                      if (vMatch[4][i] == "=" && !((vMatch[4][i-1] || "").match(cmps) || (vMatch[4][i+1] || "").match(cmps))) {
                        stack.push(i);
                      }
                      else if (vMatch[4][i] == ";") {
                        stack.pop();
                        if (stack.length == 0) {
                          stack = i+1; // record the successful index
                          break;
                        }
                      }
                    }
                  }
                  if (!(stack instanceof Object)) {
                    var newStr = vMatch[1]+(vMatch[2] || "");
                    if (context.context[vMatch[2]]) {
                      newStr += "="+sync.val(context.context[vMatch[2]])+";"
                    }
                    else {
                      newStr += vMatch[4].substring(0, stack);
                    }
                    final += newStr;
                    vMatch[0] = (vMatch[1] || "") +(vMatch[2] || "") + (vMatch[3] || "") + vMatch[4].substring(0, stack);
                  }
                  str = str.replace(vMatch[0], "");
                  vMatch = variableRegex.exec(str);
                }
                for (var i in context.context) {
                  if (!final.match(i)) {
                    final += "$"+i+"="+sync.val(context.context[i])+";";
                  }
                }
                final += context.str;
                for (var key in varTable) {
                  varTable[key] = sync.eval(varTable[key], ctx);
                }
                var icon = sync.rawVal(refObj.data.info.img);
                var msg;
                if (sData.click.msg) {
                  msg = sync.eval(sData.click.msg, ctx);
                }
                else {
                  if (actionData.flavors) {
                    var choices = [];
                    for (var i in actionData.flavors) {
                      if (!actionData.flavors[i].cond || sync.eval(actionData.flavors[i].cond, ctx)) {
                        choices.push(duplicate(actionData.flavors[i]));
                      }
                    }
                    var choice = Math.floor(Math.random() * choices.length);
                    icon = actionData.flavors[choice].icon || icon;
                    msg = sync.eval(actionData.flavors[choice].msg, ctx);
                  }
                  else {
                    icon = actionData.eventData.icon || icon;
                    msg = sync.eval(actionData.eventData.msg, ctx);
                  }
                }
                if (sData.click.icon) {
                  icon = sData.click.icon;
                }

                var eventData = {
                  person : sync.rawVal(ctx.c.info.name),
                  icon : icon,
                  flavor : msg,
                  eID : obj.id(),
                  eventData : sync.executeQuery(final, ctx),
                };
                eventData.eventData.ui = actionData.eventData.ui;
                eventData.eventData.var = varTable;

                if (actionData.effects) {
                  var effectData = {};
                  ctx["pool"] = eventData.data.pool;
                  for (var k in targets) {
                    var tg = getEnt(targets[k]);
                    if (tg && tg.data) {
                      effectData[targets[k]] = [];
                      for (var i in actionData.effects) {
                        var calcData = duplicate(actionData.effects[i]);
                        if (calcData.cond == null || sync.eval(calcData.cond, ctx)) {
                          delete calcData.cond;
                          calcData.eq = sync.eval(calcData.eq, ctx);
                          effectData[targets[k]].push(calcData);
                        }
                      }
                    }
                  }
                  eventData.effects = effectData;
                }

                if (sData.click.private) {
                  var priv = {};
                  priv[getCookie("UserID")] = true;
                  eventData.p = priv;
                }
                runCommand("chatEvent", eventData);
                setTimeout(function(){
                  for (var i in actionData.followup) {
                    if (actionData.followup[i].cond == null || sync.eval(actionData.followup[i].cond, ctx)) {
                      var eventData = {
                        person : sync.rawVal(ctx.c.info.name),
                        eID : obj.id(),
                        icon : actionData.followup[i].icon,
                        flavor : sync.eval(actionData.followup[i].msg, ctx),
                        eventData : sync.executeQuery(actionData.followup[i].data, ctx),
                      };
                      eventData.eventData.ui = actionData.followup[i].ui;
                      eventData.eventData.var = varTable;
                      if (sData.click.private) {
                        var priv = {};
                        priv[getCookie("UserID")] = true;
                        eventData.p = priv;
                      }
                      runCommand("chatEvent", eventData);
                    }
                  }
                }, 100);
              }
              ev.stopPropagation();
              ev.preventDefault();
            }
            else if ((obj.data._t == "c") && hasSecurity(getCookie("UserID"), "Rights", obj.data)) {
              if (sData.click.create) {
                if (sData.click.create == "skills" || sData.click.create == "talents" || sData.click.create == "specials") {
                  ui_prompt({
                    target : $(this),
                    inputs : {
                      "Name" : "",
                    },
                    click : function(ev, inputs) {
                      if (inputs["Name"].val()) {
                        var lookupData = sync.traverse(obj.data, sData.click.create);
                        lookupData[inputs["Name"].val().toLowerCase().replace(/ /g,"_")] = sync.newValue(inputs["Name"].val());
                        obj.sync("updateAsset");
                      }
                    }
                  });
                }
                else if (sData.click.create == "inventory") {
                  obj.data.inventory.push(duplicate(game.templates.item));
                  obj.update();
                }
                else if (sData.click.create == "spellbook") {
                  obj.data.spellbook.push(duplicate(game.templates.item));
                  obj.update();
                }
              }
              else if (sData.click.edit && sData.target) {
                var lookupValue = sync.traverse(obj.data, sData.target);
                if (sData.click.edit == "inventory" || lookupValue._t == "i") {
                  var frame = $("<div>");
                  frame.addClass("flex flexcolumn");

                  game.locals["editItem"] = game.locals["editItem"] || sync.obj("editItem");
                  game.locals["editItem"].data = duplicate(lookupValue);

                  merge(game.locals["editItem"].data, duplicate(game.templates.item));

                  var newApp = sync.newApp("ui_renderItem").appendTo(frame);
                  newApp.attr("char-ref", obj.id());
                  newApp.attr("viewOnly", scope.viewOnly);
                  if (lookupValue._s && !hasSecurity(getCookie("UserID"), "Owner", obj.data) && !hasSecurity(getCookie("UserID"), "Rights", lookupValue))  {
                    newApp.attr("viewOnly", true);
                  }
                  newApp.attr("local", "true");

                  game.locals["editItem"].addApp(newApp);

                  if (!scope.viewOnly) {
                    var confirm = $("<button>").appendTo(frame);
                    confirm.addClass("fit-x");
                    confirm.append("Confirm");
                    confirm.click(function(){
                      sync.traverse(obj.data, sData.target, duplicate(game.locals["editItem"].data));
                      obj.sync("updateAsset");
                      layout.coverlay("edit-item");
                    });
                  }
                  var pop = ui_popOut({
                    id : "edit-item",
                    target : app,
                    maximize : true,
                    minimize : true,
                    style : {"width" : assetTypes["i"].width, "height" : assetTypes["i"].height}
                  }, frame);
                  pop.resizable();
                }
                else if (sData.click.edit == "spellbook") {
                  var frame = $("<div>");
                  frame.addClass("flex");

                  game.locals["editSpell"] = game.locals["editSpell"] || sync.obj("editSpell");
                  game.locals["editSpell"].data = duplicate(lookupValue);

                  merge(game.locals["editSpell"].data, duplicate(game.templates.item));

                  var newApp = sync.newApp("ui_renderItem").appendTo(frame);
                  newApp.attr("spell", "true");
                  game.locals["editSpell"].addApp(newApp);

                  if (!scope.viewOnly) {
                    var confirm = $("<button>").appendTo(frame);
                    confirm.addClass("fit-x");
                    confirm.append("Confirm");
                    confirm.click(function(){
                      sync.traverse(obj.data, sData.target, duplicate(game.locals["editSpell"].data));
                      obj.sync("updateAsset");
                      layout.coverlay("edit-spell");
                    });
                  }
                  var pop = ui_popOut({
                    target : app,
                    maximize : true,
                    minimize : true,
                    style : {"width" : assetTypes["i"].width, "height" : assetTypes["i"].height}
                  }, frame);
                  pop.resizable();
                }
                else if (sData.click.edit == "talents" || sData.click.edit == "specials") {
                  var frame = $("<div>");
                  frame.addClass("flexcolumn flex");

                  var talentData = duplicate(lookupValue);

                  game.locals["editTalent"] = game.locals["editTalent"] || sync.obj("editTalent");
                  game.locals["editTalent"].data = duplicate(game.templates.page);
                  game.locals["editTalent"].data._t = "t";

                  game.locals["editTalent"].data.info.name = sync.newValue("Name", duplicate(talentData.name));
                  game.locals["editTalent"].data.info.img = sync.newValue("Img", null);
                  game.locals["editTalent"].data.info.notes = sync.newValue("Notes", duplicate(talentData.current));

                  var newApp = sync.newApp("ui_editPage").appendTo(frame);
                  newApp.attr("autosave", true);
                  newApp.attr("entry", true);
                  game.locals["editTalent"].addApp(newApp);

                  var confirm = $("<button>").appendTo(frame);
                  confirm.addClass("fit-x");
                  confirm.append("Confirm");
                  confirm.click(function(){
                    if (sync.rawVal(game.locals["editTalent"].data.info.name)) {
                      sync.traverse(obj.data, sData.target+".name", duplicate(game.locals["editTalent"].data.info.name.current));
                      sync.traverse(obj.data, sData.target+".current", duplicate(game.locals["editTalent"].data.info.notes.current));
                      obj.sync("updateAsset");
                      layout.coverlay("edit-talent");
                    }
                    else {
                      sendAlert({text : "Name required"});
                    }
                  });

                  var pop = ui_popOut({
                    target : app,
                    id : "edit-talent",
                    title : "Editing",
                    style : {width : "400px", height : "400px"}
                  }, frame);
                  pop.resizable();
                }
              }
              else if (sData.click.view && sData.target) {
                if (sData.click.view == "talents" || sData.click.view == "specials") {
                  var frame = $("<div>");
                  frame.addClass("flexcolumn flex");

                  var talentData = duplicate(sync.traverse(obj.data, sData.target));

                  var viewTalent = sync.obj("viewTalent");
                  viewTalent.data = duplicate(game.templates.page);
                  viewTalent.data._t = "t";
                  sync.rawVal(viewTalent.data.info.name, duplicate(talentData.name));
                  sync.rawVal(viewTalent.data.info.notes, duplicate(talentData.current));

                  var newApp = sync.newApp("ui_renderPage").appendTo(frame);
                  newApp.attr("viewOnly", true);
                  viewTalent.addApp(newApp);

                  var pop = ui_popOut({
                    target : app,
                    id : "view-talent",
                    title : sync.rawVal(talentData.name),
                    style : {width : "400px", height : "400px"}
                  }, frame);
                  pop.resizable();
                }
              }
              else if (sData.click.delete && (sData.target || sData.click.target) && hasSecurity(getCookie("UserID"), "Rights", obj.data)) {
                sync.traverse(obj.data, (sData.target || sData.click.target), "");
                obj.sync("updateAsset");
              }
            }
          });
        }
        else {
          section.click(function(ev){
            var newApp = sync.newApp(sData.click);
            obj.addApp(newApp);

            var pop = ui_popOut({
              target : $(this),
              minimize : true,
              dragThickness : "0.5em",
              style : {"min-width" : "100px"},
            }, newApp);
            pop.resizable();
            ev.stopPropagation();
            ev.preventDefault();
          });
        }
      }
      if (sData.diceable && sData.diceable.data) {
        section.click(function(ev){
          var context = sync.defaultContext();
          context[obj.data._t] = duplicate(obj.data);
          if (sData.target) {
            context["target"] = duplicate(sync.traverse(obj.data, sData.target));
          }
          var eventData = duplicate(sData.diceable);
          if (!sData.noRoll) {
            eventData.data = sync.eval(eventData.data, context);
          }
          _diceable(ev, $(this), eventData, context);

          ev.stopPropagation();
          ev.preventDefault();
        });
      }
      if (sData.target && (!sData.click || (!sData.click.edit && !sData.click.view))) {
        newScope = duplicate(scope);
        newScope.lookup = (scope.lookup || "") + sData.target;
        newScope.viewOnly = scope.viewOnly;
        merge(newScope, sData.scope);
        if (sData.ui) {
          newScope.target = sync.traverse(obj.data, newScope.lookup);
          if (sData.passContext) {
            newScope.context = duplicate(scope.context);
          }
          var ui = sync.render(sData.ui)(obj, app, newScope);
          if (ui) {
            ui.appendTo(section);
          }
        }
        else if (!sData.datalist) {
          var value = sync.traverse(obj.data, newScope.lookup);
          if (value === false) { // field was not found
            // obviously it belongs here
             value = sync.traverse(obj.data, newScope.lookup, sync.newValue());
          }
          if (value instanceof Object) {
            if ((sData.edit || value.current != null || value.name != null)) {
              var val = $("<text>");
              if (sData.edit) {
                if (value.name || sData.name) {
                  var name = $("<b>").appendTo(section);
                  if ((sData.name || sData.name === "")) {
                    if (sData.link) {
                      name = genIcon(sData.link, sync.eval((sData.name === "")?("''"):(sData.name), scope.context)).appendTo(section);
                    }
                    else if (sData.icon) {
                      name.addClass("flexmiddle");
                      name.text(sync.eval((sData.name === "")?("''"):(sData.name), scope.context));
                      name.append(genIcon({icon : sData.icon, raw : true}));
                    }
                    else {
                      name.text(sync.eval((sData.name === "")?("''"):(sData.name), scope.context));
                    }
                  }
                  else {
                    name.text(value.name + " ");
                  }
                  name.css("white-space", "nowrap");
                }
                var edit = {
                  parent : section,
                  value : value,
                  obj : obj,
                  cmd : sData.cmd || "updateAsset",
                  disabled : scope.viewOnly,
                  style : {"width" : "100%"}
                };
                if (sData.edit instanceof Object) {
                  merge(edit, duplicate(sData.edit), true);
                }
                sData.edit.disabled = scope.viewOnly;
                var input = genInput(edit);
              }
              else {
                var bool = false;
                if (value.min != null && value.min) {
                  val.text(val.text() + value.min + "/");
                  bool = true;
                }
                if (sync.val(value) || sync.val(value) == "0") {
                  val.text(val.text() + sync.val(value));
                  bool = true;
                }
                if (value.max != null) {
                  val.text(val.text() + "/" + value.max);
                  bool = true;
                }
                if (bool) {
                  if (value.name || (sData.name || sData.name === "")) {
                    var name = $("<b>").appendTo(section);

                    if ((sData.name || sData.name === "")) {
                      if (sData.link) {
                        name = genIcon(sData.link, sync.eval((sData.name === "")?("''"):(sData.name), scope.context)).appendTo(section);
                      }
                      else if (sData.icon) {
                        name.addClass("flexmiddle");
                        name.text(sync.eval((sData.name === "")?("''"):(sData.name), scope.context));
                        name.append(genIcon({icon : sData.icon, raw : true}));
                      }
                      else {
                        name.text(sync.eval((sData.name === "")?("''"):(sData.name), scope.context));
                      }
                    }
                    else {
                      name.text(value.name + " ");
                    }
                    name.css("white-space", "nowrap");
                  }
                  val.appendTo(section);
                }
              }
            }
            else {
              var newScope = duplicate(scope);
              newScope.viewOnly = scope.viewOnly;
              merge(newScope, sData.scope);
              for (var key in value) {
                var dat = value[key];
                if (sData.applyUI) {
                  newScope.name = key;
                  if (sData.applyUI instanceof Object) {
                    newScope.display = JSON.stringify(sData.applyUI.display);
                    newScope.display = newScope.display.replace(new RegExp("@applyKey", 'g'), key);
                    newScope.display = newScope.display.replace(new RegExp("@applyTarget", 'g'), sData.target + "." + key);
                    newScope.display = JSON.parse(newScope.display);
                    if (!sData.applyUI.list || util.contains(sData.applyUI.list, key)) {
                      if (sData.applyUI.cond == null || sync.eval(sData.applyUI.cond, scope.context)) {
                        sync.render("ui_processUI")(obj, app, newScope).appendTo(section);
                      }
                    }
                  }
                  else {
                    if (sData.applyUI.cond == null || sync.eval(sData.applyUI.cond, scope.context)) {
                      var ui = sync.render(sData.applyUI)(obj, app, newScope);
                      if (ui) {
                        ui.appendTo(section);
                      }
                    }
                  }
                }
                else {
                  var newSection = $("<div>").appendTo(section);
                  if (sData.scope && sData.scope.classes) {
                    newSection.addClass(sData.scope.classes);
                  }
                  var val = $("<text>");
                  var bool = false;
                  if (dat.min != null && dat.min) {
                    val.text(val.text() + dat.min + "/");
                    bool = true;
                  }
                  if (sync.val(dat) || sync.val(dat) == "0") {
                    val.text(val.text() + sync.val(dat));
                    bool = true;
                  }
                  if (dat.max != null) {
                    val.text(val.text() + "/" + dat.max);
                    bool = true;
                  }
                  if (bool) {
                    if (dat.name || (sData.name || sData.name === "")) {
                      var name = $("<b>").appendTo(newSection);

                      if ((sData.name || sData.name === "")) {
                        if (sData.link) {
                          name = genIcon(sData.link, sync.eval((sData.name === "")?("''"):(sData.name), scope.context)).appendTo(section);
                        }
                        else if (sData.icon) {
                          name.addClass("flexmiddle");
                          name.text(sync.eval((sData.name === "")?("''"):(sData.name), scope.context));
                          name.append(genIcon({icon : sData.icon, raw : true}));
                        }
                        else {
                          name.text(sync.eval((sData.name === "")?("''"):(sData.name), scope.context));
                        }
                      }
                      else if (sData.scope && sData.scope.key) {
                        name.text(key+ " ");
                      }
                      else {
                        name.text(dat.name + " ");
                      }
                    }
                    val.appendTo(newSection);
                  }
                }
              }
            }
          }
          else {
            var val = $("<text>").appendTo(section);
            val.text(sData.name);
          }
        }
      }
      else if (!sData.datalist) {
        if (sData.name || sData.link || sData.icon) {
          var name = $("<text>").appendTo(section);
          if (sData.link) {
            name = genIcon(sData.link, sync.eval((sData.name === "")?("''"):(sData.name), scope.context)).appendTo(section);
          }
          else if (sData.icon) {
            name.text(sync.eval((sData.name === "")?("''"):(sData.name), scope.context));
            name.append(genIcon({icon : sData.icon, raw : true}));
          }
          else {
            name.text(sync.eval((sData.name === "")?("''"):(sData.name), scope.context));
          }
        }
        if (sData.ui) {
          var newScope = duplicate(sData.scope || {});
          if (newScope && newScope.viewOnly == null) {
            newScope.viewOnly = scope.viewOnly;
          }
          if (sData.passContext) {
            newScope.context = duplicate(scope.context);
          }
          sync.render(sData.ui)(obj, app, newScope).appendTo(section);
        }
        if (sData.value) {
          var value = $("<text>").appendTo(section);
          value.text(sync.eval(sData.value, scope.context));
        }
      }
      for (var j in sData.display) {
        var limit = 1;
        if (!sData.display[j].cond || sync.eval(sData.display[j].cond, scope.context)) {
          if (sData.display[j].count) { // repeated entries, mostly for dice rolling
            limit = sync.eval(sData.display[j].count, scope.context);
          }
          for (var rpCount=0; rpCount<limit; rpCount++) {
            build(sData.display[j], lastLookup+"-display-"+j).appendTo(section);
          }
        }
      }
      for (var k in sData.apps) {
        var newScope = duplicate(sData.scope || {});
        newScope.viewOnly = scope.viewOnly;
        sync.render(sData.apps[k])(obj, app, newScope).appendTo(section);
      }
    }
    return returnSection || section;
  }

  var buildResult;
  if (scope.display instanceof Object) {
    buildResult = build(scope.display, app.attr("id")+"_0");
  }
  else {
    var parsed = (scope.display || "").replace(new RegExp("href=", 'g'), "linksrc=");
    buildResult = $("<div>").addClass("fit-xy flexcolumn").append($.parseHTML(parsed));
    // parse the result to find stuff

    buildResult.find("loop").each(function(){
      var build = $(this).html();

      $(this).empty();

      var count = $(this).attr("count");
      if (isNaN(count)) {
        count = sync.eval(count, scope.context);
      }

      for (var i=0; i<count; i++) {
        var text = build.replace(new RegExp("%"+($(this).attr("replace") || "index")+"%", 'g'), i);
        text = text.replace(new RegExp("%"+("count")+"%", 'g'), count);
        $(this).append(text);
      }
    });

    buildResult.find("list").each(function(){
      var build = $(this).html();

      $(this).empty();
      if ($(this).attr("target")) {
        var value = sync.traverse(obj.data, $(this).attr("target"));
        if (value === false) {
          value = sync.traverse(obj.data, $(this).attr("target"), {});
        }

        var ignore = {};
        if ($(this).attr("ignore")) {
          var newIgnore = $(this).attr("ignore").split(",");
          for (var key in newIgnore) {
            ignore[newIgnore[key].trim()] = true;
          }
        }

        var list;
        if ($(this).attr("keys")) {
          value = $(this).attr("keys").split(",");
        }
        else {
          list = value;
        }

        for (var key in list) {
          if (!ignore[key]) {
            var text = build.replace(new RegExp("%"+($(this).attr("replace") || "index")+"%", 'g'), key);
            text = text.replace(new RegExp("%"+($(this).attr("replace") || "path")+"%", 'g'), obj.data._t + "." + $(this).attr("target") + "." + key);
            $(this).append(text);
          }
        }
      }
    });

    buildResult.find("bank").each(function(){
      var build = $(this).html();

      $(this).empty();
      if ($(this).attr("target")) {
        var value = sync.traverse(obj.data, $(this).attr("target"));
        if (value === false) {
          value = sync.traverse(obj.data, $(this).attr("target"), {});
        }

        var ignore = {};
        if ($(this).attr("ignore")) {
          var newIgnore = $(this).attr("ignore").split(",");
          for (var key in newIgnore) {
            ignore[newIgnore[key]] = true;
          }
        }

        var list;
        if ($(this).attr("keys")) {
          value = $(this).attr("keys").split(",");
        }
        else {
          list = value;
        }

        for (var key in list) {
          if (!ignore[key]) {
            var text = build.replace(new RegExp("%"+($(this).attr("replace") || "index")+"%", 'g'), key);
            text = text.replace(new RegExp("%"+($(this).attr("replace") || "path")+"%", 'g'), obj.data._t + "." + $(this).attr("target") + "." + key);
            $(this).append(text);
          }
        }
      }
    });

    buildResult.find("popout").each(function(){
      var parsed = $(this).html();

      var runReplace = /traverse{([^}]*)}/i;
      var replaced = runReplace.exec(parsed);
      var loop = 0;
      while (replaced) {
        var macro = replaced[1];
        parsed = parsed.replace(replaced[0], "traverse[{["+macro+"]}]") ;

        replaced = runReplace.exec(parsed);
        loop++;
        if (loop > 10000) {
          break;
        }
      }

      runReplace = /eval{([^}]*)}/i;
      replaced = runReplace.exec(parsed);
      loop = 0;
      while (replaced) {
        var macro = replaced[1];
        parsed = parsed.replace(replaced[0], "eval[{["+macro+"]}]");

        replaced = runReplace.exec(parsed);
        loop++;
        if (loop > 10000) {
          break;
        }
      }

      $(this).html(parsed);
      $(this).hide();
    });

    buildResult.find("prompt").each(function(){
      var parsed = $(this).html();

      var runReplace = /traverse{([^}]*)}/i;
      var replaced = runReplace.exec(parsed);
      var loop = 0;
      while (replaced) {
        var macro = replaced[1];
        parsed = parsed.replace(replaced[0], "traverse[{["+macro+"]}]") ;

        replaced = runReplace.exec(parsed);
        loop++;
        if (loop > 10000) {
          break;
        }
      }

      runReplace = /eval{([^}]*)}/i;
      replaced = runReplace.exec(parsed);
      loop = 0;
      while (replaced) {
        var macro = replaced[1];
        parsed = parsed.replace(replaced[0], "eval[{["+macro+"]}]");

        replaced = runReplace.exec(parsed);
        loop++;
        if (loop > 10000) {
          break;
        }
      }

      $(this).html(parsed);
      $(this).hide();
    });

    buildResult.find("display").each(function(){
      var parsed = $(this).html();

      var runReplace = /traverse{([^}]*)}/i;
      var replaced = runReplace.exec(parsed);
      var loop = 0;
      while (replaced) {
        var macro = replaced[1];
        parsed = parsed.replace(replaced[0], "traverse[{["+macro+"]}]") ;

        replaced = runReplace.exec(parsed);
        loop++;
        if (loop > 10000) {
          break;
        }
      }

      runReplace = /eval{([^}]*)}/i;
      replaced = runReplace.exec(parsed);
      loop = 0;
      while (replaced) {
        var macro = replaced[1];
        parsed = parsed.replace(replaced[0], "eval[{["+macro+"]}]");

        replaced = runReplace.exec(parsed);
        loop++;
        if (loop > 10000) {
          break;
        }
      }

      $(this).html(parsed);
    });

    parsed = buildResult.html();

    var runReplace = /traverse{([^}]*)}/i;
    var replaced = parsed.match(runReplace);
    var loop = 0;
    while (replaced) {
      var macro = replaced[1];
      var retVal = sync.traverse(obj.data, macro);
      if (retVal === false) {
        retVal = "";
      }
      parsed = parsed.replace(replaced[0], retVal);

      replaced = parsed.match(runReplace);
      loop++;
      if (loop > 10000) {
        break;
      }
    }

    runReplace = /eval{([^}]*)}/i;
    replaced = parsed.match(runReplace);
    loop = 0;
    var macroCache = {};

    while (replaced) {
      var macro = replaced[1];
      if (!macroCache[macro]) {
        macroCache[macro] = sync.eval(macro.replace(new RegExp("&amp;", "g"), "&").replace(new RegExp("&gt;", "g"), ">").replace(new RegExp("&lt;", "g"), "<"), scope.context);
      }
      parsed = parsed.replace(replaced[0], macroCache[macro]);

      replaced = parsed.match(runReplace);
      loop++;
      if (loop > 10000) {
        break;
      }
    }

    buildResult.html(parsed);

    var liveTabs = {};

    buildResult.find("tabs").each(function(){
      var tabPrefix = $(this).attr("tab-category") || "";
      var tabSelected = $(this).attr("tab-selected") || "";
      var tabSelectedStyle = $(this).attr("tab-selected-style") || "";

      $(this).find("tab").each(function(){
        $(this).attr("name", $(this).attr("name") || ($(this).text() || "").trim());
        if (!app.attr(tabPrefix) && $(this).attr("primary")) {
          $(this).attr("class", tabSelected || $(this).attr("class") || "highlight alttext outline smooth spadding");
          $(this).attr("style", $(this).attr("style") || tabSelectedStyle);
          liveTabs[tabPrefix] = $(this).attr("name");
        }
        else if ($(this).attr("name") == app.attr(tabPrefix)){
          $(this).attr("class", tabSelected || $(this).attr("class") || "highlight alttext outline smooth spadding");
          $(this).attr("style", $(this).attr("style") || tabSelectedStyle);
          liveTabs[tabPrefix] = $(this).attr("name");
        }
        else {
          $(this).attr("class", $(this).attr("class") || "button bold outline smooth spadding");
          $(this).click(function(){
            app.attr(tabPrefix, $(this).attr("name"));
            obj.update();
          });
        }
      });
    });

    for (var key in liveTabs) {
      if (key) {
        buildResult.find("["+key+"]").each(function(){
          if ($(this).attr(key) != liveTabs[key]) {
            $(this).remove();
          }
        });
      }
    }

    buildResult.find("textarea").each(function(){
      var value = sync.traverse(obj.data, $(this).attr("target"));
      if (value === false) { // field was not found
        // obviously it belongs here
        value = sync.traverse(obj.data, $(this).attr("target"), sync.newValue());
      }

      genInput({
        type : "textarea",
        min : $(this).attr("min"),
        max : $(this).attr("max"),
        step : $(this).attr("step"),
        value : value,
        obj : obj,
        cmd : "updateAsset",
        disabled : scope.viewOnly,
      }, null, $(this));
    });
    buildResult.find("input").each(function(){
      var value = sync.traverse(obj.data, $(this).attr("target"));
      if (value === false) { // field was not found
        // obviously it belongs here
        value = sync.traverse(obj.data, $(this).attr("target"), sync.newValue());
      }

      var selectData;
      $(this).find("option").each(function(){
        selectData = selectData || [];
        selectData.push($(this).text());
      });

      if ($(this).attr("mod") && !(value instanceof Object)) {
        value = sync.traverse(obj.data, $(this).attr("target"), sync.newValue(null, value));
      }

      genInput({
        type : $(this).attr("type"),
        min : $(this).attr("min"),
        max : $(this).attr("max"),
        step : $(this).attr("step"),
        checked : ($(this).attr("type") == "checkbox" || $(this).attr("type") == "radio")?($(this).attr("check")):(null),
        unchecked : ($(this).attr("type") == "checkbox" || $(this).attr("type") == "radio")?($(this).attr("uncheck")):(null),
        raw : ($(this).attr("field") != "name")?($(this).attr("field")):(null),
        mod : $(this).attr("mod"),
        name : ($(this).attr("field") == "name")?(true):(null),
        list : selectData,
        value : value,
        obj : obj,
        cmd : "updateAsset",
        disabled : scope.viewOnly,
      }, null, $(this));
      if ($(this).attr("isChecked") == true || $(this).attr("isChecked") == "true"){
        $(this).prop("checked", true);
      }
    });

    buildResult.find("datalist").each(function(){
      var value = sync.traverse(obj.data, $(this).attr("target"));
      if (value === false) { // field was not found
        // obviously it belongs here
        value = sync.traverse(obj.data, $(this).attr("target"), sync.newValue());
      }

      var selectData;
      $(this).find("option").each(function(){
        selectData = selectData || [];
        selectData.push($(this).attr("value") || $(this).text());
      });

      var wrap = $("<div>");

      var input = genInput({
        parent : wrap,
        classes : $(this).attr("class"),
        type : $(this).attr("type"),
        min : $(this).attr("min"),
        max : $(this).attr("max"),
        step : $(this).attr("step"),
        list : selectData,
        value : value,
        obj : obj,
        cmd : "updateAsset",
        disabled : scope.viewOnly,
      });
      input.attr("style", $(this).attr("style"));
      $(this).replaceWith($(wrap.children()[0]));
    });


    buildResult.find("select").each(function(){
      var value = sync.traverse(obj.data, $(this).attr("target"));
      if (value === false) { // field was not found
        // obviously it belongs here
        value = sync.traverse(obj.data, $(this).attr("target"), sync.newValue());
      }

      var selectData = {};
      $(this).find("option").each(function(){
        selectData[$(this).text()] = $(this).attr("value") || $(this).text();
      });

      genInput({
        select : selectData,
        min : $(this).attr("min"),
        max : $(this).attr("max"),
        step : $(this).attr("step"),
        value : value,
        obj : obj,
        cmd : "updateAsset",
        disabled : scope.viewOnly,
      }, null, $(this));
    });
    buildResult.find("[cond]").each(function(){
      if ($(this).attr("cond") == 0 || $(this).attr("cond") == "0" || $(this).attr("cond") == "false" || !sync.eval($(this).attr("cond"), scope.context)) {
        $(this).remove();
      }
    });
    buildResult.on('click', '[edit]', function(ev){
      if (!$(this).is("input") && !$(this).is(":focus")) {
        var el = $(this);
        el.keydown(function(e) {
          // trap the return key being pressed
          if (e.keyCode === 13 && !_down[16]) {
            // insert 2 br tags (if only one br tag is inserted the cursor won't go to the next line)
            el.blur();
            // prevent the default behaviour of return key pressed
            return false;
          }
        });
        el.attr('contenteditable','true');
        var tgt = el.attr("edit");

        var val = sync.traverse(obj.data,tgt);

        if (val instanceof Object) {
          el.html(sync.rawVal(val));
        }
        else {
          el.html(val);
        }

        var save = function(){
            el.attr('contenteditable','false');
            if(el.html().trim().replace("\n","")=="")
            {
                el.css("min-width","10px");
                el.css("min-height","10px");
                el.css("border-bottom","1px solid");
            }

            if (val instanceof Object) {
              sync.rawVal(val, el.html().replace("<br>", ""));
            }
            else {
              sync.traverse(obj.data, tgt, el.html().replace("<br>", ""));
            }
            obj.sync("updateAsset")
            //alert("Saved!");
        };
        el.one('blur', save).focus();
      }
    });

    buildResult.find("click").each(function(){
      // prompt
      // pool
      if (!$(this).parent().attr("class") && !$(this).parent().attr("style") && !$(this).parent().is("button")) {
        $(this).parent().addClass("underline link");
      }
      var clickData = $(this);
      $(this).find("setAttr").hide();
      $(this).find("create").hide();
      $(this).find("change").hide();
      $(this).find("chat").hide();
      $(this).find("display").hide();
      $(this).find("delete").hide();
      $(this).find("prompt").hide();
      $(this).find("popout").hide();
      $(this).find("var").hide();
      $(this).find("view").hide();

      $(this).parent().click(function(ev){
        var ctx = sync.defaultContext();
        ctx[obj.data._t] = duplicate(obj.data);

        var saveTable = {};

        function execute(){
          clickData.find("create").each(function(){
            if ($(this).attr("type") && $(this).attr("target")) {
              var lookup = $(this).attr("target");
              var type = $(this).attr("type").toLowerCase();
              var lookupData = sync.traverse(obj.data, lookup);
              for (var key in game.templates.elements) {
                if (key.toLowerCase() == type) {
                  type = key;
                }
              }

              if (game.templates.elements && game.templates.elements[type]) {
                if (lookupData && lookupData instanceof Object) {
                  var newObj = duplicate(game.templates.elements[type]);
                  if (Array.isArray(lookupData)) {
                    lookupData.push(newObj);
                    obj.sync("updateAsset");
                  }
                  else {
                    ui_prompt({
                      target : app,
                      inputs : {
                        "Name" : "",
                      },
                      click : function(ev, inputs) {
                        if (inputs["Name"].val()) {
                          newObj._dropKey = inputs["Name"].val().toLowerCase().replace(/ /g,"_");
                          sync.rawVal(newObj.info.name, inputs["Name"].val());
                          lookupData[inputs["Name"].val().toLowerCase().replace(/ /g,"_")] = newObj;
                          obj.sync("updateAsset");
                        }
                      }
                    });
                  }
                }
              }
              else {
                sendAlert({text : "Element not found!"});
              }
            }
          });

          clickData.find("popout").each(function(){
            $(this).hide();
            if ($(this).attr("src")) {
              var src = $("<div>").load("/html/" + $(this).attr("src"), function(response, status, xhr) {
                $(this).find("[close]").each(function(){
                  $(this).attr("close", "sheet-popout-"+$(this).attr("id"));
                });
                var newScope = duplicate(scope);
                var parsed = $(this).html();
                var loop = 0;
                var rg =/\[{\[/;
                while (parsed.match(rg)) {
                  parsed = parsed.replace("\[{\[", "{");
                  loop++;
                  if (loop > 10000) {
                    break;
                  }
                }
                var rg1 = /\]}\]/;
                while (parsed.match(rg1)) {
                  parsed = parsed.replace("\]}\]", "}");
                  loop++;
                  if (loop > 10000) {
                    break;
                  }
                }

                newScope.display = parsed;

                var pop = ui_popOut({
                  id : "sheet-popout-"+$(this).attr("id"),
                  target : $("body"),
                  title : $(this).attr("title"),
                  style : {"width" : $(this).attr("width") || "400px", "height" : $(this).attr("height") || "400px"}
                }, sync.render("ui_processUI")(obj, app, newScope));
                pop.resizable();
              });
            }
            else {
              $(this).find("[close]").each(function(){
                $(this).attr("close", "sheet-popout-"+$(this).attr("id"));
              });
              var newScope = duplicate(scope);

              var parsed = $(this).html();
              var loop = 0;
              var rg =/\[{\[/;
              while (parsed.match(rg)) {
                parsed = parsed.replace("\[{\[", "{");
                loop++;
                if (loop > 10000) {
                  break;
                }
              }
              var rg1 = /\]}\]/;
              while (parsed.match(rg1)) {
                parsed = parsed.replace("\]}\]", "}");
                loop++;
                if (loop > 10000) {
                  break;
                }
              }

              newScope.display = parsed;

              var pop = ui_popOut({
                id : "sheet-popout-"+$(this).attr("id"),
                target : $("body"),
                title : $(this).attr("title"),
                style : {"width" : $(this).attr("width") || "400px", "height" : $(this).attr("height") || "400px"}
              }, sync.render("ui_processUI")(obj, app, newScope));
              pop.resizable();
            }
          });

          clickData.find("change").each(function(){
            $(this).hide();
            var lookupTarget = $(this).attr("target");
            var lookupValue = sync.traverse(obj.data, lookupTarget);

            if (lookupValue._t == "i") {
              var frame = $("<div>");
              frame.addClass("flex flexcolumn");

              game.locals["editItem"] = game.locals["editItem"] || sync.obj("editItem");
              game.locals["editItem"].data = duplicate(lookupValue);

              merge(game.locals["editItem"].data, duplicate(game.templates.item));

              var newApp = sync.newApp("ui_renderItemv2").appendTo(frame);
              newApp.attr("char-ref", obj.id());
              newApp.attr("viewOnly", scope.viewOnly);

              var split = lookupTarget.split(".");

              newApp.attr("path", lookupTarget.replace("."+split[split.length-1], ""));
              newApp.attr("index", split[split.length-1]);

              if (lookupValue._s && !hasSecurity(getCookie("UserID"), "Owner", obj.data) && !hasSecurity(getCookie("UserID"), "Rights", lookupValue))  {
                newApp.attr("viewOnly", true);
              }
              newApp.attr("local", "true");

              game.locals["editItem"].addApp(newApp);

              if (!scope.viewOnly) {
                var confirm = $("<button>").appendTo(frame);
                confirm.addClass("fit-x");
                confirm.append("Confirm");
                confirm.click(function(){
                  sync.traverse(obj.data, lookupTarget, duplicate(game.locals["editItem"].data));
                  obj.sync("updateAsset");
                  layout.coverlay("edit-item");
                });
              }
              var pop = ui_popOut({
                id : "edit-item",
                target : app,
                maximize : true,
                minimize : true,
                style : {"width" : assetTypes["i"].width, "height" : assetTypes["i"].height}
              }, frame);
              pop.resizable();
            }
            else {
              var frame = $("<div>");
              frame.addClass("flexcolumn flex");

              var talentData = duplicate(lookupValue);

              game.locals["editTalent"] = game.locals["editTalent"] || sync.obj("editTalent");
              game.locals["editTalent"].data = duplicate(game.templates.page);
              game.locals["editTalent"].data._t = "t";

              game.locals["editTalent"].data.info.name = sync.newValue("Name", duplicate(talentData.name));
              game.locals["editTalent"].data.info.img = sync.newValue("Img", null);
              game.locals["editTalent"].data.info.notes = sync.newValue("Notes", duplicate(talentData.current));

              var newApp = sync.newApp("ui_editPage").appendTo(frame);
              newApp.attr("autosave", true);
              newApp.attr("entry", true);
              game.locals["editTalent"].addApp(newApp);

              var confirm = $("<button>").appendTo(frame);
              confirm.addClass("fit-x");
              confirm.append("Confirm");
              confirm.click(function(){
                if (sync.rawVal(game.locals["editTalent"].data.info.name)) {
                  sync.traverse(obj.data, lookupTarget+".name", duplicate(game.locals["editTalent"].data.info.name.current));
                  sync.traverse(obj.data, lookupTarget+".current", duplicate(game.locals["editTalent"].data.info.notes.current));
                  obj.sync("updateAsset");
                  layout.coverlay("edit-talent");
                }
                else {
                  sendAlert({text : "Name required"});
                }
              });

              var pop = ui_popOut({
                target : app,
                id : "edit-talent",
                style : {width : "400px", height : "400px"}
              }, frame);
              pop.resizable();
            }
          });

          clickData.find("view").each(function(){
            $(this).hide();
            var frame = $("<div>");
            frame.addClass("flexcolumn flex");

            var talentData = duplicate(sync.traverse(obj.data, $(this).attr("target")));

            var viewTalent = sync.obj("viewTalent");
            viewTalent.data = duplicate(game.templates.page);
            viewTalent.data._t = "t";
            sync.rawVal(viewTalent.data.info.name, duplicate(talentData.name));
            sync.rawVal(viewTalent.data.info.notes, duplicate(talentData.current));

            var newApp = sync.newApp("ui_renderPage").appendTo(frame);
            newApp.attr("viewOnly", true);
            viewTalent.addApp(newApp);

            var pop = ui_popOut({
              target : app,
              id : "view-talent",
              title : sync.rawVal(talentData.name),
              style : {width : "400px", height : "400px"}
            }, frame);
            pop.resizable();
          });

          clickData.find("delete").each(function(){
            $(this).hide();
            sync.traverse(obj.data, $(this).attr("target"), "");
            obj.sync("updateAsset");
          });

          var changed = false;
          clickData.find("setAttr").each(function(){
            $(this).hide();

            var calcData = {target : $(this).attr("target"), eq : $(this).attr("value"), cond : $(this).attr("condition")};

            if (!calcData.cond || sync.eval(calcData.cond, ctx)) {
              var result = sync.eval(calcData.eq, ctx);

              var target = sync.traverse(obj.data, calcData.target);
              if (target instanceof Object) {
                sync.rawVal(target, result);
              }
              else {
                sync.traverse(obj.data, calcData.target, result);
              }
              changed = true;
            }
          });
          if (changed) {
            obj.sync("updateAsset");
          }

          clickData.find("chat").each(function(){
            $(this).hide();
            var chatObj = $(this);
            var chatData = {};
            var targets = util.getTargets();
            var varTable = duplicate(saveTable);
            $(this).find("var").each(function(){
              $.each( $(this)[0].attributes, function ( index, attribute ) {
                varTable[attribute.name] = sync.eval(attribute.value, ctx);
              });
            });
            $(this).find("pull").each(function(){
              for (var k in targets) {
                var tg = getEnt(targets[k]);
                if (tg && tg.data) {
                  $.each( $(this)[0].attributes, function ( index, attribute ) {
                    varTable[attribute.name] = sync.eval(attribute.value, {c : duplicate(tg.data)});
                  });
                }
              }
            });

            ctx.eval = varTable;
            $.each( $(this)[0].attributes, function ( index, attribute ) {
              if (attribute.name != "classes" && attribute.name != "style") {
                chatData[attribute.name] = sync.eval(attribute.value, ctx);
              }
            });

            var effectData;

            $(this).find("effect").each(function(){
              $(this).hide();
              effectData = effectData || {};
              var calcData = {target : $(this).attr("target"), eq : $(this).attr("eq"), cond : $(this).attr("cond")};

              for (var k in targets) {
                var tg = getEnt(targets[k]);
                if (tg && tg.data) {
                  effectData[targets[k]] = [];
                  if (calcData.cond == null || sync.eval(calcData.cond, ctx)) {
                    calcData.eq = sync.eval(calcData.eq, ctx);
                    effectData[targets[k]].push(calcData);
                  }
                }
              }
            });

            chatData.person = chatData.person || sync.rawVal(obj.data.info.name);
            chatData.icon = chatData.icon || sync.rawVal(obj.data.info.img);
            chatData.color = chatData.color || game.players.data[getCookie("UserID")].color;
            chatData.eID = obj.id();
            chatData.effects = effectData;

            if ($(this).attr("roll")) {
              delete chatData.eventData;
              chatData.eventData = sync.executeQuery($(this).attr("roll"), ctx);
              chatData.eventData.var = varTable;
              chatData.eventData.ui = $(this).attr("roll-ui");
            }
            else if ($(this).attr("text")) {
              chatData.text = sync.eval(chatData.text, ctx);
            }
            else {
              clickData.find("display").each(function(){
                var parsed = $(this).html();
                var loop = 0;
                var rg =/\[{\[/;
                while (parsed.match(rg)) {
                  parsed = parsed.replace("\[{\[", "{");
                  loop++;
                  if (loop > 10000) {
                    break;
                  }
                }
                var rg1 = /\]}\]/;
                while (parsed.match(rg1)) {
                  parsed = parsed.replace("\]}\]", "}");
                  loop++;
                  if (loop > 10000) {
                    break;
                  }
                }

                var runReplace = /traverse{([^}]*)}/i;
                var replaced = parsed.match(runReplace);
                var loop = 0;
                while (replaced) {
                  var macro = replaced[1];
                  var retVal = sync.traverse(obj.data, macro);
                  if (retVal === false) {
                    retVal = "";
                  }
                  parsed = parsed.replace(replaced[0], retVal);

                  replaced = parsed.match(runReplace);
                  loop++;
                  if (loop > 10000) {
                    break;
                  }
                }

                runReplace = /eval{([^}]*)}/i;
                replaced = parsed.match(runReplace);
                loop = 0;
                var macroCache = {};

                while (replaced) {
                  var macro = replaced[1];
                  if (!macroCache[macro]) {
                    macroCache[macro] = sync.eval(macro.replace(new RegExp("&amp;", "g"), "&").replace(new RegExp("&gt;", "g"), ">").replace(new RegExp("&lt;", "g"), "<"), ctx);
                  }
                  parsed = parsed.replace(replaced[0], macroCache[macro]);

                  replaced = parsed.match(runReplace);
                  loop++;
                  if (loop > 10000) {
                    break;
                  }
                }
                chatData.display = parsed;
              });
              util.unSelectTargets();
            }

            if ($(this).attr("private") && sync.eval($(this).attr("private"), ctx)) {
              var priv = {};
              priv[getCookie("UserID")] = true;
              chatData.p = priv;
            }

            $(this).find("save").each(function(){
              var tempCtx;
              if (chatData.eventData) {
                tempCtx = duplicate(ctx);
                tempCtx["pool"] = duplicate(chatData.eventData.pool);
              }

              $.each( $(this)[0].attributes, function ( index, attribute ) {
                saveTable[attribute.name] = sync.eval(attribute.value, tempCtx || ctx);
              });
            });

            runCommand("chatEvent", chatData);
          });
        }

        if (clickData.find("prompt").length) {
          if ($("#"+"sheet-popout-"+clickData.find("prompt").attr("id")).length) {
            $("#"+"sheet-popout-"+clickData.find("prompt").attr("id")+"-confirm").click();
          }
          else {
            var targets = util.getTargets();
            var varTable = duplicate(saveTable);
            $(this).find("var").each(function(){
              $.each( $(this)[0].attributes, function ( index, attribute ) {
                varTable[attribute.name] = sync.eval(attribute.value, ctx);
              });
            });
            $(this).find("pull").each(function(){
              for (var k in targets) {
                var tg = getEnt(targets[k]);
                if (tg && tg.data) {
                  $.each( $(this)[0].attributes, function ( index, attribute ) {
                    varTable[attribute.name] = sync.eval(attribute.value, {c : duplicate(tg.data)});
                  });
                }
              }
            });

            ctx.eval = varTable;

            var content = $("<div>");
            content.addClass("flexcolumn flex");

            clickData.find("prompt").each(function(){
              var parsed = $(this).html();
              var loop = 0;
              var rg =/\[{\[/;
              while (parsed.match(rg)) {
                parsed = parsed.replace("\[{\[", "{");
                loop++;
                if (loop > 10000) {
                  break;
                }
              }
              var rg1 = /\]}\]/;
              while (parsed.match(rg1)) {
                parsed = parsed.replace("\]}\]", "}");
                loop++;
                if (loop > 10000) {
                  break;
                }
              }

              var runReplace = /traverse{([^}]*)}/i;
              var replaced = parsed.match(runReplace);
              var loop = 0;
              while (replaced) {
                var macro = replaced[1];
                var retVal = sync.traverse(obj.data, macro);
                if (retVal === false) {
                  retVal = "";
                }
                parsed = parsed.replace(replaced[0], retVal);

                replaced = parsed.match(runReplace);
                loop++;
                if (loop > 10000) {
                  break;
                }
              }

              runReplace = /eval{([^}]*)}/i;
              replaced = parsed.match(runReplace);
              loop = 0;
              var macroCache = {};

              while (replaced) {
                var macro = replaced[1];
                if (!macroCache[macro]) {
                  macroCache[macro] = sync.eval(macro.replace(new RegExp("&amp;", "g"), "&").replace(new RegExp("&gt;", "g"), ">").replace(new RegExp("&lt;", "g"), "<"), ctx);
                }
                parsed = parsed.replace(replaced[0], macroCache[macro]);

                replaced = parsed.match(runReplace);
                loop++;
                if (loop > 10000) {
                  break;
                }
              }
              content.append(parsed);
              content.find("var").each(function(){
                $.each( $(this)[0].attributes, function ( index, attribute ) {
                  saveTable[attribute.name] = sync.eval(attribute.value, ctx);
                });
              });
              content.find("pull").each(function(){
                for (var k in targets) {
                  var tg = getEnt(targets[k]);
                  if (tg && tg.data) {
                    $.each( $(this)[0].attributes, function ( index, attribute ) {
                      saveTable[attribute.name] = sync.eval(attribute.value, {c : duplicate(tg.data)});
                    });
                  }
                }
              });
            });

            content.find("userselect").each(function(){
              var style = $(this).attr("style");
              var classStyle = $(this).attr("class");
              var varName = $(this).attr("varname");
              var value = sync.eval($(this).attr("value"), ctx);
              var input = genInput({
                select : selectData,
                min : $(this).attr("min"),
                max : $(this).attr("max"),
                step : $(this).attr("step"),
                value : value,
                disabled : scope.viewOnly,
              });
              saveTable[varName] = value;

              input.attr("style", style);
              input.attr("class", classStyle);
              $(this).replaceWith(input);
              input.change(function(){
                saveTable[varName] = $(this).val();
              });
            });
            content.find("userinput").each(function(){
              var selectData;
              var style = $(this).attr("style");
              var classStyle = $(this).attr("class");

              var varName = $(this).attr("varname");
              var value = sync.eval($(this).attr("value"), ctx);
              $(this).find("option").each(function(){
                selectData = selectData || [];
                selectData.push($(this).text());
              });
              var input = genInput({
                type : $(this).attr("type"),
                min : $(this).attr("min"),
                max : $(this).attr("max"),
                step : $(this).attr("step"),
                checked : ($(this).attr("type") == "checkbox" || $(this).attr("type") == "radio")?($(this).attr("check")):(null),
                unchecked : ($(this).attr("type") == "checkbox" || $(this).attr("type") == "radio")?($(this).attr("uncheck")):(null),
                list : selectData,
                value : value,
                disabled : scope.viewOnly,
              });
              saveTable[varName] = value;
              input.attr("style", style);
              input.attr("class", classStyle);
              $(this).replaceWith(input);
              var options = {type : $(this).attr("type"), checked : $(this).attr("check"), unchecked : $(this).attr("uncheck")};
              input.change(function(){
                if (options.type == "checkbox" || options.type == "radio") {
                  if (input.val() == options.checked) {
                    input.prop("checked", true);
                    saveTable[varName] = options.checked;
                  }
                  else {
                    input.prop("checked", false);
                    saveTable[varName] = options.unchecked;
                  }
                }
                else {
                  saveTable[varName] = $(this).val();
                }
              });
              if ($(this).attr("isChecked") == true || $(this).attr("isChecked") == "true"){
                $(this).prop("checked", true);
              }
            });

            var button = $("<button>").appendTo(content);
            button.attr("id", "sheet-popout-"+clickData.find("prompt").attr("id")+"-confirm");
            button.text("Confirm");
            button.click(function(){
              execute();
              layout.coverlay(pop);
            });

            var pop = ui_popOut({
              id : "sheet-popout-"+clickData.find("prompt").attr("id"),
              target : (clickData.find("prompt").attr("align"))?($(this).parent()):($("body")),
              title : clickData.find("prompt").attr("title"),
              align : clickData.find("prompt").attr("align"),
              style : {"width" : clickData.find("prompt").attr("width"), "height" : clickData.find("prompt").attr("height")}
            }, content);
            pop.resizable();
          }
        }
        else {
          execute();
          if ($(this).attr("close")) {
            layout.coverlay($(this).attr("close"));
          }
        }
        ev.stopPropagation();
      });
    });

    buildResult.find("ui").each(function(){
      var newScope = {};
      newScope.viewOnly = scope.viewOnly;

      $.each( $(this)[0].attributes, function ( index, attribute ) {
        if (attribute.name.match("scope-")) {
          newScope[attribute.name.replace("scope-", "")] = attribute.value;
        }
      });
      var result = sync.render($(this).attr("name"))(obj, app, newScope);
      if ($(this).attr("class")) {
        result.attr("class", $(this).attr("class"));
      }
      if ($(this).attr("style")) {
        result.attr("style", $(this).attr("style"));
      }
      $(this).replaceWith(result);
    });

    buildResult.find("list").each(function(){
      var sortTarget = $(this).attr("target");
      var sortableHook = $(this).attr("connect");
      var sortList = [".compendiumContent"];
      if (sortableHook) {
        sortList.push("list."+sortableHook);
        if (!$(this).hasClass(sortableHook)) {
          $(this).addClass(sortableHook);
        }
      }
      var div = $(this);

      $(this).children().each(function(index){
        $(this).attr("index", obj.id());
        $(this).data("item", JSON.stringify(sync.traverse(obj.data, sortTarget+"."+index)));
      });

      $(this).addClass(sortableHook);
      $(this).sortable({
        connectWith : [".dropContent", "."+sortableHook],
        over : function(ev, ui){
          if ($(ui.item).attr("index") != null && $(ui.item).attr("index") != obj.id() && $(ui.item).attr("key") != null) {
            if (!$("#"+app.attr("id")+sortableHook+"-drag-overlay").length) {
              var olay = layout.overlay({
                target : div,
                id : app.attr("id")+sortableHook+"-drag-overlay",
                style : {"background-color" : "rgba(0,0,0,0.5)"}
              });
              olay.addClass("flexcolumn flexmiddle alttext");
              olay.css("font-size", "2em");
              olay.css("pointer-events", "none");
              olay.css("z-index", util.getMaxZ(".ui-popout"));
              olay.append("<b>Drop</b>");
            }
          }
        },
        out : function(ev, ui) {
          layout.coverlay(app.attr("id")+sortableHook+"-drag-overlay");
        },
        update : function(ev, ui) {
          var newData = [];
          div.children().each(function(){
            newData.push(JSON.parse($(this).data("item")));
          });
          var value = sync.traverse(obj.data, sortTarget, newData);
          obj.sync("updateAsset");
        }
      });
    });

    buildResult.find("bank").each(function(){
      var sortTarget = $(this).attr("target");
      var sortableHook = $(this).attr("connect");
      var sortList = [".compendiumContent"];
      if (sortableHook) {
        sortList.push("bank."+sortableHook);
        if (!$(this).hasClass(sortableHook)) {
          $(this).addClass(sortableHook);
        }
      }
      var div = $(this);

      $(this).children().each(function(index){
        $(this).attr("index", obj.id());
        var list = sync.traverse(obj.data, sortTarget);
        $(this).data("item", JSON.stringify(sync.traverse(obj.data, sortTarget+"."+Object.keys(list)[index])));
        $(this).data("dropKey", sync.traverse(obj.data, sortTarget+"."+Object.keys(list)[index])._dropKey);
      });

      $(this).addClass(sortableHook);
      $(this).sortable({
        connectWith : [".dropContent", "."+sortableHook],
        over : function(ev, ui){
          if ($(ui.item).attr("index") != null && $(ui.item).attr("index") != obj.id() && $(ui.item).attr("key") != null) {
            if (!$("#"+app.attr("id")+sortableHook+"-drag-overlay").length) {
              var olay = layout.overlay({
                target : div,
                id : app.attr("id")+sortableHook+"-drag-overlay",
                style : {"background-color" : "rgba(0,0,0,0.5)"}
              });
              olay.addClass("flexcolumn flexmiddle alttext");
              olay.css("font-size", "2em");
              olay.css("pointer-events", "none");
              olay.css("z-index", util.getMaxZ(".ui-popout"));
              olay.append("<b>Drop</b>");
            }
          }
        },
        out : function(ev, ui) {
          layout.coverlay(app.attr("id")+sortableHook+"-drag-overlay");
        },
        update : function(ev, ui) {
          var newData = {};
          div.children().each(function(){
            newData[$(this).data("dropKey")] = JSON.parse($(this).data("item"));
          });
          var value = sync.traverse(obj.data, sortTarget, newData);
          obj.sync("updateAsset");
        }
      });
    });

    buildResult.find(".scroll").each(function(){
      $(this).attr("_lastScrollTop-", app.attr("_lastScrollTop-"+"idplaceholder"));
      $(this).attr("_lastScrollLeft-", app.attr("_lastScrollLeft-"+"idplaceholder"));
      $(this).scroll(function(){
        app.attr("_lastScrollTop-"+"idplaceholder", $(this).scrollTop());
        app.attr("_lastScrollLeft-"+"idplaceholder", $(this).scrollLeft());
      });
    });
    buildResult.find(".scroll-xy").each(function(){
      $(this).attr("_lastScrollTop-", app.attr("_lastScrollTop-"+"idplaceholder"));
      $(this).attr("_lastScrollLeft-", app.attr("_lastScrollLeft-"+"idplaceholder"));
      $(this).scroll(function(){
        app.attr("_lastScrollTop-"+"idplaceholder", $(this).scrollTop());
        app.attr("_lastScrollLeft-"+"idplaceholder", $(this).scrollLeft());
      });
    });
    buildResult.find(".scroll-x").each(function(){
      $(this).attr("_lastScrollTop-", app.attr("_lastScrollTop-"+"idplaceholder"));
      $(this).attr("_lastScrollLeft-", app.attr("_lastScrollLeft-"+"idplaceholder"));
      $(this).scroll(function(){
        app.attr("_lastScrollTop-"+"idplaceholder", $(this).scrollTop());
        app.attr("_lastScrollLeft-"+"idplaceholder", $(this).scrollLeft());
      });
    });
    buildResult.find(".scroll-y").each(function(){
      $(this).attr("_lastScrollTop-", app.attr("_lastScrollTop-"+"idplaceholder"));
      $(this).attr("_lastScrollLeft-", app.attr("_lastScrollLeft-"+"idplaceholder"));
      $(this).scroll(function(){
        app.attr("_lastScrollTop-"+"idplaceholder", $(this).scrollTop());
        app.attr("_lastScrollLeft-"+"idplaceholder", $(this).scrollLeft());
      });
    });
  }
  return buildResult;
});


sync.render("ui_progressBar", function(obj, app, scope){
  scope = scope || {viewOnly : app.attr("viewOnly") == "true"};

  var data = obj.data;
  var value = sync.traverse(data, scope.lookup);

  var statBar = $("<div>");
  statBar.addClass("fit-x");

  var valueBar = $("<div>").appendTo(statBar);
  valueBar.addClass("flexrow flexmiddle");
  var ctx;
  if (scope.percentage || scope.max || scope.col) {
    ctx = sync.defaultContext();
    ctx["c"] = obj.data;
  }
  if (scope.percentage && scope.max) {
    value = {current : sync.eval(scope.percentage, ctx), max : sync.eval(scope.max, ctx)};
  }

  if (value.max) {
    var progress = $("<div>").appendTo(valueBar);
    progress.addClass("outline flex");
    progress.css("position", "relative");
    progress.css("border-radius", "2px");
    progress.css("height", scope.height || "8px");
    progress.css("min-width", "20px");
    var percentage = Number(sync.val(value))/Number(value.max || sync.val(value));
    var col = "rgb("+(200-Math.ceil(200 * percentage))+","+(Math.ceil(200 * percentage))+",0)";
    if (scope.col) {
      ctx["percentage"] = percentage;
      col = sync.eval(scope.col, ctx);
    }
    progress.css("background-color", col);

    var bar = $("<div>").appendTo(progress);
    if (percentage != 1) {
      bar.addClass("outline");
    }
    bar.css("position", "absolute");
    bar.css("right", 0);
    bar.css("width", 100-Math.ceil(sync.val(value)/value.max * 105)+"%");
    bar.css("background-color", "grey");
    bar.css("height", "100%");
  }

  return statBar;
});

sync.render("ui_diceable", function(obj, app, scope){
  var div = $("<div>");
  if (scope.classes) {
    div.addClass(scope.classes);
  }
  else {
    div.addClass("flex flexcolumn flexmiddle");
  }

  var data = obj.data;
  var value;
  if (scope.lookup) {
    value = sync.traverse(data, scope.lookup);
  }
  if (scope.name) {
    div.append("<b>"+sync.eval(scope.name, {value : value, c : obj.data})+"</b>");
  }

  if (scope.value) {
    div.append(sync.eval(scope.value, {value : value, c : obj.data}));
  }
  else {
    div.append("<text>"+sync.val(value)+"</text>")
  }

  if (scope.action) {
    div.addClass("hover2");
    div.click(function(ev) {
      var actionObj = sync.dummyObj();
      actionObj.data = {context : {c : obj.id()}, options : scope.options, action : scope.action, msg : scope.msg};

      game.locals["actions"] = game.locals["actions"] || [];
      game.locals["actions"].push(actionObj);

      var newApp = sync.newApp("ui_actions");
      actionObj.addApp(newApp);

      var pop = ui_popOut({
        target : $(this),
        minimize : true,
        dragThickness : "0.5em",
        title : "Actions"
      }, newApp);
      pop.resizable();
    });
  }
  if (scope.eventData) {
    div.addClass("hover2");
    div.click(function(ev) {
      var context = sync.defaultContext();
      context["c"] = duplicate(obj.data);
      context["target"] = value;
      context["lookup"] = scope.lookup;
      _diceable(ev, $(this), scope.eventData, context);
    });
  }

  return div;
});

sync.render("ui_rankedStat", function(obj, app, scope) {
  var data = obj.data;

  var stat = sync.traverse(data, scope.lookup);
  var statIndex = scope.lookup.split(".");
  statIndex = statIndex[statIndex.length-1];

  var content = $("<div>");
  content.addClass("flexcolumn flexmiddle");

  var advanceDiv = $("<div>").appendTo(content);
  for (var i=1; i<6; i++) {
    var advancement = genInput({
      parent: advanceDiv,
      class: "advancement",
      type: "checkbox",
      id: statIndex+"_adv",
      rank: i,
      disabled: scope.viewOnly,
      style: {"width": "10px", "height": "10px"}
    });

    if (sync.modifier(stat, "rank") > 0 && i * 5 <= sync.modifier(stat, "rank")) {
      advancement.prop("checked", true);
    }
    if (!scope.viewOnly) {
      advancement.change(function(ev) {
        if ($(this).prop("checked")) {
          sync.modifier(stat, "rank", parseInt($(this).attr("rank")) * 5);
          obj.sync("updateAsset");
        }
        else {
          var val = Math.max(parseInt($(this).attr("rank"))-1,0) * 5;
          if (val <= 0) {
            sync.removeModifier(stat, "rank");
          }
          else {
            sync.modifier(stat, "rank", val);
          }
          obj.sync("updateAsset");
        }
      });
    }
  }

  var statValue = genInput({
    parent: content,
    class: "ui-stat",
    value: stat,
    raw: true,
    disabled: scope.viewOnly,
    obj: obj,
    cmd: "updateAsset"
  });
  if (statValue.val().length > 3) {
    statValue.addClass("subtitle");
    statValue.css("width", "80px");
  }
  var diceTemplates = game.templates.dice;
  var die = diceTemplates.pool[diceTemplates.defaults[0]].value;

  var modf;
  if (!scope.viewOnly && !scope.noMods) {
    modf = function(ev, inputs, options) {
      if (inputs["Modifier Name"].val().valid()) {
        sync.modifier(options.value, inputs["Modifier Name"].val(), parseInt(inputs["Value"].val()));
        obj.sync("updateAsset");
      }
    }
  }

  var context = sync.defaultContext();
  context["c"] = obj.data;
  context["stat"] = stat;
  context["statKey"] = statIndex;

  var statUI = ui_modified({
    title : statIndex,
    value : stat,
    modify : modf,
    click : function(ev, ui, options) {
      if (!scope.viewOnly) {
        sync.removeModifier(options.value, ui.attr("index"));
        obj.sync("updateAsset");
      }
    },
    total : sync.val(stat),
    reveal : true,
    context : context,
    diceable : scope.eventData,
    totalClick : function(ev, ui, options, context) {
      var actionObj = sync.dummyObj();
      actionObj.data = {context : {c : obj.id()}, options : scope.options, action : scope.action, msg : scope.msg};

      game.locals["actions"] = game.locals["actions"] || [];
      game.locals["actions"].push(actionObj);

      var newApp = sync.newApp("ui_actions");
      actionObj.addApp(newApp);

      var pop = ui_popOut({
        target : ui,
        minimize : true,
        dragThickness : "0.5em",
        title : "Actions"
      }, newApp);
      pop.resizable();
    },
  }, content);
  statUI.css("background-color", "white");
  return statUI;
});

sync.render("ui_fantasyStat", function(obj, app, scope) {
  var data = obj.data;

  var stat = sync.traverse(data, scope.lookup);

  var statIndex = scope.lookup.split(".");
  statIndex = statIndex[statIndex.length-1];

  var content = $("<div>");
  content.addClass("flexcolumn flexmiddle");

  var statValue;
  if (scope.raw) {
    statValue = genInput({
      parent: content,
      class: "ui-stat",
      value: sync.modifier(stat, scope.raw),
      disabled: scope.viewOnly,
    });
    statValue.change(function(){
      sync.modifier(stat, scope.raw, $(this).val());
      obj.sync("updateAsset");
    });
  }
  else {
    statValue = genInput({
      parent: content,
      class: "ui-stat",
      value: stat,
      raw: true,
      disabled: scope.viewOnly,
    });
    statValue.change(function(){
      sync.rawVal(stat, $(this).val());
      obj.sync("updateAsset");
    });
  }

  if (statValue.val().length > 3) {
    statValue.addClass("subtitle");
    statValue.css("width", "80px");
  }

  var total = sync.modified(stat, 0);
  if (total >= 0) {
    total = "+" + total;
  }

  var diceTemplates = game.templates.dice;
  var die = diceTemplates.pool[diceTemplates.defaults[0]].value;

  var modf;
  if (!scope.viewOnly && !scope.noMods) {
    modf = function(ev, inputs, options) {
      if (inputs["Modifier Name"].val().valid()) {
        sync.modifier(options.value, inputs["Modifier Name"].val(), parseInt(inputs["Value"].val()));
        obj.sync("updateAsset");
      }
    }
  }

  var context = {};
  context["c"] = obj.data;
  context["stat"] = stat;
  context["statKey"] = statIndex;

  var statUI = ui_modified({
    title : stat.name,
    value : stat,
    modify : modf,
    click : function(ev, ui, options) {
      if (!scope.viewOnly) {
        sync.removeModifier(options.value, ui.attr("index"));
        obj.sync("updateAsset");
      }
    },
    total : total,
    reveal : true,
    diceable : scope.eventData,
    context : context,
    totalClick : function(ev, ui, options, context) {
      var actionObj = sync.dummyObj();
      actionObj.data = {context : {c : obj.id()}, options : scope.options, action : scope.action, msg : scope.msg};

      game.locals["actions"] = game.locals["actions"] || [];
      game.locals["actions"].push(actionObj);

      var newApp = sync.newApp("ui_actions");
      actionObj.addApp(newApp);

      var pop = ui_popOut({
        target : ui,
        minimize : true,
        dragThickness : "0.5em",
        title : "Actions"
      }, newApp);
      pop.resizable();
    }
  }, content);
  statUI.css("background-color", "white");
  return statUI;
});

sync.render("ui_plainStat", function(obj, app, scope) {
  var data = obj.data;

  var stat = sync.traverse(data, scope.lookup);
  var statIndex = scope.lookup.split(".");
  statIndex = statIndex[statIndex.length-1];

  var content = $("<div>");
  content.addClass("flexcolumn flexmiddle");

  var statValue = genInput({
    parent: content,
    class: "ui-stat",
    value: stat,
    raw: true,
    disabled: scope.viewOnly,
    obj: obj,
    cmd: "updateAsset"
  });
  var diceTemplates = game.templates.dice;
  var die = diceTemplates.pool[diceTemplates.defaults[0]].value;

  var modf;
  if (!scope.viewOnly) {
    modf = function(ev, inputs, options) {
      if (inputs["Modifier Name"].val().valid()) {
        sync.modifier(options.value, inputs["Modifier Name"].val(), parseInt(inputs["Value"].val()));
        obj.sync("updateAsset");
      }
    }
  }

  var context = {};
  context["c"] = obj.data;
  context["stat"] = stat;
  context["statKey"] = statIndex;

  var statUI = ui_modified({
    title : stat.name,
    value : stat,
    total : sync.val(stat),
    modify : modf,
    reveal : true,
    click : function(ev, ui, options) {
      if (!scope.viewOnly) {
        sync.removeModifier(options.value, ui.attr("index"));
        obj.sync("updateAsset");
      }
    },
    context : context,
    totalClick : function(ev, ui, options, context) {
      var actionObj = sync.dummyObj();
      actionObj.data = {context : {c : obj.id()}, options : scope.options, action : scope.action};

      game.locals["actions"] = game.locals["actions"] || [];
      game.locals["actions"].push(actionObj);

      var newApp = sync.newApp("ui_actions");
      actionObj.addApp(newApp);

      var pop = ui_popOut({
        target : ui,
        minimize : true,
        dragThickness : "0.5em",
        title : "Actions"
      }, newApp);
      pop.resizable();
    },
  }, content);
  statUI.css("background-color", "white");
  return statUI;
});

sync.render("ui_tagList", function(obj, app, scope){
  var data = obj.data;
  data.tags = data.tags || {};

  var div = $("<div>");
  div.addClass("padding");

  var info = data.info;

  var title = $("<b class='flexmiddle'>"+((scope.title!=null)?(scope.title):("Tags"))+"</b>").appendTo(div);
  if (!scope.viewOnly) {
    var icon = genIcon("tag").appendTo(title);
    icon.addClass("create");
    icon.click(function() {
      var content = $("<div>");
      content.addClass("flexcolumn subtitle");

      var newTagInput = genInput({
        parent : content,
        type : "list",
        list : "tag-list",
        placeholder : scope.title
      });
      newTagInput.focus(function(){
        layout.coverlay("tag-list");
        var dataList = $("<datalist>").appendTo(div);
        dataList.attr("id", "tag-list");

        for (var tag in game.templates.tags) {
          if (!data.tags[tag] && (!scope.filter || tag.split("_")[0] == scope.filter)) {
            var option = $("<option>").appendTo(dataList);
            if (scope.filter) {
              option.attr("value", tag.split("_")[1]);
            }
            else {
              option.attr("value", tag);
            }
          }
        }
      });
      newTagInput.change(function(){
        var val = ($(this).val() || "");
        if (val && val.trim()) {
          if (scope.filter) {
            val = scope.filter + "_" + val;
          }
          if (!data.tags[val]) {
            data.tags[val] = 1;
            // apply tag effects
            if (game.templates.tags && game.templates.tags[val]) {
              var effects = game.templates.tags[val].calc;
              var ctx = sync.defaultContext();
              // resolve effect
              for (var id in effects) {
                ctx[obj.data._t] = duplicate(obj.data);
                if (scope.path) {
                  ctx["i"] = duplicate(sync.traverse(obj.data, scope.path));
                }
                if (!effects[id].cond || sync.eval(effects[id].cond, ctx)) {
                  sync.traverse(obj.data, effects[id].target, sync.eval(effects[id].eq, ctx));
                }
              }
            }
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
          else {
            sendAlert({text : "Tag already applied"});
            $(this).val();
          }
          layout.coverlay("add-tag-list");
        }
      });
      var button = $("<button>").appendTo(content);
      button.append("Confirm");

      var pop = ui_popOut({
        target : $(this),
        id : "add-tag-list",
        title : "New Tag"
      }, content);
    });
  }

  var tagDiv = $("<div>").appendTo(div);
  tagDiv.addClass("subtitle");
  if (scope.classes) {
    tagDiv.addClass(scope.classes);
  }

  var tagList = [];
  if (scope.filter) {
    for (var i in data.tags) {
      if (i.split("_")[0] == scope.filter) {
        tagList.push(i);
      }
    }
  }
  else {
    tagList = Object.keys(data.tags);
  }
  tagList.sort(function(a,b){return a-b;});

  for (var index in tagList) {
    var tag = tagList[index];
    var tagBubble = $("<div>").appendTo(tagDiv);
    tagBubble.addClass("flexrow flexbetween outline smooth");
    tagBubble.attr("index", tag);
    tagBubble.css("background", "rgba(235,235,228,1)");
    tagBubble.css("margin-right", "0.5em");

    if (game.templates.tags && game.templates.tags[tag]) {
      var tagData = game.templates.tags[tag];
      if (tagData.bCol) {
        tagBubble.css("background", tagData.bCol);
      }
      if (tagData.color) {
        tagBubble.css("color", tagData.color);
      }
      tagBubble.hover(function(){
        var tag = $(this).attr("index");

        var effectsList = $("<div>");
        effectsList.addClass("flexcolumn subtitle");

        var newTag = game.templates.tags[tag];

        if (newTag.calc.length) {
          var ctx = sync.defaultContext();
          ctx[obj.data._t] = duplicate(obj.data);

          for (var id in newTag.calc) {
            var calcData = newTag.calc[id];

            var calcPlate = $("<div>").appendTo(effectsList);
            calcPlate.addClass("flexrow flexbetween fit-x");

            var targetPlate = $("<div>").appendTo(calcPlate);
            targetPlate.addClass("flexmiddle");

            var targetName = calcData.target;
            if (targetName.match("\.modifiers")) {
              targetName = targetName.substring(0, targetName.match("\.modifiers").index);
            }
            else {
              calcPlate.append("<b class='lrpadding'> = </b>");
            }

            var target = sync.traverse(obj.data, targetName);
            if (target instanceof Object) {
              targetPlate.append(target.name);
            }
            else {
              targetPlate.append(calcData.target);
            }

            var eqPlate = $("<div>").appendTo(calcPlate);
            eqPlate.addClass("flexmiddle flex lrpadding");

            if (!calcData.cond || sync.eval(calcData.cond, ctx)) {
              var val = sync.eval(calcData.eq, ctx);

              if (isNaN(val)) {
                eqPlate.append(val);
              }
              else {
                if (val > 0 && calcData.target.match("\.modifiers")) {
                  eqPlate.append("+"+val);
                }
                else {
                  eqPlate.append(val);
                }
              }
            }
            else {
              eqPlate.append("<i>condition not met</i>");
            }
          }
        }
        else {
          effectsList.text("No Effects");
        }

        var pop = ui_popOut({
          target : $(this),
          align : "bottom",
          noCss : true,
          hideclose : true,
          style : {"padding" : "0.5em", "background-color" : "white"},
          id : app.attr("id")+"-hint-dialog"
        }, effectsList);
        pop.hover(function(){layout.coverlay($(this))})
      },
      function(){
        layout.coverlay(app.attr("id")+"-hint-dialog");
      });
    }

    var tagName = tag;
    if (scope.filter) {
      tagName = tagName.split("_")[1];
    }

    var remove = genIcon((!scope.viewOnly)?("remove"):(""), tagName).appendTo(tagBubble);
    remove.attr("index", tag);
    remove.addClass("bold spadding fit-x flexmiddle");
    if (!scope.viewOnly) {
      remove.click(function(){
        delete obj.data.tags[$(this).attr("index")];
        if (game.templates.tags && game.templates.tags[$(this).attr("index")]) {
          var effects = game.templates.tags[$(this).attr("index")].calc;
          for (var eid in effects) {
            if (effects[eid].target.match(".modifiers")) {
              sync.traverse(obj.data, effects[eid].target, "");
            }
          }
        }
        if (!scope.local) {
          obj.sync("updateAsset");
        }
        else {
          obj.update();
        }
        layout.coverlay(app.attr("id")+"-hint-dialog");
      });
    }
  }

  return div;
});

var _actions = {
  "Actions" : {
    click : function(ev, ui, obj, app, scope) {
      var actionObj = sync.dummyObj();
      actionObj.data = {context : {c : obj.id()}};

      game.locals["actions"] = game.locals["actions"] || [];
      game.locals["actions"].push(actionObj);

      var newApp = sync.newApp("ui_hotActions");
      newApp.addClass("padding");
      actionObj.addApp(newApp);

      var pop = ui_popOut({
        target : app,
        minimize : true,
        dragThickness : "0.5em",
        title : "Actions",
      }, newApp);
      pop.resizable();
    }
  },
  "Re-Roll Initiative" : {
    condition : function(obj) {return (game.state.data && game.state.data.combat != null && !hasSecurity(getCookie("UserID"), "Assistant Master"))},
    click : function(ev, ui, obj, app, scope) {
      var combatObj;
      if (game.state.data && game.state.data.combat) {
        combatObj = game.state;
      }
      else {
        combatObj = game.locals["turnOrder"];
      }

      var context = sync.defaultContext();
      context[obj.data._t] = duplicate(obj.data);

      var content = $("<div>");
      content.addClass("flexcolumn flex");

      var query = genInput({
        parent : content,
        classes : "size3",
        placeholder : sync.result(sync.reduce(game.templates.initiative.query, context, true), context, true)
      });

      var confirm = $("<button>").appendTo(content);
      confirm.addClass("foreground alttext flex");
      confirm.append("Roll Initiative!");
      confirm.click(function(){
        var context = sync.defaultContext();
        context[obj.data._t] = duplicate(obj.data);
        var data = sync.executeQuery(query.val() || game.templates.initiative.query, context);

        var evData = {
          flavor : "rolled Initiative",
          eID : obj.id(),
          person : sync.rawVal(obj.data.info.name),
          eventData : data,
        }

        runCommand("chatEvent", evData);

        var sp;
        var ok;
        var id = obj.id();
        if (combatObj.data.combat) {
          if (combatObj.data.combat.engaged[id]) {
            if (combatObj.data.combat.engaged[id].sp) {
              sp = combatObj.data.combat.engaged[id].sp;
            }
            if (combatObj.data.combat.engaged[id].ok) {
              ok = combatObj.data.combat.engaged[id].ok;
            }
          }
          combatObj.data.combat.engaged[id] = data.pool;
          combatObj.data.combat.engaged[id].sp = sp;
          combatObj.data.combat.engaged[id].ok = ok;
          if (combatObj && combatObj.data.combat) {
            game.state.sync("updateCombatState");
          }
          else {
            combatObj.update();
          }
          layout.coverlay("join-combat");
          layout.coverlay("olay-join-combat");
        }
      });
      if (scope.pump) {
        query.addClass("alttext line middle smargin smooth outline");
        query.css("background-color", "rgba(0,0,0,0.8)");
        query.css("font-size", "1.2em");
        query.val(query.attr("placeholder"));
        confirm.css("font-size", "1.6em");
        confirm.addClass("padding hover2");
        var pop = ui_popOut({
          target : ui,
          id : "join-combat",
          noCss : true,
          hideclose : true,
          prompt : true,
          style : {"width" : "230px"}
        }, content).addClass("lpadding").removeClass("boxshadow");
      }
      else {
        var pop = ui_popOut({
          target : ui,
          id : "join-combat",
          prompt : true,
          title : "Initiative",
          style : {"width" : "230px"}
        }, content);
      }
    }
  },
  "Set/Roll Initiative" : {
    condition : function(obj) {return (hasSecurity(getCookie("UserID"), "Assistant Master"))},
    click : function(ev, ui, obj, app, scope) {
      var combatObj;
      if (game.state.data && game.state.data.combat) {
        combatObj = game.state;
      }
      else {
        combatObj = game.locals["turnOrder"];
      }

      var context = sync.defaultContext();
      context[obj.data._t] = duplicate(obj.data);

      var content = $("<div>");
      content.addClass("flexcolumn flex");

      var query = genInput({
        parent : content,
        classes : "size3",
        placeholder : sync.result(sync.reduce(game.templates.initiative.query, context, true), context, true)
      });

      var confirm = $("<button>").appendTo(content);
      confirm.addClass("foreground alttext flex");
      confirm.append("Roll Initiative!");
      confirm.click(function(){
        var context = sync.defaultContext();
        context[obj.data._t] = duplicate(obj.data);
        var data = sync.executeQuery(query.val() || game.templates.initiative.query, context);

        var evData = {
          flavor : "rolled Initiative",
          eID : obj.id(),
          person : sync.rawVal(obj.data.info.name),
          eventData : data
        }
        if (combatObj == game.state) {
          runCommand("chatEvent", evData);
        }

        var sp;
        var ok;
        var id = obj.id();
        if (combatObj.data.combat) {
          if (combatObj.data.combat.engaged[id]) {
            if (combatObj.data.combat.engaged[id].sp) {
              sp = combatObj.data.combat.engaged[id].sp;
            }
            if (combatObj.data.combat.engaged[id].ok) {
              ok = combatObj.data.combat.engaged[id].ok;
            }
          }
          combatObj.data.combat.engaged[id] = data.pool;
          combatObj.data.combat.engaged[id].sp = sp;
          combatObj.data.combat.engaged[id].ok = ok;
          if (combatObj && combatObj.data.combat) {
            game.state.sync("updateCombatState");
          }
          else {
            combatObj.update();
          }
          layout.coverlay("join-combat");
          layout.coverlay("olay-join-combat");
        }
      });
      if (scope.pump) {
        query.addClass("alttext line middle smargin smooth outline");
        query.css("background-color", "rgba(0,0,0,0.8)");
        query.css("font-size", "1.2em");
        query.val(query.attr("placeholder"));
        confirm.css("font-size", "1.6em");
        confirm.addClass("padding hover2");
        var pop = ui_popOut({
          target : ui,
          id : "join-combat",
          noCss : true,
          hideclose : true,
          prompt : true,
          style : {"width" : "230px"}
        }, content).addClass("lpadding").removeClass("boxshadow");
      }
      else {
        var pop = ui_popOut({
          target : ui,
          id : "join-combat",
          prompt : true,
          title : "Initiative",
          style : {"width" : "230px"}
        }, content);
      }
    }
  },
  "Set/Roll Initiative (Hidden)" : {
    condition :function(obj) {return (hasSecurity(getCookie("UserID"), "Assistant Master"))},
    click : function(ev, ui, obj, app, scope) {
      var combatObj;
      if (game.state.data && game.state.data.combat) {
        combatObj = game.state;
      }
      else {
        combatObj = game.locals["turnOrder"];
      }

      var context = sync.defaultContext();
      context[obj.data._t] = duplicate(obj.data);

      var content = $("<div>");
      content.addClass("flexcolumn flex");

      var query = genInput({
        parent : content,
        classes : "size3",
        placeholder : sync.result(sync.reduce(game.templates.initiative.query, context, true), context, true)
      });

      var confirm = $("<button>").appendTo(content);
      confirm.addClass("foreground alttext flex");
      confirm.append("Roll Initiative!");
      confirm.click(function(){
        obj.data._flags = obj.data._flags || duplicate(obj.data._flags) || {};
        obj.data._flags.hidden = true;
        obj.sync("updateAsset");

        var context = sync.defaultContext();
        context[obj.data._t] = duplicate(obj.data);
        var data = sync.executeQuery(query.val() || game.templates.initiative.query, context);

        var sp;
        var ok;
        var id = obj.id();
        if (combatObj.data.combat) {
          if (combatObj.data.combat.engaged[id]) {
            if (combatObj.data.combat.engaged[id].sp) {
              sp = combatObj.data.combat.engaged[id].sp;
            }
            if (combatObj.data.combat.engaged[id].ok) {
              ok = combatObj.data.combat.engaged[id].ok;
            }
          }
          combatObj.data.combat.engaged[id] = data.pool;
          combatObj.data.combat.engaged[id].sp = sp;
          combatObj.data.combat.engaged[id].ok = ok;
          if (combatObj && combatObj.data.combat) {
            game.state.sync("updateCombatState");
          }
          else {
            combatObj.update();
          }
          layout.coverlay("join-combat");
          layout.coverlay("olay-join-combat");
        }
      });
      if (scope.pump) {
        query.addClass("alttext line middle smargin smooth outline");
        query.css("background-color", "rgba(0,0,0,0.8)");
        query.css("font-size", "1.2em");
        query.val(query.attr("placeholder"));
        confirm.css("font-size", "1.6em");
        confirm.addClass("padding hover2");
        var pop = ui_popOut({
          target : ui,
          id : "join-combat",
          noCss : true,
          hideclose : true,
          prompt : true,
          style : {"width" : "230px"}
        }, content).addClass("lpadding").removeClass("boxshadow");
      }
      else {
        var pop = ui_popOut({
          target : ui,
          id : "join-combat",
          prompt : true,
          title : "Initiative",
          style : {"width" : "230px"}
        }, content);
      }
    }
  },
  "Leave Combat" : {
    click : function(ev, ui, obj, app, scope) {
      runCommand("leaveCombat", {id : obj.id()});
    }
  },
  "Hide" : {
    condition : function(obj){return (!obj.data._flags || !obj.data._flags.hidden);},
    click : function(ev, ui, obj, app, scope) {
      obj.data._flags = obj.data._flags || duplicate(obj.data._flags) || {};
      obj.data._flags.hidden = !obj.data._flags.hidden;

      obj.sync("updateAsset");
      game.state.update();
      if (game.locals["turnOrder"]) {
        game.locals["turnOrder"].update();
      }
    }
  },
  "Un-Hide" : {
    condition : function(obj){return (obj.data._flags && obj.data._flags.hidden);},
    click : function(ev, ui, obj, app, scope) {
      obj.data._flags = obj.data._flags || duplicate(obj.data._flags) || {};
      obj.data._flags.hidden = !obj.data._flags.hidden;

      obj.sync("updateAsset");
      game.state.update();
      if (game.locals["turnOrder"]) {
        game.locals["turnOrder"].update();
      }
    }
  }
}

sync.render("ui_characterPiece", function(obj, app, scope){
  var div = $("<div>");

  var data = obj.data;
  obj.data.info.img.modifiers = obj.data.info.img.modifiers || {};

  var pieceData = duplicate(obj.data.info.img.modifiers);

  var colorDiv = $("<div>");
  colorDiv.addClass("flexrow");
  var col = genInput({
    parent : colorDiv,
    placeholder : "rgba or hex",
    value : pieceData.c,
    style : {"width" : "100px"},
  });

  var colBackground = $("<div>").appendTo(colorDiv);
  colBackground.addClass("flexmiddle");

  var content = $("<div>");
  content.addClass("flexcolumn flex flexmiddle");

  function colorOptions(){
    sync.render("ui_colorPicker")(obj, content, {
      hideColor : true,
      color : col.val(),
      colorChange : function(ev, ui, newCol) {
        content.empty();
        col.val(newCol);
        colorOptions();

        colBckground.empty();
        buildShape(pieceData.d || 0, col.val()).appendTo(colBckground);
      }
    }).addClass("fit-x").css("color", "black").appendTo(content);
    sync.render("ui_shapePicker")(obj, content, {
      color : col.val(),
      shapeChange : function(ev, ui, newShape) {
        content.empty();
        pieceData.d = newShape;
        colorOptions();

        colBckground.empty();
        buildShape(pieceData.d || 0, col.val()).appendTo(colBckground);
      }
    }).addClass("fit-x").appendTo(content);
  }
  colorOptions();

  var colBckground = $("<button>").appendTo(colorDiv);
  colBckground.addClass("flexcolumn");
  colBckground.css("padding", "0px");

  var shape = pieceData.d;
  var colr = pieceData.c;
  var colPreview = buildShape(pieceData.d || 0, pieceData.c).appendTo(colBckground);

  var inputs = {
    "Piece Title" : {placeholder : "Label (Macro)", value : pieceData.t},
    "Size" : {placeholder : "Width & Height (Macro)", value : pieceData.w},
    "Rotation (Deg)" : {placeholder : "Rotation (Macro)", value : pieceData.r},
    "Altitude" : {placeholder : "Altitude (Macro)", value : pieceData.a},
  }
  inputs["Color/Shape"] = colorDiv;
  inputs[" "] = content;

  var controls = ui_controlForm({
    inputs : inputs,
    lblStyle : "min-width : 70px;",
    click : function(ev, inputs) {
      obj.data.info.img.modifiers.t = inputs["Piece Title"].val();
      obj.data.info.img.modifiers.w = inputs["Size"].val();
      obj.data.info.img.modifiers.h = inputs["Size"].val();
      obj.data.info.img.modifiers.r = inputs["Rotation (Deg)"].val();
      obj.data.info.img.modifiers.a = inputs["Altitude"].val();
      obj.data.info.img.modifiers.tr = inputs["Threat Range"].val();
      obj.data.info.img.modifiers.c = col.val();
      obj.sync("updateAsset");
      //layout.coverlay("board-settings");
    }
  }).appendTo(div);

  return div;
});

sync.render("ui_editAction", function(obj, app, scope){
  scope = scope || {mode : app.attr("mode") || "Equation"};
  obj.data.options = obj.data.options || {};
  obj.data.eventData = obj.data.eventData || {data : ""};

  var data = obj.data;

  var div = $("<div>");
  div.addClass("flexcolumn fit-xy");

  var buttonDiv = $("<div>").appendTo(div);
  buttonDiv.addClass("flexrow subtitle");

  var modes = ["Equation", "Choices", "Flavor Texts", "Raw JSON"];

  for (var i in modes) {
    var button = $("<button>").appendTo(buttonDiv);
    if (modes[i] == scope.mode) {
      button.addClass("highlight alttext");
    }
    button.text(modes[i]);
    button.click(function(){
      app.attr("mode", $(this).text());
      obj.update();
    });
  }

  var button = $("<button>").appendTo(buttonDiv);
  if (obj.data.hot) {
    button.addClass("highlight alttext");
  }
  else {
    button.addClass("background alttext");
  }
  button.text("Hotbar");
  button.click(function(){
    if (obj.data.hot) {
      delete obj.data.hot;
    }
    else {
      obj.data.hot = "1";
    }
    obj.update();
    game.players.update();
  });

  if (scope.mode == "Equation") {
    div.append("<b>Default Equation</b>");

    var textarea = $("<textarea>").appendTo(div);
    textarea.addClass("flex subtitle");
    textarea.attr("placeholder", "Enter an equation with its defaults, \n#roll=d20;#penalty=2;d20+@bonus+@penalty");
    textarea.val(data.eventData.data);
    textarea.change(function(){
      obj.data.eventData.data = $(this).val();
      obj.update();
    });
  }
  else if (scope.mode == "Choices") {
    var context = sync.context(obj.data.eventData.data, {}).context;
    div.append("<b>Choices</b>");
    div.removeClass("flexcolumn");

    for (var i in data.choices) {
      var choiceWrapper = $("<div>").appendTo(div);
      choiceWrapper.addClass("flexcolumn lrpadding");

      var optionWrap = $("<div>").appendTo(choiceWrapper);
      optionWrap.addClass("flexrow flexbetween");
      optionWrap.append("<b>"+i+"</b>");

      var optionRemove = genIcon("remove").appendTo(optionWrap);
      optionRemove.addClass("destroy flexmiddle");
      optionRemove.attr("index", i);
      optionRemove.click(function(){
        delete obj.data.choices[$(this).attr("index")];
        obj.update();
      });

      for (var j in data.choices[i]) {
        var choiceWrap = $("<div>").appendTo(choiceWrapper);
        choiceWrap.addClass("flexrow subtitle");
        choiceWrap.css("padding-left", "1em");
        choiceWrap.append("<b>"+j+"</b>");

        var choiceInput = genInput({
          parent : choiceWrap,
          classes : "line lrmargin flex",
          value : (data.choices[i][j]!=null&&data.choices[i][j]!==true)?(data.choices[i][j]):(""),
          index : i,
          choice : j
        });
        choiceInput.change(function(){
          obj.data.choices[$(this).attr("index")] = obj.data.choices[$(this).attr("index")] || {};
          obj.data.choices[$(this).attr("index")][$(this).attr("choice")] = $(this).val();
        });

        var optionRemove = genIcon("remove").appendTo(choiceWrap);
        optionRemove.addClass("destroy flexmiddle");
        optionRemove.attr("index", i);
        optionRemove.attr("choice", j);
        optionRemove.click(function(){
          delete obj.data.choices[$(this).attr("index")][$(this).attr("choice")];
          obj.update();
        });
      }
      var addOption = genIcon("plus", "Context").appendTo(div);
      addOption.addClass("subtitle create");
      addOption.attr("index", i);
      addOption.click(function(){
        var context = sync.context(obj.data.eventData.data, {}).context;
        var datalist = [];

        for (var i in context) {
          datalist.push(i);
        }
        var index = $(this).attr("index");
        ui_prompt({
          target : $(this),
          inputs : {
            "Input Name" : {list : datalist}
          },
          click : function(ev, inputs){
            var name = inputs["Input Name"].val();
            inputs["Input Name"].attr("list");
            if (name) {
              name = replaceAll(name, " ", "_");
              name = replaceAll(name, "@", "");
              name = replaceAll(name, "(", "_");
              name = replaceAll(name, ")", "_");
              name = replaceAll(name, "[", "_");
              name = replaceAll(name, "]", "_");
              name = replaceAll(name, "!", "_");
              name = replaceAll(name, "#", "_");
              name = replaceAll(name, "$", "_");
              obj.data.choices[index] = obj.data.choices[index] || {};
              obj.data.choices[index][name] = "0";
              obj.update();
            }
          }
        });
      });
    }

    var addOptionWrap = $("<div>").appendTo(div);
    addOptionWrap.addClass("flexmiddle");

    var addOption = genIcon("plus", "Add Choice").appendTo(addOptionWrap);
    addOption.addClass("create");
    addOption.click(function(){
      ui_prompt({
        target : $(this),
        inputs : {
          "Choice Name" : ""
        },
        click : function(ev, inputs){
          var name = inputs["Choice Name"].val()
          if (name) {
            name = replaceAll(name, " ", "_");
            name = replaceAll(name, "@", "");
            name = replaceAll(name, "(", "_");
            name = replaceAll(name, ")", "_");
            name = replaceAll(name, "[", "_");
            name = replaceAll(name, "]", "_");
            name = replaceAll(name, "!", "_");
            name = replaceAll(name, "#", "_");
            name = replaceAll(name, "$", "_");
            obj.data.choices = obj.data.choices || {};
            obj.data.choices[name] = {};
            obj.update();
          }
        }
      });
    });
  }
  else if (scope.mode == "Inputs") {
    var context = sync.context(obj.data.eventData.data, {}).context;
    div.append("<b>Optional Inputs</b>");

    for (var i in data.options) {
      if (context[i]) {
        delete context[i];
      }

      var optionWrap = $("<div>").appendTo(div);
      optionWrap.addClass("flexrow flexbetween subtitle");
      optionWrap.append("<b class='subtitle'>"+i+"</b>");

      var suggestions = genIcon("info-sign", "Suggestions").appendTo(optionWrap);
      suggestions.attr("index", i);
      suggestions.click(function(){
        var optionIndex = $(this).attr("index");
        var content = $("<div>");
        content.addClass("flexcolumn");

        var suggestionList = $("<div>").appendTo(content);
        function buildSuggestions() {
          suggestionList.empty();
          for (var i in obj.data.options[optionIndex]) {
            var optionWrap = $("<div>").appendTo(suggestionList);
            optionWrap.addClass("flexrow subtitle");
            if (obj.data.options[optionIndex][i] instanceof Object) {
              var condition = genIcon("info-sign").appendTo(optionWrap);
              condition.attr("index", i);
              condition.click(function(){
                var optionIdx = $(this).attr("index");
                ui_prompt({
                  target : $(this),
                  inputs : {
                    "Condition" : {placeholder : "(Optional)", value : obj.data.options[optionIndex][optionIdx].cond},
                  },
                  click : function(ev, inputs){
                    if (data.options[optionIndex][optionIdx] instanceof Object) {
                      obj.data.options[optionIndex][optionIdx].cond = inputs["Condition"].val();
                    }
                    buildSuggestions();
                  }
                });
              });

              var value = genInput({
                classes : "line subtitle flex",
                parent : optionWrap,
                value : data.options[optionIndex][i].eq,
                index : i
              });
              value.change(function(){
                obj.data.options[optionIndex][$(this).attr("index")].eq = $(this).val();
                buildSuggestions();
              });

              var name = genInput({
                classes : "line subtitle",
                parent : optionWrap,
                value : data.options[optionIndex][i].mask,
                index : i,
                placeholder : "Mask",
                style : {"width" : "60px"},
              });
              name.change(function(){
                obj.data.options[optionIndex][$(this).attr("index")].mask = $(this).val();
                buildSuggestions();
              });
            }
            else if (data.options[optionIndex][i] !== true && data.options[optionIndex][i] !== false) {
              var value = genInput({
                classes : "line subtitle flex",
                parent : optionWrap,
                value : data.options[optionIndex][i],
                index : i
              });
              value.change(function(){
                obj.data.options[optionIndex][$(this).attr("index")] = $(this).val();
                buildSuggestions();
              });
            }

            var optionRemove = genIcon("remove").appendTo(optionWrap);
            optionRemove.addClass("destroy flexmiddle");
            optionRemove.attr("index", i);
            optionRemove.click(function(){
              delete obj.data.options[optionIndex][$(this).attr("index")];
              buildSuggestions();
            });
          }
        }
        buildSuggestions();

        var addSuggestion = genIcon("plus", "Add Suggestion").appendTo(content);
        addSuggestion.addClass("subtitle create");
        addSuggestion.click(function(){
          ui_prompt({
            target : $(this),
            inputs : {
              "Suggested Value" : "",
              "Condition" : {placeholder : "(Optional)"},
              "Value Mask" : {placeholder : "(Optional)"},
            },
            click : function(ev, inputs){
              if (inputs["Suggested Value"].val()) {
                if (data.options[optionIndex] instanceof Object) {
                  obj.data.options[optionIndex].push({eq : inputs["Suggested Value"].val(), cond : inputs["Condition"].val(), mask : inputs["Value Mask"].val()});
                }
                else {
                  obj.data.options[optionIndex] = [{eq : inputs["Suggested Value"].val(), cond : inputs["Condition"].val(), mask : inputs["Value Mask"].val()}];
                }
                obj.update();
              }
            }
          });
        });

        var pop = ui_popOut({
          target : $(this),
          id : "add-input-options",
        }, content);
      });

      var optionRemove = genIcon("remove").appendTo(optionWrap);
      optionRemove.addClass("destroy flexmiddle");
      optionRemove.attr("index", i);
      optionRemove.click(function(){
        delete obj.data.options[$(this).attr("index")];
        obj.update();
      });
    }

    var addOption = genIcon("plus", "Add Input").appendTo(div);
    addOption.addClass("subtitle create");
    addOption.click(function(){
      ui_prompt({
        target : $(this),
        inputs : {
          "Input Name" : ""
        },
        click : function(ev, inputs){
          if (inputs["Input Name"].val()) {
            obj.data.options[inputs["Input Name"].val()] = true;
            obj.update();
          }
        }
      });
    });
  }
  else if (scope.mode == "Flavor Texts") {
    if (data.flavors && data.flavors instanceof Object) {
      div.append("<i class='flexmiddle spadding subtitle'>Random flavor text will be chosen from the list below</i>");

      for (var i in data.flavors) {
        var flavorWrap = $("<div>").appendTo(div);
        flavorWrap.addClass("flexrow subtitle");

        var condition = genIcon("info-sign").appendTo(flavorWrap);
        condition.attr("index", i);
        condition.click(function(){
          var flavorIndex = $(this).attr("index");
          ui_prompt({
            target : $(this),
            inputs : {
              "Condition" : {placeholder : "(Optional)"},
            },
            click : function(ev, inputs){
              if (data.flavors instanceof Object && obj.data.flavors[flavorIndex]) {
                obj.data.flavors[flavorIndex].cond = inputs["Condition"].val();
              }
              obj.update();
            }
          });
        });

        var icon = $("<div>").appendTo(flavorWrap);
        icon.addClass("flexcolumn flexmiddle flex lrmargin outline smooth hover");
        icon.attr("index", i);
        icon.css("max-width", "4.5em");
        icon.css("background-size", "contain");
        icon.css("background-repeat", "no-repeat");
        icon.css("background-position", "center");
        icon.css("background-image", "url('"+obj.data.flavors[i].icon+"')");
        icon.attr("title", "Right click to clear");
        icon.contextmenu(function(){
          delete obj.data.flavors[$(this).attr("index")].icon;
          obj.update();
          return false;
        });
        icon.click(function(){
          var flavorIndex = $(this).attr("index");
          var imgList = sync.render("ui_filePicker")(obj, app, {
            filter : "img",
            change : function(ev, ui, value){
              obj.data.flavors[flavorIndex].icon = value;
              obj.update();
              layout.coverlay("icons-picker");
            }
          });

          var pop = ui_popOut({
            target : $(this),
            id : "icons-picker",
            align : "top",
            prompt : true,
            style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
          }, imgList);
          pop.resizable();
        });

        var name = genInput({
          classes : "line subtitle flex",
          parent : flavorWrap,
          value : data.flavors[i].msg,
          index : i
        });
        name.change(function(){
          var flavorIndex = $(this).attr("index");
          obj.data.flavors[flavorIndex].msg = $(this).val();
          obj.update();
        });

        var optionRemove = genIcon("remove").appendTo(flavorWrap);
        optionRemove.addClass("destroy flexmiddle");
        optionRemove.attr("index", i);
        optionRemove.click(function(){
          obj.data.flavors.splice($(this).attr("index"), 1);
          if (obj.data.flavors.length < 1) {
            delete obj.data.flavors;
          }
          obj.update();
        });
      }
    }
    else {
      div.append("<b>Flavor Text</b>");

      var flavorText = genInput({
        parent : div,
        classes : "subtitle line",
        value : obj.data.eventData.msg
      });
      flavorText.change(function(){
        obj.data.eventData.msg = $(this).val();
        obj.update();
      });

      div.append("<b>Flavor Icon</b>");

      var icon = $("<div>").appendTo(div);
      icon.addClass("flexcolumn flexmiddle flex outline smooth hover");
      icon.css("background-size", "contain");
      icon.css("background-repeat", "no-repeat");
      icon.css("background-position", "center");
      icon.css("background-image", "url('"+obj.data.eventData.icon+"')");
      icon.attr("title", "Right click to clear");
      icon.contextmenu(function(){
        $(this).css("background-image", "none");
        return false;
      });
      icon.click(function(){
        var imgList = sync.render("ui_filePicker")(obj, app, {
          filter : "img",
          change : function(ev, ui, value){
            obj.data.eventData.icon = value;
            obj.update();
            layout.coverlay("icons-picker");
          }
        });

        var pop = ui_popOut({
          target : $(this),
          id : "icons-picker",
          align : "top",
          prompt : true,
          style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
        }, imgList);
        pop.resizable();
      });
    }

    var addOption = genIcon("plus", "Add Flavor Text").appendTo(div);
    addOption.addClass("subtitle create");
    addOption.click(function(){
      obj.data.flavors = obj.data.flavors || [];
      if (obj.data.flavors.length == 0) {
        obj.data.flavors.push({msg : obj.data.eventData.msg, icon : obj.data.eventData.icon});
      }
      obj.data.flavors.push({msg : "New Flavor Text"});

      obj.update();
    });
  }
  else if (scope.mode == "Raw JSON") {
    sync.render("ui_JSON")(obj, app, {hideConfirm : true, height : "200px", width : "200px"}).appendTo(div);
  }

  return div;
});

var _lastAction;
sync.render("ui_actions", function(obj, app, scope){
  scope = scope || {hideContext : app.attr("hideContext") == "true", mode : parseInt(app.attr("mode") || _lastAction || 0), minimized : app.attr("minimized") == "true"};
  if (!obj) {
    var actionObj = sync.dummyObj();
    actionObj.data = {context : {}};

    game.locals["actions"] = game.locals["actions"] || [];
    game.locals["actions"].push(actionObj);

    actionObj.addApp(app);
    return $("<div>");
  }

  var titles = ["Actions", "Items", "Spells", "Skills"];
  if (app.attr("mode") == null) {
    if (obj.data.context.i) {
      app.attr("mode", 1);
      scope.mode = 1;
    }
    else if (obj.data.context.s) {
      app.attr("mode", 2);
      scope.mode = 2;
    }
  }

  function buildContext(){
    obj.data.options = obj.data.options || {};
    var ctx = sync.defaultContext();
    var ent = getEnt(obj.data.context.c);
    if (ent) {
      var itemData = ent.data.inventory[obj.data.context.i];
      var spellData = ent.data.spellbook[obj.data.context.spl];
      if (itemData && titles[scope.mode] == "Items") {
        obj.data.actions = duplicate(game.templates.actions.i) || {};
        for (var j in ent.data.inventory) {
          for (var i in ent.data.inventory[j]._a) {
            obj.data.actions[i] = ent.data.inventory[j]._a[i];
            obj.data.actions[i].custom = true;
          }
        }
      }
      else if (spellData && titles[scope.mode] == "Spells") {
        obj.data.actions = duplicate(game.templates.actions.i) || {};
        for (var j in ent.data.spellbook) {
          for (var i in ent.data.spellbook[j]._a) {
            obj.data.actions[i] = ent.data.spellbook[j]._a[i];
            obj.data.actions[i].custom = true;
          }
        }
      }
      else {
        obj.data.actions = duplicate(game.templates.actions.c) || {};
        for (var i in ent.data._a) {
          obj.data.actions[i] = ent.data._a[i];
          obj.data.actions[i].custom = true;
        }
      }

      merge(ctx, {c : duplicate(ent.data), i : duplicate(itemData) || duplicate(spellData), spl : duplicate(spellData)});
      ctx["eval"] = {};
      for (var i in obj.data.options) {
        ctx["eval"][i] = duplicate(obj.data.options[i]);
      }
    }
    if (!obj.data.manual) {
      obj.data.loc = duplicate(svd.location);
    }
    if (obj.data.loc) {
      merge(ctx, {loc : duplicate(obj.data.loc)});
    }

    return ctx;
  }


  var context = buildContext();
  var data = obj.data;

  var div = $("<div>");
  div.addClass("flexcolumn fit-xy");
  if (!scope.minimized) {
    div.css("font-size", "1.4em");
  }
  var ent = getEnt(obj.data.context.c);
  var img = sync.rawVal(ent.data.info.img) || "/content/icons/blankchar.png";
  if (!scope.hideContext) {
    var scopeBar = $("<div>").appendTo(div);
    scopeBar.addClass("flexrow");

    var refDiv = $("<div>").appendTo(scopeBar);
    refDiv.addClass("outline smooth hover2 white");
    if (!scope.minimized) {
      refDiv.css("width", "40px");
    }
    else {
      refDiv.css("width", "25px");
      refDiv.css("height", "25px");
    }

    refDiv.css("background-image", "url('"+(img)+"')");
    refDiv.css("background-size", "cover");
    refDiv.css("background-repeat", "no-repeat");
    refDiv.css("background-position", "center");
    refDiv.click(function(){
      if (_down["16"]) {
        var content = sync.newApp("ui_characterSummary");
        ent.addApp(content);
        var popOut = ui_popOut({
          target: $(this),
          id: "char-summary-"+ent.id(),
        }, content);
      }
      else {
        var content = sync.render("ui_assetPicker")(obj, app, {
          rights : "Visible",
          filter : "c",
          sessionOnly : true,
          hideCreate : true,
          select : function(ev, ui, ent, options){
            if (_down["16"]) {
              var content = sync.newApp("ui_characterSummary");
              ent.addApp(content);
              var popOut = ui_popOut({
                target: $(this),
                id: "char-summary-"+ent.id(),
              }, content);
            }
            else {
              data.context.c = ent.id();
              delete data.context.i;
              delete data.context.s;
              obj.update();
              layout.coverlay("ent-list");
            }
          }
        });

        var pop = ui_popOut({
          id : "ent-list",
          prompt : true,
          target : $(this),
          title : "Select Context",
          style : {width : "400px", height : "400px"}
        }, content);
      }
    });

    var name = genIcon("", sync.rawVal(ent.data.info.name)).appendTo(scopeBar);
    name.addClass("flexmiddle lrpadding bold underline");
    name.click(function(){
      assetTypes[ent.data._t].preview(ent, $(this));
    });
    name.contextmenu(function(ev){
      assetTypes.contextmenu(ev, $(this), ent, app, scope);
      ev.stopPropagation();
      return false;
    });
  }

  var actionType = $("<div>").appendTo(div);
  actionType.addClass("flexmiddle bold");

  var title = genIcon("", titles[scope.mode]).appendTo(actionType);
  title.addClass("underline");
  title.click(function(){
    delete obj.data.context.i;
    delete obj.data.context.spl;
    delete obj.data.action;
    delete obj.data.options;

    scope.mode = scope.mode + 1;
    if (scope.mode > 2) {
      scope.mode = 0;
    }
    _lastAction = scope.mode;
    app.attr("mode", scope.mode);
    obj.update();
  });

  if (obj.data.context.i) {
    var refWrap = $("<div>").appendTo(div);
    refWrap.addClass("flexrow hover2 subtitle");
    refWrap.attr("slot", obj.data.context.i);
    refWrap.click(function(){
      delete obj.data.context.i;
      obj.update();
    });
    refWrap.contextmenu(function(){
      var iRef = $(this).attr("slot");
      var ent = getEnt(obj.data.context.c);
      if (hasSecurity(getCookie("UserID"), "Rights", ent.data)) {
        var actionList = [
          {
            name : "Edit Item",
            attr : {slot : iRef},
            click : function(ev, ui) {
              var iRef = ui.attr("slot");
              var frame = $("<div>");
              frame.addClass("flex flexcolumn");

              game.locals["editItem"] = game.locals["editItem"] || sync.obj("editItem");
              game.locals["editItem"].data = duplicate(ent.data.inventory[iRef]);

              merge(game.locals["editItem"].data, duplicate(game.templates.item));

              var newApp = sync.newApp("ui_renderItem").appendTo(frame);
              newApp.attr("char-ref", ent.id());
              newApp.attr("viewOnly", scope.viewOnly);
              if (ent.data.inventory[iRef]._s && !hasSecurity(getCookie("UserID"), "Owner", ent.data) && !hasSecurity(getCookie("UserID"), "Rights", ent.data.inventory[iRef]))  {
                newApp.attr("viewOnly", true);
              }
              newApp.attr("local", "true");

              game.locals["editItem"].addApp(newApp);

              if (!scope.viewOnly) {
                var confirm = $("<button>").appendTo(frame);
                confirm.addClass("fit-x");
                confirm.attr("index", iRef);
                confirm.append("Confirm");
                confirm.click(function(){
                  var iRef = $(this).attr("index");
                  ent.data.inventory[iRef] = duplicate(game.locals["editItem"].data);
                  ent.sync("updateAsset");
                  layout.coverlay("edit-item");
                });
              }
              var pop = ui_popOut({
                target : ui,
                align : "top",
                id : "edit-item",
                maximize : true,
                minimize : true,
                style : {"width" : assetTypes["i"].width, height : assetTypes["i"].height}
              }, frame);
              pop.resizable();
            }
          }
        ];

        ui_dropMenu($(this), actionList, {id : "inline-edit"});
      }
      return false;
    });


    var refDiv = $("<div>").appendTo(refWrap);
    refDiv.addClass("outline smooth white");
    refDiv.css("width", "25px");
    refDiv.css("height", "25px");

    if (sync.rawVal(ent.data.inventory[obj.data.context.i].info.img)) {
      refDiv.css("background-image", "url('"+(sync.rawVal(ent.data.inventory[obj.data.context.i].info.img))+"')");
    }
    refDiv.css("background-size", "cover");
    refDiv.css("background-repeat", "no-repeat");
    refDiv.css("background-position", "center");

    var itemName = $("<div>").appendTo(refWrap);
    itemName.addClass("flexmiddle lrpadding");
    itemName.append(sync.rawVal(ent.data.inventory[obj.data.context.i].info.name));
  }
  else if (obj.data.context.spl) {
    var refWrap = $("<div>").appendTo(div);
    refWrap.addClass("flexrow hover2 subtitle");
    refWrap.attr("slot", obj.data.context.spl);
    refWrap.contextmenu(function(){
      var iRef = $(this).attr("slot");
      var ent = getEnt(obj.data.context.c);
      if (hasSecurity(getCookie("UserID"), "Rights", ent.data)) {
        var actionList = [
          {
            name : "Edit",
            attr : {slot : iRef},
            click : function(ev, ui) {
              var iRef = ui.attr("slot");
              var frame = $("<div>");
              frame.addClass("flex flexcolumn");

              game.locals["editItem"] = game.locals["editItem"] || sync.obj("editItem");
              game.locals["editItem"].data = duplicate(ent.data.spellbook[iRef]);

              merge(game.locals["editItem"].data, duplicate(game.templates.item));

              var newApp = sync.newApp("ui_renderItem").appendTo(frame);
              newApp.attr("char-ref", ent.id());
              newApp.attr("viewOnly", scope.viewOnly);
              if (ent.data.spellbook[iRef]._s && !hasSecurity(getCookie("UserID"), "Owner", ent.data) && !hasSecurity(getCookie("UserID"), "Rights", ent.data.spellbook[iRef]))  {
                newApp.attr("viewOnly", true);
              }
              newApp.attr("local", "true");

              game.locals["editItem"].addApp(newApp);

              if (!scope.viewOnly) {
                var confirm = $("<button>").appendTo(frame);
                confirm.addClass("fit-x");
                confirm.attr("index", iRef);
                confirm.append("Confirm");
                confirm.click(function(){
                  var iRef = $(this).attr("index");
                  ent.data.spellbook[iRef] = duplicate(game.locals["editItem"].data);
                  ent.sync("updateAsset");
                  layout.coverlay("edit-item");
                });
              }
              var pop = ui_popOut({
                target : ui,
                align : "top",
                id : "edit-item",
                maximize : true,
                minimize : true,
                style : {"width" : assetTypes["i"].width, height : assetTypes["i"].height}
              }, frame);
              pop.resizable();
            }
          }
        ];

        ui_dropMenu($(this), actionList, {id : "inline-edit"});
      }
      return false;
    });

    refWrap.click(function(){
      delete obj.data.context.spl;
      obj.update();
    });

    var refDiv = $("<div>").appendTo(refWrap);
    refDiv.addClass("outline smooth white");
    refDiv.css("width", "25px");
    refDiv.css("height", "25px");
    if (sync.rawVal(ent.data.spellbook[obj.data.context.spl].info.img)) {
      refDiv.css("background-image", "url('"+(sync.rawVal(ent.data.spellbook[obj.data.context.spl].info.img))+"')");
    }
    refDiv.css("background-size", "cover");
    refDiv.css("background-repeat", "no-repeat");
    refDiv.css("background-position", "center");

    var itemName = $("<div>").appendTo(refWrap);
    itemName.addClass("flexmiddle lrpadding");
    itemName.append(sync.rawVal(ent.data.spellbook[obj.data.context.spl].info.name));
  }

  if (titles[scope.mode] == "Items" && !obj.data.context.i) {
    var favItems = $("<div>").appendTo(div);
    favItems.addClass("flexcolumn");

    var itemList = $("<div>").appendTo(div);
    itemList.addClass("flexrow flexwrap flexaround");

    for (var i in ent.data.inventory) {
      var refWrap;
      if (ent.data.inventory[i].tags["equipped"]) {
        refWrap = $("<div>").appendTo(favItems);
        refWrap.addClass("flexrow hover2 subtitle");
        refWrap.attr("slot", i);

        var refDiv = $("<div>").appendTo(refWrap);
        refDiv.addClass("outline smooth white");
        refDiv.css("width", "25px");
        refDiv.css("height", "25px");

        if (sync.rawVal(ent.data.inventory[i].info.img)) {
          refDiv.css("background-image", "url('"+(sync.rawVal(ent.data.inventory[i].info.img))+"')");
        }
        refDiv.css("background-size", "cover");
        refDiv.css("background-repeat", "no-repeat");
        refDiv.css("background-position", "center");

        var itemName = $("<div>").appendTo(refWrap);
        itemName.addClass("flexmiddle lrpadding");
        itemName.append(sync.rawVal(ent.data.inventory[i].info.name));
      }
      else {
        refWrap = $("<div>").appendTo(itemList);
        refWrap.addClass("outline smooth hover2 white");
        refWrap.attr("title", sync.rawVal(ent.data.inventory[i].info.name));
        refWrap.attr("slot", i);
        refWrap.css("width", "25px");
        refWrap.css("height", "25px");

        if (sync.rawVal(ent.data.inventory[i].info.img)) {
          refWrap.css("background-image", "url('"+(sync.rawVal(ent.data.inventory[i].info.img))+"')");
        }
        refWrap.css("background-size", "cover");
        refWrap.css("background-repeat", "no-repeat");
        refWrap.css("background-position", "center");
      }
      refWrap.click(function(){
        obj.data.context.i = $(this).attr("slot");
        obj.update();
      });
      refWrap.contextmenu(function(){
        var iRef = $(this).attr("slot");
        var ent = getEnt(obj.data.context.c);
        if (hasSecurity(getCookie("UserID"), "Rights", ent.data)) {
          var actionList = [
            {
              name : "Edit",
              attr : {slot : iRef},
              click : function(ev, ui) {
                var iRef = ui.attr("slot");

                var frame = $("<div>");
                frame.addClass("flex flexcolumn");

                game.locals["editItem"] = game.locals["editItem"] || sync.obj("editItem");
                game.locals["editItem"].data = duplicate(ent.data.inventory[iRef]);

                merge(game.locals["editItem"].data, duplicate(game.templates.item));

                var newApp = sync.newApp("ui_renderItem").appendTo(frame);
                newApp.attr("char-ref", ent.id());
                newApp.attr("viewOnly", scope.viewOnly);
                if (ent.data.inventory[iRef]._s && !hasSecurity(getCookie("UserID"), "Owner", ent.data) && !hasSecurity(getCookie("UserID"), "Rights", ent.data.inventory[iRef]))  {
                  newApp.attr("viewOnly", true);
                }
                newApp.attr("local", "true");

                game.locals["editItem"].addApp(newApp);

                if (!scope.viewOnly) {
                  var confirm = $("<button>").appendTo(frame);
                  confirm.addClass("fit-x");
                  confirm.attr("index", iRef);
                  confirm.append("Confirm");
                  confirm.click(function(){
                    var iRef = $(this).attr("index");
                    ent.data.inventory[iRef] = duplicate(game.locals["editItem"].data);
                    ent.sync("updateAsset");
                    layout.coverlay("edit-item");
                  });
                }
                var pop = ui_popOut({
                  target : ui,
                  align : "top",
                  id : "edit-item",
                  maximize : true,
                  minimize : true,
                  style : {"width" : assetTypes["i"].width, height : assetTypes["i"].height}
                }, frame);
                pop.resizable();
              }
            }
          ];

          ui_dropMenu($(this), actionList, {id : "inline-edit"});
        }
        return false;
      });
    }

    return div;
  }
  else if (titles[scope.mode] == "Spells" && !obj.data.context.spl) {
    var favItems = $("<div>").appendTo(div);
    favItems.addClass("flexcolumn");

    var itemList = $("<div>").appendTo(div);
    itemList.addClass("flexrow flexwrap flexaround");

    for (var i in ent.data.spellbook) {
      var refWrap;
      if (ent.data.spellbook[i].tags["equipped"]) {
        refWrap = $("<div>").appendTo(favItems);
        refWrap.addClass("flexrow hover2 subtitle");
        refWrap.attr("slot", i);

        var refDiv = $("<div>").appendTo(refWrap);
        refDiv.addClass("outline smooth white");
        refDiv.css("width", "25px");
        refDiv.css("height", "25px");

        if (sync.rawVal(ent.data.spellbook[i].info.img)) {
          refDiv.css("background-image", "url('"+(sync.rawVal(ent.data.spellbook[i].info.img))+"')");
        }
        refDiv.css("background-size", "cover");
        refDiv.css("background-repeat", "no-repeat");
        refDiv.css("background-position", "center");

        var itemName = $("<div>").appendTo(refWrap);
        itemName.addClass("flexmiddle lrpadding");
        itemName.append(sync.rawVal(ent.data.spellbook[i].info.name));
      }
      else {
        refWrap = $("<div>").appendTo(itemList);
        refWrap.addClass("outline smooth hover2 white");
        refWrap.attr("title", sync.rawVal(ent.data.spellbook[i].info.name));
        refWrap.css("width", "25px");
        refWrap.css("height", "25px");

        if (sync.rawVal(ent.data.spellbook[i].info.img)) {
          refWrap.css("background-image", "url('"+(sync.rawVal(ent.data.spellbook[i].info.img))+"')");
        }
        refWrap.css("background-size", "cover");
        refWrap.css("background-repeat", "no-repeat");
        refWrap.css("background-position", "center");
        refWrap.attr("slot", i);
      }
      refWrap.click(function(){
        obj.data.context.spl = $(this).attr("slot");
        obj.update();
      });
      refWrap.contextmenu(function(){
        var iRef = $(this).attr("slot");
        var ent = getEnt(obj.data.context.c);
        if (hasSecurity(getCookie("UserID"), "Rights", ent.data)) {
          var actionList = [
            {
              name : "Edit",
              attr : {slot : iRef},
              click : function(ev, ui) {
                var iRef = ui.attr("slot");
                var frame = $("<div>");
                frame.addClass("flex flexcolumn");

                game.locals["editItem"] = game.locals["editItem"] || sync.obj("editItem");
                game.locals["editItem"].data = duplicate(ent.data.spellbook[iRef]);

                merge(game.locals["editItem"].data, duplicate(game.templates.item));

                var newApp = sync.newApp("ui_renderItem").appendTo(frame);
                newApp.attr("char-ref", ent.id());
                newApp.attr("viewOnly", scope.viewOnly);
                if (ent.data.spellbook[iRef]._s && !hasSecurity(getCookie("UserID"), "Owner", ent.data) && !hasSecurity(getCookie("UserID"), "Rights", ent.data.spellbook[iRef]))  {
                  newApp.attr("viewOnly", true);
                }
                newApp.attr("local", "true");

                game.locals["editItem"].addApp(newApp);

                if (!scope.viewOnly) {
                  var confirm = $("<button>").appendTo(frame);
                  confirm.addClass("fit-x");
                  confirm.attr("index", iRef);
                  confirm.append("Confirm");
                  confirm.click(function(){
                    var iRef = $(this).attr("index");
                    ent.data.spellbook[iRef] = duplicate(game.locals["editItem"].data);
                    ent.sync("updateAsset");
                    layout.coverlay("edit-item");
                  });
                }
                var pop = ui_popOut({
                  target : ui,
                  align : "top",
                  id : "edit-item",
                  maximize : true,
                  minimize : true,
                  style : {"width" : assetTypes["i"].width, height : assetTypes["i"].height}
                }, frame);
                pop.resizable();
              }
            }
          ];

          ui_dropMenu($(this), actionList, {id : "inline-edit"});
        }
        return false;
      });
    }
    return div;
  }

  var actionList = $("<div>").appendTo(div);
  actionList.addClass("flexcolumn subtitle");

  var addActionWrap = $("<div>").appendTo(div);
  addActionWrap.addClass("flexcolumn fit-x flexmiddle lrpadding bold create subtitle");

  var addAction = genIcon("plus", "Add").appendTo(addActionWrap);
  addAction.attr("title", "Add Action");
  addAction.click(function(){
    if (hasSecurity(getCookie("UserID"), "Rights", ent.data)) {
      ui_prompt({
        target : $(this),
        inputs : {
          "New Action Name" : ""
        },
        click : function(ev, inputs){
          if (inputs["New Action Name"].val()) {
            if (titles[scope.mode] == "Actions") {
              ent.data._a = ent.data._a || {};
              ent.data._a[inputs["New Action Name"].val()] = {};
              obj.update();
            }
            else if (titles[scope.mode] == "Items") {
              ent.data.inventory[data.context.i]._a = ent.data.inventory[data.context.i]._a || {};
              ent.data.inventory[data.context.i]._a[inputs["New Action Name"].val()] = {};
              obj.update();
            }
            else if (titles[scope.mode] == "Spells") {
              ent.data.spellbook[data.context.spl]._a = ent.data.spellbook[data.context.spl]._a || {};
              ent.data.spellbook[data.context.spl]._a[inputs["New Action Name"].val()] = {};
              obj.update();
            }
          }
          else {
            sendAlert({text : "No Name Entered"});
          }
        }
      });
    }
  });
  if (obj.data.action || (titles[scope.mode] != "Actions"  && !obj.data.context.i && !obj.data.context.spl)) {
    addAction.hide();
  }

  var optionMenu = $("<div>").appendTo(div);
  optionMenu.attr("action", obj.data.action);
  optionMenu.addClass("flex");

  for (var key in obj.data.actions) {
    var option = $("<div>").appendTo(actionList);
    option.addClass("flexcolumn");
    option.attr("action", key);

    var optionName = $("<b>").appendTo(option);
    optionName.addClass("hover2 lrpadding");
    optionName.attr("action", key);
    if (obj.data.action == key && obj.data.actions[key].range) {
      optionName.append(key + " ("+sync.eval(obj.data.actions[key].range, context)+")");
    }
    else {
      optionName.append(key);
    }
    optionName.click(function(){
      var optionName = $(this);
      var actionData = obj.data.actions[$(this).attr("action")];
      if (!actionData.eventData) {
        var content = $("<div>");
        content.addClass("flexcolumn flex");

        var newObj = sync.obj();
        newObj.data = duplicate(actionData);

        var newApp = sync.newApp("ui_editAction").appendTo(content);
        newObj.addApp(newApp);

        var confirm = $("<button>").appendTo(content);
        confirm.addClass("highlight alttext");
        confirm.append("Confirm");
        confirm.click(function(){
          if (!newObj.data.eventData || !newObj.data.eventData.data) {
            sendAlert({text : "You must assign an equation"});
            return false;
          }
          var index = optionName.attr("action");
          if (titles[scope.mode] == "Actions") {
            ent.data._a = ent.data._a || {};
            ent.data._a[index] = newObj.data;
            runCommand("updateActions", {id : data.context.c, _a : ent.data._a});
            obj.update();
          }
          else if (titles[scope.mode] == "Items") {
            ent.data.inventory[data.context.i]._a = ent.data._a || {};
            ent.data.inventory[data.context.i]._a[index] = newObj.data;
            runCommand("updateActions", {id : data.context.c, path : "inventory."+data.context.i+".", _a : ent.data.inventory[data.context.i]._a});
            obj.update();
          }
          else if (titles[scope.mode] == "Spells") {
            ent.data.spellbook[data.context.spl]._a = ent.data._a || {};
            ent.data.spellbook[data.context.spl]._a[index] = newObj.data;
            runCommand("updateActions", {id : data.context.c, path : "spellbook."+data.context.spl+".", _a : ent.data.spellbook[data.context.spl]._a});
            obj.update();
          }
          layout.coverlay("edit-action");
        });

        var pop = ui_popOut({
          target : optionName,
          id : "edit-action",
          title : optionName.attr("action"),
          style : {height : "230px"}
        }, content);
        pop.resizable();
        return false;
      }

      if (obj.data.action != $(this).attr("action")) {
        addAction.hide();
        buildOptions($(this).attr("action"), $(this).parent());
      }
      else {
        delete obj.data.action;
        obj.update();
      }
    });
    optionName.contextmenu(function(){
      var optionName = $(this);
      var actionData = obj.data.actions[$(this).attr("action")];
      if (hasSecurity(getCookie("UserID"), "Rights", ent.data) && actionData) {
        var actionList = [];
        actionList.push({
          name : "Edit",
          click : function(){
            var content = $("<div>");
            content.addClass("flexcolumn flex");

            var newObj = sync.obj();
            newObj.data = duplicate(actionData);

            var newApp = sync.newApp("ui_editAction").appendTo(content);
            newObj.addApp(newApp);

            var confirm = $("<button>").appendTo(content);
            confirm.addClass("highlight alttext");
            confirm.append("Confirm");
            confirm.click(function(){
              if (!newObj.data.eventData || !newObj.data.eventData.data) {
                sendAlert({text : "You must assign an equation"});
                return false;
              }
              var index = optionName.attr("action");
              if (titles[scope.mode] == "Actions") {
                ent.data._a = ent.data._a || {};
                ent.data._a[index] = newObj.data;
                runCommand("updateActions", {id : data.context.c, _a : ent.data._a});
                obj.update();
              }
              else if (titles[scope.mode] == "Items") {
                ent.data.inventory[data.context.i]._a = ent.data.inventory[data.context.i]._a || {};
                ent.data.inventory[data.context.i]._a[index] = newObj.data;
                runCommand("updateActions", {id : data.context.c, path : "inventory."+data.context.i+".", _a : ent.data.inventory[data.context.i]._a});
                obj.update();
              }
              else if (titles[scope.mode] == "Spells") {
                ent.data.spellbook[data.context.spl]._a = ent.data.spellbook[data.context.spl]._a || {};
                ent.data.spellbook[data.context.spl]._a[index] = newObj.data;
                runCommand("updateActions", {id : data.context.c, path : "spellbook."+data.context.spl+".", _a : ent.data.spellbook[data.context.spl]._a});
                obj.update();
              }
              layout.coverlay("edit-action");
            });

            var pop = ui_popOut({
              target : optionName,
              id : "edit-action",
              title : optionName.attr("action"),
              style : {height : "230px"}
            }, content);
            pop.resizable();
          }
        });
        if (actionData.custom) {
          actionList.push({
            name : "Delete",
            submenu : [{name : "CONFIRM", click : function(){
              var index = optionName.attr("action");
              if (titles[scope.mode] == "Actions") {
                delete ent.data._a[index];
                runCommand("updateActions", {id : data.context.c, delete : index});
                obj.update();
              }
              else if (titles[scope.mode] == "Items") {
                runCommand("updateActions", {id : data.context.c, path : "inventory."+data.context.i+".", delete : index});
                obj.update();
              }
              else if (titles[scope.mode] == "Spells") {
                runCommand("updateActions", {id : data.context.c, path : "spellbook."+data.context.s+".", delete : index});
                obj.update();
              }
            }}]
          });
        }
        ui_dropMenu($(this), actionList, {id : "actions-drop"});
      }

      return false;
    });
  }

  var rollButtons = $("<div>").appendTo(div);
  rollButtons.addClass("flexrow");
  rollButtons.css("margin-top", "4px");

  var rollButton = $("<button>").appendTo(rollButtons);
  rollButton.addClass("highlight alttext flex");
  rollButton.append("Roll");
  rollButton.contextmenu(function(){
    var actionList = [
      //{name : "Set Manual Range"},
      //{name : "Set Manual Targets"},
      {name : "With Flavor Text", click : function(ev, ui){
        ui_prompt({
          target : ui,
          inputs : {
            "Flavor Text" : ""
          },
          click : function(ev, inputs){
            rollButton.attr("flavor", inputs["Flavor Text"].val());
            rollButton.click();
          }
        });
      }}
    ];

    ui_dropMenu($(this), actionList, {id : "actions-drop"});
    return false;
  });
  rollButton.click(function(){
    var actionData = data.actions[data.action];
    var ctx = buildContext();

    var addStr = "";
    var str = actionData.eventData.data;
    var final = "";
    var vMatch = variableRegex.exec(str);
    // save localVaribles
    var cmps = /([\/><\!\~\=])/;
    ctx.eval = ctx.eval || {};

    var varTable = duplicate(actionData.eventData.var) || {};

    for (var key in obj.data.options) {
      if (obj.data.options[key] !== true) {
        varTable[key] = sync.eval(obj.data.options[key], ctx);
        ctx.eval[key] = varTable[key];
      }
    }

    var pullTable = duplicate(actionData.pull);
    var targets = util.getTargets();
    for (var k in targets) {
      var tg = getEnt(targets[k]);
      if (tg && tg.data) {
        for (var key in pullTable) {
          var contxt = {c : duplicate(tg.data)};
          varTable[key] = sync.eval(pullTable[key], contxt);
          ctx.eval[key] = varTable[key];
        }
      }
    }

    var context = sync.context(actionData.eventData.data, ctx);
    for (var key in context.context) {
      if (varTable[key]) {
        context.context[key] = duplicate(varTable[key]);
      }
    }

    while (vMatch) {
      if (vMatch[2] && vMatch[4] && vMatch[4][0] == "=") {
        var stack = [0];
        for (var i=1; i<vMatch[4].length; i++) {
          if (vMatch[4][i] == "=" && !((vMatch[4][i-1] || "").match(cmps) || (vMatch[4][i+1] || "").match(cmps))) {
            stack.push(i);
          }
          else if (vMatch[4][i] == ";") {
            stack.pop();
            if (stack.length == 0) {
              stack = i+1; // record the successful index
              break;
            }
          }
        }
      }
      if (!(stack instanceof Object)) {
        var newStr = vMatch[1]+(vMatch[2] || "");
        if (context.context[vMatch[2]]) {
          newStr += "="+sync.val(context.context[vMatch[2]])+";"
        }
        else {
          newStr += vMatch[4].substring(0, stack);
        }
        final += newStr;
        vMatch[0] = (vMatch[1] || "") +(vMatch[2] || "") + (vMatch[3] || "") + vMatch[4].substring(0, stack);
      }
      str = str.replace(vMatch[0], "");
      vMatch = variableRegex.exec(str);
    }
    for (var i in context.context) {
      if (!final.match(i)) {
        final += "$"+i+"="+sync.val(context.context[i])+";";
      }
    }
    final += context.str;
    for (var key in varTable) {
      varTable[key] = sync.eval(varTable[key], ctx);
    }
    var icon;
    if (getEnt(obj.data.context.c) && getEnt(obj.data.context.c).data) {
      icon = sync.rawVal(getEnt(obj.data.context.c).data.info.img);
    }
    var msg;
    if (actionData.flavors) {
      var choices = [];
      for (var i in actionData.flavors) {
        if (!actionData.flavors[i].cond || sync.eval(actionData.flavors[i].cond, ctx)) {
          choices.push(duplicate(actionData.flavors[i]));
        }
      }
      var choice = Math.floor(Math.random() * choices.length);
      icon = actionData.flavors[choice].icon || icon;
      msg = sync.eval(actionData.flavors[choice].msg, ctx);
    }
    else {
      icon = actionData.eventData.icon || icon;
      msg = sync.eval(actionData.eventData.msg, ctx);
    }
    if (rollButton.attr("flavor")) {
      msg = rollButton.attr("flavor");
      rollButton.removeAttr("flavor");
    }

    var eventData = {
      person : sync.rawVal(ctx.c.info.name),
      icon : icon,
      flavor : msg,
      eventData : sync.executeQuery(final, ctx),
    };

    eventData.eventData.ui = actionData.eventData.ui;
    eventData.eventData.var = varTable;

    if (actionData.effects) {
      var effectData = {};
      ctx["pool"] = eventData.data.pool;
      for (var k in targets) {
        var tg = getEnt(targets[k]);
        if (tg && tg.data) {
          effectData[targets[k]] = [];
          for (var i in actionData.effects) {
            var calcData = duplicate(actionData.effects[i]);
            if (calcData.cond == null || sync.eval(calcData.cond, ctx)) {
              delete calcData.cond;
              calcData.eq = sync.eval(calcData.eq, ctx);
              effectData[targets[k]].push(calcData);
            }
          }
        }
      }
      eventData.effects = effectData;
    }


    if (rollButton.attr("private") == "true") {
      var priv = {};
      priv[getCookie("UserID")] = true;
      eventData.p = priv;
    }
    runCommand("chatEvent", eventData);
    setTimeout(function(){
      for (var i in actionData.followup) {
        if (actionData.followup[i].cond == null || sync.eval(actionData.followup[i].cond, ctx)) {
          var eventData = {
            person : sync.rawVal(ctx.c.info.name),
            icon : actionData.followup[i].icon,
            flavor : sync.eval(actionData.followup[i].msg, ctx),
            eventData : sync.executeQuery(actionData.followup[i].data, ctx),
          };
          eventData.eventData.ui = actionData.followup[i].ui;
          eventData.eventData.var = varTable;
          if (rollButton.attr("private") == "true") {
            var priv = {};
            priv[getCookie("UserID")] = true;
            eventData.p = priv;
          }
          runCommand("chatEvent", eventData);
        }
      }
    }, 100);

    rollButton.removeAttr("private");
  });

  var privateRoll = $("<button>").appendTo(rollButtons);
  privateRoll.addClass("background subtitle alttext");
  privateRoll.append("Private");
  privateRoll.click(function(){
    rollButton.attr("private", "true");
    rollButton.click();
  });
  privateRoll.contextmenu(function(){
    var actionList = [
      //{name : "Set Manual Range"},
      //{name : "Set Manual Targets"},
      {name : "With Flavor Text", click : function(ev, ui){
        ui_prompt({
          target : ui,
          inputs : {
            "Flavor Text" : ""
          },
          click : function(ev, inputs){
            rollButton.attr("private", "true");
            rollButton.attr("flavor", inputs["Flavor Text"].val());
            rollButton.click();
          }
        });
      }}
    ];

    ui_dropMenu($(this), actionList, {id : "actions-drop"});
    return false;
  });

  rollButtons.hide();

  function buildOptions(action) {
    var context = buildContext();
    obj.data.action = action;
    actionList.children().each(function(){
      if ($(this).attr("action") != action) {
        $(this).hide();
        $(this).removeClass("underline");
      }
      else {
        $(this).addClass("underline");
        if (obj.data.actions[action].range) {
          $($(this).children()[0]).text(action + " ("+sync.eval(obj.data.actions[action].range, context)+")");
        }
        else {
          $($(this).children()[0]).text(action);
        }
      }
    });
    optionMenu.attr("action", action);
    optionMenu.empty();

    var actionData = data.actions[action];

    if (actionData.choices) {
      var choices = $("<div>").appendTo(optionMenu);
      choices.addClass("flexrow flexwrap flexmiddle subtitle");

      for (var choiceKey in actionData.choices) {
        var choice = $("<button>").appendTo(choices);
        choice.addClass("alttext subtitle");
        if (JSON.stringify(data.options) == JSON.stringify(actionData.choices[choiceKey])) {
          choice.addClass("highlight");
        }
        else {
          choice.addClass("background");
        }
        choice.attr("key", choiceKey);
        choice.append(choiceKey);
        choice.click(function(){
          data.options = duplicate(actionData.choices[$(this).attr("key")]);
          obj.update();
        });
      }
    }

    for (var key in actionData.options) {
      var optionWrap = $("<div>").appendTo(optionMenu);
      optionWrap.addClass("lrmargin flexrow flexbetween subtitle");
      optionWrap.append("<b>"+key+"</b>");
      var optionValue = genInput({
        parent : optionWrap,
        classes : "line lrmargin",
        index : key,
        val : data.options[key] || "",
        value : (data.options[key] != null&&data.options[key]!==true)?(sync.eval(data.options[key] || "", context)):(""),
        style : {"width" : "25px", "text-align" : "center", "transition" : "width 0.25s"}
      });
      if (!scope.minimized) {
        optionValue.css("width", "30px");
      }

      optionValue.blur(function(){
        if (!scope.minimized) {
          $(this).css("width", "30px");
        }
        else {
          $(this).css("width", "25px");
        }
        $(this).css("text-align", "center");
        if ($(this).attr("val")) {
          $(this).val(sync.eval($(this).attr("val"), buildContext()));
        }
        $(this).removeAttr("placeholder");
      });
      optionValue.change(function(){
        var key = $(this).attr("index");
        if ($(this).val()) {
          data.options[key] = $(this).val();
          $(this).attr("val", $(this).val());
          $(this).val(sync.eval($(this).val(), buildContext()));
        }
        else {
          $(this).removeAttr("val");
          delete data.options[key];
        }
        $(this).blur();
        layout.coverlay("drop-actions-suggestions");
      });
      optionValue.focus(function(){
        var optionValue = $(this);
        var actionData = data.actions[data.action];
        if (actionData.options && actionData.options[$(this).attr("index")] instanceof Object && $(this).val() == "") {
          var actionList = [];
          for (var i in actionData.options[$(this).attr("index")]) {
            var optionData = actionData.options[$(this).attr("index")][i];
            if (optionData instanceof Object) {
              if (!optionData.cond || sync.eval(optionData.cond, buildContext())) {
                actionList.push({
                  name : String(optionData.mask || optionData.eq),
                  attr : {val : optionData.eq},
                  click : function(ev, ui){
                    optionValue.val(ui.attr("val"), buildContext());
                    optionValue.change();
                  }
                });
              }
            }
            else {
              actionList.push({
                name : String(optionData),
                attr : {val : optionData},
                click : function(ev, ui){
                  optionValue.val(ui.attr("val"), buildContext());
                  optionValue.change();
                }
              });
            }
          }
          ui_dropMenu($(this), actionList, {"id" : "drop-actions-suggestions", hideClose : true});
        }

        var ctx = sync.context(actionData.eventData.data, buildContext()).context;
        if (sync.rawVal(ctx[$(this).attr("index")])) {
          $(this).attr("placeholder", sync.rawVal(ctx[$(this).attr("index")]));
        }
        if (!scope.minimized) {
          $(this).css("width", "150px");
        }
        else {
          $(this).css("width", Math.max(Math.min(150, ($(this).attr("val") || "").length*12), 75)+"px");
        }
        $(this).css("text-align", "left");
        $(this).val($(this).attr("val"));
      });
      optionValue.contextmenu(function(){
        var optionValue = $(this);
        if (actionData.options && actionData.options[$(this).attr("index")] instanceof Object) {
          var actionList = [];
          for (var i in actionData.options[$(this).attr("index")]) {
            var optionData = actionData.options[$(this).attr("index")][i];
            if (optionData instanceof Object) {
              if (!optionData.cond || sync.eval(optionData.cond, buildContext())) {
                actionList.push({
                  name : String(optionData.mask || optionData.eq),
                  attr : {val : optionData.eq},
                  click : function(ev, ui){
                    optionValue.val(ui.attr("val"), buildContext());
                    optionValue.change();
                  }
                });
              }
            }
            else {
              actionList.push({
                name : String(optionData),
                attr : {val : optionData},
                click : function(ev, ui){
                  optionValue.val(ui.attr("val"), buildContext());
                  optionValue.change();
                }
              });
            }
          }
          ui_dropMenu($(this), actionList, {"id" : "drop-actions-suggestions", hideClose : true, style : {"font-size" : "0.8em"}});
        }
        return false;
      });
    }

    rollButtons.show();
  }
  if (obj.data.action) {
    buildOptions(obj.data.action);
  }

  return div;
});

function _diceable(ev, ui, evData, ctx) {
  var eventData = duplicate(evData);
  eventData.flavor = eventData.flavor || eventData.msg;
  eventData.eventData = eventData.eventData  || eventData.data;
  delete eventData.msg;
  delete eventData.data;

  var context = duplicate(ctx);
  if (_down["17"]) {
    snd_diceRoll.play();
    eventData.flavor = sync.eval(eventData.flavor, context);
    eventData.eventData = sync.executeQuery(eventData.eventData, context);
    runCommand("chatEvent", eventData);
  }
  else {
    function modifiedRoll(ev, ui2) {
      var pool = game.templates.dice.pool;
      if (pool[game.templates.dice.defaults[0]].value) {
        eventData.flavor = sync.eval(eventData.flavor, context);
        eventData.eventData = sync.executeQuery(eventData.eventData, context, true);
        var content = $("<div>");

        var dicePool = $("<div>").appendTo(content);
        dicePool.addClass("flexrow flexwrap outlinebottom");
        function buildPool() {
          dicePool.empty();
          for (var key in eventData.eventData.equations) {
            var value = eventData.eventData.equations[key];

            var die = sync.render("ui_dice")(value, content, {
              key : sync.rawVal(value.ctx.die),
              width : "3em",
              height : "3em",
              value : 0,
            }).appendTo(dicePool);
            die.attr("index", key);
            die.css("cursor", "pointer");
            die.click(function(){
              eventData.eventData.splice($(this).attr("index"), 1);
              buildPool();
            });
          }
        }
        var modPool = $("<div>").appendTo(content);
        modPool.addClass("flexrow flexwrap outlinebottom");

        for (var key in pool) {
          if (pool[key].static) {
            var value = pool[key];
            var addDie = sync.render("ui_dice")(sync.process("$die="+key+";"+value.value, null, true), content, {
              key : key,
              width : "2em",
              height : "2em",
              value : 0
            }).appendTo(modPool);
            addDie.css("cursor", "pointer");
            addDie.css("opacity", "0.5");
            addDie.hover(function(){
              $(this).css("opacity", "");
            },
            function(){
              $(this).css("opacity", "0.5");
            });
            addDie.attr("name", key);
            addDie.attr("value", pool[key].value);
            addDie.click(function(){
              eventData.eventData.push(sync.process("$die="+$(this).attr("name")+";"+$(this).attr("value"), null, true));
              buildPool();
            });
          }
        }
        buildPool();
        var confirm = $("<button>").appendTo(content);
        confirm.addClass("fit-x flexmiddle");
        confirm.append("Confirm");
        confirm.click(function(ev){
          snd_diceRoll.play();
          var diceKeys = game.templates.dice.keys;
          eventData.eventData.pool = {};
          for (var key in eventData.eventData) {
            var eq = eventData.eventData[key];
            eq.r = sync.reduce(eq.e);
            eq.v = sync.eval(eq.r);
            if (sync.rawVal(eq.ctx.die) && game.templates.dice.pool[sync.rawVal(eq.ctx.die)]) {
              var diceData = game.templates.dice.pool[sync.rawVal(eq.ctx.die)];
              if (diceData && diceData.results) {
                var valueData = diceData.results[eq.v];
                for (var key in valueData) {
                  if (eventData.eventData.pool[key]) {
                    eventData.eventData.pool[key] += valueData[key];
                  }
                  else {
                    eventData.eventData.pool[key] = valueData[key];
                  }
                }
              }
            }
          }
          runCommand("chatEvent", eventData);
          layout.coverlay("diceable-modified");
        });
        ui_popOut({
          target : ui,
          id : "diceable-modified",
        }, content);
      }
      else {
        ui_prompt({
          target : ui,
          id : "diceable-modified",
          inputs : {
            "Modifier Amount" : {type : "number", value : 0}
          },
          click : function(ev, inputs) {
            snd_diceRoll.play();
            if (eventData.inverted) {
              eventData.eventData = eventData.eventData + "-" + inputs["Modifier Amount"].val();
            }
            else {
              eventData.eventData = eventData.eventData + "+" + inputs["Modifier Amount"].val();
            }
            eventData.flavor = sync.eval(eventData.flavor, context);
            eventData.eventData = sync.executeQuery(eventData.eventData, context);
            runCommand("chatEvent", eventData);
          }
        });
      }
    }
    var pool = game.templates.dice.pool;
    if (pool[game.templates.dice.defaults[0]].value) {
      modifiedRoll(ev, ui);
      return;
    }
    var optionList = [{
      name : "Roll",
      click : function(ev, ui) {
        snd_diceRoll.play();
        eventData.flavor = sync.eval(eventData.flavor, context);
        eventData.eventData = sync.executeQuery(eventData.eventData, context);
        runCommand("chatEvent", eventData);
      },
    },
    {
      name : "Roll - Modified",
      click : modifiedRoll,
    }];
    if (game.templates.dice.modifiers) {
      var bonus = {name : "Roll - Bonus", submenu : []};
      var penalty = {name : "Roll - Penalty", submenu : []};

      for (var key in game.templates.dice.modifiers) {
        var name = game.templates.dice.modifiers[key];

        bonus.submenu.push({
          name : "+"+name,
          attr : {mod : game.templates.dice.modifiers[key]},
          click : function(ev, ui) {
            if (eventData.inverted) {
              eventData.eventData = eventData.eventData + "-" + parseInt(ui.attr("mod"));
            }
            else {
              eventData.eventData = eventData.eventData + "+" + parseInt(ui.attr("mod"));
            }
            eventData.flavor = sync.eval(eventData.flavor, context);
            eventData.eventData = sync.executeQuery(eventData.eventData, context);
            runCommand("chatEvent", eventData);
          }
        });
        penalty.submenu.push({
          name : "-"+name,
          attr : {mod : game.templates.dice.modifiers[key]},
          click : function(ev, ui) {
            if (eventData.inverted) {
              eventData.eventData = eventData.eventData + "+" + parseInt(ui.attr("mod"));
            }
            else {
              eventData.eventData = eventData.eventData + "-" + parseInt(ui.attr("mod"));
            }
            eventData.flavor = sync.eval(eventData.flavor, context);
            eventData.eventData = sync.executeQuery(eventData.eventData, context);
            runCommand("chatEvent", eventData);
          }
        });
      }
      optionList.push(bonus);
      optionList.push(penalty);
    }
    /*var apps = $('.application[ui-name="ui_roll"]');
    var counter = 0;
    apps.each(function(){
      var thisApp = $(this);
      counter = counter + 1;
      optionList.push({
        name : "Roller - "+counter,
        hover : {
          in : function(ev, ui){
            var apps = $('.application[ui-name="ui_roll"]');
            apps.each(function(){
              $(this).removeClass("highlight2");
            });
            thisApp.addClass("highlight2");
          },
          out : function(ev, ui){
            var apps = $('.application[ui-name="ui_roll"]');
            apps.each(function(){
              $(this).removeClass("highlight2");
            });
          }
        },
        click : function(ev, ui) {
          var diceTemplates = game.templates.dice;
          var die = diceTemplates.pool[diceTemplates.defaults[0]].value;
          for (var key in _syncList) {
            if (util.contains(_syncList[key]._apps, thisApp.attr("id"))) {
              _syncList[key].data.equations = eventData.eventData;
              _syncList[key].update();
              break;
            }
          }
          thisApp.removeClass("highlight2");
        },
        submenu : [{
          name : "Add Dice",
          hover : {
            in : function(ev, ui){
              var apps = $('.application[ui-name="ui_roll"]');
              apps.each(function(){
                $(this).removeClass("highlight2");
              });
              thisApp.addClass("highlight2");
            },
            out : function(ev, ui){
              var apps = $('.application[ui-name="ui_roll"]');
              apps.each(function(){
                $(this).removeClass("highlight2");
              });
            }
          },
          click : function(ev, ui) {
            for (var key in _syncList) {
              if (util.contains(_syncList[key]._apps, thisApp.attr("id"))) {
                _syncList[key].data.equations = _syncList[key].data.equations || [];
                for (var ky in eventData.eventData) {
                  _syncList[key].data.equations.push(eventData.eventData[ky]);
                }
                _syncList[key].update();
                break;
              }
            }
            thisApp.removeClass("highlight2");
          }
        }]
      });
    })*/
    var dropMenu = ui_dropMenu(ui, optionList, {id: "dice-app-selection-menu"});
  }
}


sync.render("ui_renderAction", function(obj, app, scope){
  scope = scope || {minimized : app.attr("minimized") == "true"};

  obj.data.options = obj.data.options || {};
  var actionKey = obj.data.action;
  var actionData = obj.data.actionData;
  var itemData;
  var spellData;
  function buildContext(){
    var ctx = sync.defaultContext();
    var ent = getEnt(obj.data.context.c);
    if (ent) {
      if (obj.data.context.i instanceof Object) {
        itemData = obj.data.context.i;
      }
      else if (obj.data.context.i) {
        itemData = ent.data.inventory[obj.data.context.i];
      }
      if (obj.data.context.spl instanceof Object) {
        spellData = obj.data.context.spl;
      }
      else if (obj.data.context.spl) {
        spellData = ent.data.spellbook[obj.data.context.spl];
      }
      merge(ctx, {c : duplicate(ent.data), i : duplicate(itemData) || duplicate(spellData), spl : duplicate(spellData)});

      ctx["eval"] = {};
      for (var i in obj.data.options) {
        ctx["eval"][i] = duplicate(obj.data.options[i]);
      }
    }
    return ctx;
  }

  var context = buildContext();

  var saveNewRollWrap = $("<div>");
  saveNewRollWrap.addClass("flexcolumn");

  if (scope.minimized) {
    saveNewRollWrap.addClass("subtitle spadding");
  }
  else {
    saveNewRollWrap.addClass("white smooth outline padding");
  }

  var saveNewRoll = $("<div>").appendTo(saveNewRollWrap);
  saveNewRoll.addClass("lrmargin background padding outline bold smooth hover2 alttext flexcolumn flexmiddle");
  if (itemData) {
    saveNewRoll.text(sync.rawVal(itemData.info.name) + ":" + actionKey);
  }
  else if (spellData) {
    saveNewRoll.text(sync.rawVal(spellData.info.name) + ":" + actionKey);
  }
  else {
    saveNewRoll.text(actionKey);
  }


  if (actionData.choices) {
    saveNewRollWrap.removeClass("spadding");
    saveNewRoll.removeClass("background padding outline smooth alttext hover2");

    var choiceWrap = $("<div>").appendTo(saveNewRoll);
    choiceWrap.addClass("flexrow flexwrap flexmiddle alttext");

    for (var choiceKey in actionData.choices) {
      var saveNewRoll = $("<div>").appendTo(choiceWrap);
      saveNewRoll.addClass("background subtitle hover2 spadding outline smooth");
      saveNewRoll.attr("key", choiceKey);
      if (!scope.minimized) {
        if (Object.keys(actionData.choices[choiceKey]).length && JSON.stringify(obj.data.options) == JSON.stringify(actionData.choices[choiceKey])) {
          saveNewRoll.addClass("highlight");
        }
      }

      if (actionData.range && String(sync.eval(actionData.range, context)).toLowerCase() == choiceKey.toLowerCase()) {
        saveNewRoll.removeClass("background");
        saveNewRoll.addClass("highlight");
      }
      saveNewRoll.text(choiceKey);
      saveNewRoll.click(function(){
        obj.data.options = duplicate(actionData.choices[$(this).attr("key")]);
        if (scope.minimized) {
          rollButton.click();
        }
        else {
          obj.update();
        }
      });
      saveNewRoll.contextmenu(function(){
        if (scope.minimized) {
          obj.data.options = duplicate(actionData.choices[$(this).attr("key")]);
          rollButton.contextmenu();
          return false;
        }
      });
    }
  }
  else {
    saveNewRoll.click(function(){
      if (scope.minimized) {
        rollButton.click();
      }
      else {
        obj.update();
      }
    });
    saveNewRoll.contextmenu(function(){
      if (scope.minimized) {
        rollButton.contextmenu();
        return false;
      }
    });
  }

  var expandedDiv = $("<div>").appendTo(saveNewRollWrap);
  expandedDiv.addClass("flexcolumn");

  var optionMenu = $("<div>").appendTo(expandedDiv);
  optionMenu.attr("action", actionKey);
  optionMenu.addClass("flex");

  var rollButtons = $("<div>").appendTo(expandedDiv);
  rollButtons.addClass("flexrow");
  rollButtons.css("margin-top", "4px");

  var rollButton = $("<button>").appendTo(rollButtons);
  rollButton.addClass("highlight alttext flex");
  rollButton.append("Roll");
  rollButton.contextmenu(function(){
    var actionList = [
      //{name : "Set Manual Range"},
      //{name : "Set Manual Targets"},
      {name : "With Flavor Text", click : function(ev, ui){
        ui_prompt({
          target : ui,
          inputs : {
            "Flavor Text" : ""
          },
          click : function(ev, inputs){
            rollButton.attr("flavor", inputs["Flavor Text"].val());
            rollButton.click();
          }
        });
      }},
      {name : "Private", click : function(ev, ui) {
        rollButton.attr("private", "true");
        rollButton.click();
      }}
    ];
    if (scope.minimized) {
      ui_dropMenu(saveNewRollWrap, actionList, {id : "actions-drop", align : "top"});
    }
    else {
      ui_dropMenu($(this), actionList, {id : "actions-drop"});
    }
    return false;
  });
  rollButton.click(function(){
    var ctx = buildContext();

    var addStr = "";
    var str = actionData.eventData.eventData;
    var final = "";
    var vMatch = variableRegex.exec(str);
    // save localVaribles
    var cmps = /([\/><\!\~\=])/;

    ctx.eval = ctx.eval || {};

    var varTable = duplicate(actionData.eventData.var) || {};

    for (var key in obj.data.options) {
      if (obj.data.options[key] !== true) {
        varTable[key] = sync.eval(obj.data.options[key], ctx);
        ctx.eval[key] = varTable[key];
      }
    }

    var pullTable = duplicate(actionData.pull);
    var targets = util.getTargets();
    for (var k in targets) {
      var tg = getEnt(targets[k]);
      if (tg && tg.data) {
        for (var key in pullTable) {
          var contxt = {c : duplicate(tg.data)};
          varTable[key] = sync.eval(pullTable[key], contxt);
          ctx.eval[key] = varTable[key];
        }
      }
    }

    var context = sync.context(actionData.eventData.data, ctx);
    for (var key in context.context) {
      if (varTable[key]) {
        context.context[key] = duplicate(varTable[key]);
      }
    }

    while (vMatch) {
      if (vMatch[2] && vMatch[4] && vMatch[4][0] == "=") {
        var stack = [0];
        for (var i=1; i<vMatch[4].length; i++) {
          if (vMatch[4][i] == "=" && !((vMatch[4][i-1] || "").match(cmps) || (vMatch[4][i+1] || "").match(cmps))) {
            stack.push(i);
          }
          else if (vMatch[4][i] == ";") {
            stack.pop();
            if (stack.length == 0) {
              stack = i+1; // record the successful index
              break;
            }
          }
        }
      }
      if (!(stack instanceof Object)) {
        var newStr = vMatch[1]+(vMatch[2] || "");
        if (context.context[vMatch[2]]) {
          newStr += "="+sync.val(context.context[vMatch[2]])+";"
        }
        else {
          newStr += vMatch[4].substring(0, stack);
        }
        final += newStr;
        vMatch[0] = (vMatch[1] || "") +(vMatch[2] || "") + (vMatch[3] || "") + vMatch[4].substring(0, stack);
      }
      str = str.replace(vMatch[0], "");
      vMatch = variableRegex.exec(str);
    }
    for (var i in context.context) {
      if (!final.match(i)) {
        final += "$"+i+"="+sync.val(context.context[i])+";";
      }
    }
    final += context.str;
    for (var key in varTable) {
      varTable[key] = sync.eval(varTable[key], ctx);
    }
    var icon;
    if (getEnt(obj.data.context.c) && getEnt(obj.data.context.c).data) {
      icon = sync.rawVal(getEnt(obj.data.context.c).data.info.img);
    }
    var msg;
    if (actionData.flavors) {
      var choices = [];
      for (var i in actionData.flavors) {
        if (!actionData.flavors[i].cond || sync.eval(actionData.flavors[i].cond, ctx)) {
          choices.push(duplicate(actionData.flavors[i]));
        }
      }
      var choice = Math.floor(Math.random() * choices.length);
      icon = actionData.flavors[choice].icon || icon;
      msg = sync.eval(actionData.flavors[choice].msg, ctx);
    }
    else {
      icon = actionData.eventData.icon || icon;
      msg = sync.eval(actionData.eventData.flavor, ctx);
    }
    if (rollButton.attr("flavor")) {
      msg = rollButton.attr("flavor");
      rollButton.removeAttr("flavor");
    }
    var eventData = {
      person : sync.rawVal(ctx.c.info.name),
      eID : obj.data.context.c,
      icon : icon,
      flavor : msg,
      eventData : sync.executeQuery(final, ctx),
    };
    eventData.eventData.ui = actionData.eventData.ui;
    eventData.eventData.var = varTable;

    if (actionData.effects) {
      var effectData = {};
      ctx["pool"] = eventData.eventData.pool;
      for (var k in targets) {
        var tg = getEnt(targets[k]);
        if (tg && tg.data) {
          effectData[targets[k]] = [];
          for (var i in actionData.effects) {
            var calcData = duplicate(actionData.effects[i]);
            if (calcData.cond == null || sync.eval(calcData.cond, ctx)) {
              delete calcData.cond;
              calcData.eq = sync.eval(calcData.eq, ctx);
              effectData[targets[k]].push(calcData);
            }
          }
        }
      }
      eventData.effects = effectData;
    }

    if (rollButton.attr("private") == "true") {
      var priv = {};
      priv[getCookie("UserID")] = true;
      eventData.p = priv;
    }
    runCommand("chatEvent", eventData);
    setTimeout(function(){
      for (var i in actionData.followup) {
        if (actionData.followup[i].cond == null || sync.eval(actionData.followup[i].cond, ctx)) {
          var eventData = {
            person : sync.rawVal(ctx.c.info.name),
            eID : obj.data.context.c,
            icon : actionData.followup[i].icon,
            flavor : sync.eval(actionData.followup[i].msg, ctx),
            eventData : sync.executeQuery(actionData.followup[i].data, ctx),
          };
          eventData.eventData.ui = actionData.followup[i].ui;
          eventData.eventData.var = varTable;
          if (rollButton.attr("private") == "true") {
            var priv = {};
            priv[getCookie("UserID")] = true;
            eventData.p = priv;
          }
          runCommand("chatEvent", eventData);
        }
      }
    }, 100);

    rollButton.removeAttr("private");
  });

  var privateRoll = $("<button>").appendTo(rollButtons);
  privateRoll.addClass("background subtitle alttext");
  privateRoll.append("Private");
  privateRoll.click(function(){
    rollButton.attr("private", "true");
    rollButton.click();
  });
  privateRoll.contextmenu(function(){
    var actionList = [
      //{name : "Set Manual Range"},
      //{name : "Set Manual Targets"},
      {name : "With Flavor Text", click : function(ev, ui){
        ui_prompt({
          target : ui,
          inputs : {
            "Flavor Text" : ""
          },
          click : function(ev, inputs){
            rollButton.attr("private", "true");
            rollButton.attr("flavor", inputs["Flavor Text"].val());
            rollButton.click();
          }
        });
      }}
    ];

    ui_dropMenu($(this), actionList, {id : "actions-drop"});
    return false;
  });

  for (var key in actionData.options) {
    var optionWrap = $("<div>").appendTo(optionMenu);
    optionWrap.addClass("lrmargin flexrow flexbetween subtitle");
    optionWrap.append("<b>"+key+"</b>");
    var optionValue = genInput({
      parent : optionWrap,
      classes : "line lrmargin",
      index : key,
      val : obj.data.options[key] || "",
      value : (obj.data.options[key] != null&&obj.data.options[key]!==true)?(sync.eval(obj.data.options[key] || "", context)):(""),
      style : {"width" : "50px", "text-align" : "center", "transition" : "width 0.25s"}
    });

    optionValue.blur(function(){
      $(this).css("width", "50px");
      $(this).css("text-align", "center");
      if ($(this).attr("val")) {
        $(this).val(sync.eval($(this).attr("val"), buildContext()));
      }
      $(this).removeAttr("placeholder");
    });
    optionValue.change(function(){
      var key = $(this).attr("index");
      if ($(this).val()) {
        obj.data.options[key] = $(this).val();
        $(this).attr("val", $(this).val());
        $(this).val(sync.eval($(this).val(), buildContext()));
      }
      else {
        $(this).removeAttr("val");
        delete obj.data.options[key];
      }
      $(this).blur();
      layout.coverlay("drop-actions-suggestions");
    });
    optionValue.focus(function(){
      var optionValue = $(this);
      if (actionData.options && actionData.options[$(this).attr("index")] instanceof Object && $(this).val() == "") {
        var actionList = [];
        for (var i in actionData.options[$(this).attr("index")]) {
          var optionData = actionData.options[$(this).attr("index")][i];
          if (optionData instanceof Object) {
            if (!optionData.cond || sync.eval(optionData.cond, buildContext())) {
              actionList.push({
                name : String(optionData.mask || optionData.eq),
                attr : {val : optionData.eq},
                click : function(ev, ui){
                  optionValue.val(ui.attr("val"), buildContext());
                  optionValue.change();
                }
              });
            }
          }
          else {
            actionList.push({
              name : String(optionData),
              attr : {val : optionData},
              click : function(ev, ui){
                optionValue.val(ui.attr("val"), buildContext());
                optionValue.change();
              }
            });
          }
        }
        ui_dropMenu($(this), actionList, {"id" : "drop-actions-suggestions", hideClose : true});
      }

      var ctx = sync.context(actionData.eventData.data, buildContext()).context;
      if (sync.rawVal(ctx[$(this).attr("index")])) {
        $(this).attr("placeholder", sync.rawVal(ctx[$(this).attr("index")]));
      }
      if (!scope.minimized) {
        $(this).css("width", "150px");
      }
      else {
        $(this).css("width", Math.max(Math.min(150, ($(this).attr("val") || "").length*12), 75)+"px");
      }
      $(this).css("text-align", "left");
      $(this).val($(this).attr("val"));
    });
    optionValue.contextmenu(function(){
      var optionValue = $(this);
      if (actionData.options && actionData.options[$(this).attr("index")] instanceof Object) {
        var actionList = [];
        for (var i in actionData.options[$(this).attr("index")]) {
          var optionData = actionData.options[$(this).attr("index")][i];
          if (optionData instanceof Object) {
            if (!optionData.cond || sync.eval(optionData.cond, buildContext())) {
              actionList.push({
                name : String(optionData.mask || optionData.eq),
                attr : {val : optionData.eq},
                click : function(ev, ui){
                  optionValue.val(ui.attr("val"), buildContext());
                  optionValue.change();
                }
              });
            }
          }
          else {
            actionList.push({
              name : String(optionData),
              attr : {val : optionData},
              click : function(ev, ui){
                optionValue.val(ui.attr("val"), buildContext());
                optionValue.change();
              }
            });
          }
        }
        ui_dropMenu($(this), actionList, {"id" : "drop-actions-suggestions", hideClose : true, style : {"font-size" : "0.8em"}});
      }
      return false;
    });
  }

  if (scope.minimized) {
    expandedDiv.hide();
  }

  return saveNewRollWrap;
});

sync.render("ui_manageActions", function(obj, app, scope){
  var div = $("<div>");
  div.addClass("flex foreground");

  for (var actionKey in game.templates.actions[obj.data._t]) {
    if (!obj.data._a || !obj.data._a[actionKey]) {
      var saveNewRollWrap = $("<div>").appendTo(div);
      saveNewRollWrap.addClass("white smooth outline padding flexcolumn flexmiddle");

      var actionObj = sync.dummyObj();
      actionObj.data = {context : {c : scope.cref || obj.id()}, action : actionKey, actionData : duplicate(game.templates.actions[obj.data._t][actionKey])};
      if (scope.cref) {
        actionObj.data.context.c = scope.cref;
        actionObj.data.context.i = duplicate(obj.data);
      }
      game.locals["actionsList"] = game.locals["actionsList"] || {};
      game.locals["actionsList"][app.attr("id")+"-"+obj.data._t+"-"+actionKey] = actionObj;

      var renderWrap = $("<div>").appendTo(saveNewRollWrap);
      renderWrap.addClass("flexcolumn flexmiddle");

      var actionApp = sync.newApp("ui_renderAction").appendTo(renderWrap);
      actionObj.addApp(actionApp);

      var newObj = sync.obj();
      newObj.data = duplicate(game.templates.actions[obj.data._t][actionKey]);

      var newApp = sync.newApp("ui_editAction").appendTo(saveNewRollWrap);
      newApp.css("height", "230px");
      newObj.addApp(newApp);
      function attachListener(newObj, actionKey, actionObj) {
        newObj.listen["updateParent"] = function(orgObj){
          if (!game.templates.actions[obj.data._t] || !game.templates.actions[obj.data._t][actionKey] || JSON.stringify(orgObj.data) != JSON.stringify(game.templates.actions[obj.data._t][actionKey])) {
            obj.data._a = obj.data._a || {};
            obj.data._a[actionKey] = duplicate(orgObj.data);
          }
          actionObj.data.actionData = duplicate(orgObj.data);
          actionObj.update();
          return true;
        }
      }
      attachListener(newObj, actionKey, actionObj);
    }
    else {
      var saveNewRollWrap = $("<div>").appendTo(div);
      saveNewRollWrap.addClass("white smooth outline padding flexcolumn flexmiddle");

      var actionObj = sync.dummyObj();
      actionObj.data = {context : {c : obj.id()}, action : actionKey, actionData : duplicate(obj.data._a[actionKey])};
      if (scope.cref) {
        actionObj.data.context.c = scope.cref;
        actionObj.data.context.i = duplicate(obj.data);
      }

      game.locals["actionsList"] = game.locals["actionsList"] || {};
      game.locals["actionsList"][app.attr("id")+"-"+obj.data._t+"-"+actionKey] = actionObj;

      var renderWrap = $("<div>").appendTo(saveNewRollWrap);
      renderWrap.addClass("flexcolumn flexmiddle");

      var actionApp = sync.newApp("ui_renderAction").appendTo(renderWrap);
      actionObj.addApp(actionApp);

      var removeAction = genIcon("refresh", "Restore Action to Default").appendTo(renderWrap);
      removeAction.addClass("destroy subtitle");
      removeAction.attr("index", actionKey);
      removeAction.click(function(){
        var index = $(this).attr("index");
        ui_prompt({
          target : $(this),
          confirm : "Restore to Default",
          click : function(){
            delete obj.data._a[index];
            obj.update();
          }
        });
      });

      var newObj = sync.obj();
      newObj.data = duplicate(obj.data._a[actionKey]);

      var newApp = sync.newApp("ui_editAction").appendTo(saveNewRollWrap);
      newApp.css("height", "230px");
      newObj.addApp(newApp);
      function attachListener(newObj, actionKey, actionObj) {
        newObj.listen["updateParent"] = function(orgObj){
          if (!game.templates.actions[obj.data._t] || !game.templates.actions[obj.data._t][actionKey] || JSON.stringify(orgObj.data) != JSON.stringify(game.templates.actions[obj.data._t][actionKey])) {
            obj.data._a = obj.data._a || {};
            obj.data._a[actionKey] = duplicate(orgObj.data);
          }
          actionObj.data.actionData = duplicate(orgObj.data);
          actionObj.update();
          return true;
        }
      }
      attachListener(newObj, actionKey, actionObj);
    }
  }

  for (var actionKey in obj.data._a) {
    if (!game.templates.actions[obj.data._t] || !game.templates.actions[obj.data._t][actionKey]) {
      var saveNewRollWrap = $("<div>").appendTo(div);
      saveNewRollWrap.addClass("white smooth outline padding flexcolumn flexmiddle");

      var actionObj = sync.dummyObj();
      actionObj.data = {context : {c : obj.id()}, action : actionKey, actionData : duplicate(obj.data._a[actionKey])};
      if (scope.cref) {
        actionObj.data.context.c = scope.cref;
        actionObj.data.context.i = duplicate(obj.data);
      }

      game.locals["actionsList"] = game.locals["actionsList"] || {};
      game.locals["actionsList"][app.attr("id")+"-"+obj.data._t+"-"+actionKey] = actionObj;

      var renderWrap = $("<div>").appendTo(saveNewRollWrap);
      renderWrap.addClass("flexcolumn flexmiddle");

      var actionApp = sync.newApp("ui_renderAction").appendTo(renderWrap);
      actionObj.addApp(actionApp);

      var removeAction = genIcon("remove", "Destroy Custom Action").appendTo(renderWrap);
      removeAction.addClass("destroy subtitle");
      removeAction.attr("index", actionKey);
      removeAction.click(function(){
        var index = $(this).attr("index");
        ui_prompt({
          target : $(this),
          confirm : "Delete Action",
          click : function(){
            delete obj.data._a[index];
            obj.update();
          }
        });
      });

      var newObj = sync.obj();
      newObj.data = duplicate(obj.data._a[actionKey]);

      var newApp = sync.newApp("ui_editAction").appendTo(saveNewRollWrap);
      newApp.css("height", "230px");
      newObj.addApp(newApp);
      function attachListener(newObj, actionKey, actionObj) {
        newObj.listen["updateParent"] = function(orgObj){
          if (!game.templates.actions[obj.data._t] || !game.templates.actions[obj.data._t][actionKey] || JSON.stringify(orgObj.data) != JSON.stringify(game.templates.actions[obj.data._t][actionKey])) {
            obj.data._a = obj.data._a || {};
            obj.data._a[actionKey] = duplicate(orgObj.data);
          }
          actionObj.data.actionData = duplicate(orgObj.data);
          actionObj.update();
          return true;
        }
      }
      attachListener(newObj, actionKey, actionObj);
    }
  }

  var addActionWrap = $("<div>").appendTo(div);
  addActionWrap.addClass("fit-x flexmiddle subtitle alttext bold spadding");

  var addAction = genIcon("plus", "New Action").appendTo(addActionWrap);
  addAction.attr("title", "Add a New Action");
  addAction.click(function(){
    if (hasSecurity(getCookie("UserID"), "Rights", obj.data) || !obj.data._s) {
      ui_prompt({
        target : $(this),
        inputs : {
          "New Action Name" : ""
        },
        click : function(ev, inputs){
          var name = inputs["New Action Name"].val();
          if (name) {
            obj.data._a = obj.data._a || {};
            obj.data._a[name] = {};
            obj.update();
          }
          else {
            sendAlert({text : "No Name Entered"});
          }
        }
      });
    }
  });

  return div;
});

sync.render("ui_hotActions", function(char, app, scope){
  scope = scope || {};

  var savedRollWrap;

  if (game.templates.build) {
    var actionObj = sync.dummyObj();
    actionObj.data = {c: char.id()};

    game.locals["actionsList"] = game.locals["actionsList"] || {};
    game.locals["actionsList"][app.attr("id")+"-"+char.data._t+"-actions"] = actionObj;

    savedRollWrap = sync.newApp("ui_actionsv2");
    savedRollWrap.addClass("flexmiddle");
    savedRollWrap.css("text-shadow", "none");
    savedRollWrap.css("color", "#333");

    actionObj.addApp(savedRollWrap);

    if (savedRollWrap.children()[0] && $(savedRollWrap.children()[0]).children().length) {
      app.attr("actionsTrue", "true");
    }
  }
  else {
    savedRollWrap = $("<div>");
    savedRollWrap.addClass("flexrow flexwrap fit-xy");
    savedRollWrap.css("text-shadow", "none");
    savedRollWrap.css("color", "#333");

    if (!scope.noAround) {
      savedRollWrap.addClass("flexaround");
    }
    else {
      savedRollWrap.css("overflow", "auto");
    }

    for (var actionKey in game.templates.actions.c) {
      var actionData = duplicate(game.templates.actions.c[actionKey]);
      if (char.data._a && char.data._a[actionKey]) {
        actionData = duplicate(char.data._a[actionKey]);
      }
      var context = {c : char.id()}
      var hot = sync.eval(actionData.hot, context);

      if (actionData.hot) {
        var actionObj = sync.dummyObj();
        actionObj.data = {context : context, action : actionKey, actionData : actionData};

        game.locals["actionsList"] = game.locals["actionsList"] || {};
        game.locals["actionsList"][app.attr("id")+"-"+char.data._t+"-"+actionKey] = actionObj;

        var rollWrap = $("<div>").appendTo(savedRollWrap);

        var actionApp = sync.newApp("ui_renderAction").appendTo(rollWrap);
        actionApp.attr("minimized", "true");
        actionApp.css("outline", "none");
        actionApp.css("border", "none");
        actionObj.addApp(actionApp);
      }
    }

    for (var actionKey in char.data._a) {
      if (!game.templates.actions[char.data._t] || !game.templates.actions[char.data._t][actionKey]) {
        var actionData = duplicate(char.data._a[actionKey]);
        var context = {c : char.id()}
        var hot = sync.eval(actionData.hot, context);
        if (hot) {
          var actionObj = sync.dummyObj();
          actionObj.data = {context : {c : char.id()}, action : actionKey, actionData : actionData};

          game.locals["actionsList"] = game.locals["actionsList"] || {};
          game.locals["actionsList"][app.attr("id")+"-"+char.data._t+"-"+actionKey] = actionObj;

          var rollWrap = $("<div>").appendTo(savedRollWrap);

          var actionApp = sync.newApp("ui_renderAction").appendTo(rollWrap);
          actionApp.attr("minimized", "true");
          actionApp.css("outline", "none");
          actionApp.css("border", "none");
          actionObj.addApp(actionApp);
        }
      }
    }
    for (var itemKey in char.data.inventory) {
      var itemWrap = $("<div>").appendTo(savedRollWrap);
      itemWrap.addClass("flexrow flexmiddle flexwrap");

      for (var actionKey in game.templates.actions.i) {
        var actionData = duplicate(game.templates.actions.i[actionKey]);
        if (char.data.inventory[itemKey]._a && char.data.inventory[itemKey]._a[actionKey]) {
          actionData = duplicate(char.data.inventory[itemKey]._a[actionKey]);
        }
        var context = {c : char.id()};
        context.i = char.data.inventory[itemKey];
        var hot = sync.eval(actionData.hot, context);

        if (hot) {
          var actionObj = sync.dummyObj();
          actionObj.data = {context : context, action : actionKey, actionData : actionData};

          game.locals["actionsList"] = game.locals["actionsList"] || {};
          game.locals["actionsList"][app.attr("id")+"-i-"+actionKey] = actionObj;

          var rollWrap = $("<div>").appendTo(itemWrap);

          var actionApp = sync.newApp("ui_renderAction").appendTo(rollWrap);
          actionApp.attr("minimized", "true");
          actionApp.attr("title", char.data.inventory[itemKey].info.name.current);
          actionApp.css("outline", "none");
          actionApp.css("border", "none");
          actionObj.addApp(actionApp);
        }
      }
      for (var actionKey in char.data.inventory[itemKey]._a) {
        if (!game.templates.actions.i || !game.templates.actions.i[actionKey]) {
          var hot = sync.eval(actionData.range, context)
          var actionData = duplicate(char.data.inventory[itemKey]._a[actionKey]);
          var context = {c : char.id()}
          context.i = char.data.inventory[itemKey];
          var hot = sync.eval(actionData.hot, context);
          if (hot) {
            var actionObj = sync.dummyObj();
            actionObj.data = {context : context, action : actionKey, actionData : actionData};

            game.locals["actionsList"] = game.locals["actionsList"] || {};
            game.locals["actionsList"][app.attr("id")+"-i-"+actionKey] = actionObj;

            var rollWrap = $("<div>").appendTo(itemWrap);

            var actionApp = sync.newApp("ui_renderAction").appendTo(rollWrap);
            actionApp.attr("minimized", "true");
            actionApp.attr("title", char.data.inventory[itemKey].info.name.current);
            actionApp.css("outline", "none");
            actionApp.css("border", "none");
            actionObj.addApp(actionApp);
          }
        }
      }
    }
    for (var itemKey in char.data.spellbook) {
      var spellWrap = $("<div>").appendTo(savedRollWrap);
      spellWrap.addClass("flexrow flexmiddle flexwrap");

      for (var actionKey in game.templates.actions.i) {
        var actionData = duplicate(game.templates.actions.i[actionKey]);
        if (char.data.spellbook[itemKey]._a && char.data.spellbook[itemKey]._a[actionKey]) {
          actionData = duplicate(char.data.spellbook[itemKey]._a[actionKey]);
        }
        var context = {c : char.id()}
        context.i = char.data.spellbook[itemKey];
        var hot = sync.eval(actionData.hot, context);
        if (hot) {
          var actionObj = sync.dummyObj();
          actionObj.data = {context : context, action : actionKey, actionData : actionData};

          game.locals["actionsList"] = game.locals["actionsList"] || {};
          game.locals["actionsList"][app.attr("id")+"-s-"+actionKey] = actionObj;

          var rollWrap = $("<div>").appendTo(spellWrap);

          var actionApp = sync.newApp("ui_renderAction").appendTo(rollWrap);
          actionApp.attr("minimized", "true");
          actionApp.attr("title", char.data.spellbook[itemKey].info.name.current);
          actionApp.css("outline", "none");
          actionApp.css("border", "none");
          actionObj.addApp(actionApp);
        }
      }
      for (var actionKey in char.data.spellbook[itemKey]._a) {
        if (!game.templates.actions.i || !game.templates.actions.i[actionKey]) {
          var context = {c : char.id()}
          context.i = char.data.spellbook[itemKey];
          var actionData = duplicate(char.data.spellbook[itemKey]._a[actionKey]);
          var hot = sync.eval(actionData.hot, context);

          if (hot) {
            var actionObj = sync.dummyObj();
            actionObj.data = {context : context, action : actionKey, actionData : actionData};

            game.locals["actionsList"] = game.locals["actionsList"] || {};
            game.locals["actionsList"][app.attr("id")+"-s-"+actionKey] = actionObj;

            var rollWrap = $("<div>").appendTo(spellWrap);

            var actionApp = sync.newApp("ui_renderAction").appendTo(rollWrap);
            actionApp.attr("minimized", "true");
            actionApp.attr("title", char.data.spellbook[itemKey].info.name.current);
            actionApp.css("outline", "none");
            actionApp.css("border", "none");
            actionObj.addApp(actionApp);
          }
        }
      }
    }
    if (savedRollWrap.children().length) {
      app.attr("actionsTrue", "true");
    }
  }

  return savedRollWrap;
});

sync.render("ui_ent", function(ent, app, scope) {
  scope = scope || {viewOnly : app.attr("viewOnly") == "true"}
  var info = {name : sync.val(ent.data.info.name) || "[No Name]", img : sync.val(ent.data.info.img)};
  ent.data._flags = ent.data._flags || duplicate(ent.data.tags) || {};
  if (ent.data["_t"] == "a") {
    info.img = info.img || "/content/icons/Book1000p.png";
  }
  if (ent.data["_t"] == "b") {
    info.img = info.img;
  }
  if (ent.data["_t"] == "c") {
    info.img = info.img || "/content/icons/blankchar.png";
  }
  if (ent.data["_t"] == "i") {
    info.img = info.img || "/content/icons/Toolbox1000p.png";
  }
  if (ent.data["_t"] == "p") {
    info.img = info.img || "/content/icons/Scroll1000p.png";
  }
  if (ent.data["_t"] == "pk") {
    info.img = info.img || "/content/icons/Chest1000p.png";
  }
  if (ent.data["_t"] == "v") {
    info.img = info.img || "/content/icons/blankvehicle.png";
  }

  var plate = $("<div>");
  plate.addClass("flexrow outline ent");
  plate.attr("index", ent.id());
  if (isNaN(ent.id()) && ent.id().match("_") && ent.data && ent.data._t != "pk") {
    plate.addClass("inactive");
  }
  var namePlate = $("<div>").appendTo(plate);
  namePlate.addClass("flexbetween flex lrpadding");

  if (ent.data["_t"] == "b" && !info.img && !ent.data.map && !layout.mobile) {
    buildBoardIcon(ent.data, "20px", "20px").appendTo(namePlate);
  }
  else if ((info.img && !scope.app) || (ent.data["_t"] == "b")) {
    var imgWrap = $("<div>").appendTo(namePlate);
    imgWrap.addClass("flexmiddle");
    imgWrap.css("box-shadow", "3px 0px 3px rgba(0,0,0,0.4)");
    imgWrap.css("width", ((parseInt(scope.height) || 20) * 3) + "px");
    imgWrap.css("height", scope.height || "auto");
    if (ent.data["_t"] == "b") {
      imgWrap.contextmenu(function(ev){
        assetTypes["img"].contextmenu(ev, $(this), ent.data.map);
        return false;
      });
      imgWrap.css("background-image", "url('"+(ent.data.map)+"')");
      imgWrap.css("background-size", "contain");
      imgWrap.css("background-repeat", "no-repeat");
      imgWrap.css("background-position", "center");
    }
    else {
      imgWrap.css("background-image", "url('"+(info.img)+"')");
      imgWrap.css("background-size", "cover");
      imgWrap.css("background-repeat", "no-repeat");
      imgWrap.css("background-position", "center 25%");
    }
    if (ent.data._flags && ent.data._flags["temp"]) {
      imgWrap.append("<b class='inactive smooth spadding subtitle' title='Assets tagged with 'temp' are deleted when their tokens are removed from a map'>Temp.</b>");
    }
    if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
      imgWrap.addClass("hover2");
      imgWrap.click(function(ev){
        var applied = false;
        $(".application[ui-name='ui_display']").each(function(){
          if (!applied && $(this).attr("tabKey") != null) {
            if (ent.data["_t"] == "b") {
              util.slideshow(ent.data.map);
            }
            else {
              util.slideshow(info.img);
            }

            ev.stopPropagation();
            ev.preventDefault();
          }
        });
      });
    }
  }
  if (scope.app && !layout.mobile) {
    if (ent.data["_t"] != "b") {
      var img = sync.newApp("ui_image").appendTo(namePlate);
      img.removeClass("application");
      img.addClass("flexcolumn");
      img.attr("viewOnly", true);
      img.attr("mode", "preview");
      img.attr("showTemp", true);
      img.css("width", ((parseInt(scope.height) || 20) * 3) + "px");
      img.css("height", scope.height || "auto");
      img.css("box-shadow", "3px 0px 3px rgba(0,0,0,0.4)");
      ent.addApp(img);
      if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
        img.addClass("hover2");
        img.click(function(ev){
          var applied = false;
          $(".application[ui-name='ui_display']").each(function(){
            if (!applied && $(this).attr("tabKey") != null) {
              util.slideshow(info.img);
              ev.stopPropagation();
              ev.preventDefault();
            }
          });
        });
      }
    }

    var name = sync.newApp("ui_tab");
    name.addClass("flex flexmiddle lrpadding subtitle");
    name.css("font-family", "Scaly Sans");

    if (!scope.minimized) {
      name.addClass("spadding");
    }

    ent.addApp(name);
    name.appendTo(namePlate);
  }
  else {
    var name = $("<text>");
    name.addClass("flex flexmiddle subtitle");
    name.css("font-family", "Scaly Sans");
    name.text(info.name);
    name.appendTo(namePlate);

    if (!scope.minimized) {
      name.addClass("spadding");
    }
  }

  if (scope.draw) {
    scope.draw(plate, ent);
  }
  if (scope.click) {
    plate.addClass("hover2");
    function wrapClick(plate, wObj) {
      namePlate.click(function(ev){
        scope.click(ev, $(this), wObj);
      });
      /*if (wObj.data._t == "c") {
        namePlate.contextmenu(function(ev){
          if (hasSecurity(getCookie("UserID"), "Rights", wObj.data)) {
            var commands = [];
            for (var key in _actions) {
              if (!_actions[key].condition || _actions[key].condition(wObj)) {
                commands.push(
                  {name : _actions[key].name || key,
                    attr : {key : key},
                    click : function(ev, ui){
                      if (_actions[ui.attr("key")].click) {
                        _actions[ui.attr("key")].click(ev, plate, wObj, app, scope);
                      }
                    }
                  }
                );
              }
            }
            ui_dropMenu($(this), commands, {id : "c-actions"});
          }
          ev.preventDefault();
          return false
        });
      }
      else if (wObj.data._t == "p") {
        namePlate.contextmenu(function(ev){
          if (hasSecurity(getCookie("UserID"), "Rights", wObj.data)) {

          }
        });
      }*/
    }
    wrapClick(plate, ent);
  }

  plate.contextmenu(function(ev){
    if (!scope.contextmenu) {
      assetTypes.contextmenu(ev, plate, ent, app, scope);
    }
    else {
      scope.contextmenu(ev, plate, ent);
    }

    return false;
  });
  return plate;
});

sync.render("ui_entList", function(obj, app, scope) {
  scope = scope || {viewOnly : app.attr("viewOnly"), local : app.attr("local") == "true"};

  var div = $("<div>");
  div.css("overflow", "auto");

  var list = scope.list || game.entities.data;
  for (var i in list) {
    var ent = list[i];
    if (!(list[i] instanceof Object)) {
      ent = getEnt(list[i]);
    }
    if ((!scope.filter && ent) || (ent && ent.data["_t"] == scope.filter && (!scope.ignore || !scope.ignore[ent.id()]))) {
      if (!scope.rights || (hasSecurity(getCookie("UserID"), scope.rights, ent.data))) {
        var plate = sync.render("ui_ent")(ent, app, scope).appendTo(div);
        plate.removeClass("outline");
        if (i < list.length-1) {
          plate.addClass("outlinebottom");
        }
        plate.attr("key", i);
      }
    }
  }
  return div;
});

var _hiddenFolders = {};
sync.render("ui_assetManager", function(obj, app, scope) {
  scope = scope || {
    viewOnly : app.attr("viewOnly") == "true",
    category : (app.attr("category") || "c"),
    hideFolders : (app.attr("hideFolders")),
  };
  if (!obj) {
    if (scope.hideFolders) {
      app.attr("hideFolders", scope.hideFolders);
    }
    game.entities.addApp(app);
    return $("<div>");
  }

  var div = $("<div>");
  div.addClass("flexcolumn");
  div.css("min-height", "100%");

  var categories = {
    //"a" : {n : "Adventures", i : "book", ui : "ui_planner", width : "60vw", height : "80vh"},
    "c" : {n : "Actors", i : "user", ui : "ui_characterSheetv2", width : assetTypes["c"].width, height : assetTypes["c"].height},
    "i" : {n : "Elements", i : "briefcase", ui : "ui_renderItemv2", width : assetTypes["i"].width, height : assetTypes["i"].height},
    "b" : {n : "Maps", i : "globe", ui : "ui_board", width : "60vw", height : "60vh"},
    "p" : {n : "Resources", i : "file", ui : "ui_editPage", width : assetTypes["p"].width, height : assetTypes["p"].height},
    //"v" : {n : "Vehicles", i : "plane", ui : "ui_vehicle", width : "50vw", height : "40vh"},
  };
  var inUse = {};

  if (game.config.data.organized && game.config.data.organized.length && !game.config.data.folders) {
    game.config.data.folders = game.config.data.folders || {};
    for (var k in categories) {
      game.config.data.folders[k] = duplicate(game.config.data.organized);
    }
  }

  var wrap = $("<div>").appendTo(div);
  wrap.addClass("flexrow flexwrap flexbetween alttext foreground spadding");

  var search = $("<div>").appendTo(wrap);
  search.addClass("flexrow flex flexmiddle");

  var searchIcon = genIcon("search")//.appendTo(search);
  searchIcon.addClass("lrpadding");
  searchIcon.attr("title", "Search");
  /*searchIcon.click(function(){
    var newApp = sync.newApp("ui_quickSearch");

    game.locals["quicksearch"] = game.locals["quicksearch"] || sync.obj();
    game.locals["quicksearch"].data = game.locals["quicksearch"].data || {filters : {"storage" : true}};

    game.locals["quicksearch"].addApp(newApp);

    ui_popOut({
      target : $("body"),
      id : "quick-search",
      style : {width : "60vw", height : "40vh"}
    }, newApp);
  });*/

  var searchInput = genInput({
    classes : "flex",
    parent : search,
    placeholder : "Search Terms",
    style : {color : "#333"}
  }).addClass("subtitle");
  searchInput.keyup(function(ev){
    var str = ($(this).val() || "").toLowerCase();
    list.children().each(function(){
      if ($(this).attr("index") && str) {resourceWrap.hide();
        resourceWrap.hide();
        var ent = getEnt($(this).attr("index"));
        if (ent) {
          var name = (sync.rawVal(ent.data.info.name) || "").toLowerCase();
          var hide = false;
          for (var tag in ent.data.tags) {
            if (tag.match(String(str))) {
              hide = true;
              break;
            }
          }
          if (name.match(String(str))) {
            hide = true;
          }
          if (!hide) {
            $(this).hide();
          }
          else {
            $(this).show();
          }
        }
      }
      else {
        resourceWrap.show();
        $(this).fadeIn();
      }
    });
  });


  var buttonWrap = $("<div>")//.appendTo(wrap);
  buttonWrap.addClass("flexrow subtitle flexwrap lrmargin");

  for (var i in categories) {
    if (!layout.mobile || i == "c") {
      var button = $("<button>").appendTo(buttonWrap);
      if (i == scope.category) {
        button.addClass("highlight alttext");
        button.append(genIcon(categories[i].i));
      }
      else {
        button.append(genIcon(categories[i].i).css("color", "#333"));
      }
      button.attr("type", i);
      button.attr("title", categories[i].n);
      button.click(function(){
        game.locals["newAssetList"] = [];
        app.attr("category", $(this).attr("type"));
        obj.update();
      });
    }
  }

  var creationBar = $("<div>").appendTo(wrap);
  creationBar.addClass("flexrow flexbetween padding subtitle alttext");

  var libraryWrap = $("<div>").appendTo(wrap);
  libraryWrap.addClass("fit-x flexrow flexbetween subtitle alttext lrpadding");

  var library = genIcon("book", "Content Library")//.appendTo(libraryWrap);
  library.css("color", "white");
  library.addClass("subtitle");
  library.click(function(){
    var newApp = sync.newApp("ui_library", null, {});

    var pop = ui_popOut({
      target : $("body"),
      id : "game-library",
      align : "left",
      minimize : true,
      prompt : true,
      title : "Game Library",
      style : {"width" : "600px", "height" : "600px"}
    }, newApp);
    pop.resizable();
  });

  var toggleTemp = genIcon("eye-open", "Show Temp");
  toggleTemp.attr("title", "Show Temporary Assets");
  if (layout.showTemp) {
    toggleTemp = genIcon("eye-close", "Hide Temp");
    toggleTemp.attr("title", "Hide Temporary Assets");
  }
  toggleTemp.addClass("subtitle");
  toggleTemp.appendTo(libraryWrap);
  toggleTemp.click(function(){
    layout.showTemp = !layout.showTemp;
    obj.update();
  });

  var newFolder = genIcon("folder-close", "New Folder").appendTo(libraryWrap);
  newFolder.addClass("subtitle lrmargin");
  newFolder.click(function(){
    var security = {};
    security[getCookie("UserID")] = 1;
    security[game.owner] = 1;
    game.config.data.folders = game.config.data.folders || {};
    game.config.data.folders[scope.category] = game.config.data.folders[scope.category] || [];
    game.config.data.folders[scope.category].push({n : "New Folder", eIDs : [], person : []});
    if (!scope.local) {
      game.config.sync("updateConfig");
    }
    else {
      game.config.update();
    }
    rebuildFolders();
    layout.coverlay("new-folder");
  });

  var listedChars = $("<div>").appendTo(div);
  listedChars.addClass("flexcolumn flex");
  listedChars.css("position", "relative");
  listedChars.css("overflow-y", "auto");
  listedChars.attr("_lastScrollTop", app.attr("_lastScrollTop_chars"));
  listedChars.scroll(function(){
    app.attr("_lastScrollTop_chars", $(this).scrollTop());
  });

  var listWrap = $("<div>").appendTo(listedChars);
  listWrap.addClass("fit-x flexcolumn flex");
  listWrap.css("position", "absolute");
  if (!layout.mobile) {
    listedChars.on("dragover", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();

      if (!$("#"+app.attr("id")+"-drag-overlay").length) {
    		var olay = layout.overlay({
          target : app,
          id : app.attr("id")+"-drag-overlay",
          style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none", "z-index" : util.getMaxZ(".ui-popout")+1}
        });
        olay.addClass("flexcolumn flexmiddle alttext");
        olay.css("font-size", "2em");
        olay.css("z-index", util.getMaxZ(".ui-popout")+1);
        olay.append("<b>Drop to Create</b>");
      }
  	});
    listedChars.on('drop', function(ev, ui){
      ev.preventDefault();
      ev.stopPropagation();
      var dt = ev.originalEvent.dataTransfer||$(ui.draggable).data("dt");
      var ent = JSON.parse(dt.getData("OBJ"));

      game.locals["newAssetList"] = game.locals["newAssetList"] || [];
      var lastKeys = Object.keys(game.entities.data);
      game.entities.listen["newAsset"] = function(rObj, newObj, target) {
        var change = true;
        for (var key in game.entities.data) {
          if (!util.contains(lastKeys, key)) {
            game.locals["newAssetList"].push(key);
            change = false;
          }
        }
        return change;
      }
      app.attr("category", ent._t);
      if (ent._t == "b") {
        if (!game.config.data.offline) {
          runCommand("createBoard", ent);
        }
        else {
          game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
          game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
          game.entities.data["tempObj"+game.config.data.offline++].data = ent;
          game.entities.update();
        }
      }
      else if (ent._t == "c") {
        createCharacter(ent, true);
        game.entities.update();
      }
      else if (ent._t == "i") {
        if (!game.config.data.offline) {
          runCommand("createItem", ent);
        }
        else {
          game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
          game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
          game.entities.data["tempObj"+game.config.data.offline++].data = ent;
          game.entities.update();
        }
      }
      else if (ent._t == "p") {
        if (!game.config.data.offline) {
          runCommand("createPage", ent);
        }
        else {
          game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
          game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
          game.entities.data["tempObj"+game.config.data.offline++].data = ent;
          game.entities.update();
        }
      }
      layout.coverlay(app.attr("id")+"-drag-overlay");
    });

  	listedChars.on("dragleave", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      layout.coverlay(app.attr("id")+"-drag-overlay");
  	});
  }

  var resourceWrap = $("<div>").appendTo(listWrap);

  function buildSubFolders(path, expand) {
    var folderData = sync.traverse(game.config.data.folders, path);

    var folderPlate = $("<div>");
    folderPlate.addClass("flexcolumn fit-x");

    if (expand) {
      folderPlate.css("min-height", "100%");
    }

    var folder = $("<div>").appendTo(folderPlate);
    folder.addClass("foreground alttext flexrow lrpadding dropContent spadding");
    folder.css("font-size", "0.7em");
    if (folderData.c) {
      folder.css("background", folderData.c);
    }

    var folderNameInput = genInput({
      parent : folder,
      value : folderData.n,
      classes : "middle line"
    });
    folderNameInput.change(function(){
      var folderData = sync.traverse(game.config.data.folders, path);
      folderData.n = $(this).val();
      folderName.empty();
      folderName.append(genIcon((_hiddenFolders[path])?("folder-open"):("folder-close"), folderData.n, true));
      if (_hiddenFolders[path]) {
        $($(folderName.children()[0]).children()[0]).css("margin-right", "2px");
      }

      if (!scope.local) {
        game.config.sync("updateConfig");
      }
      else {
        game.config.update();
      }
      folderNameInput.blur();
      obj.update();
    });
    folderNameInput.blur(function(){
      $(this).hide();
      folderName.show();
    });
    folderNameInput.hide();

    var folderName = genIcon((_hiddenFolders[path])?("folder-open"):("folder-close"), (path == null)?("Root"):(folderData.n), true).appendTo(folder);
    if (_hiddenFolders[path]) {
      $(folderName.children()[0]).css("margin-right", "2px");
    }
    folder.append("<div class='flex'></div>");
    folder.attr("path", path);
    if (path != null) {
      folder.contextmenu(function(ev){
        createFolder.click();
        ev.stopPropagation();
        ev.preventDefault();
        return false;
      });
      folderName.click(function(ev){
        folderNameInput.show();
        folderNameInput.focus();
        $(this).hide();
        ev.stopPropagation();
        ev.preventDefault();
      });

      folder.addClass("hover2");
      folder.click(function(ev){
        if (_hiddenFolders[$(this).attr("path")]) {
          folderContents.hide();
          delete _hiddenFolders[$(this).attr("path")];
        }
        else {
          folderContents.show();
          _hiddenFolders[$(this).attr("path")] = true;
        }
        folderName.empty();
        folderName.append(genIcon((_hiddenFolders[path])?("folder-open"):("folder-close"), folderData.n, true));
        if (_hiddenFolders[path]) {
          $($(folderName.children()[0]).children()[0]).css("margin-right", "2px");
        }
      });
    }
    folder.sortable({
      handle : ".nohandle",
      connectWith : ".dropContent",
      helper: function(ev, drag) {
        return drag.clone().css("pointer-events","none").addClass("white").appendTo("body").show();
      },
      containment: "body",
      update : function(ev, ui) {
        ev.stopPropagation();
        ev.preventDefault();
        var folderData = sync.traverse(game.config.data.folders, path);
        var ui = $(ui.item);
        var newOrder = [];
        resourceList.children().each(function(){
          if ($(this).attr("arrayIndex")) {
            newOrder.push(duplicate(folderData.eIDs[$(this).attr("arrayIndex")]));
          }
        });
        if (!folderData.eIDs || newOrder.length >= folderData.eIDs.length) {
          if (!util.contains(newOrder, ui.attr("index"))) {
            newOrder.push(ui.attr("index"));
            if (ui.attr("path")) {
              var childFolder = sync.traverse(game.config.data.folders, ui.attr("path"));
              var childData = childFolder.eIDs[ui.attr("arrayIndex")];
              childFolder.eIDs.splice(ui.attr("arrayIndex"), 1);
            }
          }
          newOrder.sort(function(a,b){
            var obj1 = getEnt(a);
            var obj2 = getEnt(b);
            return (String(sync.rawVal(obj1.data.info.name) || "")).toLowerCase().localeCompare(String(sync.rawVal(obj2.data.info.name) || "").toLowerCase());
          });
          folderData.eIDs = newOrder;
          _hiddenFolders[$(this).attr("path")] = true;

          rebuildFolders();
          if (!scope.local) {
            game.config.sync("updateConfig");
          }
          else {
            game.config.update();
          }
          obj.update();
        }
      }
    });

    //folder.append(genIcon("folder-open", "Open Folder"));

    if (path != null) {
      var arrowWrap = $("<div>").appendTo(folder);
      arrowWrap.addClass("flexrow flexmiddle lrmargin");

      var indexx = path.split(".")[path.split(".").length-1];
      if (indexx != 0) {
        var moveUp = genIcon("arrow-up").appendTo(arrowWrap);
        moveUp.attr("path", path);
        moveUp.addClass("lrmargin");
        moveUp.click(function(){
          var index = path.split(".")[path.split(".").length-1];
          var newPath = path.substring(0, Math.max(0, (path.length)-(3+index.length))) || index;
          var parentFolder = sync.traverse(game.config.data.folders, newPath);
          if (newPath == index) {
            util.insert(game.config.data.folders[scope.category], index-1, game.config.data.folders[scope.category].splice(index, 1)[0]);
          }
          else {
            util.insert(parentFolder.f, index-1, parentFolder.f.splice(index, 1)[0]);
          }
          rebuildFolders();
          if (!scope.local) {
            game.config.sync("updateConfig");
          }
          else {
            game.config.update();
          }
          obj.update();
        });
      }
      if (indexx == -1) {
        var moveDown = genIcon("arrow-down").appendTo(arrowWrap);
        moveDown.attr("path", path);
        moveDown.click(function(){
          var index = path.split(".")[path.split(".").length-1];
          var newPath = path.substring(0, Math.max(0, (path.length)-(3+index.length))) || index;
          var parentFolder = sync.traverse(game.config.data.folders, newPath);
          if (newPath == index) {
            util.insert(game.config.data.folders[scope.category], index, game.config.data.folders[scope.category].splice(index, 1)[0]);
          }
          else {
            util.insert(parentFolder.f, index, parentFolder.f.splice(index, 1)[0]);
          }
          rebuildFolders();
          if (!scope.local) {
            game.config.sync("updateConfig");
          }
          else {
            game.config.update();
          }
          obj.update();
        });
      }

      var createFolder = genIcon("plus", "Add").appendTo(folder);
      createFolder.attr("path", path);
      createFolder.click(function(ev){
        var optionList = [];
        var submenu = [
          "rgba(34,34,34,1)",
          "rgba(187,0,0,1)",
          "rgba(255,153,0,1)",
          "rgba(255,240,0,1)",
          "rgba(0,187,0,1)",
          "rgba(0,115,230,1)",
          "rgba(176,0,187,1)",
          "rgba(255,115,255,1)",
          "rgba(255,255,255,1)",
        ];
        for (var i in submenu) {
          optionList.push({
            icon : "tint",
            style : {"background-color" : submenu[i], "color" : "transparent"},
            attr : {col : submenu[i]},
            click : function(ev, ui){
              var target = sync.traverse(game.config.data.folders, path);
              target.c = ui.attr("col");
              if (!scope.local) {
                game.config.sync("updateConfig");
              }
              else {
                game.config.update();
              }
              rebuildFolders();
            },
          });
        }
        optionList.push({
          icon : "tint",
          style : {"background-image" : "url('/content/checkered.png')", "color" : "transparent"},
          click : function(ev, ui){
            var target = sync.traverse(game.config.data.folders, path);
            delete target.c;
            if (!scope.local) {
              game.config.sync("updateConfig");
            }
            else {
              game.config.update();
            }
            rebuildFolders();
          }
        });
        optionList.push({
          icon : "cog",
          click : function(){
            var primaryCol = sync.render("ui_colorPicker")(obj, app, {
              hideColor : true,
              custom : true,
              colorChange : function(ev, ui, value){
                var target = sync.traverse(game.config.data.folders, path);
                target.c = value;
                if (!scope.local) {
                  game.config.sync("updateConfig");
                }
                else {
                  game.config.update();
                }
                rebuildFolders();
              }
            });

            ui_popOut({
              target : $("body"),
              id : "piece-color",
            }, primaryCol);
          },
        });

        var path = $(this).attr("path");
        var actionsList = [
          {
            name : "Asset",
            click : function(ev){
              var ignore = {};
              for (var i in folderData.eIDs) {
                ignore[folderData.eIDs[i]] = true;
              }
              var content = sync.render("ui_assetPicker")(obj, app, {
                ignore : ignore,
                select : function(ev, ui, ent, options, entities){
                  var target = sync.traverse(game.config.data.folders, path);
                  target.eIDs = target.eIDs || [];
                  if (!util.contains(target.eIDs, ent.id())) {
                    target.eIDs.push(ent.id());
                    target.eIDs.sort(function(a,b){
                      var obj1 = getEnt(a);
                      var obj2 = getEnt(b);
                      return (String(sync.rawVal(obj1.data.info.name) || "")).toLowerCase().localeCompare(String(sync.rawVal(obj2.data.info.name) || "").toLowerCase());
                    });
                    if (!scope.local) {
                      game.config.sync("updateConfig");
                    }
                    else {
                      game.config.update();
                    }
                    obj.update();
                    layout.coverlay("add-asset");
                  }
                  else {
                    sendAlert({text : "Asset already in folder"});
                    return false;
                  }
                }
              });
              var pop = ui_popOut({
                target : $("body"),
                prompt : true,
                id : "add-asset",
                title : "Add Asset",
                style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
              }, content);
              pop.resizable();
            }
          },
          {
            name : "Color",
            align : "center",
            submenu : optionList,
          },
          {
            name : "Tag Assets",
            click : function(){
              var newTags = sync.obj();
              newTags.data = {tags : {}};
              for (var i in folderData.eIDs) {
                var ent = getEnt(folderData.eIDs[i]);
                if (ent && ent.data && ent.data.tags) {
                  for (var k in ent.data.tags) {
                    if (ent.data.tags[k]) {
                      newTags.data.tags[k] = ent.data.tags[k];
                    }
                  }
                  for (var k in newTags.data.tags) {
                    if (!ent.data.tags[k]) {
                      delete newTags.data.tags[k];
                    }
                  }
                }
              }
              newTags.data.compareTags = duplicate(newTags.data.tags);
              newTags.listen["tagListen"] = function(oldObj, newObj) {
                var folderData = sync.traverse(game.config.data.folders, path);
                for (var k in oldObj.data.tags) {
                  if (!oldObj.data.tags[k] && oldObj.data.compareTags[k]) {
                    oldObj.data.compareTags[k] = false;
                  }
                  else if (oldObj.data.tags[k] && !oldObj.data.compareTags[k]) {
                    oldObj.data.compareTags[k] = true;
                  }
                }
                for (var i in folderData.eIDs) {
                  var ent = getEnt(folderData.eIDs[i]);
                  if (ent && ent.data && ent.data.tags) {
                    for (var k in oldObj.data.compareTags) {
                      if (oldObj.data.compareTags[k]) {
                        ent.data.tags[k] = oldObj.data.tags[k];
                      }
                      else {
                        delete ent.data.tags[k];
                      }
                    }
                    ent.sync("updateAsset");
                  }
                }
                return true;
              }

              var content = sync.newApp("ui_tags");
              content.attr("viewOnly", scope.viewOnly);
              newTags.addApp(content);

              var frame = ui_popOut({
                target : folderPlate,
                prompt : true,
                align : "bottom",
                title : "Shared Tags",
                style : {"max-width" : folderPlate.width() || "30vw"},
                id : app.attr("id")+"-tag-list"
              }, content);
            }
          },
          {
            name : "Sub Folder",
            click : function(){
              var target = sync.traverse(game.config.data.folders, path);
              target.f = target.f || [];
              target.f.push({
                n : "Sub Folder",
              });
              rebuildFolders();
              if (!scope.local) {
                game.config.sync("updateConfig");
              }
              else {
                game.config.update();
              }
            }
          },
          {
            name : "Category",
            submenu : [
              {
                name : assetTypes[scope.category].n + " Only",
                click : function(){
                  var target = sync.traverse(game.config.data.folders, path);
                  target.cat = [scope.category];
                  rebuildFolders();
                  if (!scope.local) {
                    game.config.sync("updateConfig");
                  }
                  else {
                    game.config.update();
                  }
                }
              },
              {
                name : "All",
                click : function(){
                  var target = sync.traverse(game.config.data.folders, path);
                  delete target.cat;
                  rebuildFolders();
                  if (!scope.local) {
                    game.config.sync("updateConfig");
                  }
                  else {
                    game.config.update();
                  }
                }
              }
            ]
          }
        ];

        ui_dropMenu($(this), actionsList, {id : "add-resource"});
        ev.stopPropagation();
        ev.preventDefault();
      });

      var destroy = genIcon("remove").appendTo(folder);
      destroy.addClass("destroy lrmargin");
      destroy.attr("title", "Remove folder");
      destroy.click(function(ev){
        ui_prompt({
          target : $(this),
          confirm : "Remove Folder?",
          click : function(){
            var index = path.split(".")[path.split(".").length-1];
            var newPath = path.substring(0, Math.max(0, (path.length)-(3+index.length))) || index;
            var parentFolder = sync.traverse(game.config.data.folders, newPath);
            if (newPath == index && !path.match("f")) {
              game.config.data.folders[scope.category].splice(index, 1);
            }
            else {
              parentFolder.f.splice(index, 1);
            }
            rebuildFolders();
            if (!scope.local) {
              game.config.sync("updateConfig");
            }
            else {
              game.config.update();
            }
            obj.update();
          }
        });
        ev.stopPropagation();
        ev.preventDefault();
      });
    }

    var folderContents = $("<div>").appendTo(folderPlate);
    folderContents.addClass("flexcolumn fit-x");
    if (path && !_hiddenFolders[path]) {
      folderContents.hide();
    }
    if (expand) {
      folderContents.addClass("flex");
    }

    if (folderData.f) {
      for (var i in folderData.f) {
        buildSubFolders(path+".f."+i).css("padding-left", "1em").appendTo(folderContents);
      }
    }
    var resourceList = $("<div>").appendTo(folderContents);
    if (expand) {
      resourceList.addClass("flex");
    }

    if (folderData.eIDs && folderData.eIDs.length) {
      resourceList.attr("path", path);
      resourceList.addClass("outline smooth dropContent");
      resourceList.css("margin-left", "1em");
      resourceList.sortable({
        helper: function(ev, drag) {
          return drag.clone().css("pointer-events","none").addClass("white").appendTo("body").show();
        },
        containment: "body",
        connectWith : ".dropContent",
        start : function(ev, ui)
        {
          $(ui.item).trigger("dragstart");
        },
        update : function(ev, ui) {
          ev.stopPropagation();
          ev.preventDefault();

          var folderData = sync.traverse(game.config.data.folders, path);
          var ui = $(ui.item);
          var newOrder = [];
          resourceList.children().each(function(){
            if ($(this).attr("arrayIndex")) {
              newOrder.push(duplicate(folderData.eIDs[$(this).attr("arrayIndex")]));
            }
          });
          if (!folderData.eIDs || newOrder.length >= folderData.eIDs.length) {
            if (!util.contains(newOrder, ui.attr("index"))) {
              newOrder.push(ui.attr("index"));
              if (ui.attr("path")) {
                var childFolder = sync.traverse(game.config.data.folders, ui.attr("path"));
                var childData = childFolder.eIDs[ui.attr("arrayIndex")];
                childFolder.eIDs.splice(ui.attr("arrayIndex"), 1);
              }
            }
            newOrder.sort(function(a,b){
              var obj1 = getEnt(a);
              var obj2 = getEnt(b);
              return (String(sync.rawVal(obj1.data.info.name) || "")).toLowerCase().localeCompare(String(sync.rawVal(obj2.data.info.name) || "").toLowerCase());
            });
            folderData.eIDs = newOrder;
            rebuildFolders();
            if (!scope.local) {
              game.config.sync("updateConfig");
            }
            else {
              game.config.update();
            }
            obj.update();
          }
        }
      });
      var removeID = [];
      for (var i in folderData.eIDs) {
        var ent = getEnt(folderData.eIDs[i]);
        if (!ent || !ent.data) {
          removeID.push(i);
        }
      }
      for (var i=removeID.length-1; i>=0; i--) {
        folderData.eIDs.splice(removeID[i], 1);
      }
      var entPlate;
      for (var i in folderData.eIDs) {
        var ent = getEnt(folderData.eIDs[i]);
        if (ent && ent.data) {
          inUse[folderData.eIDs[i]] = true;
          var entPlate = sync.render("ui_ent")(ent, resourceList, {
            app : true,
            draw : function(ui, charObj) {
              ui.css("font-size", "1.2em");
              ui.removeClass("outline");
              ui.addClass("white");
              ui.attr("draggable",true);
              ui.on("dragstart", function(ev){
                ui.data("dt",new DataTransfer())
                var dt = ui.data("dt");
                dt.setData("OBJ", JSON.stringify(charObj.data));
              });

              if (charObj.data._t == "b" && hasSecurity(getCookie("UserID"), "Assistant Master")) {
                var button = $("<button>").appendTo(ui);
                button.addClass("subtitle hover2");

                var deleteButton = genIcon("eye-close", "GM Only").appendTo(button);
                deleteButton.attr("title", "Use Map as a GM Only tab");
                deleteButton.css("color", "#333");
                button.click(function() {
                  game.state.data.tabs = game.state.data.tabs || [];
                  var useTab = true;
                  for (var i in game.state.data.tabs) {
                    if (game.state.data.tabs[i].index == charObj.id()) {
                      useTab = false;
                      break;
                    }
                  }

                  if (useTab) {
                    game.state.data.tabs.push({index : charObj.id(), ui : "ui_board", _s : {"default" : "@:gm()"}});
                    game.state.sync("updateState");
                    layout.coverlay($(this).attr("id")+"-actions");
                  }
                  else {
                    sendAlert({text : "Map already in use"});
                  }
                });
              }
              else if (charObj.data._t == "p") {
                var button = $("<button>").appendTo(ui);
                button.addClass("subtitle hover2");

                var deleteButton = genIcon("eye-open", "View").appendTo(button);
                deleteButton.attr("title", "View Page");
                deleteButton.css("color", "#333");
                button.click(function() {
                  var content = sync.newApp("ui_renderPage");
                  content.attr("viewOnly", true);
                  charObj.addApp(content);
                  var popout = ui_popOut({
                    title : sync.rawVal(charObj.data.info.name),
                    target : ui,
                    align : "bottom",
                    minimize : true,
                    maximize : true,
                    prompt : true,
                    dragThickness : "0.5em",
                    resizable : true,
                    style : {width : assetTypes["p"].width, height : assetTypes["p"].height},
                  }, content);
                  popout.resizable();
                  popout.css("padding", "0px");
                  popout.addClass("floating-app");
                });
              }
              if (game.locals["newAssetList"] && util.contains(game.locals["newAssetList"], charObj.id())) {
                var button = $("<div>").appendTo(ui);
                button.addClass("subtitle flexmiddle");

                var newLabel = $("<text>").appendTo(button);
                newLabel.addClass("highlight smooth alttext flexmiddle spadding");
                newLabel.css("font-size", "8px");
                newLabel.text("New");
              }
              if (hasSecurity(getCookie("UserID"), "Owner", charObj.data)) {
                var button = $("<div>").appendTo(ui);
                button.addClass("subtitle flexmiddle");

                var deleteButton = genIcon("remove").appendTo(button);
                deleteButton.addClass("destroy");
                deleteButton.css("margin-right", "4px");
                deleteButton.attr("title", "Remove asset from folder");
                deleteButton.click(function() {
                  var ui = $(this).parent().parent();
                  if (ui.attr("path")) {
                    var childFolder = sync.traverse(game.config.data.folders, ui.attr("path"));
                    var childData = childFolder.eIDs[ui.attr("arrayIndex")];
                    childFolder.eIDs.splice(ui.attr("arrayIndex"), 1);
                    if (!scope.local) {
                      game.config.sync("updateConfig");
                    }
                    else {
                      game.config.update();
                    }
                    obj.update();
                  }
                });
              }
              ui.addClass("fit-x");
              if (charObj.data._t != scope.category) {
                ui.hide();
              }
            },
            click : function(ev, ui, charObj) {
              if (charObj.data._t == "c") {
                charClick(ev, $("body"), charObj, obj, app, scope);
              }
              else if (charObj.data._t == "b") {
                game.state.data.tabs = game.state.data.tabs || [];
                var useTab = true;
                for (var i in game.state.data.tabs) {
                  if (game.state.data.tabs[i].index == charObj.id()) {
                    useTab = false;
                    break;
                  }
                }

                if (useTab) {
                  game.state.data.tabs.push({index : charObj.id(), ui : "ui_board"});
                  game.state.sync("updateState");
                  layout.coverlay($(this).attr("id")+"-actions");
                }
                else {
                  sendAlert({text : "Map already in use"});
                }
              }
              else {
                var content = sync.newApp(categories[charObj.data._t].ui);
                content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", charObj.data));
                var popout = ui_popOut({
                  title : sync.rawVal(charObj.data.info.name),
                  target : $("body"),
                  minimize : true,
                  maximize : true,
                  dragThickness : "0.5em",
                  resizable : true,
                  style : {width : categories[charObj.data._t].width, height : categories[charObj.data._t].height},
                }, content);
                popout.css("padding", "0px");
                popout.addClass("floating-app");

                charObj.addApp(content);
              }
            }
          }).appendTo(resourceList);
          entPlate.attr("path", path);
          entPlate.attr("index", ent.id());
          entPlate.attr("arrayIndex", i);
          entPlate.addClass("outlinebottom");
        }
      }
      if (entPlate) {
        entPlate.removeClass("outlinebottom");
      }
    }

    return folderPlate;
  }

  function rebuildFolders(){
    resourceWrap.empty();
    if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
      for (var k in game.config.data.folders) {
        for (var i in game.config.data.folders[k]) {
          if (scope.category == k) {
            buildSubFolders(k+"."+String(i), true).appendTo(resourceWrap);
          }
        }
      }
    }
  }
  rebuildFolders();

  var tempList = [];
  var entList = [];
  for (var i in game.entities.data) {
    if (game.entities.data[i] && game.entities.data[i].data && game.entities.data[i].data._t == scope.category) {
      if (layout.showTemp || (!layout.showTemp && (!game.entities.data[i].data._flags || !game.entities.data[i].data._flags["temp"]))) {
        entList.push(i);
      }
    }
  }
  entList.sort(function(obj1, obj2){
    if (game.locals["newAssetList"]) {
      if (util.contains(game.locals["newAssetList"], obj1) && !util.contains(game.locals["newAssetList"], obj2)) {
        return -1;
      }
      else if (util.contains(game.locals["newAssetList"], obj1) && util.contains(game.locals["newAssetList"], obj2)) {
        var obj1 = getEnt(obj1);
        var obj2 = getEnt(obj2);
        return (String(sync.rawVal(obj1.data.info.name) || "")).toLowerCase().localeCompare(String(sync.rawVal(obj2.data.info.name) || "").toLowerCase());
      }
      else if (!util.contains(game.locals["newAssetList"], obj1) && util.contains(game.locals["newAssetList"], obj2)) {
        return 1;
      }
    }
    var obj1 = getEnt(obj1);
    var obj2 = getEnt(obj2);
    return (String(sync.rawVal(obj1.data.info.name) || "")).toLowerCase().localeCompare(String(sync.rawVal(obj2.data.info.name) || "").toLowerCase());
  });

  var list = sync.render("ui_entList")(game.entities, app, {
    filter : scope.category,
    rights : "Visible",
    list : entList,
    app : true,
    draw : function(ui, charObj) {
      ui.css("font-size", "1.2em");
      ui.attr("draggable", true);
      ui.on("dragstart", function(ev){
        ui.data("dt",new DataTransfer())
        var dt = ui.data("dt");
        dt.setData("OBJ", JSON.stringify(charObj.data));
      });

      if (charObj.data._t == "b" && hasSecurity(getCookie("UserID"), "Assistant Master")) {
        var button = $("<button>").appendTo(ui);
        button.addClass("subtitle hover2");

        var deleteButton = genIcon("eye-close", "GM Only").appendTo(button);
        deleteButton.attr("title", "Use Map as a GM Only tab");
        deleteButton.css("color", "#333");
        button.click(function() {
          game.state.data.tabs = game.state.data.tabs || [];
          var useTab = true;
          for (var i in game.state.data.tabs) {
            if (game.state.data.tabs[i].index == charObj.id()) {
              useTab = false;
              break;
            }
          }

          if (useTab) {
            game.state.data.tabs.push({index : charObj.id(), ui : "ui_board", _s : {"default" : "@:gm()"}});
            game.state.sync("updateState");
            layout.coverlay($(this).attr("id")+"-actions");
          }
          else {
            sendAlert({text : "Map already in use"});
          }
        });
      }
      else if (charObj.data._t == "p") {
        var button = $("<button>").appendTo(ui);
        button.addClass("subtitle hover2");

        var deleteButton = genIcon("eye-open", "View").appendTo(button);
        deleteButton.attr("title", "View Page");
        deleteButton.css("color", "#333");
        button.click(function() {
          var content = sync.newApp("ui_renderPage");
          content.attr("viewOnly", true);
          charObj.addApp(content);
          var popout = ui_popOut({
            title : sync.rawVal(charObj.data.info.name),
            target : ui,
            align : "bottom",
            minimize : true,
            maximize : true,
            prompt : true,
            dragThickness : "0.5em",
            resizable : true,
            style : {width : assetTypes["p"].width, height : assetTypes["p"].height},
          }, content);
          popout.resizable();
          popout.css("padding", "0px");
          popout.addClass("floating-app");
        });
      }
      if (game.locals["newAssetList"] && util.contains(game.locals["newAssetList"], charObj.id())) {
        var button = $("<div>").appendTo(ui);
        button.addClass("subtitle flexmiddle");

        var newLabel = $("<text>").appendTo(button);
        newLabel.addClass("highlight smooth alttext flexmiddle spadding");
        newLabel.css("font-size", "8px");
        newLabel.text("New");
      }
      if (hasSecurity(getCookie("UserID"), "Owner", charObj.data)) {
        var button = $("<div>").appendTo(ui);
        button.addClass("subtitle flexmiddle");

        var deleteButton = genIcon("trash").appendTo(button);
        deleteButton.css("margin-right", "4px");
        deleteButton.attr("title", "Delete Asset");
        deleteButton.click(function() {
          var popOut = ui_prompt({
            target : $(this),
            id : "confirm-delete-asset",
            confirm : "Delete Asset",
            click : function(){
              runCommand("deleteAsset", {id: charObj.id()});
              delete game.entities.data[charObj.id()];
              game.entities.update();
            }
          });
        });
      }
      ui.addClass("fit-x");
    },
    click : function(ev, ui, charObj) {
      if (scope.category == "c") {
        charClick(ev, $("body"), charObj, obj, app, scope);
      }
      else if (scope.category == "b") {
        game.state.data.tabs = game.state.data.tabs || [];
        var useTab = true;
        for (var i in game.state.data.tabs) {
          if (game.state.data.tabs[i].index == charObj.id()) {
            useTab = false;
            break;
          }
        }

        if (useTab) {
          game.state.data.tabs.push({index : charObj.id(), ui : "ui_board"});
          game.state.sync("updateState");
          layout.coverlay($(this).attr("id")+"-actions");
        }
        else {
          sendAlert({text : "Map already in use"});
        }
      }
      else {
        var content = sync.newApp(categories[scope.category].ui);
        content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", charObj.data));
        var popout = ui_popOut({
          title : sync.rawVal(charObj.data.info.name),
          target : $("body"),
          minimize : true,
          maximize : true,
          dragThickness : "0.5em",
          resizable : true,
          style : {width : categories[scope.category].width, height : categories[scope.category].height},
        }, content);
        popout.css("padding", "0px");
        popout.addClass("floating-app");

        charObj.addApp(content);
      }
    }
  });
  list.addClass("white dropContent flex");
  if (resourceWrap.children().length){
    resourceWrap.addClass("outlinebottom");
    resourceWrap.css("padding-bottom", "1em");
  }
  list.appendTo(listWrap);
  if (list.children().length) {
    list.children().each(function(){
      $(this).removeClass("outline");
      $(this).addClass("outlinebottom");
      if (inUse[$(this).attr("index")]) {
        $(this).hide();
      }
    });
  }
  if (!layout.mobile) {
    list.sortable({
      connectWith : ".dropContent",
      start : function(ev, ui) {
        listedChars.scrollTop(0);
        $(ui.item).trigger("dragstart");
      },
      helper: function(ev, drag) {
        return drag.clone().css("pointer-events","none").addClass("white").appendTo("body").show();
      },
      containment: "body",
      update : function(ev, ui) {
        ev.stopPropagation();
        ev.preventDefault();
        var ui = $(ui.item);
        if (ui.attr("path") && ui.attr("arrayIndex")) {
          var childFolder = sync.traverse(game.config.data.folders, ui.attr("path"));
          var childData = childFolder.eIDs[ui.attr("arrayIndex")];
          childFolder.eIDs.splice(ui.attr("arrayIndex"), 1);
          if (!scope.local) {
            game.config.sync("updateConfig");
          }
          else {
            game.config.update();
          }
          obj.update();
        }
      }
    });
  }


  $("<i class='subtitle fit-x flexmiddle'>Drop assets onto a map</i>").appendTo(div);
  if (scope.category == "c") {
    var createChar = genIcon("user", "New Actor").appendTo(creationBar);
    createChar.attr("title", "Create Actor");
    createChar.click(function(){
      if (game.templates.build) {
        if (Object.keys(game.templates.actors).length > 1) {
          var content = $("<div>");
          content.addClass("flexcolumn flex");

          for (var k in game.templates.actors) {
            var button = $("<div>").appendTo(content);
            button.addClass("hover2 alttext spadding flexmiddle background padding fit-x subtitle");
            button.text(k);
            button.click(function(){
              app.attr("category", "c");
              console.log(game.templates.actors[$(this).text()]);
              createCharacter(duplicate(game.templates.actors[$(this).text()]), null, null, null, true);
              sendAlert({text : "Created Actor"});
              app.removeAttr("hideAssets");
              game.entities.update();
              layout.coverlay("resource-select");
            });
          }

          ui_popOut({
            prompt : true,
            title : "Type",
            align : "top",
            target : $(this),
            id : "resource-select",
            style : {"width" : "100px"},
          }, content);
        }
        else if (Object.keys(game.templates.actors).length) {
          app.attr("category", "c");
          createCharacter(duplicate(game.templates.actors[Object.keys(game.templates.actors)[0]]), null, null, null, true);
          sendAlert({text : "Created Actor"});
          app.removeAttr("hideAssets");
          game.entities.update();
        }
      }
      else {
        app.attr("category", "c");
        createCharacter(duplicate(game.templates.character), null, null, null, true);
        sendAlert({text : "Created Actor"});
        app.removeAttr("hideAssets");
        game.entities.update();
      }
    });
  }
  else if (scope.category == "i") {
    var button = genIcon("briefcase", "New Element");
    button.attr("title", "Create a new Item Element");
    button.appendTo(creationBar);
    button.click(function() {
      var content = $("<div>");
      content.addClass("flexcolumn flex");
      if (game.templates.build) {
        for (var k in game.templates.elements) {
          var button = $("<div>").appendTo(content);
          button.addClass("hover2 alttext spadding flexmiddle background padding fit-x subtitle");
          button.text(k);
          button.click(function(){
            app.attr("category", "i");
            app.removeAttr("hideAssets");
            game.locals["newAssetList"] = game.locals["newAssetList"] || [];
            var lastKeys = Object.keys(game.entities.data);
            game.entities.listen["newAsset"] = function(rObj, newObj, target) {
              var change = true;
              for (var key in game.entities.data) {
                if (!util.contains(lastKeys, key)) {
                  game.locals["newAssetList"].push(key);
                  change = false;
                }
              }
              return change;
            }
            if (!game.config.data.offline) {
              runCommand("createItem", duplicate(game.templates.elements[$(this).text()]));
            }
            else {
              game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
              game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
              game.entities.data["tempObj"+game.config.data.offline++].data = duplicate(game.templates.elements[$(this).text()]);
              game.entities.update();
            }
            sendAlert({text : "Created Item"});
            layout.coverlay("resource-select");
          });
        }
      }
      else {
        var button = $("<div>").appendTo(content);
        button.addClass("hover2 alttext spadding flexmiddle background padding fit-x");
        button.text("Item");
        button.click(function(){
          app.attr("category", "i");
          app.removeAttr("hideAssets");
          game.locals["newAssetList"] = game.locals["newAssetList"] || [];
          var lastKeys = Object.keys(game.entities.data);
          game.entities.listen["newAsset"] = function(rObj, newObj, target) {
            var change = true;
            for (var key in game.entities.data) {
              if (!util.contains(lastKeys, key)) {
                game.locals["newAssetList"].push(key);
                change = false;
              }
            }
            return change;
          }
          if (!game.config.data.offline) {
            runCommand("createItem", duplicate(game.templates.item));
          }
          else {
            game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
            game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
            game.entities.data["tempObj"+game.config.data.offline++].data = duplicate(game.templates.item);
            game.entities.update();
          }
          sendAlert({text : "Created Item"});
          layout.coverlay("resource-select");
        });

        var button = $("<div>").appendTo(content);
        button.addClass("hover2 alttext spadding flexmiddle background padding fit-x");
        button.text("Spell");
        button.click(function(){
          app.attr("category", "i");
          app.removeAttr("hideAssets");
          game.locals["newAssetList"] = game.locals["newAssetList"] || [];
          var lastKeys = Object.keys(game.entities.data);
          game.entities.listen["newAsset"] = function(rObj, newObj, target) {
            var change = true;
            for (var key in game.entities.data) {
              if (!util.contains(lastKeys, key)) {
                game.locals["newAssetList"].push(key);
                change = false;
              }
            }
            return change;
          }
          if (!game.config.data.offline) {
            var newEnt = duplicate(game.templates.item);
            newEnt.tags = {spell : 1};
            runCommand("createItem", newEnt);
          }
          else {
            game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
            game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
            game.entities.data["tempObj"+game.config.data.offline++].data = duplicate(game.templates.item);
            game.entities.update();
          }
          sendAlert({text : "Created Spell"});
          layout.coverlay("resource-select");
        });
      }

      ui_popOut({
        prompt : true,
        title : "Type",
        align : "top",
        target : $(this),
        id : "resource-select",
        style : {"width" : "100px"},
      }, content);
    });

  }
  else if (scope.category == "b") {
    var button = genIcon("globe", "New Map").appendTo(creationBar);
    button.addClass("lrpadding");
    button.attr("title", "Creates a New Map");
    button.click(function(){
      ui_prompt({
        target : $(this),
        inputs : {
          "Map Name" : {placeholder : "[No Name]"},
        },
        click : function(ev, inputs){
          app.attr("category", "b");
          app.removeAttr("hideAssets");
          game.locals["newAssetList"] = game.locals["newAssetList"] || [];
          var lastKeys = Object.keys(game.entities.data);
          game.entities.listen["newAsset"] = function(rObj, newObj, target) {
            var change = true;
            for (var key in game.entities.data) {
              if (!util.contains(lastKeys, key)) {
                game.locals["newAssetList"].push(key);
                change = false;
              }
            }
            return change;
          }
          if (!game.config.data.offline) {
            runCommand("createBoard", {info : {name : sync.newValue("Name", inputs["Map Name"].val() || "[No Name]")}});
          }
          else {
            game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
            game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;

            var board = {"_t" : "b"};
            board.info = {name : sync.newValue(null, "[No Name]")};
            board.sheets = [];
            board.layers = [{
              n : "Background Layer",
              t : [],
              p : [],
              d : [],
            },
            {
              n : "Player Layer",
              t : [], //tiles
              p : [], //pieces
              d : [], //drawing
            },
            {
              n : "GM Layer",
              _s : 1,
              t : [], //tiles
              p : [], //pieces
              d : [], //drawing
            }];

            board.w = 1600;
            board.h = 1600;
            board.gridX = 0;
            board.gridY = 0;
            board.gridW = 32;
            board.gridH = 32;
            board.gc = "rgba(0,0,0,0.25)";
            board.vZ = 100;

            board.options = {};
            game.entities.data["tempObj"+game.config.data.offline++].data = board;
            game.entities.update();
          }
          sendAlert({text : "Created map"});
        }
      });
    });
  }
  else if (scope.category == "p") {
    var button = genIcon("file", "New Resource");
    button.attr("title", "Create a new Resource");
    button.appendTo(creationBar);
    button.click(function() {
      app.attr("category", "p");
      game.locals["newAssetList"] = game.locals["newAssetList"] || [];
      var lastKeys = Object.keys(game.entities.data);
      game.entities.listen["newAsset"] = function(rObj, newObj, target) {
        var change = true;
        for (var key in game.entities.data) {
          if (!util.contains(lastKeys, key)) {
            game.locals["newAssetList"].push(key);
            change = false;
          }
        }
        return change;
      }
      app.removeAttr("hideAssets");
      if (!game.config.data.offline) {
        var content = $("<div>");
        var contentList = $("<div>").appendTo(content);
        for (var key in util.resourceTypes) {
          var button = $("<div>")
          button.addClass("hover2 alttext spadding flexmiddle");
          button.attr("type", key);
          if (key == "Rich Text") {
            button.appendTo(content);
            button.addClass("highlight");
            button.text("Normal Notes");
          }
          else {
            button.addClass("background subtitle");
            button.appendTo(contentList);
            button.text(key);
          }
          button.click(function(){
            runCommand("createPage", {data : {override : {info : {name : sync.newValue("Name", $(this).attr("type")), mode : sync.newValue("Mode", $(this).attr("type"))}}}});
            layout.coverlay("resource-select");
            sendAlert({text : "Created Resource"});
          });
        }
        ui_popOut({
          prompt : true,
          title : "Type",
          align : "top",
          target : $(this),
          id : "resource-select"
        }, content);
      }
      else {
        game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
        game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
        game.entities.data["tempObj"+game.config.data.offline++].data = duplicate(game.templates.page);
        game.entities.update();
      }
    });
  }


  return div;
});

var assetTypes = {
  "filePicker" : {
    width : "600px",
    height : "600px"
  },
  "assetPicker" : {
    width : "400px",
    height : "400px"
  },
  "audio" : {
    files : [
      "mp3",
      "wav",
      "ogg",
    ],
  },
  "video" : {
    files : [
      "mp4",
      "ogg",
      "webm",
    ],
  },
  "img" : {
    files : [
      "png",
      "jpg",
      "jpeg",
      "bmp",
      "ico",
      "apng",
      "gif"
    ],
    preview : function(ev, plate, src){
      var overlay = layout.overlay({
        target : $("body"),
          style : {
            "background-color" : "rgba(0,0,0,0.8)",
            "cursor" : "pointer",
            "pointer-events" : "auto"
          },
        }
      );
      overlay.addClass("flexmiddle lpadding");
      var max = util.getMaxZ(".ui-popout");
      overlay.css("z-index", max+1);

      var imgContainer = $("<div>").appendTo(overlay);
      imgContainer.css("background-image", "url('"+ src +"')");
      imgContainer.css("background-size", "contain");
      imgContainer.css("background-repeat", "no-repeat");
      imgContainer.css("background-position", "center");
      imgContainer.css("width", "70%");
      imgContainer.css("height", "70%");

      overlay.click(function() {
        layout.coverlay($(this), 500);
      });
    },
    contextmenu : function(ev, plate, src, returnList){
      var actionsList = [
        {
          name : "View Image",
          click : function(ev, ui) {
            // save aspect ratio

            var overlay = layout.overlay({
              target : $("body"),
                style : {
                  "background-color" : "rgba(0,0,0,0.8)",
                  "cursor" : "pointer",
                  "pointer-events" : "auto"
                },
              }
            );
            overlay.addClass("flexmiddle lpadding");
            var max = util.getMaxZ(".ui-popout");
            overlay.css("z-index", max+1);

            var imgContainer = $("<div>").appendTo(overlay);
            imgContainer.css("background-image", "url('"+ src +"')");
            imgContainer.css("background-size", "contain");
            imgContainer.css("background-repeat", "no-repeat");
            imgContainer.css("background-position", "center");
            imgContainer.css("width", "70%");
            imgContainer.css("height", "70%");

            overlay.click(function() {
              layout.coverlay($(this), 500);
            });

            imgContainer.click(function() {
              var applied = false;
              $(".application[ui-name='ui_display']").each(function(){
                if (!applied && $(this).attr("tabKey") != null) {
                  util.slideshow(src);
                  ev.stopPropagation();
                  ev.preventDefault();
                }
              });
              layout.coverlay($(this), 500);
            });
          }
        }
      ];
      if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
        actionsList.push({
          name : "Slideshow Image",
          click : function(ev, ui) {
            util.slideshow(src);
          }
        });
      }
      actionsList.push({
        name : "Share Image",
        click : function(ev, ui) {
          runCommand("reaction", src);
        }
      });
      actionsList.push({
        name : "Copy Image",
        click : function(ev, ui) {
          var input = genInput({
            parent : ui,
            id : "copy-url",
            value : src,
          });
          input.focus();
          input.get(0).setSelectionRange(0, input.val().length);

          document.execCommand("copy");
          input.remove();
          sendAlert({text : "Image Copied!"});
        }
      });
      return ui_dropMenu(plate, actionsList, {id : "image-menu"});
    }
  },
  "c" : {
    n : "Actors",
    i : "user",
    ui : "ui_characterSheetv2",
    width : "750px",
    height : "800px",
    edit : function(ent, target, align, title, prompt) {
      var content = sync.newApp(assetTypes["c"].ui);
      content.attr("from", "ui_characterSummary");
      content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", ent.data));
      ent.addApp(content);

      var width = assetTypes["c"].width;
      var height = assetTypes["c"].height;
      if (ent.data && ent.data._type) {
        width = game.templates.display.actors[ent.data._type].width || width;
        height = game.templates.display.actors[ent.data._type].height || height;
        if (ent.data._d) {
          width = ent.data._d.width || width;
          height = ent.data._d.height || height;
        }
      }

      var popout = ui_popOut({
        title : title || sync.rawVal(ent.data.info.name),
        target : target,
        align : align,
        minimize : true,
        maximize : true,
        dragThickness : "0.5em",
        resizable : true,
        style : {width : width, height : height},
      }, content);
      popout.resizable();
      return popout;
    },
    preview : function(ent, target, align, title, prompt, ui) {
      if (layout.mobile) {
        $("#viewPort").children().each(function(){
          $(this).hide();
        });
        $("#preview-app").show();
        $("#preview-app").empty();
        var content = sync.newApp(ui || assetTypes["c"].ui).appendTo($("#preview-app"));
        content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", ent.data));
        ent.addApp(content);
      }
      else {
        var content = sync.newApp(assetTypes["c"].ui);
        content.attr("from", "ui_characterSummary");
        content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", ent.data));
        ent.addApp(content);

        var width = assetTypes["c"].width;
        var height = assetTypes["c"].height;
        if (ent.data && ent.data._type) {
          width = game.templates.display.actors[ent.data._type].width || width;
          height = game.templates.display.actors[ent.data._type].height || height;
          if (ent.data._d) {
            width = ent.data._d.width || width;
            height = ent.data._d.height || height;
          }
        }

        var popout = ui_popOut({
          title : title || sync.rawVal(ent.data.info.name),
          target : target,
          align : align,
          prompt : prompt,
          minimize : true,
          maximize : true,
          dragThickness : "0.5em",
          resizable : true,
          style : {width : width, height : height},
        }, content);
        popout.resizable();
        return popout;
      }
    },
    summary : function(ent, target, align, title, prompt, ui) {
      if ((game.templates.display.sheet && !game.templates.display.sheet.summary) || (game.templates.display.actors[ent.data._type] && !game.templates.display.actors[ent.data._type].summary)) {
        return assetTypes["c"].preview(ent, target, align, title, prompt, ui);
      }
      else if (layout.mobile) {
        $("#viewPort").children().each(function(){
          $(this).hide();
        });
        $("#preview-app").show();
        $("#preview-app").empty();
        var content = sync.newApp(ui || assetTypes["c"].ui).appendTo($("#preview-app"));
        content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", ent.data));
        ent.addApp(content);
        return null;
      }
      else {
        var content = sync.newApp("ui_characterSummary");
        content.attr("from", "ui_characterSheet");
        content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", ent.data));
        ent.addApp(content);

        var popout = ui_popOut({
          title : title || sync.rawVal(ent.data.info.name),
          target : target,
          align : align,
          prompt : prompt,
          minimize : true,
          maximize : true,
          dragThickness : "0.5em",
          resizable : true,
        }, content);
        popout.resizable();
        return popout;
      }
    }
  },
  "b" : {
    n : "Maps",
    i : "globe",
    ui : "ui_board",
    width : "60vw",
    height : "60vh",
    edit : function(ent, target, align, title, prompt) {
      var content = sync.newApp(assetTypes["b"].ui);
      content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", ent.data));
      ent.addApp(content);

      var popout = ui_popOut({
        title : title || sync.rawVal(ent.data.info.name),
        target : target,
        align : align,
        prompt : prompt,
        minimize : true,
        maximize : true,
        dragThickness : "0.5em",
        resizable : true,
        style : {width : assetTypes["b"].width, height : assetTypes["b"].height},
      }, content);
      popout.resizable();
      return popout;
    },
    preview : function(ent, target, align, title, prompt) {
      if (layout.mobile) {
        $("#viewPort").children().each(function(){
          $(this).hide();
        });
        $("#preview-app").show();
        $("#preview-app").empty();
        var content = sync.newApp(assetTypes["b"].ui).appendTo($("#preview-app"));
        content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", ent.data));
        ent.addApp(content);
      }
      else {
        var content = sync.newApp(assetTypes["b"].ui);
        content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", ent.data));
        ent.addApp(content);

        var popout = ui_popOut({
          title : title || sync.rawVal(ent.data.info.name),
          target : target,
          align : align,
          prompt : prompt,
          minimize : true,
          maximize : true,
          dragThickness : "0.5em",
          resizable : true,
          style : {width : assetTypes["b"].width, height : assetTypes["b"].height},
        }, content);
        popout.resizable();
        return popout;
      }
    }
  },
  "i" : {
    n : "Elements",
    i : "briefcase",
    ui : "ui_renderItemv2",
    width : "600px",
    height : "400px",
    edit : function(ent, target, align, title, prompt) {
      var content = sync.newApp(assetTypes["i"].ui);
      content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", ent.data));
      ent.addApp(content);

      var width = assetTypes["i"].width;
      var height = assetTypes["i"].height;
      if (ent.data && ent.data._type) {
        width = game.templates.display.elements[ent.data._type].width || width;
        height = game.templates.display.elements[ent.data._type].height || height;
        if (ent.data._d) {
          width = ent.data._d.width || width;
          height = ent.data._d.height || height;
        }
      }

      var popout = ui_popOut({
        title : title || sync.rawVal(ent.data.info.name),
        target : target,
        align : align,
        prompt : prompt,
        minimize : true,
        maximize : true,
        dragThickness : "0.5em",
        resizable : true,
        style : {width : width, height : height},
      }, content);
      popout.resizable();
      return popout;
    },
    preview : function(ent, target, align, title, prompt) {
      if (layout.mobile) {
        $("#viewPort").children().each(function(){
          $(this).hide();
        });
        $("#preview-app").show();
        $("#preview-app").empty();
        var content = sync.newApp(assetTypes["i"].ui).appendTo($("#preview-app"));
        content.attr("from", "ui_characterSummary");
        content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", ent.data));
        ent.addApp(content);
      }
      else {
        var content = sync.newApp(assetTypes["i"].ui);
        content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", ent.data));
        ent.addApp(content);

        var width = assetTypes["i"].width;
        var height = assetTypes["i"].height;
        if (ent.data && ent.data._type) {
          width = game.templates.display.elements[ent.data._type].width || width;
          height = game.templates.display.elements[ent.data._type].height || height;
          if (ent.data._d) {
            width = ent.data._d.width || width;
            height = ent.data._d.height || height;
          }
        }

        var popout = ui_popOut({
          title : title || sync.rawVal(ent.data.info.name),
          target : target,
          align : align,
          prompt : prompt,
          minimize : true,
          maximize : true,
          dragThickness : "0.5em",
          resizable : true,
          style : {width : width, height : height},
        }, content);
        popout.resizable();
        return popout;
      }
    }
  },
  "p" : {
    n : "Resources",
    i : "file",
    ui : "ui_editPage",
    handout : "ui_renderPage",
    width : "600px",
    height : "800px",
    edit : function(ent, target, align, title, prompt) {
      var content = sync.newApp("ui_editPage");
      ent.addApp(content);
      var popout = ui_popOut({
        title : title || sync.rawVal(ent.data.info.name),
        target : target,
        align : align,
        prompt : prompt,
        minimize : true,
        maximize : true,
        dragThickness : "0.5em",
        resizable : true,
        style : {width : assetTypes["p"].width, height : assetTypes["p"].height},
      }, content);
      popout.resizable();
      return popout;
    },
    preview : function(ent, target, align, title, prompt) {
      if (layout.mobile) {
        $("#viewPort").children().each(function(){
          $(this).hide();
        });
        $("#preview-app").show();
        $("#preview-app").empty();
        var content = sync.newApp(assetTypes["p"].ui).appendTo($("#preview-app"));
        content.attr("from", "ui_renderPage");
        content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", ent.data));
        ent.addApp(content);
      }
      else {
        var content = sync.newApp("ui_renderPage");
        content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", ent.data));
        ent.addApp(content);
        var popout = ui_popOut({
          title : title || sync.rawVal(ent.data.info.name),
          target : target,
          align : align,
          prompt : prompt,
          minimize : true,
          maximize : true,
          dragThickness : "0.5em",
          resizable : true,
          style : {width : assetTypes["p"].width, height : assetTypes["p"].height},
        }, content);
        popout.resizable();
        return popout;
      }
    }
  },
  contextmenu : function(ev, plate, ent, app, scope, returnList){
    var type = ent.data._t;

    var actionList = scope.contextmenu || [];

    if (ent.data._t == "b" && hasSecurity(getCookie("UserID"), "Assistant Master")) {
      var tabs = game.state.data.tabs;
      var active;
      for (var i in tabs) {
        if (ent.id() == tabs[i].index) {
          active = i;
          break;
        }
      }
      var submenu;
      if (active) {
        submenu = [{
          name : "Switch to Tab",
          click : function(){
            if (app.attr("targetApp") && $("#"+app.attr("targetApp")).length) {
              $("#"+app.attr("targetApp")).removeAttr("scrollLeft");
              $("#"+app.attr("targetApp")).removeAttr("scrollTop");
              $("#"+app.attr("targetApp")).removeAttr("zoom");
            }
            for (var i in game.state._apps) {
              if ($("#"+game.state._apps[i]).length) {
                $("#"+game.state._apps[i]).attr("tab", active);
              }
            }
            game.state.update();
          }
        },
        {
          name : "Force Players to Tab",
          click : function() {
            runCommand("forceTab", {index : active});
          }
        }];
      }
      else {
        submenu = [
          {
            name : "Players",
            click : function(){
              game.state.data.tabs = game.state.data.tabs || [];
              var useTab = true;
              for (var i in game.state.data.tabs) {
                if (game.state.data.tabs[i].index == ent.id()) {
                  useTab = false;
                  break;
                }
              }

              if (useTab) {
                game.state.data.tabs.push({index : ent.id(), ui : "ui_board"});
                game.state.sync("updateState");
              }
              else {
                sendAlert({text : "Map already in use"});
              }
            }
          },
          {
            name : "GM Only",
            click : function(){
              game.state.data.tabs = game.state.data.tabs || [];
              var useTab = true;
              for (var i in game.state.data.tabs) {
                if (game.state.data.tabs[i].index == ent.id()) {
                  useTab = false;
                  break;
                }
              }

              if (useTab) {
                game.state.data.tabs.push({index : ent.id(), ui : "ui_board", _s : {"default" : "@:gm()"}});
              }
              else {
                sendAlert({text : "Map already in use"});
              }
              if (app.attr("targetApp") && $("#"+app.attr("targetApp")).length) {
                $("#"+app.attr("targetApp")).removeAttr("scrollLeft");
                $("#"+app.attr("targetApp")).removeAttr("scrollTop");
                $("#"+app.attr("targetApp")).removeAttr("zoom");
              }
              for (var i in game.state._apps) {
                if ($("#"+game.state._apps[i]).length) {
                  $("#"+game.state._apps[i]).attr("tab", game.state.data.tabs.length-1);
                }
              }
              game.state.sync("updateState");
              setTimeout(function(){
                runCommand("forceTab", {index : game.state.data.tabs.length-1});
              }, 1000);
            }
          },
          {
            name : "Force Players to Tab",
            click : function(){
              game.state.data.tabs = game.state.data.tabs || [];
              var useTab = true;
              for (var i in game.state.data.tabs) {
                if (game.state.data.tabs[i].index == ent.id()) {
                  useTab = false;
                  break;
                }
              }

              if (useTab) {
                game.state.data.tabs.push({index : ent.id(), ui : "ui_board"});
              }
              else {
                sendAlert({text : "Map already in use"});
              }
              if (app.attr("targetApp") && $("#"+app.attr("targetApp")).length) {
                $("#"+app.attr("targetApp")).removeAttr("scrollLeft");
                $("#"+app.attr("targetApp")).removeAttr("scrollTop");
                $("#"+app.attr("targetApp")).removeAttr("zoom");
              }
              for (var i in game.state._apps) {
                if ($("#"+game.state._apps[i]).length) {
                  $("#"+game.state._apps[i]).attr("tab", game.state.data.tabs.length-1);
                }
              }
              game.state.sync("updateState");
              setTimeout(function(){
                runCommand("forceTab", {index : game.state.data.tabs.length-1});
              }, 1000);
            }
          }
        ];
      }
      actionList.push({
        name : "Use Map",
        submenu : submenu,
        click : function(){
          game.state.data.tabs = game.state.data.tabs || [];
          var useTab = true;
          for (var i in game.state.data.tabs) {
            if (game.state.data.tabs[i].index == ent.id()) {
              useTab = false;
              break;
            }
          }

          if (useTab) {
            game.state.data.tabs.push({index : ent.id(), ui : "ui_board"});
            game.state.sync("updateState");
          }
          else {
            sendAlert({text : "Map already in use"});
          }
        }
      });
    }

    if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
      var handouts = [
        {
          name : "All Players",
          click : function(ev, ui) {
            var p = {};
            for (var uid in game.players.data) {
              if (uid != getCookie("UserID")) {
                p[uid] = true;
              }
            }
            runCommand("handout", {id : ent.id(), name : "Handout", ui : assetTypes[ent.data._t].handout || assetTypes[ent.data._t].ui, players : p});
            sendAlert({text : "Sent"});
          }
        },
      ];
      if (Object.keys(game.players.data).length > 1) {
        for (var uid in game.players.data) {
          if (uid != getCookie("UserID")) {
            handouts.push({
              name : game.players.data[uid].displayName,
              attr : {"UserID" : uid},
              click : function(ev, ui) {
                var p = {};
                p[ui.attr("UserID")] = true;
                runCommand("handout", {id : ent.id(), name : "Handout", ui : assetTypes[ent.data._t].handout || assetTypes[ent.data._t].ui, players : p});
                sendAlert({text : "Sent"});
              }
            });
          }
        }
        actionList.push({
          name : "Handout to ...",
          submenu : handouts
        });
      }
    }

    if (hasSecurity(getCookie("UserID"), "Visible", ent.data)) {
      if (hasSecurity(getCookie("UserID"), "Rights", ent.data)) {
        if (ent.data._t == "c") {
          var commands = [];
          for (var key in _actions) {
            if (!_actions[key].condition || _actions[key].condition(ent)) {
              commands.push(
                {name : _actions[key].name || key,
                  attr : {key : key},
                  click : function(ev, ui){
                    if (_actions[ui.attr("key")].click) {
                      _actions[ui.attr("key")].click(ev, plate, ent, app, scope);
                    }
                  }
                }
              );
            }
          }
          if (commands.length) {
            if (ent.data._t == "c") {
              actionList.push({name : "Combat", icon : "fire", submenu : commands});
            }
            else {
              actionList.push({name : "Use", submenu : commands});
            }
          }
          actionList.push({
            name : "Impersonate...",
            icon : "user",
            click : function(ev, ui){
              runCommand("selectPlayerEntity", {id : ent.id(), userID : getCookie("UserID")});
              sendAlert({text : "Impersonating Character : " + sync.rawVal(ent.data.info.name)});
              $(".chatType").text("IC");
              $(".chatType").addClass("highlight alttext");
              $(".chatType").attr("title", "In Character");
              $(".application[ui-name='_imperson']").attr("src", sync.rawVal(ent.data.info.img) || "/content/icons/blankchar.png");
              $(".application[ui-name='_imperson']").attr("ICText", sync.rawVal(ent.data.info.name));
              $(".application[ui-name='_imperson']").each(function(){
                sync.updateApp($(this), game.players);
              });
            }
          });
        }

        actionList.push({
          name : "Edit",
          icon : "edit",
          click : function(ev, ui){
            var content = sync.newApp(assetTypes[ent.data._t].ui);
            content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", ent.data));
            var popout = ui_popOut({
              title : sync.rawVal(ent.data.info.name),
              target : ui,
              minimize : true,
              maximize : true,
              dragThickness : "0.5em",
              resizable : true,
              style : {width : assetTypes[ent.data._t].width, height : assetTypes[ent.data._t].height},
            }, content);
            popout.css("padding", "0px");
            popout.addClass("floating-app");

            ent.addApp(content);
          }
        });

        actionList.push({
          name : "Tags",
          icon : "tag",
          click : function(ev, ui){
            var content = sync.newApp("ui_tags");
            content.attr("viewOnly", scope.viewOnly);
            ent.addApp(content);

            var frame = ui_popOut({
              target : ui,
              title : "Tags",
              style : {"max-width" : "300px"},
              id : app.attr("id")+"-tag-list"
            }, content);
          }
        });
        ent.data._flags = ent.data._flags || duplicate(ent.data.tags) || {};
        var newSubmenu = [
          {
            name : ent.data._flags.hidden?"Combat Visible":"Combat Hidden",
            click : function(){
              ent.data._flags.hidden = !ent.data._flags.hidden;
              ent.sync("updateAsset");
            }
          },
          {
            name : ent.data._flags.temp?"Stable":"Temporary",
            attr : {title : "Stable assets do not delete when their tokens are removed, while temporary assets do"},
            click : function(){
              ent.data._flags.temp = !ent.data._flags.temp;
              ent.sync("updateAsset");
            }
          },
          /*{
            name : ent.data._flags.unidentified?"Identified":"Unidentified",
            attr : {title : "Unidentified Actors do no reveal their name or images in the combat tab"},
            click : function(){
              ent.data._flags.unidentified = !ent.data._flags.unidentified;
              ent.sync("updateAsset");
            }
          }*/
        ];

        actionList.push({
          name : "Flag",
          icon : "flag",
          submenu : newSubmenu
        });
        if (ent.data._c == getCookie("UserID")) {
          actionList.push({
            name : "Duplicate",
            icon : "duplicate",
            click : function(ev, ui){
              if (ent.data._t == "c") {
                createCharacter(duplicate(ent.data), true);
              }
              else if (ent.data._t == "i") {
                runCommand("createItem", ent.data);
              }
              else if (ent.data._t == "b") {
                runCommand("createBoard", ent.data);
              }
              else if (ent.data._t == "p") {
                runCommand("createPage", ent.data);
              }
              sendAlert({text : "Duplicated"});
            }
          });
        }
      }
      else {
        actionList.push({
          name : "View",
          click : function(ev, ui){
            var content = sync.newApp(assetTypes[ent.data._t].ui);
            content.attr("viewOnly", !hasSecurity(getCookie("UserID"), "Rights", ent.data));
            var popout = ui_popOut({
              title : sync.rawVal(ent.data.info.name),
              target : ui,
              align : "bottom",
              minimize : true,
              maximize : true,
              dragThickness : "0.5em",
              resizable : true,
              style : {width : assetTypes[ent.data._t].width, height : assetTypes[ent.data._t].height},
            }, content);
            popout.css("padding", "0px");
            popout.addClass("floating-app");

            ent.addApp(content);
          }
        });
      }
    }
    var cloud = [];
    if (hasSecurity(getCookie("UserID"), "Owner", ent.data)) {
      if (isNaN(ent.id()) && ent.id().match("_") && ent.data && ent.data._t != "pk") {
        // cloud asset
        if (ent.data._c == getCookie("UserID")) {
          cloud.push({
            name : "Activate",
            click : function(){
              if (game.locals["storage"]) {
                for (var i in game.locals["storage"].data.l) {
                  var listEntry = game.locals["storage"].data.l[i];
                  if (ent.data._c == getCookie("UserID") && listEntry._uid == ent.id().split("_")[1]) {
                    listEntry.move = true;
                    runCommand("moveAssets", {l : game.locals["storage"].data.l});
                    delete listEntry.move;
                    break;
                  }
                }
              }
              else {
                sendAlert({text : "Asset Storage hasn't loaded yet"});
              }
            }
          });
        }
      }
      else if (!isNaN(ent.id())) {
        actionList.push({
          name : "Access",
          icon : "lock",
          click : function(ev, ui){
            var content = sync.newApp("ui_rights");
            content.attr("last_rights", "indv");
            ent.addApp(content);

            var frame = ui_popOut({
              prompt : true,
              target : ui,
              id : "ui-rights-dialog",
            }, content);
          }
        });

        if (ent.data._t == "c" && plate) {
          if (!plate.hasClass("card-selected")) {
            actionList.push({
              name : "Target",
              icon : "screenshot",
              click : function(ev, ui) {
                plate.addClass("card-selected");
                util.target(plate.attr("index"));
              }
            });
          }
          else {
            actionList.push({
              name : "Lose Target",
              icon : "screenshot",
              click : function(ev, ui) {
                plate.removeClass("card-selected");
                util.untarget(plate.attr("index"));
              }
            });
          }
        }
        if (ent.data._c == getCookie("UserID")) {
          if (ent.data._uid) {
            cloud.push({
              name : "Store",
              click : function(){
                runCommand("storeAsset", {id : ent.id(), del : true});
                if (!scope.local) {
                  obj.sync("updateConfig");
                }
                else {
                  obj.update();
                }
              }
            });
            if (!ent.data._sync) {
              cloud.push({
                name : "Synchronize",
                click : function() {
                  runCommand("updateSync", {id : ent.id(), data : true});
                  sendAlert({text : "Synchronizing"});
                }
              });
            }
            else {
              cloud.push({
                name : "De-Synchronize",
                click : function() {
                  runCommand("updateSync", {id : ent.id(), data : false});
                  sendAlert({text : "De-Synchronizing"});
                }
              });
            }
          }
          else {
            cloud.push({
              name : "Move into Storage",
            });
          }
        }
        /*actionList.push({
          name : "Delete",
          submenu : [
            {
              name : "CONFIRM",
              icon : "trash",
              click : function(ev, ui){
                runCommand("deleteAsset", {id : ent.id()});
                delete game.entities.data[ent.id()].data;
                game.state.update();
                game.config.update();
              }
            }
          ]
        });*/
      }
    }
    if (cloud.length) {
      //actionList.push({name : "Asset Storage", submenu : cloud});
    }
    if (util.getTargets(true).length) {
      actionList.push({
        name : "De-select targets",
        click : function(ev, ui) {
          $(".card-selected").each(function(){
            util.untarget($(this).attr("index"));
            $(this).removeClass("card-selected");
          });
        }
      });
    }
    if (returnList) {
      return actionList;
    }
    var menu = ui_dropMenu(plate, actionList, {id : "ent-context"});
    return menu;
  }
}

// Active Asset
// Store Asset
// Delete
// Privledges


sync.render("ui_assetList", function(entities, app, scope) {
  scope = scope || {};
  var obj = game.locals[app.attr("clickid")];
  var data = obj.data;

  var listedWrap = $("<div>");
  listedWrap.addClass("flexcolumn fit-y");

  if (!layout.mobile) {
    listedWrap.on("dragover", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      if (!$("#"+app.attr("id")+"-drag-overlay").length) {
        var olay = layout.overlay({
          target : app,
          id : app.attr("id")+"-drag-overlay",
          style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
        });
        olay.addClass("flexcolumn flexmiddle alttext");
        olay.css("z-index", util.getMaxZ(".ui-popout")+1);
        olay.css("font-size", "2em");
        olay.append("<b>Drop to Create</b>");
      }
    });
    listedWrap.on('drop', function(ev, ui){
      ev.preventDefault();
      ev.stopPropagation();
      var dt = ev.originalEvent.dataTransfer||$(ui.draggable).data("dt");
      var ent = JSON.parse(dt.getData("OBJ"));

      game.locals["newAssetList"] = game.locals["newAssetList"] || [];
      var lastKeys = Object.keys(game.entities.data);
      game.entities.listen["newAsset"] = function(rObj, newObj, target) {
        var change = true;
        for (var key in game.entities.data) {
          if (!util.contains(lastKeys, key)) {
            game.locals["newAssetList"].push(key);
            change = false;
          }
        }
        return change;
      }

      if (ent._t == "a") {
        if (!game.config.data.offline) {
          runCommand("createAdventure", ent);
        }
        else {
          game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
          game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
          game.entities.data["tempObj"+game.config.data.offline++].data = ent;
          game.entities.update();
        }
      }
      else if (ent._t == "b") {
        if (!game.config.data.offline) {
          runCommand("createBoard", ent);
        }
        else {
          game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
          game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
          game.entities.data["tempObj"+game.config.data.offline++].data = ent;
          game.entities.update();
        }
      }
      else if (ent._t == "c") {
        createCharacter(ent, true, null, true);
        game.entities.update();
      }
      else if (ent._t == "i") {
        if (!game.config.data.offline) {
          runCommand("createItem", ent);
        }
        else {
          game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
          game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
          game.entities.data["tempObj"+game.config.data.offline++].data = ent;
          game.entities.update();
        }
      }
      else if (ent._t == "p") {
        if (!game.config.data.offline) {
          runCommand("createPage", ent);
        }
        else {
          game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
          game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
          game.entities.data["tempObj"+game.config.data.offline++].data = ent;
          game.entities.update();
        }
      }
      layout.coverlay(app.attr("id")+"-drag-overlay");
    });

    listedWrap.on("dragleave", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      layout.coverlay(app.attr("id")+"-drag-overlay");
    });
  }
  if (!app.attr("hideCategory")) {
    var categories = obj.data.categories || ["c", "b", "p"];

    var assetType = $("<div>").appendTo(listedWrap);
    assetType.addClass("foreground subtitle");

    var buttonWrap = $("<div>").appendTo(assetType);
    buttonWrap.addClass("flexrow flexwrap");

    for (var i in categories) {
      if (!layout.mobile || categories[i] == "c") {
        var button = $("<button>").appendTo(buttonWrap);
        if (categories[i] == obj.data.category) {
          button.addClass("highlight alttext");
        }
        button.attr("type", categories[i]);
        button.append(assetTypes[categories[i]].n);
        button.click(function(){
          game.locals["newAssetList"] = [];
          obj.data.category = $(this).attr("type");
          sync.updateApp(app, game.entities);
        });
      }
    }
  }
  if (!app.attr("hideCreate") || !app.attr("hideSearch")) {
    var searchWrap = $("<div>").appendTo(listedWrap);
    searchWrap.addClass("foreground flexmiddle flexwrap alttext fit-x spadding");

    if (!app.attr("hideSearch")) {
      var search = $("<div>").appendTo(searchWrap);
      search.addClass("flexrow flex flexmiddle");

      var searchIcon = genIcon("search").appendTo(search);
      searchIcon.addClass("lrpadding");
      searchIcon.attr("title", "Search");

      var searchInput = genInput({
        classes : "subtitle",
        parent : search,
        placeholder : "Search Terms",
        style : {color : "#333", "width" : "100%"}
      });
      searchInput.keyup(function(ev){
        var str = ($(this).val() || "").toLowerCase();
        entList.children().each(function(){
          if ($(this).attr("index") && str) {
            var ent = getEnt($(this).attr("index"));
            if (ent) {
              var name = (sync.rawVal(ent.data.info.name) || "").toLowerCase();
              var hide = false;
              for (var tag in ent.data.tags) {
                if (tag.match(String(str))) {
                  hide = true;
                  break;
                }
              }
              if (name.match(String(str))) {
                hide = true;
              }
              if (!hide) {
                $(this).hide();
              }
              else {
                $(this).show();
              }
            }
          }
          else {
            $(this).fadeIn();
          }
        });
      });
    }

    if (!app.attr("hideCreate")) {
      var wrap = $("<div>").appendTo(searchWrap);
      wrap.addClass("flexrow flexwrap flex flexaround subtitle");
      if (obj.data.category == "a") {
        $("<b class='highlight outline lrpadding smooth' style='color:white;'>Beta</b>").appendTo(wrap);

        var button = genIcon("book", "New Adventure");
        button.attr("title", "Create a new Adventure");
        button.appendTo(wrap);
        button.click(function() {
          app.removeAttr("hideAssets");
          game.locals["newAssetList"] = game.locals["newAssetList"] || [];
          var lastKeys = Object.keys(game.entities.data);
          game.entities.listen["newAsset"] = function(rObj, newObj, target) {
            var change = true;
            for (var key in game.entities.data) {
              if (!util.contains(lastKeys, key)) {
                game.locals["newAssetList"].push(key);
                change = false;
              }
            }
            return change;
          }
          if (!game.config.data.offline) {
            runCommand("createAdventure", {data : {}});
          }
          else {
            game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
            game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
            game.entities.data["tempObj"+game.config.data.offline++].data = duplicate(game.templates.adventure);
            game.entities.update();
          }
          sendAlert({text : "Created Adventure"});
        });
      }
      else if (obj.data.category == "b") {
        var button = genIcon("globe", "New Map").appendTo(wrap);
        button.addClass("lrpadding");
        button.attr("title", "Creates a New Map");
        button.click(function(){
          app.removeAttr("hideAssets");
          game.locals["newAssetList"] = game.locals["newAssetList"] || [];
          var lastKeys = Object.keys(game.entities.data);
          game.entities.listen["newAsset"] = function(rObj, newObj, target) {
            var change = true;
            for (var key in game.entities.data) {
              if (!util.contains(lastKeys, key)) {
                game.locals["newAssetList"].push(key);
                change = false;
              }
            }
            return change;
          }
          if (!game.config.data.offline) {
            runCommand("createBoard", {});
          }
          else {
            game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
            game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;

            var board = {"_t" : "b"};
            board.info = {name : sync.newValue(null, "[No Name]")};
            board.sheets = [];
            board.layers = [{
              n : "Background Layer",
              t : [],
              p : [],
              d : [],
            },
            {
              n : "Player Layer",
              t : [], //tiles
              p : [], //pieces
              d : [], //drawing
            },
            {
              n : "Trap Layer",
              t : [], //tiles
              p : [], //pieces
              d : [], //drawing
            },
            {
              n : "GM Layer",
              _s : {},
              t : [], //tiles
              p : [], //pieces
              d : [], //drawing
            }];

            board.w = 1600;
            board.h = 1600;
            board.gridX = 0;
            board.gridY = 0;
            board.gridW = 64;
            board.gridH = 64;
            board.gc = "rgba(0,0,0,0.25)";
            board.vZ = 100;

            board.options = {};
            game.entities.data["tempObj"+game.config.data.offline++].data = board;
            game.entities.update();
          }
          sendAlert({text : "Created Map"});
        });
      }
      else if (obj.data.category == "c") {
        var createChar = genIcon("user", "New Actor").appendTo(wrap);
        createChar.attr("title", "Create Actor");
        createChar.click(function(){
          if (game.templates.build) {
            if (Object.keys(game.templates.actors).length > 1) {
              var content = $("<div>");
              content.addClass("flexcolumn flex");

              for (var k in game.templates.actors) {
                var button = $("<div>").appendTo(content);
                button.addClass("hover2 alttext spadding flexmiddle background padding fit-x subtitle");
                button.text(k);
                button.click(function(){
                  createCharacter(duplicate(game.templates.actors[$(this).text()]), null, null, null, true);
                  sendAlert({text : "Created Actor"});
                  app.removeAttr("hideAssets");
                  game.entities.update();
                  layout.coverlay("resource-select");
                });
              }

              ui_popOut({
                prompt : true,
                title : "Type",
                align : "top",
                target : $(this),
                id : "resource-select",
                style : {"width" : "100px"},
              }, content);
            }
            else if (Object.keys(game.templates.actors).length) {
              createCharacter(duplicate(game.templates.actors[Object.keys(game.templates.actors)[0]]), null, null, null, true);
              sendAlert({text : "Created Actor"});
              app.removeAttr("hideAssets");
              game.entities.update();
            }
          }
          else {
            createCharacter(duplicate(game.templates.character), null, null, null, true);
            sendAlert({text : "Created Actor"});
            app.removeAttr("hideAssets");
            game.entities.update();
          }
        });
      }
      else if (obj.data.category == "i") {
        var button = genIcon("briefcase", "New Element");
        button.attr("title", "Create a new Item Element");
        button.appendTo(wrap);
        button.click(function() {
          app.removeAttr("hideAssets");
          var content = $("<div>");
          content.addClass("flexcolumn flex");
          if (game.templates.build) {
            if (Object.keys(game.templates.elements).length > 1) {
              for (var k in game.templates.elements) {
                var button = $("<div>").appendTo(content);
                button.addClass("hover2 alttext spadding flexmiddle background padding fit-x subtitle");
                button.text(k);
                button.click(function(){
                  app.attr("category", "i");
                  app.removeAttr("hideAssets");
                  game.locals["newAssetList"] = game.locals["newAssetList"] || [];
                  var lastKeys = Object.keys(game.entities.data);
                  game.entities.listen["newAsset"] = function(rObj, newObj, target) {
                    var change = true;
                    for (var key in game.entities.data) {
                      if (!util.contains(lastKeys, key)) {
                        game.locals["newAssetList"].push(key);
                        change = false;
                      }
                    }
                    return change;
                  }
                  if (!game.config.data.offline) {
                    runCommand("createItem", duplicate(game.templates.elements[$(this).text()]));
                  }
                  else {
                    game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
                    game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
                    game.entities.data["tempObj"+game.config.data.offline++].data = duplicate(game.templates.elements[$(this).text()]);
                    game.entities.update();
                  }
                  sendAlert({text : "Created Item"});
                  layout.coverlay("resource-select");
                });
              }
            }
            else {
              app.attr("category", "i");
              app.removeAttr("hideAssets");
              game.locals["newAssetList"] = game.locals["newAssetList"] || [];
              var lastKeys = Object.keys(game.entities.data);
              game.entities.listen["newAsset"] = function(rObj, newObj, target) {
                var change = true;
                for (var key in game.entities.data) {
                  if (!util.contains(lastKeys, key)) {
                    game.locals["newAssetList"].push(key);
                    change = false;
                  }
                }
                return change;
              }
              if (!game.config.data.offline) {
                runCommand("createItem", duplicate(game.templates.elements[Object.keys(game.templates.elements)[0]]));
              }
              else {
                game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
                game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
                game.entities.data["tempObj"+game.config.data.offline++].data = duplicate(game.templates.elements[Object.keys(game.templates.elements)[0]]);
                game.entities.update();
              }
              sendAlert({text : "Created Element"});
              layout.coverlay("resource-select");
            }
          }
          else {
            var button = $("<div>").appendTo(content);
            button.addClass("hover2 alttext spadding flexmiddle background padding fit-x");
            button.text("Item");
            button.click(function(){
              app.attr("category", "i");
              app.removeAttr("hideAssets");
              game.locals["newAssetList"] = game.locals["newAssetList"] || [];
              var lastKeys = Object.keys(game.entities.data);
              game.entities.listen["newAsset"] = function(rObj, newObj, target) {
                var change = true;
                for (var key in game.entities.data) {
                  if (!util.contains(lastKeys, key)) {
                    game.locals["newAssetList"].push(key);
                    change = false;
                  }
                }
                return change;
              }
              if (!game.config.data.offline) {
                runCommand("createItem", duplicate(game.templates.item));
              }
              else {
                game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
                game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
                game.entities.data["tempObj"+game.config.data.offline++].data = duplicate(game.templates.item);
                game.entities.update();
              }
              sendAlert({text : "Created Item"});
              layout.coverlay("resource-select");
            });

            var button = $("<div>").appendTo(content);
            button.addClass("hover2 alttext spadding flexmiddle background padding fit-x");
            button.text("Spell");
            button.click(function(){
              app.attr("category", "i");
              app.removeAttr("hideAssets");
              game.locals["newAssetList"] = game.locals["newAssetList"] || [];
              var lastKeys = Object.keys(game.entities.data);
              game.entities.listen["newAsset"] = function(rObj, newObj, target) {
                var change = true;
                for (var key in game.entities.data) {
                  if (!util.contains(lastKeys, key)) {
                    game.locals["newAssetList"].push(key);
                    change = false;
                  }
                }
                return change;
              }
              if (!game.config.data.offline) {
                var newEnt = duplicate(game.templates.item);
                newEnt.tags = {spell : 1};
                runCommand("createItem", newEnt);
              }
              else {
                game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
                game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
                game.entities.data["tempObj"+game.config.data.offline++].data = duplicate(game.templates.item);
                game.entities.update();
              }
              sendAlert({text : "Created Spell"});
              layout.coverlay("resource-select");
            });
          }

          ui_popOut({
            prompt : true,
            title : "Type",
            align : "top",
            target : $(this),
            id : "resource-select",
            style : {"width" : "100px"},
          }, content);
        });
      }
      else if (obj.data.category == "p") {
        var button = genIcon("duplicate", "New Page");
        button.attr("title", "Create a new Page");
        button.appendTo(wrap);
        button.click(function() {
          game.locals["newAssetList"] = game.locals["newAssetList"] || [];
          var lastKeys = Object.keys(game.entities.data);
          game.entities.listen["newAsset"] = function(rObj, newObj, target) {
            var change = true;
            for (var key in game.entities.data) {
              if (!util.contains(lastKeys, key)) {
                game.locals["newAssetList"].push(key);
                change = false;
              }
            }
            return change;
          }
          app.removeAttr("hideAssets");
          if (!game.config.data.offline) {
            runCommand("createPage", {data : {}});
          }
          else {
            game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
            game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
            game.entities.data["tempObj"+game.config.data.offline++].data = duplicate(game.templates.page);
            game.entities.update();
          }
          sendAlert({text : "Created Page"});
        });
      }
    }
  }

  var entArray = obj.data.list;
  if (!entArray) {
    entArray = [];
    for (var i in game.entities.data) {
      entArray.push(i);
    }
  }

  if (!app.attr("dontSort")) {
    entArray.sort(function(obj1, obj2){
      if (game.locals["newAssetList"]) {
        if (util.contains(game.locals["newAssetList"], obj1) && !util.contains(game.locals["newAssetList"], obj2)) {
          return -1;
        }
        else if (util.contains(game.locals["newAssetList"], obj1) && util.contains(game.locals["newAssetList"], obj2)) {
          var obj1 = getEnt(obj1);
          var obj2 = getEnt(obj2);
          return (String(sync.rawVal(obj1.data.info.name) || "")).toLowerCase().localeCompare(String(sync.rawVal(obj2.data.info.name) || "").toLowerCase());
        }
        else if (!util.contains(game.locals["newAssetList"], obj1) && util.contains(game.locals["newAssetList"], obj2)) {
          return 1;
        }
      }
      var obj1 = getEnt(obj1);
      var obj2 = getEnt(obj2);
      return (String(sync.rawVal(obj1.data.info.name) || "")).toLowerCase().localeCompare(String(sync.rawVal(obj2.data.info.name) || "").toLowerCase());
    });
  }

  var listedChars = $("<div>").appendTo(listedWrap);
  listedChars.addClass("flexcolumn flex outline");
  listedChars.attr("_lastScrollTop", app.attr("_lastScrollTop_chars"));
  listedChars.css("overflow-y", "auto");
  listedChars.css("position", "relative");
  listedChars.scroll(function(){
    app.attr("_lastScrollTop_chars", $(this).scrollTop());
  });

  var listWrap = $("<div>").appendTo(listedChars);
  listWrap.addClass("flexcolumn fit-x");
  listWrap.css("position", "absolute");

  var entList = sync.render("ui_entList")(obj, app, {
    filter : obj.data.category,
    rights : obj.data.rights,
    list : entArray,
    app : true,
    ignore : obj.data.ignore,
    draw : function(ui, charObj) {
      ui.addClass("outlinebottom");
      if (scope.category == "i") {
        ui.attr("draggable", true);
        ui.on("dragstart", function(ev){
          var dt = ev.originalEvent.dataTransfer;
          dt.setData("OBJ", JSON.stringify(charObj.data));
        });
      }
      if (game.locals["newAssetList"] && util.contains(game.locals["newAssetList"], charObj.id())) {
        var button = $("<div>").appendTo(ui);
        button.addClass("subtitle flexmiddle");

        var newLabel = $("<text>").appendTo(button);
        newLabel.addClass("highlight smooth alttext flexmiddle lrpadding");
        newLabel.text("New");
      }
      if (obj.data.draw) {
        obj.data.draw(ui, charObj, obj);
      }
    },
    click : function(ev, ui, charObj) {
      if (obj.data.select && (obj.data.select(ev, ui, charObj, obj, entities))) {
        sync.updateApp(app, entities);
      }
    },
  }).appendTo(listWrap);

  return listedWrap;
});


sync.render("ui_assetPicker", function(obj, app, scope) {
  scope = scope || {};

  var ent = sync.obj();
  ent.data = {
    category : scope.category || scope.filter || "c",
    categories : scope.categories,
    ignore : scope.ignore,
    filter : scope.filter,
    rights : scope.rights,
    list : scope.list,
    select : scope.select
  };

  game.locals["assetPicker"] = ent;
  if (true || ent.data.list || scope.sessionOnly) {
    var newApp = sync.newApp("ui_assetList");
    newApp.attr("clickid", "assetPicker");
    if (ent.data.category) {
      newApp.attr("category", ent.data.category);
    }
    if (ent.data.filter) {
      newApp.attr("filter", ent.data.filter);
      newApp.attr("hideCategory", true);
    }
    if (ent.data.rights) {
      newApp.attr("Rights", ent.data.rights);
    }
    if (scope.hideCreate) {
      newApp.attr("hideCreate", scope.hideCreate);
    }
    if (scope.hideSearch) {
      newApp.attr("hideSearch", scope.hideSearch);
    }
    if (scope.hideCategory) {
      newApp.attr("hideCategory", scope.hideCategory);
    }
    game.entities.addApp(newApp);

    return newApp;
  }
  else {
    var navBar = genNavBar("background alttext subtitle", "flex", "4px");
    navBar.addClass("flexcolumn flex");
    /*if (game.locals["storage"] && game.locals["storage"].data) {
      for (var i in game.locals["storage"].data.l) {
        var sEnt = game.locals["storage"].data.s[game.locals["storage"].data.l[i]._uid];
        if (sEnt instanceof Object) {
          navBar.generateTab("Asset Storage", "cloud-download", function(parent){
            ent.data.list = [];
            if (game.locals["storage"]) {
              for (var i in game.locals["storage"].data.l) {
                var sEnt = game.locals["storage"].data.s[game.locals["storage"].data.l[i]._uid];
                if (sEnt instanceof Object) {
                  ent.data.list.push(getCookie("UserID")+"_"+game.locals["storage"].data.l[i]._uid);
                }
              }
            }

            var newApp = sync.newApp("ui_assetList").appendTo(parent);
            newApp.attr("clickid", "assetPicker");
            newApp.attr("hideCreate", true);
            if (ent.data.category) {
              newApp.attr("category", ent.data.category);
            }
            if (ent.data.filter) {
              newApp.attr("filter", ent.data.filter);
              newApp.attr("hideCategory", true);
            }
            if (ent.data.rights) {
              newApp.attr("Rights", ent.data.rights);
            }
            game.entities.addApp(newApp);
          });
          break;
        }
      }
    }*/
    navBar.generateTab("Live", "cog", function(parent){
      delete ent.data.list;

      var newApp = sync.newApp("ui_assetList").appendTo(parent);
      newApp.attr("clickid", "assetPicker");
      if (ent.data.category) {
        newApp.attr("category", ent.data.category || "c");
      }
      if (scope.hideCreate) {
        newApp.attr("hideCreate", scope.hideCreate);
      }
      if (ent.data.filter) {
        newApp.attr("filter", ent.data.filter);
        newApp.attr("hideCategory", true);
      }
      if (ent.data.rights) {
        newApp.attr("Rights", ent.data.rights);
      }
      game.entities.addApp(newApp);
    });
    if (game.state.data.combat) {
      navBar.generateTab("Combat", "fire", function(parent){
        ent.data.list = Object.keys(game.state.data.combat.engaged);
        var newApp = sync.newApp("ui_assetList").appendTo(parent);
        newApp.attr("clickid", "assetPicker");
        newApp.attr("hideCategory", true);
        newApp.attr("hideCreate", true);
        newApp.attr("noSort", true);
        if (ent.data.rights) {
          newApp.attr("Rights", ent.data.rights);
        }

        game.entities.addApp(newApp);
      });
    }
    for (var i in game.players.data) {
      if (game.players.data[i].entity) {
        navBar.generateTab("Players", "user", function(parent){
          ent.data.list = [];
          for (var i in game.players.data) {
            if (game.players.data[i].entity) {
              ent.data.list.push(game.players.data[i].entity);
            }
          }
          var newApp = sync.newApp("ui_assetList").appendTo(parent);
          newApp.attr("clickid", "assetPicker");
          newApp.attr("hideCategory", true);
          newApp.attr("hideCreate", true);
          newApp.attr("noSort", true);
          if (ent.data.rights) {
            newApp.attr("Rights", ent.data.rights);
          }

          game.entities.addApp(newApp);
        });
        break;
      }
    }
    navBar.selectTab("Live");
  }

  return navBar;
});

sync.render("ui_characterArmor", function(obj, app, scope){
  var data = obj.data;
  var div = $("<div>");
  scope = scope || {viewOnly: false};
  var newScope = duplicate(scope);
  newScope.target = sync.newValue("Armor");
  sync.rawVal(newScope.target, sync.eval("@:armor()", {c : duplicate(obj.data)}));
  newScope.width = scope.width || "75px";
  newScope.height = scope.height || "75px";
  newScope.viewOnly = true;

  return sync.render(scope.armor || "ui_armorParted")(obj, app, newScope);
});


sync.render("ui_characterBody", function(obj, app, scope){
  var data = obj.data;
  var div = $("<div>");

  var container = $("<div>").appendTo(div);
  container.addClass("flexmiddle");

  var gear = sync.render("ui_characterArmor")(obj, app, scope).appendTo(container);
  scope.refresh = true;
  var body = sync.render("ui_body")(obj, app, scope).appendTo(container);
  var gear = sync.render("ui_characterGear")(obj, app, scope);
  if (scope.minimized) {
    body.css("width", "100px");
    body.css("height", "100px");
    gear.addClass("subtitle");
    gear.appendTo(div);
  }
  else {
    gear.appendTo(container);
  }


  return div;
});

sync.render("ui_characterCombatSummary", function(obj, app, scope) {
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true"), noOutline : app.attr("noOutline") == "true"};

  // don't edit cloud entities
  if (isNaN(obj.id()) && obj.id().match("_")) {
    scope.viewOnly = true;
    scope.local = true;
  }

  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");
  obj.data.tags = obj.data.tags || {};


  var charDiv = sync.render("ui_characterSummary")(obj, app, {minimized: true, hide : obj.data._flags.hidden, width : "auto", height : scope.height || app.attr("height"), name : sync.eval(app.attr("name"), {c : duplicate(obj.data)})});
  if (scope.noOutline) {
    charDiv.removeClass("outline");
  }
  charDiv.addClass("flex hover2");
  charDiv.attr("index", obj.id());
  charDiv.appendTo(div);

  return div;
});


sync.render("ui_combatManager", function(obj, app, scope){
  var div = $("<div>");
  div.addClass("flexcolumn fit-xy");

  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};
  obj = game.entities;

  var combatApp = sync.newApp("ui_combatControls");
  combatApp.appendTo(div);
  game.state.addApp(combatApp);

  return div;
});


sync.render("ui_characterCombatList", function(obj, app, scope) {
  var div = $("<div>");
  div.addClass("flexcolumn flex dropContent");
  div.sortable({
    handle : ".test",
    connectWith : ".dropContent",
    update : function(ev, ui) {
      if ($(ui.item).attr("src")) {
        if ($(ui.item).attr("src") == "state") {
          game.state.update(); // refresh the list
        }
        else if ($(ui.item).attr("src") == "players") {
          game.players.update(); // refresh the list
        }
        else {
          game.entities.data[$(ui.item).attr("src")].update(); // refresh the list
        }
      }
      else {
        game.entities.update(); // refresh the list
      }
      var state = game.state.data;
      var combat = state.combat;
      if (combat && combat.initiative) {
        runCommand("joinCombat", {id : $(ui.item).attr("index"), data : {}});
      }
      else {
        var obj = {};
        obj[$(ui.item).attr("index")] = {};
        runCommand("enableCombat", {id : $(ui.item).attr("index"), data : {data : obj}});
      }
      $(ui.item).remove();
      ev.stopPropagation();
      return false;
    }
  });

  if (!obj) {
    game.entities.addApp(app);
    return div;
  }

  var state = game.state.data;
  var combat = state.combat;

  if (combat) {
    var participants = {};
    for (var index in obj.data) {
      var charObj = obj.data[index];
      if (charObj && charObj.data["_t"] == "c") {
        if (charObj.data.counters.initiative) {
          participants[index] = sync.val(charObj.data.counters.initiative);
        }
      }
    }

    var organized = sync.render("_turnOrder")([], null, {data : participants});
    var turn = sync.val(combat.initiative) || 0;

    var turnDiv = $("<div>").appendTo(div);
    turnDiv.addClass("flexwrap");

    for (var j=organized.length-1; j>=0; j--) {
      var turnPlate = $("<div>");
      turnPlate.addClass("outline");
      turnPlate.css("min-width", "20%");
      if (j == turn) {
        turnPlate.addClass("highlight");
      }
      var header = $("<div>").appendTo(turnPlate);
      header.addClass("fit-x flexaround");
      header.append("<b>Initiative "+organized[j].i+"</b>");

      var charPlate = $("<div>").appendTo(turnPlate);
      charPlate.addClass("fit-x flexaround dropContent");
      charPlate.attr("turn", j);
      charPlate.sortable({
        handle : ".test",
        connectWith : ".dropContent",
        update : function(ev, ui) {
          if ($(ui.item).attr("src")) {
            if ($(ui.item).attr("src") == "state") {
              game.state.update(); // refresh the list
            }
            else if ($(ui.item).attr("src") == "players") {
              game.players.update(); // refresh the list
            }
            else {
              game.entities.data[$(ui.item).attr("src")].update(); // refresh the list
            }
          }
          else {
            game.entities.update(); // refresh the list
          }
          var newDat = duplicate(organized[$(ui.item).parent().attr("turn")]);
          delete newDat.e;

          runCommand("joinCombat", {id : $(ui.item).attr("index"), data : newDat});
          $(ui.item).remove();
          ev.stopPropagation();
          return false;
        }
      });
      if (organized[j]) {
        for (var idx in organized[j].e) {
          var index = organized[j].e[idx];
          if (participants[index]) {
            var charObj = obj.data[index];
            var info = charObj.data.info;
            var counters = charObj.data.counters;
            if (counters.initiative && (!info.hide || j == turn)) {
              if (!turnPlate.parent().length) {
                turnPlate.appendTo(turnDiv);
              }
              var charDiv = sync.newApp("ui_characterCombatSummary").appendTo(charPlate);
              charDiv.attr("index", charObj.id());
              charDiv.attr("src", "state");
              charObj.addApp(charDiv);
            }
          }
        }
      }
    }
  }

  return div;
});

sync.render("ui_characterGear", function(obj, app, scope){
  var data = obj.data;
  var div = $("<div>");
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};

  var gearContainer = $("<div>").appendTo(div);
  gearContainer.css("background-color", "white");
  for (var index in data.inventory) {
    var itemData = data.inventory[index];
    if (itemData.tags && itemData.tags["equipped"] && !sync.modifier(itemData.info.name, "noEQ")) {
      var equipment = $("<div>").appendTo(gearContainer);
      equipment.addClass("spadding outline smooth fit-x");
      equipment.attr("index", index);
      if (!scope.viewOnly && game.templates.actions && game.templates.actions["i"]) {
        equipment.addClass("hover2");
        equipment.click(function(){
          var itemIndex = $(this).attr("index");
          var itemData = data.inventory[$(this).attr("index")];

          var actionObj = sync.dummyObj();
          actionObj.data = {context : {c : obj.id(), i : itemIndex}};

          game.locals["actionsList"] = game.locals["actionsList"] || {};
          game.locals["actionsList"][app.attr("id")+"-"+obj.data._t] = actionObj;

          var actionApp = sync.newApp("ui_renderAction");
          actionObj.addApp(actionApp);

          var pop = ui_popOut({
            target : $(this),
            minimize : true,
            prompt : true,
            dragThickness : "0.5em",
            title : "Action"
          }, actionApp);
          pop.resizable();
        });
      }
      var newScope = duplicate(scope);
      newScope.display = game.templates.display.item.summary;
      newScope.lookup = "inventory."+index+".";
      newScope.context = sync.defaultContext();
      newScope.context.i = itemData;

      equipment.append(sync.render("ui_processUI")(obj, app, newScope));
    }
  }
  return div;
});

sync.render("ui_characterInventory", function(obj, app, scope){
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};

  var data = obj.data;
  var div = $("<div>");

  var columns = $("<div>").appendTo(div);
  columns.addClass("flexaround");

  var inventory = sync.render("ui_inventory")(obj, app, scope).appendTo(columns);
  inventory.addClass("flex");
  var equipped = false;
  for (var i in obj.data.inventory) {
    if (obj.data.inventory[i].tags && !obj.data.inventory[i].tags["noEQ"]) {
      equipped = true;
    }
  }
  if (equipped) {
    var gearContainer = $("<div>").appendTo(columns);
    gearContainer.css("width", "40%");

    var title = $("<h1 style='text-align: center;'>Gear</h1>").appendTo(gearContainer);

    var dragContainer = sync.render("ui_characterGear")(obj, app, {large : true, viewOnly : scope.viewOnly}).appendTo(gearContainer);
  }

  return div;
});

sync.render("ui_charCard", function(obj, app, scope){
  var data = obj.data;
  var info = data.info;
  var charContainer = $("<div>");
  charContainer.addClass("flexcolumn flexmiddle");
  charContainer.attr("index", obj.id());

  var charOutline = $("<div>").appendTo(charContainer);
  charOutline.addClass("outline charContent");
  charOutline.css("cursor", "pointer");

  var optionsBar = $("<div>");
  if (scope.mode != "list") {
    optionsBar.appendTo(charOutline);
  }
  optionsBar.addClass("flexrow flexaround flexwrap");

  if (hasSecurity(getCookie("UserID"), "Rights", data) && !scope.viewOnly) {
    var deleteButton = genIcon("trash").appendTo(optionsBar);
    deleteButton.attr("title", "Delete Character");
    deleteButton.click(function() {
      var popOut = ui_prompt({
        target : $(this),
        id : "confirm-delete-char",
        confirm : "Delete Character",
        click : function(){
          runCommand("deleteAsset", {id: obj.id()});
          delete game.entities.data[obj.id()];
          game.entities.update();
        }
      });
    });

    var visible = genIcon("cog").appendTo(optionsBar);
    visible.attr("title", "Doesn't reveal this character's name or image");
    visible.click(function(){
      var commands = [];
      for (var key in _actions) {
        if (!_actions[key].condition || _actions[key].condition(obj)) {
          commands.push(
            {name : _actions[key].name || key,
              attr : {key : key},
              click : function(ev, ui){
                if (_actions[ui.attr("key")].click) {
                  _actions[ui.attr("key")].click(ev, ui, obj, app, scope);
                  //sendAlert({text : "Action Executed"});
                }
              }
            }
          );
        }
      }
      ui_dropMenu($(this), commands, {id : "c-actions"});
    });
    if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
      var dupe = genIcon("duplicate");
      dupe.appendTo(optionsBar);
      dupe.attr("title", "Duplicate this character");
      dupe.click(function(){
        createCharacter(duplicate(data), true);
      });
      if (scope.edit) {
        var edit = genIcon("pencil").appendTo(optionsBar);
        edit.attr("title", "Edit this character");
        edit.click(function(ev) {
          scope.edit(ev, this, obj);
        });
      }
    }

    var security = genIcon("lock").appendTo(optionsBar);
    security.attr("title", "Configure who can access this");
    security.click(function(){
      var content = sync.newApp("ui_rights");
      obj.addApp(content);

      var frame = ui_popOut({
        target : $(this),
        prompt : true,
        align : "bottom",
        id : "ui-rights-dialog",
      }, content);
    });
  }

  var charDiv = $("<div>").appendTo(charOutline);
  charDiv.attr("index", obj.id());
  if (!scope.mode) {
    charDiv.css("overflow-y", "hidden");
    charDiv.css("min-width", "8em");

    charContainer.css("max-width", "150px");
    charDiv.css("cursor", "pointer");

    var title = $("<b style='text-align : center;'>"+sync.rawVal(info.name)+"</b>").appendTo(charDiv);
    title.addClass("flexmiddle outlinebottom");

    if (sync.rawVal(info.name) && sync.rawVal(info.name).length > 20) {
      title.addClass("subtitle");
      if (sync.rawVal(info.name).length > 35) {
        title.text(sync.rawVal(info.name).substring(0, 33)+"..");
      }
    }

    var icon = $("<div>").appendTo(charDiv);
    icon.css("position", "relative");
    icon.css("background-image", "url('"+(sync.val(info.img) || "/content/icons/blankchar.png")+"')");
    icon.css("background-size", "cover");
    icon.css("background-repeat", "no-repeat");
    icon.css("width", "100%");
    icon.css("height", "6em");
  }
  else if (scope.mode == "list") {
    charContainer.removeClass("flexmiddle");
    charOutline.addClass("flex flexcolumn");

    charDiv.addClass("flex flexrow");
    charDiv.css("cursor", "pointer");

    var icon = $("<img>").appendTo(charDiv);
    icon.attr("src", (sync.val(info.img) || "/content/icons/blankchar.png"));
    icon.attr("width", "auto");
    icon.attr("height", "25px");
    icon.addClass("outline");

    var title = $("<b style='text-align : center;'>"+sync.rawVal(info.name)+"</b>").appendTo(charDiv);
    title.addClass("flexmiddle flex");

    optionsBar.appendTo(charDiv);
  }
  else if (scope.mode == "large") {
    charDiv.css("overflow-y", "hidden");
    charDiv.css("min-width", "25em");

    charDiv.css("cursor", "pointer");

    var title = $("<b style='text-align : center;'>"+sync.rawVal(info.name)+"</b>").appendTo(charDiv);
    title.addClass("flexmiddle outlinebottom");
    title.css("font-size", "1.5em");

    if (sync.rawVal(info.name) && sync.rawVal(info.name).length > 20) {
      title.css("font-size", "1.2em");
      title.css("text-align", "center");
      if (sync.rawVal(info.name).length > 35) {
        title.text(sync.rawVal(info.name).substring(0, 33)+"..");
      }
    }

    var icon = $("<div>").appendTo(charDiv);
    icon.css("position", "relative");
    icon.css("background-image", "url('"+(sync.val(info.img) || "/content/icons/blankchar.png")+"')");
    icon.css("background-size", "contain");
    icon.css("background-position", "center");
    icon.css("background-repeat", "no-repeat");
    icon.css("width", "100%");
    icon.css("height", "15em");
  }
  charDiv.click(function(ev){
    $(".card-selected").removeClass("card-selected");
    if (_down["16"] && hasSecurity(getCookie("UserID"), "Visible", obj.data)) {
      var content = sync.newApp("ui_characterSummary");
      obj.addApp(content);
      var popOut = ui_popOut({
        target: $(this),
        id: "char-summary-"+$(this).attr("index"),
      }, content);
      //popOut.resizable();
    }
    else if (scope.click) {
      scope.click(ev, $(this), obj);
    }
  });
  if (scope.label) {
    var labelDiv = $("<div>").appendTo(icon);
    labelDiv.addClass("alttext background outline subtitle spadding");
    labelDiv.css("position", "absolute");
    if (scope.label instanceof String) {
      labelDiv.append("<i>"+scope.label+"</i>");
    }
    else {
      labelDiv.append(scope.label);
    }
  }

  if (hasSecurity(getCookie("UserID"), "Owner", data) && !scope.viewOnly) {
    var syncLabel;
    if (data._c == -1) {
      syncLabel = genIcon("remove").appendTo(icon);
      syncLabel.addClass("alttext background outline");
      syncLabel.attr("title", "Duplicate to move to Asset Storage");
      syncLabel.css("right", "0");
      syncLabel.css("bottom", "0");
      syncLabel.css("position", "absolute");
      syncLabel.css("padding", "2px");
    }
    else {
      if (data._uid) {
        if (data._sync) {
          syncLabel = genIcon("refresh").appendTo(icon);
          syncLabel.addClass("alttext background outline");
          syncLabel.attr("title", "This is saved, and is in-sync with Asset Storage");
          syncLabel.click(function(ev){
            runCommand("updateSync", {id : obj.id(), data : false});
            ev.stopPropagation();
            return false;
          });
        }
        else {
          syncLabel = genIcon("cloud").appendTo(icon);
          syncLabel.addClass("alttext background outline");
          syncLabel.attr("title", "This is saved, but is not in-sync with Asset Storage");
          syncLabel.click(function(ev){
            runCommand("updateSync", {id : obj.id(), data : true});
            ev.stopPropagation();
            return false;
          });
        }
      }
      else {
        syncLabel = genIcon("cloud").appendTo(icon);
        syncLabel.addClass("outline");
        syncLabel.css("background-color", "white");
        syncLabel.attr("title", "Enable Asset Storage");
        syncLabel.click(function(ev){
          var popOut = ui_prompt({
            target : $(this),
            id : "confirm-store-char",
            confirm : "Move to Asset Storage",
            click : function(){
              runCommand("storeAsset", {id: obj.id()});
              layout.coverlay("quick-storage-popout");
              syncLabel.remove();
            }
          });
          ev.stopPropagation();
          return false;
        });
      }
      syncLabel.css("right", "0");
      syncLabel.css("bottom", "0");
      syncLabel.css("position", "absolute");
      syncLabel.css("padding", "2px");
    }
  }

  return charContainer;
});

sync.render("ui_vehicleCard", function(obj, app, scope){
  var data = obj.data;
  var info = data.info;
  var charContainer = $("<div>");
  charContainer.addClass("flexcolumn flexmiddle");
  charContainer.attr("index", obj.id());

  var charOutline = $("<div>").appendTo(charContainer);
  charOutline.addClass("outline charContent");
  charOutline.css("cursor", "pointer");

  var optionsBar = $("<div>").appendTo(charOutline);
  optionsBar.addClass("flexaround");

  if (hasSecurity(getCookie("UserID"), "Rights", data) && !scope.viewOnly) {
    var deleteButton = genIcon("trash").appendTo(optionsBar);
    deleteButton.attr("title", "Delete Vehicle");
    deleteButton.click(function() {
      var popOut = ui_prompt({
        target : $(this),
        id : "confirm-delete-vehicle",
        confirm : "Delete Vehicle",
        click : function(){
          runCommand("deleteAsset", {id: obj.id()});
          delete game.entities.data[obj.id()];
          game.entities.update();
        }
      });
    });

    var dupe = genIcon("duplicate");
    dupe.appendTo(optionsBar);
    dupe.attr("title", "Duplicate this Vehicle");
    dupe.click(function(){
      runCommand("createVehicle", data);
    });

    var security = genIcon("lock").appendTo(optionsBar);
    security.attr("title", "Configure who can access this");
    security.click(function(){
      var content = sync.newApp("ui_rights");
      obj.addApp(content);

      var frame = ui_popOut({
        target : $(this),
        prompt : true,
        align : "bottom",
        id : "ui-rights-dialog",
      }, content);
    });
  }

  var charDiv = $("<div>").appendTo(charOutline);
  charDiv.attr("index", obj.id());
  if (!scope.mode) {
    charDiv.css("overflow-y", "hidden");
    charDiv.css("min-width", "8em");

    charContainer.css("max-width", "150px");
    charDiv.css("cursor", "pointer");

    var title = $("<b style='text-align : center;'>"+sync.rawVal(info.name)+"</b>").appendTo(charDiv);
    title.addClass("flexmiddle outlinebottom");

    if (sync.rawVal(info.name) && sync.rawVal(info.name).length > 20) {
      title.addClass("subtitle")
      if (sync.rawVal(info.name).length > 35) {
        title.text(sync.rawVal(info.name).substring(0, 33)+"..");
      }
    }

    var icon = $("<div>").appendTo(charDiv);
    icon.css("position", "relative");
    icon.css("background-image", "url('"+(sync.val(info.img) || "/content/icons/blankvehicle.png")+"')");
    icon.css("background-size", "cover");
    icon.css("background-repeat", "no-repeat");
    icon.css("width", "100%");
    icon.css("height", "6em");
  }
  else if (scope.mode == "list") {
    charContainer.removeClass("flexmiddle");
    charOutline.addClass("flex flexcolumn");

    charDiv.addClass("flex flexrow");
    charDiv.css("cursor", "pointer");

    var icon = $("<img>").appendTo(charDiv);
    icon.attr("src", (sync.val(info.img) || "/content/icons/blankchar.png"));
    icon.attr("width", "auto");
    icon.attr("height", "25px");
    icon.addClass("outline");

    var title = $("<b style='text-align : center;'>"+sync.rawVal(info.name)+"</b>").appendTo(charDiv);
    title.addClass("flexmiddle flex");
  }
  else if (scope.mode == "large") {
    charDiv.css("overflow-y", "hidden");
    charDiv.css("min-width", "25em");

    charDiv.css("cursor", "pointer");

    var title = $("<b style='text-align : center;'>"+sync.rawVal(info.name)+"</b>").appendTo(charDiv);
    title.addClass("flexmiddle");
    title.css("font-size", "1.5em");

    if (sync.rawVal(info.name) && sync.rawVal(info.name).length > 20) {
      title.css("font-size", "1.2em");
      title.css("text-align", "center");
      if (sync.rawVal(info.name).length > 35) {
        title.text(sync.rawVal(info.name).substring(0, 33)+"..");
      }
    }

    var icon = $("<div>").appendTo(charDiv);
    icon.css("position", "relative");
    icon.css("background-image", "url('"+(sync.val(info.img) || "/content/icons/blankvehicle.png")+"')");
    icon.css("background-size", "contain");
    icon.css("background-position", "center");
    icon.css("background-repeat", "no-repeat");
    icon.css("width", "100%");
    icon.css("height", "15em");
  }

  charDiv.click(function(ev){
    $(".card-selected").removeClass("card-selected");
    if ($(this).attr("_lastClick") && (Date.now()-$(this).attr("_lastClick") < 1000)) {
      if (scope.click) {
        scope.click(ev, $(this), obj);
      }
      else {
        if (hasSecurity(getCookie("UserID"), "Visible", obj.data)) {
          var wid = "30vw";
          if (layout.mobile) {
            wid = "auto";
          }
          var content = sync.newApp("ui_vehicle");
          obj.addApp(content);
          var popOut = ui_popOut({
            target: $(this),
            id: "vehicle-summary-"+$(this).attr("index"),
            dragThickness : "0.5em",
            title : sync.rawVal(obj.data.info.name),
            minimize : true,
            style: {"width" : wid, "max-width" : ""}
          }, content);
          popOut.resizable();
        }
      }
      $(this).removeAttr("_lastClick");
    }
    else {
      var index = $(this).attr("index");

      $(".board-selected").removeClass("board-selected");
      $(".piece").each(function(){
        if ($(this).attr("eID") == index) {
          $(this).addClass("board-selected");
        }
      });
      charOutline.addClass("card-selected");
      util.target(index);
      $(this).attr("_lastClick", Date.now());
    }
  });
  if (scope.label) {
    var labelDiv = $("<div>").appendTo(icon);
    labelDiv.addClass("alttext background outline subtitle spadding");
    labelDiv.css("position", "absolute");
    if (scope.label instanceof String) {
      labelDiv.append("<i>"+scope.label+"</i>");
    }
    else {
      labelDiv.append(scope.label);
    }
  }

  if (hasSecurity(getCookie("UserID"), "Owner", data) && !scope.viewOnly) {
    var syncLabel;
    if (data._c == -1) {
      syncLabel = genIcon("remove").appendTo(icon);
      syncLabel.addClass("alttext background outline");
      syncLabel.attr("title", "Duplicate to move to Asset Storage");
      syncLabel.css("right", "0");
      syncLabel.css("bottom", "0");
      syncLabel.css("position", "absolute");
      syncLabel.css("padding", "2px");
    }
    else {
      if (data._uid) {
        if (data._sync) {
          syncLabel = genIcon("refresh").appendTo(icon);
          syncLabel.addClass("alttext background outline");
          syncLabel.attr("title", "This is saved, and is in-sync with Asset Storage");
          syncLabel.click(function(ev){
            runCommand("updateSync", {id : obj.id(), data : false});
            ev.stopPropagation();
            return false;
          });
        }
        else {
          syncLabel = genIcon("cloud").appendTo(icon);
          syncLabel.addClass("alttext background outline");
          syncLabel.attr("title", "This is saved, and is not in-sync with Asset Storage");
          syncLabel.click(function(ev){
            runCommand("updateSync", {id : obj.id(), data : true});
            ev.stopPropagation();
            return false;
          });
        }
      }
      else {
        syncLabel = genIcon("cloud").appendTo(icon);
        syncLabel.addClass("outline");
        syncLabel.css("background-color", "white");
        syncLabel.attr("title", "Enable Asset Storage");
        syncLabel.click(function(ev){
          var popOut = ui_prompt({
            target : $(this),
            id : "confirm-store-char",
            confirm : "Move to Asset Storage",
            click : function(){
              runCommand("storeAsset", {id: obj.id()});
              layout.coverlay("quick-storage-popout");
              syncLabel.remove();
            }
          });
          ev.stopPropagation();
          return false;
        });
      }
      syncLabel.css("right", "0");
      syncLabel.css("bottom", "0");
      syncLabel.css("position", "absolute");
      syncLabel.css("padding", "2px");
    }
  }

  return charContainer;
});

sync.render("ui_characterList", function(obj, app, scope){
  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");
  // content creation
  if (!layout.mobile) {
    div.on("dragover", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      if (!$("#"+app.attr("id")+"-drag-overlay").length) {
    		var olay = layout.overlay({
          target : app,
          id : app.attr("id")+"-drag-overlay",
          style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
        });
        olay.addClass("flexcolumn flexmiddle alttext");
        olay.css("font-size", "2em");
        olay.append("<b>Drop to Create</b>");
      }
  	});
    div.on('drop', function(ev){
      ev.preventDefault();
      ev.stopPropagation();
      var dt = ev.originalEvent.dataTransfer;
      var ent = JSON.parse(dt.getData("OBJ"));
      if (ent._t == "c") {
        createCharacter(ent, true);
        game.entities.update();
      }
      else if (ent._t == "v") {
        if (!game.config.data.offline) {
          runCommand("createVehicle", ent);
        }
        else {
          game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
          game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
          game.entities.data["tempObj"+game.config.data.offline++].data = ent;
          game.entities.update();
        }
      }

      layout.coverlay(app.attr("id")+"-drag-overlay");
    });

  	div.on("dragleave", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      layout.coverlay(app.attr("id")+"-drag-overlay");
  	});
  }

  if (!obj) {
    game.entities.addApp(app);
    game.state.addApp(app);
    return $("<div>");
  }

  var obj = game.entities;

  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("flexaround outline background boxinshadow");
  optionsBar.css("color", "white");

  var counter = $("<b>").appendTo(optionsBar);

  var createChar = genIcon("user", "New Character").appendTo(optionsBar);
  createChar.attr("title", "Create Character");
  createChar.click(function(){
    createCharacter(duplicate(game.templates.character));
    game.entities.update();
  });

  var createVehicle = genIcon("plane", "New Vehicle").appendTo(optionsBar);
  createVehicle.attr("title", "Create a Blank Vehicle");
  createVehicle.click(function(){
    if (!game.config.data.offline) {
      runCommand("createVehicle", {data : {}});
    }
    else {
      game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
      game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
      game.entities.data["tempObj"+game.config.data.offline++].data = duplicate(game.templates.vehicle);
      game.entities.update();
    }
  });

  var charCount = 0;

  var columnList = $("<div>").appendTo(div);
  columnList.addClass("flexrow fit-y");
  columnList.css("overflow-y", "hidden");

  var listedWrap = $("<div>").appendTo(columnList);
  listedWrap.addClass("flexcolumn fit-y");
  listedWrap.css("min-width", "200px");

  var search = $("<div>").appendTo(listedWrap);
  search.addClass("outlinebottom background fit-x flexaround alttext");

  var searchIcon = genIcon("search").appendTo(search);
  searchIcon.addClass("lrpadding");
  searchIcon.attr("title", "Search");

  var searchInput = genInput({
    parent : search,
    placeholder : "Search Terms",
    value : app.attr("lastSearchTerm"),
  });
  searchInput.addClass("flex subtitle");
  searchInput.css("color", "#333");

  var listedChars = $("<div>").appendTo(listedWrap);
  listedChars.addClass("flexcolumn fit-xy");
  listedChars.attr("_lastScrollTop", app.attr("_lastScrollTop_chars"));
  listedChars.css("overflow-y", "auto");
  listedChars.css("position", "relative");
  listedChars.scroll(function(){
    app.attr("_lastScrollTop_chars", $(this).scrollTop());
  });

  var listWrap = $("<div>").appendTo(listedChars);
  listWrap.addClass("fit-x flexcolumn flexmiddle");
  listWrap.css("position", "absolute");

  var charList = sync.render("ui_entList")(game.entities, app, {
    filter : "c",
    rights : "Visible",
    draw : function(ui, charObj) {
      if (hasSecurity(getCookie("UserID"), "Owner", charObj.data)) {
        var deleteButton = genIcon("trash").appendTo(ui);
        deleteButton.attr("title", "Delete Character");
        deleteButton.click(function() {
          var popOut = ui_prompt({
            target : $(this),
            id : "confirm-delete-char",
            confirm : "Delete Character",
            click : function(){
              runCommand("deleteAsset", {id: charObj.id()});
              delete game.entities.data[charObj.id()];
              game.entities.update();
            }
          });
        });
      }
    },
    click : function(ev, ui, charObj) {
      if (hasSecurity(getCookie("UserID"), "Visible", charObj.data)) {
        if (layout.mobile) {
          obj.removeApp(app);
          game.state.removeApp(app);
          app.attr("from", app.attr("ui-name"));
          app.attr("ui-name", "ui_characterSheet");
          if (!hasSecurity(getCookie("UserID"), "Rights", charObj.data)) {
            app.attr("viewOnly", "true");
          }
          else {
            game.players.data[getCookie("UserID")].entity = charObj.id();
            runCommand("selectPlayerEntity", {id : charObj.id()});
            app.removeAttr("viewOnly");
          }
          charObj.addApp(app);
        }
        else {
          if (!_down["16"]) {
            var newApp = sync.newApp("ui_characterSheet");
            newApp.attr("from", "ui_characterSummary");
            charObj.addApp(newApp);
            if (!hasSecurity(getCookie("UserID"), "Rights", charObj.data)) {
              newApp.attr("viewOnly", "true");
            }
            else {
              game.players.data[getCookie("UserID")].entity = charObj.id();
            }
            var pop = ui_popOut({
              target : app,
              id : "char-sheet-"+charObj.id(),
              title : sync.rawVal(charObj.data.info.name),
              minimize : true,
              dragThickness : "0.5em",
              style : {width : assetTypes["c"].width, height : assetTypes["c"].height},
            }, newApp);
            pop.resizable();
          }
          else {
            var newApp = sync.newApp("ui_characterSummary");
            charObj.addApp(newApp);
            if (!hasSecurity(getCookie("UserID"), "Rights", charObj.data)) {
              newApp.attr("viewOnly", "true");
            }
            else {
              game.players.data[getCookie("UserID")].entity = charObj.id();
            }
            var pop = ui_popOut({
              target : ui,
              id : "char-summary-"+charObj.id(),
              title : sync.rawVal(charObj.data.info.name),
              minimize : true,
              dragThickness : "0.5em",
            }, newApp);
            pop.resizable();
          }
        }
      }
    }
  });
  if (charList.children().length) {
    listWrap.append("<b class='subtitle'>Characters</b>");
  }
  charList.appendTo(listWrap);
  charList.addClass("fit-x dropContent");

  if (!layout.mobile) {
    charList.sortable({
      filter : ".charContent",
      connectWith : ".dropContent",
      update : function(ev, ui) {
        if ($(ui.item).attr("gID")) {
          var gp = game.entities.data[$(ui.item).attr("gID")];
          if (gp && gp.data.list) {
            for (var gKey in gp.data.list) {
              if (gp.data.list[gKey] == $(ui.item).attr("index")) {
                gp.data.list.splice(gKey, 1);
                gp.sync("updateGroup");
                break;
              }
            }
          }
        }
        if ($(ui.item).attr("src")) {
          if ($(ui.item).attr("src") == "state") {
            game.state.update(); // refresh the list
          }
          else if ($(ui.item).attr("src") == "players") {
            game.players.update(); // refresh the list
          }
          else {
            game.entities.data[$(ui.item).attr("src")].update(); // refresh the list
          }
        }
        game.entities.update(); // refresh the list
      }
    });
  }

  var vehList = sync.render("ui_entList")(game.entities, app, {
    filter : "v",
    rights : "Visible",
    draw : function(ui, charObj) {
      if (hasSecurity(getCookie("UserID"), "Owner", charObj.data)) {
        var deleteButton = genIcon("trash").appendTo(ui);
        deleteButton.attr("title", "Delete Vehicle");
        deleteButton.click(function() {
          var popOut = ui_prompt({
            target : $(this),
            id : "confirm-delete-vehicle",
            confirm : "Delete Vehicle",
            click : function(){
              runCommand("deleteAsset", {id: charObj.id()});
              delete game.entities.data[charObj.id()];
              game.entities.update();
            }
          });
        });
      }
    },
    click : function(ev, ui, charObj) {
      if (hasSecurity(getCookie("UserID"), "Visible", charObj.data)) {
        var newApp = sync.newApp("ui_vehicle");
        charObj.addApp(newApp);
        if (!hasSecurity(getCookie("UserID"), "Rights", charObj.data)) {
          newApp.attr("viewOnly", "true");
        }
        else {
          game.players.data[getCookie("UserID")].entity = charObj.id();
        }
        var pop = ui_popOut({
          target : app,
          id : "vehicle-sheet-"+charObj.id(),
          title : sync.rawVal(charObj.data.info.name),
          minimize : true,
          dragThickness : "0.5em",
          style : {"width" : "50vw", "height" : "40vh"},
        }, newApp);
        pop.resizable();
      }
    }
  });
  if (vehList.children().length) {
    listWrap.append("<b class='subtitle'>Vehicles</b>");
  }
  vehList.appendTo(listWrap);
  vehList.addClass("fit-x dropContent");

  if (!layout.mobile) {
    vehList.sortable({
      filter : ".charContent",
      connectWith : ".dropContent",
      update : function(ev, ui) {
        if ($(ui.item).attr("gID")) {
          var gp = game.entities.data[$(ui.item).attr("gID")];
          if (gp && gp.data.list) {
            for (var gKey in gp.data.list) {
              if (gp.data.list[gKey] == $(ui.item).attr("index")) {
                gp.data.list.splice(gKey, 1);
                gp.sync("updateGroup");
                break;
              }
            }
          }
        }
        if ($(ui.item).attr("src")) {
          if ($(ui.item).attr("src") == "state") {
            game.state.update(); // refresh the list
          }
          else if ($(ui.item).attr("src") == "players") {
            game.players.update(); // refresh the list
          }
          else {
            game.entities.data[$(ui.item).attr("src")].update(); // refresh the list
          }
        }
        game.entities.update(); // refresh the list
      }
    });
  }

  searchInput.keyup(function(){
    var inputVal = ($(this).val() || "").toLowerCase();
    app.attr("lastSearchTerm", ($(this).val() || ""));
    charList.children().show();
    charList.children().each(function(){
      var ent = game.entities.data[$(this).attr("index")];
      if (!(sync.rawVal(ent.data.info.name) || "").toLowerCase().match(inputVal)) {
        $(this).hide();
      }
    });
    vehList.children().show();
    vehList.children().each(function(){
      var ent = game.entities.data[$(this).attr("index")];
      if (!(sync.rawVal(ent.data.info.name) || "").toLowerCase().match(inputVal)) {
        $(this).hide();
      }
    });
  });

  var inputVal = (searchInput.val() || "").toLowerCase();
  app.attr("lastSearchTerm", (searchInput.val() || ""));
  charList.children().each(function(){
    var ent = game.entities.data[$(this).attr("index")];
    if (!(sync.rawVal(ent.data.info.name) || "").toLowerCase().match(inputVal)) {
      $(this).hide();
    }
  });
  vehList.children().each(function(){
    var ent = game.entities.data[$(this).attr("index")];
    if (!(sync.rawVal(ent.data.info.name) || "").toLowerCase().match(inputVal)) {
      $(this).hide();
    }
  });

  var groupWrap = $("<div>").appendTo(columnList);
  groupWrap.addClass("flex outline lpadding");
  groupWrap.css("overflow-y", "auto");
  groupWrap.css("position", "relative");
  groupWrap.attr("_lastScrollTop", app.attr("_lastScrollTop"));
  groupWrap.scroll(function(){
    app.attr("_lastScrollTop", $(this).scrollTop());
  });

  var groupList = $("<div>").appendTo(groupWrap);
  groupList.addClass("flexrow flexwrap flex");
  groupList.css("position", "absolute");

  var grouped = [];
  for (var index in obj.data) {
    var gData = obj.data[index];
    if (gData && gData.data["_t"] == "g" && hasSecurity(getCookie("UserID"), "Visible", gData.data)) {
      charCount = charCount + 1;
      var group = sync.newApp("ui_groupCard");
      group.attr("targetApp", app.attr("id"));
      group.css("width", "auto");
      group.css("display", "inline-block");
      group.css("margin", "0px 4px 0px 4px");
      gData.addApp(group);
      // get the group members and keep track of the ones that are in groups
      if (gData.data.list) {
        for (var i=0; i<gData.data.list.length; i++) {
          grouped.push(gData.data.list[i]);
        }
      }
      group.addClass("padding flex");
      group.css("min-width", "48%");
      group.removeClass("lightoutline");
      group.appendTo(groupList);
    }
  }

  counter.append("Limits : " + charCount + "/" + (game.config.data.entityLimit + game.config.data.capacity));

  return div;
});

sync.render("ui_rawNotes", function(obj, app, scope){
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};

  var div = $("<div>");
  div.addClass("flexcolumn flex");

  var notes = sync.render("ui_renderPage")(obj, app, {viewOnly : true}).appendTo(div);
  notes.addClass("flex");
  notes.removeClass("lpadding");
  notes.css("position", "relative");

  if (!scope.viewOnly) {
    var edit = genIcon("edit").appendTo(notes);
    edit.addClass("spadding subtitle glow");
    edit.attr("title", "Edit Notes");
    edit.css("position", "absolute");
    edit.css("top", "0");
    edit.css("right", "0");
    edit.click(function(){
      if (!layout.mobile) {
        var content = sync.newApp("ui_editPage");
        content.attr("saveClose", "character-notes-"+app.attr("id"));

        var popout = ui_popOut({
          id : "character-notes-"+app.attr("id"),
          title : sync.rawVal(obj.data.info.name),
          target : app,
          minimize : true,
          maximize : true,
          dragThickness : "0.5em",
          resizable : true,
          style : {width : "600px", height : "700px"}
        }, content);
        popout.css("padding", "0px");
        popout.addClass("floating-app");

        obj.addApp(content);
      }
      else {
        var frame = layout.page({title: "", blur : 0.5, width: "90%", id: "edit-char-notes"});
        frame.css("width", "95vw");

        var content = sync.newApp("ui_editPage");
        content.appendTo(frame);
        obj.addApp(content);
      }
    });
  }

  for (var key in scope.style) {
    notes.css(key, scope.style[key]);
  }

  return div;
});

sync.render("ui_rawNotesv2", function(obj, app, scope){
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};

  var div = $("<div>");
  div.addClass("flexcolumn flex");

  var notes = sync.render("ui_renderPage")(obj, app, {viewOnly : true}).appendTo(div);
  notes.addClass("flex");
  notes.removeClass("lpadding");
  notes.css("position", "relative");

  if (!scope.viewOnly) {
    var edit = genIcon("edit").appendTo(notes);
    edit.addClass("spadding subtitle glow");
    edit.attr("title", "Edit Notes");
    edit.css("position", "absolute");
    edit.css("top", "0");
    edit.css("right", "0");
    edit.click(function(){
      if (!layout.mobile) {
        var content = sync.newApp("ui_editPage");
        content.attr("saveClose", "character-notes-"+app.attr("id"));

        div.replaceWith(content);

        sync.updateApp(content, obj);
      }
      else {
        var frame = layout.page({title: "", blur : 0.5, width: "90%", id: "edit-char-notes"});
        frame.css("width", "95vw");

        var content = sync.newApp("ui_editPage");
        content.appendTo(frame);
        obj.addApp(content);
      }
    });
  }

  for (var key in scope.style) {
    notes.css(key, scope.style[key]);
  }

  return div;
});

sync.render("ui_characterNotes", function(obj, app, scope){
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};

  var div = $("<div>");
  div.addClass("flexcolumn flex");

  if (!scope.noPadding) {
    div.addClass("padding");
  }

  var notes = sync.render("ui_renderPage")(obj, app, {viewOnly : true}).appendTo(div);
  notes.addClass("outline smooth white padding flex");
  notes.css("position", "relative");
  if (scope.noOutline) {
    notes.removeClass("outline");
  }

  if (scope.removePadding) {
    notes.removeClass("padding");
  }

  if (!scope.viewOnly) {
    var edit = genIcon("edit").appendTo(notes);
    edit.addClass("spadding subtitle glow");
    edit.attr("title", "Edit Notes");
    edit.css("position", "absolute");
    edit.css("top", "0");
    edit.css("right", "0");
    edit.click(function(){
      if (!layout.mobile) {
        var content = sync.newApp("ui_editPage");
        content.attr("saveClose", "character-notes-"+app.attr("id"));

        var popout = ui_popOut({
          id : "character-notes-"+app.attr("id"),
          title : sync.rawVal(obj.data.info.name),
          target : app,
          minimize : true,
          maximize : true,
          dragThickness : "0.5em",
          resizable : true,
          style : {width : "600px", height : "700px"}
        }, content);
        popout.css("padding", "0px");
        popout.addClass("floating-app");

        obj.addApp(content);
      }
      else {
        var frame = layout.page({title: "", blur : 0.5, width: "90%", id: "edit-char-notes"});
        frame.css("width", "95vw");

        var content = sync.newApp("ui_editPage");
        content.appendTo(frame);
        obj.addApp(content);
      }
    });
  }

  for (var key in scope.style) {
    notes.css(key, scope.style[key]);
  }

  return div;
});

sync.render("ui_characterProficiency", function(obj, app, scope){
  var data = obj.data;
  var div = $("<div>");
  div.addClass("padding");
  
  var info = data.info;

  var title = $("<b class='flexmiddle'>"+(scope.name || "Proficiencies")+"</b>").appendTo(div);
  if (!scope.viewOnly) {
    var icon = genIcon("plus").appendTo(title);
    icon.addClass("create");
    icon.click(function() {
      ui_prompt({
        target : $(this),
        id : "add-proficincy",
        inputs : {
          "Name" : ""
        },
        click : function(ev, inputs) {
          data.proficient[inputs["Name"].val()] = true;
          obj.sync("updateAsset");
        }
      });
    });
  }

  var proficientList = $("<div>").appendTo(div);
  proficientList.addClass("subtitle");

  for (var index in data.proficient) {
    var infoPlate = $("<div>").appendTo(proficientList);
    infoPlate.addClass("flexbetween outline spadding");
    infoPlate.css("background-color", "white");

    var name = $("<b>").appendTo(infoPlate);
    name.append(index);

    if (scope.viewOnly) {
      infoPlate.css("background-color", "rgb(235,235,228)");
    }
    else {
      var icon = genIcon("remove").css("color", "red").appendTo(infoPlate);
      icon.css("text-align", "center");
      icon.attr("ref", index);
      icon.click(function() {
        delete data.proficient[$(this).attr("ref")];
        obj.sync("updateAsset");
      });
    }
  }

  return div;
});

// legacy support

sync.render("ui_characterSaves", function(obj, app, scope){
  var diceTemplates = game.templates.dice;
  var die = diceTemplates.pool[diceTemplates.defaults[0]].value;

  var data = obj.data;

  var counterDiv = $("<div>");
  counterDiv.addClass("flexaround");

  var counter = $("<div>").appendTo(counterDiv);
  counter.css("text-align", "center");
  counter.append("<div><b>Combat Maneuvers</b></div>");

  var savingDiv = $("<div>").appendTo(counter);
  savingDiv.addClass("flexrow flexmiddle");

  var content = $("<div>");
  content.addClass("flexcolumn flexmiddle");

  var bonus = genInput({
    parent : content,
    type : "number",
    value : data.counters.cmb,
    placeholder : "Custom",
    index : index,
    disabled : scope.viewOnly,
    raw : true,
    obj : obj,
    cmd : "updateAsset",
    style : {"width": "50px", "font-size" : "0.8em"}
  });

  var total = sync.val(data.counters.cmb);
  if (total >= 0) {
    total = "+" + total;
  }

  var context = {};
  context["b"] = savingObj;
  context["stat"] = index;
  context["statKey"] = statRef;
  context["c"] = obj.data;

  var statUI = ui_modified({
    parent : savingDiv,
    title : data.counters.cmb.name,
    value : data.counters.cmb,
    total : total,
    reveal : true,
    diceable : {
      msg : "@me.name+' Combat "+data.counters.cmb.name+"'",
      ui : "ui_statTest",
      data : "$die=d20;#roll=d20;{roll}+{c:counters:cmb}",
    },
    context : context,
  }, content);
  statUI.css("background-color", "white");

  var content = $("<div>");
  content.addClass("flexcolumn flexmiddle");

  var bonus = genInput({
    parent : content,
    type : "number",
    value : data.counters.cmd,
    placeholder : "Custom",
    index : index,
    disabled : scope.viewOnly,
    raw : true,
    obj : obj,
    cmd : "updateAsset",
    style : {"width": "50px", "font-size" : "0.8em"}
  });

  var total = sync.val(data.counters.cmd);
  if (total >= 0) {
    total = "+" + total;
  }

  var statUI = ui_modified({
    parent : savingDiv,
    title : data.counters.cmd.name,
    value : data.counters.cmd,
    total : total,
    reveal : true,
    diceable : {
      msg : "@me.name+' Combat "+data.counters.cmd.name+"'",
      ui : "ui_statTest",
      data : "$die=d20;#roll=d20;{roll}+{c:counters:cmd}",
    },
    context : context,
  }, content);

  statUI.css("background-color", "white");

  var counter = $("<div>").appendTo(counterDiv);
  counter.css("text-align", "center");
  counter.append("<div><b>" + data.counters.saving.name +"</b></div>");

  var savingDiv = $("<div>").appendTo(counter);
  savingDiv.addClass("flexmiddle flexwrap");

  for (var index in data.counters.saving.current) {
    var statRef = data.stats[index];
    var savingObj = data.counters.saving.current[index];
    if (statRef && savingObj) {
      sync.modifier(savingObj, statRef.name, sync.modified(statRef, 0));

      var content = $("<div>");
      content.addClass("flexcolumn flexmiddle");

      var bonus = genInput({
        parent : content,
        type : "number",
        value : sync.rawVal(savingObj),
        placeholder : "Bonus",
        index : index,
        disabled : scope.viewOnly,
        raw : true,
        style : {"width": "50px", "font-size" : "0.8em"}
      });
      bonus.change(function(){
        sync.rawVal(data.counters.saving.current[$(this).attr("index")], parseInt($(this).val()));
        obj.sync("updateAsset");
      });

      var total = sync.val(savingObj);
      if (total >= 0) {
        total = "+" + total;
      }

      var context = {};
      context["saving"] = savingObj;
      context["stat"] = index;
      context["statKey"] = statRef;
      context["c"] = obj.data;

      var statUI = ui_modified({
        parent : savingDiv,
        title : savingObj.name,
        value : savingObj,
        total : total,
        reveal : true,
        diceable : {
          msg : "@me.name+' Saving Throw("+index+")'",
          ui : "ui_statTest",
          data : "$die=d20;#roll=d20;{roll}+{saving}"
        },
        context : context,
      }, content);
      statUI.css("background-color", "white");
    }
  }
  return counterDiv;
});

sync.render("ui_characterSavesProf", function(obj, app, scope){
  var diceTemplates = game.templates.dice;
  var die = diceTemplates.pool[diceTemplates.defaults[0]].value;

  var data = obj.data;

  var counterDiv = $("<div>");
  counterDiv.addClass("flexaround flexwrap");

  var counter = $("<div>").appendTo(counterDiv);
  counter.css("text-align", "center");
  counter.append("<div><b>" + data.counters.saving.name +"</b></div>");

  var savingDiv = $("<div>").appendTo(counter);
  savingDiv.addClass("flexmiddle flexwrap");

  for (var index in data.counters.saving.current) {
    var statRef = data.stats[index];
    var savingObj = data.counters.saving.current[index];

    if (statRef && savingObj) {
      if ((sync.modified(statRef, 0) || 0)) {
        sync.modifier(savingObj, statRef.name, (sync.modified(statRef, 0) || 0));
      }

      var content = $("<div>");
      content.addClass("flexcolumn flexmiddle");

      var checkWrapper = $("<div>").appendTo(content);
      checkWrapper.css("width", "auto");
      checkWrapper.addClass("flexmiddle");

      var check = genInput({
        parent : checkWrapper,
        type : "checkbox",
        value : sync.rawVal(savingObj),
        index : index,
        disabled : scope.viewOnly
      });
      check.hover(function(){
        var pop = ui_popOut({
          target : $(this),
          align : "top",
          id : "prof-popout",
          hideclose : true,
        }, "<t style='font-size : 0.8em'>Proficient</t>");
        pop.removeClass("boxshadow");
      },
      function(){
        $("#prof-popout").remove();
      });
      if (sync.rawVal(savingObj) > 0) {
        sync.modifier(savingObj, data.counters.proficiency.name, (sync.val(data.counters.proficiency) || 0));
        check.prop("checked", true);
      }
      check.css("margin", "0");
      check.change(function() {
        if ($(this).prop("checked")) {
          sync.rawVal(data.counters.saving.current[$(this).attr("index")], 1);
        }
        else {
          sync.rawVal(data.counters.saving.current[$(this).attr("index")], "");
          sync.removeModifier(data.counters.saving.current[$(this).attr("index")], data.counters.proficiency.name);
        }
        obj.sync("updateAsset");
      });

      var bonus = genInput({
        parent : checkWrapper,
        type : "number",
        value : (sync.modifier(savingObj, "Bonus") || 0),
        placeholder : "Bonus",
        index : index,
        disabled : scope.viewOnly,
        style : {"width": "50px", "font-size" : "0.8em",}
      });
      bonus.change(function(){
        sync.modifier(data.counters.saving.current[$(this).attr("index")], "Bonus", parseInt($(this).val()));
        obj.sync("updateAsset");
      });

      var total = sync.modified(savingObj, 0);
      if (total >= 0) {
        total = "+" + total;
      }

      var context = {};
      context["saving"] = savingObj;
      context["stat"] = index;
      context["statKey"] = statRef;
      context["c"] = obj.data;

      var statUI = ui_modified({
        parent : savingDiv,
        title : statRef.name,
        value : savingObj,
        click : function(ev, ui, options) {
          sync.removeModifier(options.value, ui.attr("index"));
          obj.sync("updateAsset");
        },
        total : total,
        reveal : true,
        diceable : {
          msg : "@me.name+' Saving Throw("+index+")'",
          ui : "ui_statTest",
          data : "$die=d20;#roll=d20;{roll}+M{saving}"
        },
        context : context,
      }, content);
      statUI.css("background-color", "white");
    }
  }
  return counterDiv;
});

function charClick(ev, ui, charObj, obj, app, scope) {
  if (hasSecurity(getCookie("UserID"), "Visible", charObj.data)) {
    if (charObj.data._t == "c" && _down[17] && !isNaN(charObj.id())) {
      if (ui.parent().hasClass("card-selected")) {
        ui.parent().removeClass("card-selected");
        util.untarget(charObj.id());
        sendAlert({text : "Released Target"});
      }
      else {
        ui.parent().addClass("card-selected");
        util.target(charObj.id());
        sendAlert({text : "Targeted"});
      }
      return true;
    }
    else {
      if (layout.mobile) {
        obj.removeApp(app);
        game.entities.removeApp(app);
        app.attr("from", app.attr("ui-name"));
        app.attr("ui-name", "ui_characterSheetv2");
        if (!hasSecurity(getCookie("UserID"), "Rights", charObj.data)) {
          app.attr("viewOnly", "true");
        }
        else {
          game.players.data[getCookie("UserID")].entity = charObj.id();
          runCommand("selectPlayerEntity", {id : charObj.id()});
          app.removeAttr("viewOnly");
        }
        charObj.addApp(app);
      }
      else {
        if (!_down["16"]) {
          var newApp = sync.newApp("ui_characterSheetv2");
          newApp.attr("from", "ui_characterSummary");
          if (!hasSecurity(getCookie("UserID"), "Rights", charObj.data)) {
            newApp.attr("viewOnly", "true");
          }
          charObj.addApp(newApp);
          var pop = ui_popOut({
            target : ui,
            id : "char-sheet-"+charObj.id(),
            title : sync.rawVal(charObj.data.info.name),
            minimize : true,
            dragThickness : "0.5em",
            style : {width : assetTypes["c"].width, height : assetTypes["c"].height},
          }, newApp);
          pop.resizable();
        }
        else {
          var newApp = sync.newApp("ui_characterSummary");
          if (!hasSecurity(getCookie("UserID"), "Rights", charObj.data)) {
            newApp.attr("viewOnly", "true");
          }
          charObj.addApp(newApp);
          var pop = ui_popOut({
            target : ui,
            id : "char-summary-"+charObj.id(),
            title : sync.rawVal(charObj.data.info.name),
            minimize : true,
            dragThickness : "0.5em",
          }, newApp);
          pop.resizable();
        }
      }
    }
  }
}

function createCharacter(charData, dontRoll, returnCreate, noResults, popup, supressCreate) {
  var nameBank = util.nameBank;
  var rolled = {stats : {}, counters : {}};
  var rollResult = $("<div>");
  rollResult.addClass("flexcolumn");
  rollResult.css("font-size", "1.2em");
  var appendStats = false;
  if (!dontRoll) {
    for (var i in charData.stats) {
      var stat = charData.stats[i];
      for (var j in stat.modifiers) {
        stat.current = (stat.current || "0") + "+" + stat.modifiers[j];
      }
      var results = sync.executeQuery(String(stat.current), charData);
      var totalStr = "";
      var total = 0;

      for (var d in results.equations) {
        totalStr += results.equations[d].r + "+";
        total += results.equations[d].v;
      }
      if (stat.current != totalStr.substring(0,totalStr.length-1)) {
        if (!appendStats) {
          rollResult.append("<b>Stats</b>");
          appendStats = true;
        }
        rolled.stats[i] = "<b>"+stat.name+"</b><li class='subtitle' style='margin-left:1.5em; margin-right:1.5em;'>"+stat.current+" = "+totalStr.substring(0,totalStr.length-1)+" = " + total;
        rollResult.append("<div class='subtitle'>"+rolled.stats[i]+"</li></div>");
      }
      stat.current = total;
      if (stat.max != null && stat.current > stat.max) {
        stat.max = stat.current;
      }
      stat.modifiers = {};
    }

    var appendCounter = false;
    for (var i in charData.counters) {
      var counter = charData.counters[i];
      for (var j in counter.modifiers) {
        counter.current = (counter.current || "0") + "+" + counter.modifiers[j];
      }
      if (!(counter.current instanceof Object) && i != "hit") {
        var results = sync.executeQuery(String(counter.current), charData);
        var totalStr = "";
        var total = 0;
        for (var d in results.equations) {
          totalStr += results.equations[d].r + "+";
          total += results.equations[d].v;
        }
        if (counter.current != totalStr.substring(0,totalStr.length-1)) {
          if (!appendCounter) {
            rollResult.append("<b>Counters</b>");
          }
          rolled.counters[i] = "<b>"+counter.name+"</b><li class='subtitle' style='margin-left:1.5em; margin-right:1.5em;'>"+counter.current+" = "+totalStr.substring(0,totalStr.length-1)+" = " + total;
          rollResult.append("<div class='subtitle'>"+rolled.counters[i]+"</li></div>");
          appendCounter = true;
        }

        var diceRoll = false;
        if (counter.current && String(counter.current).match(diceRegex)) {
          diceRoll = true;
        }

        counter.current = sync.eval(counter.current);
        if (diceRoll) {
          counter.max = sync.modified(counter.current, 0);
        }
        if (counter.max != null && counter.current > counter.max) {
          counter.max = counter.current;
        }
        counter.modifiers = {};
      }
    }
    sync.rawVal(charData.info.name, nameBank[Math.floor(nameBank.length * Math.random())]);
  }
  if (!supressCreate) {
    game.locals["newAssetList"] = game.locals["newAssetList"] || [];
    var lastKeys = Object.keys(game.entities.data);
    game.entities.listen["newAsset"] = function(rObj, newObj, target) {
      var change = true;
      for (var key in game.entities.data) {
        if (!util.contains(lastKeys, key)) {
          game.locals["newAssetList"].push(key);
          if (!charData._flags || !charData._flags["temp"]) {
            if (popup !== false) {
              assetTypes["c"].preview(getEnt(key), $("body"));
            }
          }
          change = false;
        }
      }
      return change;
    }
    if (!game.config.data.offline) {
      runCommand("createCharacter", charData);
    }
    else {
      game.entities.data["tempObj"+game.config.data.offline] = sync.obj("tempObj"+game.config.data.offline);
      game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
      game.entities.data["tempObj"+game.config.data.offline++].data = duplicate(charData);
      game.entities.update();
    }
  }
  if (returnCreate) {
    return charData;
  }
}

sync.render("ui_characterSheetv2", function(obj, app, scope){
  if (!game.templates.build) {
    return sync.render("ui_characterSheet")(obj, app, scope);
  }

  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");

  if (!obj || !obj.data || obj.data["_t"] != "c") {
    if (app && layout.mobile) {
      app.attr("ui-name", "ui_assetManager");
      game.entities.addApp(app);
    }
    return div;
  }

  scope = scope || {
    viewOnly: (app.attr("viewOnly") == "true"),
    local : (app.attr("local") == "true"),
    markup : app.attr("markup") == "true",
    editing : app.attr("editing") == "true",
  };

  obj.data._flags = obj.data._flags || duplicate(obj.data.tags || {});

  var sheet = scope.sheet;
  if (app.attr("homebrew")) {
    sheet = sheet || game.locals["homebrew"].data.templates.display.actors[obj.data._type] || {};
  }
  else {
    sheet = sheet || game.templates.display.actors[obj.data._type] || game.templates.display.actors[Object.keys(game.templates.display.actors)[0]] || {};
  }

  var ctx = sync.defaultContext();
  ctx["c"] = obj.data;

  if (app.attr("attributes")) {
    div.removeClass("flexcolumn");
    div.addClass("foreground");
    div.css("overflow", "auto");
    div.scroll(function(){
      app.attr("_lastScrollTop", div.scrollTop());
      app.attr("_lastScrollLeft", div.scrollLeft());
    });

    var buttonList = $("<div>").appendTo(div);
    buttonList.addClass("flexrow foreground flexbetween subtitle");
    buttonList.css("margin-bottom", "1em");

    var reset = $("<button>").appendTo(buttonList);
    reset.addClass("highlight lrpadding alttext flexmiddle");
    reset.text("Back to Sheet");
    reset.click(function(){
      app.removeAttr("attributes");
      obj.update();
    });

    var template = {stats : "", info : "", counters : ""};
    if (!game.templates.build) {
      template["skills"] = "";
    }
    if (game.templates.display.actors[obj.data._type] && game.templates.display.actors[obj.data._type].categories) {
      template = {};
      for (var k in game.templates.display.actors[obj.data._type].categories) {
        template[k] = game.templates.display.actors[obj.data._type].categories[k];
      }
    }

    var reset = $("<button>").appendTo(buttonList);
    reset.addClass("background lrpadding alttext flexmiddle");
    reset.text("Load Attributes");
    reset.click(function(){
      var content = sync.render("ui_assetPicker")(obj, app, {
        category : "c",
        filter : "c",
        select : function(ev, ui, ent, options, entities){
          if (ent.data) {
            var newData = duplicate(ent.data);
            for (var i in newData) {
              if (i && String(i)[0] == "_") {
                delete newData;
              }
            }
            merge(obj.data, newData, true);
            if (app.attr("homebrew") && game.templates.build) {
              game.locals["homebrew"].data.previewChar[obj.data._type] = duplicate(obj.data);
              game.locals["homebrew"].data.templates.actors[obj.data._type] = duplicate(obj.data);
            }
            obj.update();
          }
          layout.coverlay("add-asset");
        }
      });
      var pop = ui_popOut({
        target : $("body"),
        prompt : true,
        id : "add-asset",
        title : "Pick Sheet",
        style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
      }, content);
      pop.resizable();
    });

    var keys = {};
    for (var key in template) {
      var path = key;

      var attrPlate = $("<div>").appendTo(div);
      attrPlate.addClass("lrpadding lrmargin");
      attrPlate.css("font-size", "1.2em");
      attrPlate.append("<u class='bold lrpadding lrmargin alttext'>"+key+"</b>");

      var attrWrap = $("<div>").appendTo(attrPlate);
      attrWrap.addClass("flexcolumn subtitle white outline smooth lpadding");
      attrWrap.css("margin-bottom", "1em");
      if (template[key] == "") {
        var headerRow = $("<div>").appendTo(attrWrap);
        headerRow.addClass("flexrow padding");
        headerRow.append("<u class='subtitle flexmiddle lrmargin' style='width:100px'>Macro Key</u>");
        headerRow.append("<u class='flex subtitle flexmiddle lrmargin' style='width:100px'>Name</u>");
        headerRow.append("<u class='flex2 subtitle flexmiddle lrmargin' style='width:100px'>Value</u>");
        headerRow.append("<u class='subtitle flexmiddle lrmargin' style='width:40px'>Min</u>");
        headerRow.append("<u class='subtitle flexmiddle lrmargin' style='width:40px'>Max</u>");
        headerRow.append("<u class='subtitle flexmiddle lrmargin' style='width:70px'>Modifiers</u>");
        headerRow.append(genIcon("remove").addClass("lrpadding lrmargin").css("color", "transparent"));
        for (var subKey in obj.data[key]) {
          path = key + "." + subKey;
          if (path != "info.notes" && path != "info.img" && path != "info.name") {
            var attrOption = $("<div>").appendTo(attrWrap);
            attrOption.addClass("flexrow padding");
            if (!keys[subKey]) {
              attrOption.append("<text class='subtitle flexmiddle' style='width:100px'>@"+subKey+"</text>");
              keys[subKey] = true;
            }
            else {
              attrOption.append("<text class='subtitle flexmiddle' style='width:100px'>@c."+path+"</text>");
            }

            var name = genInput({
              parent : attrOption,
              classes : "line subtitle lrmargin middle",
              value : obj.data[key][subKey],
              cmd : "updateAsset",
              obj : obj,
              name : true,
              style : {"width" : "150px"}
            });

            var value = genInput({
              parent : attrOption,
              classes : "line subtitle flex2 lrmargin middle",
              value : obj.data[key][subKey],
              cmd : "updateAsset",
              obj : obj,
            });

            var min = genInput({
              parent : attrOption,
              classes : "line subtitle lrmargin middle",
              value : obj.data[key][subKey],
              style : {"width" : "40px"},
              cmd : "updateAsset",
              obj : obj,
              raw : "min",
            });

            var max = genInput({
              parent : attrOption,
              classes : "line subtitle lrmargin middle",
              value : obj.data[key][subKey],
              style : {"width" : "40px"},
              cmd : "updateAsset",
              obj : obj,
              raw : "max"
            });

            var remove = genIcon("list-alt", "Mods").appendTo(attrOption);
            remove.addClass("flexmiddle lrmargin lrpadding");
            remove.attr("path", path);
            remove.css("width", "70px");
            remove.click(function(){
              var path = $(this).attr("path");

              var content = sync.newApp("ui_modifiers");
              content.attr("viewOnly", scope.viewOnly);
              content.attr("lookup", path);
              content.attr("modsOnly", "true");
              obj.addApp(content);

              ui_popOut({
                target : $(this),
                align : "top",
                title : "Modifiers",
                id : "modify-exp",
                style : {"min-width" : "100px"},
              }, content);
            });

            var remove = genIcon("remove").appendTo(attrOption);
            remove.addClass("destroy flexmiddle lrmargin lrpadding");
            remove.attr("path", path);
            remove.click(function(){
              var path = $(this).attr("path");

              ui_prompt({
                target : $(this),
                confirm : "Delete Attribute",
                click : function(){
                  sync.traverse(obj.data, path, "");
                  obj.sync("updateAsset");
                }
              });
            });
          }
        }

        var headerRow = genIcon("plus", "New Attribute").appendTo(attrWrap);
        headerRow.addClass("flexmiddle fit-x create");
        headerRow.attr("category", key);
        headerRow.click(function(){
          var category = $(this).attr("category");

          var invalidKeys = {
            "length" : "system",
          }; // invalid keys

          for (var key in obj.data) {
            invalidKeys[key] = key;
          }
          for (var key in obj.data.info) {
            invalidKeys[key] = "info."+key;
          }
          for (var key in obj.data.counters) {
            invalidKeys[key] = "counters."+key;
          }
          for (var key in obj.data.stats) {
            invalidKeys[key] = "stats."+key;
          }

          ui_prompt({
            target : $(this),
            inputs : {
              "Macro Key" : "",
            },
            click : function(ev, inputs){
              var path = inputs["Macro Key"].val();
              if (path && path != "notes" && path != "img" && path != "name" && isNaN(path)) {
                path = replaceAll(path, " ", "_");
                path = replaceAll(path, "@", "");
                path = replaceAll(path, "(", "_");
                path = replaceAll(path, ")", "_");
                path = replaceAll(path, "[", "_");
                path = replaceAll(path, "]", "_");
                path = replaceAll(path, "!", "_");
                path = replaceAll(path, "#", "_");
                path = replaceAll(path, "$", "_");
                if (invalidKeys[path]) {
                  sendAlert({text : "This key is used somewhere else"});
                }
                else {
                  obj.data[category] = obj.data[category] || {};
                  obj.data[category][path] = {};
                  obj.sync("updateAsset");
                }
              }
            }
          });
        });
      }
      else {
        sync.render("ui_processUI")(obj, app, {display : template[key]}).appendTo(attrWrap);
      }
    }

    return div;
  }

  if (app.attr("viewingActions")) {
    div.css("overflow", "auto");
    div.scroll(function(){
      app.attr("_lastScrollTop", div.scrollTop());
      app.attr("_lastScrollLeft", div.scrollLeft());
    });

    var buttonList = $("<div>").appendTo(div);
    buttonList.addClass("flexrow foreground flexbetween subtitle");

    var reset = $("<button>").appendTo(buttonList);
    reset.addClass("highlight lrpadding alttext flexmiddle");
    reset.text("Back to Sheet");
    reset.click(function(){
      app.removeAttr("viewingActions");
      obj.update();
    });

    var reset = $("<button>").appendTo(buttonList);
    reset.addClass("highlight lrpadding alttext flexmiddle");
    reset.text("Restore to Default Hotbar");
    reset.click(function(){
      obj.data._hud = duplicate(game.templates.actors[obj.data._type]._hud);
      obj.sync("updateAsset");
    });

    sync.render("ui_manageActionsv2")(obj, app, scope).appendTo(div);

    return div;
  }

  if (app.attr("viewingData")) {
    var calcs = duplicate(obj.data._calc || sheet.calc || []);

    var buttonList = $("<div>").appendTo(div);
    buttonList.addClass("flexrow foreground subtitle flexbetween");

    if (hasSecurity(getCookie("UserID"), "Rights", obj.data) || app.attr("homebrew")) {
      var confirm = $("<button>").appendTo(buttonList);
      confirm.addClass("highlight alttext flexmiddle");
      confirm.text("Save");
      confirm.click(function(){
        obj.data._calc = calcs;

        app.removeAttr("viewingData");
        obj.sync("updateAsset");
      });
    }

    var discard = $("<button>").appendTo(buttonList);
    discard.addClass("highlight alttext flexmiddle");
    discard.text("Discard Changes");
    discard.click(function(){
      app.removeAttr("viewingData");
      obj.update();
    });


    if (!app.attr("homebrew")) {
      var reset = $("<button>").appendTo(buttonList);
      reset.addClass("highlight lrpadding alttext flexmiddle");
      reset.text("Clear");
      reset.click(function(){
        obj.data._calc = [];

        obj.update();
      });
    }

    if (!app.attr("homebrew")) {
      var reset = $("<button>").appendTo(buttonList);
      reset.addClass("highlight lrpadding alttext flexmiddle");
      reset.text("Reset to Default");
      reset.click(function(){
        delete obj.data._calc;

        app.removeAttr("viewingData");
        obj.sync("updateAsset");
      });
    }

    var header = $("<highlight>").appendTo(div);
    header.addClass("fit-x flexmiddle");
    header.text("Automatic Calculations");

    var calcWrapper = $("<div>").appendTo(div);
    calcWrapper.addClass("flexcolumn margin flex outline smooth");
    calcWrapper.css("position", "relative");
    calcWrapper.css("overflow-y", "auto");

    var calcList = $("<div>").appendTo(calcWrapper);
    calcList.addClass("fit-x");
    calcList.css("position", "absolute");
    calcList.css("top", "0");
    calcList.css("left", "0");

    if (!obj.data._calc) {
      calcList.css("opacity", "0.25");
      calcList.css("pointer-events", "none");

      var calcDefault = $("<highlight>").appendTo(calcWrapper);
      calcDefault.addClass("fit-xy flexcolumn flexmiddle");
      calcDefault.append("<text>System Calculations</text><br><text class='subtitle'>Click to overwrite system</text>");
      calcDefault.click(function(){
        calcDefault.remove();
        calcList.css("opacity", "");
        calcList.css("pointer-events", "");
      });
    }
    sync.render("ui_math")(obj, app, {calc : calcs}).appendTo(calcList);

    var warning = $("<i>").appendTo(div);
    warning.addClass("flexmiddle subtitle bold")
    warning.text("Calculations that are applied automatically after a sheet has been changed. Calculations are applied in sequential order, allowing you to reference a value affected by a previous calculation");

    return div;
  }

  if (app.attr("viewingNotes")) {
    var content = sync.newApp("ui_editPage").appendTo(div);
    content.attr("targetApp", app.attr("id"));
    obj.addApp(content);

    return div;
  }

  if (app.attr("viewingRights")) {
    var buttonList = $("<div>").appendTo(div);
    buttonList.addClass("flexrow foreground");
    buttonList.css("margin-bottom", "1em");

    var reset = $("<button>").appendTo(buttonList);
    reset.addClass("highlight lrpadding alttext flexmiddle");
    reset.text("Back to Sheet");
    reset.click(function(){
      app.removeAttr("viewingRights");
      obj.update();
    });

    var content = sync.newApp("ui_rights").appendTo(div);
    content.attr("viewOnly", scope.viewOnly);
    content.attr("last_rights", "indv");
    obj.addApp(content);

    return div;
  }

  if (!app.attr("homebrew") && !scope.editing) {
    var calc = obj.data._calc || sheet.calc || [];
    for (var i=0; i<calc.length; i++) {
      if (!calc[i].cond || sync.eval(calc[i].cond, ctx)) {
        var val = sync.eval(calc[i].eq, ctx);
        var target = sync.traverse(obj.data, calc[i].target);
        if (target instanceof Object) {
          sync.rawVal(target, val);
        }
        else {
          sync.traverse(obj.data, calc[i].target, val);
        }
      }
    }
    for (var key in game.templates.hudLookups) {
      var listKey = game.templates.hudLookups[key];
      var list = sync.traverse(obj.data, listKey);
      if (list) {
        for (var id in list) {
          var itemData = list[id];
          ctx["i"] = itemData;
          var calc = itemData._calc || [];
          for (var i=0; i<calc.length; i++) {
            if (calc[i].cond == null || sync.eval(calc[i].cond, ctx)) {
              var val = sync.eval(calc[i].eq, ctx);
              var target = sync.traverse(obj.data, calc[i].target);
              if (target instanceof Object) {
                sync.rawVal(target, val);
              }
              else {
                sync.traverse(obj.data, calc[i].target, val);
              }
            }
          }
        }
      }
    }
    delete ctx["i"];
  }

  var data = obj.data || {info : {}};

  if (!scope.viewOnly) {
    div.on("dragover", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      if (_dragTransfer) {
        var olay = layout.overlay({
          target : app,
          id : app.attr("id")+"-drag-overlay",
          style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
        });
        olay.addClass("flexcolumn flexmiddle alttext");
        olay.css("font-size", "2em");
        olay.css("z-index", util.getMaxZ(".ui-popout")+1);
        if (_dragTransfer.roll) {
          olay.addClass("focus");
          olay.append("<b>Targeting</b>");
        }
      }
      else if (!$("#"+app.attr("id")+"-drag-overlay").length) {
    		var olay = layout.overlay({
          target : app,
          id : app.attr("id")+"-drag-overlay",
          style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
        });
        olay.addClass("flexcolumn flexmiddle alttext");
        olay.css("font-size", "2em");
        olay.css("z-index", util.getMaxZ(".ui-popout")+1);
        olay.append("<b>Drop to Create</b>");
      }
    });
    div.droppable();
    div.on('drop', function(ev, ui){
      ev.preventDefault();
      ev.stopPropagation();
      if (_dragTransfer) {
        if (_dragTransfer.roll) {
          optionsBar.addClass("card-selected");
          sendAlert({text : "Targeted " + sync.rawVal(obj.data.info.name)});
          var pop = ui_dropMenu(app, util.buildActions(_dragTransfer.roll), {id : "dice-action", align : "center", style : {"font-size" : "1.6em"}});
        }
      }
      else {
        var dt = ev.originalEvent.dataTransfer||$(ui.draggable).data("dt");
        if (hook.call("OnDropCharacter", obj, app, scope, dt)) {
          if (dt && dt.getData("OBJ")) {
            var ent = JSON.parse(dt.getData("OBJ"));
            if (ent._t == "i") {
              if (ent._drop) {
                var list = sync.traverse(obj.data, ent._drop);
                if (!ent._dropKey && Array.isArray(list)) {
                  list.push(ent);
                }
                else if (list && list instanceof Object) {
                  var ui = $(this);
                  if (!ent._dropKey) {
                    ui_prompt({
                      inputs : {"Unique Key" : ""},
                      click: function(ev, inputs){
                        ent._dropKey = inputs["Unique Key"].val().toLowerCase().replace(/ /g,"_");
                        if (list[ent._dropKey]) {
                          ui_dropMenu(ui, [{name : "Overwrite?", click : function(){list[ent._dropKey] = ent; obj.sync("updateAsset");}}], {id : "quick-sheet-drop", hideClose : true, "z-index" : util.getMaxZ(".ui-popout")+1});
                        }
                        else {
                          list[ent._dropKey] = ent;
                        }
                      }
                    });
                    return;
                  }
                  else {
                    if (list[ent._dropKey]) {
                      ui_dropMenu(ui, [{name : "Overwrite?", click : function(){list[ent._dropKey] = ent; obj.sync("updateAsset");}}], {id : "quick-sheet-drop", hideClose : true, "z-index" : util.getMaxZ(".ui-popout")+1});
                      return;
                    }
                    else {
                      list[ent._dropKey] = ent;
                    }
                  }
                }
              }
            }
            else if (dt.getData("target")) {
              obj.data[dt.getData("target")][dt.getData("key")] = ent;
            }
            obj.sync("updateAsset");
          }
        }
      }

      layout.coverlay(app.attr("id")+"-drag-overlay");
    });
  	div.on("dragleave", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      layout.coverlay(app.attr("id")+"-drag-overlay");
  	});
  }

  var info = data.info;
  if (!scope.local) {
    var optionsBar = $("<div>").appendTo(div);
    optionsBar.addClass("flexwrap flexbetween background boxinshadow alttext");
    optionsBar.css("color", "white");
    optionsBar.attr("index", obj.id());
    div.contextmenu(function(ev){
      if (!_down["16"]) {
        var menu = assetTypes.contextmenu(ev, optionsBar, obj, app, scope);
        menu.css("left", ev.pageX - 10);
        menu.css("top", ev.pageY - 10);
        util.windowBound(menu);
        return false;
      }
    });

    if (app.attr("simpleEditing")) {
      if (hasSecurity(getCookie("UserID"), "Rights", obj.data) || app.attr("homebrew")) {
        var quickSheet = $("<button>").appendTo(optionsBar);
        quickSheet.addClass("highlight subtitle alttext");
        quickSheet.text("Stop Editing");
        quickSheet.click(function(){
          if (obj.data._d && !app.attr("homebrew")) {
            if (JSON.stringify(obj.data._d.content) == JSON.stringify(game.templates.display.actors[obj.data._type].content)) {
              if (JSON.stringify(obj.data._d.style) == JSON.stringify(game.templates.display.actors[obj.data._type].style)) {
                delete obj.data._d;
              }
            }
          }
          app.removeAttr("simpleEditing");
          obj.sync("updateAsset");
        });

        var modeBar = $("<div>").appendTo(optionsBar)
        modeBar.addClass("flexrow");
        modeBar.css("color", "#333");
        modeBar.css("text-shadow", "none");

        var quickSheet = $("<button>").appendTo(modeBar);
        quickSheet.addClass("button subtitle");
        quickSheet.text("Paint Mode");
        if (app.attr("boxPaint")) {
          if ((obj.data._d && obj.data._d.content instanceof Object) || (!obj.data._d && sheet.content instanceof Object)) {
            quickSheet.removeClass("button").addClass("highlight alttext");
          }
        }
        quickSheet.click(function(){
          if (obj.data._d && !(obj.data._d.content instanceof Object)) {
            obj.data._d.content = {display : []};
          }
          else if (!obj.data._d) {
            obj.data._d = {style : duplicate(sheet.style) || {}, content : {classes : "flexcolumn flex padding", display : []}};
          }
          if (app.attr("boxPaint")) {
            app.removeAttr("boxPaint");
          }
          else {
            app.attr("boxPaint", true);
          }
          obj.update();
        });

        var quickSheet = $("<button>").appendTo(modeBar);
        quickSheet.addClass("button subtitle");
        quickSheet.text("Build Mode");
        if (!app.attr("boxPaint")) {
          if ((obj.data._d && obj.data._d.content instanceof Object) || (!obj.data._d && sheet.content instanceof Object)) {
            quickSheet.removeClass("button").addClass("highlight alttext");
          }
        }
        quickSheet.click(function(){
          if (obj.data._d && !(obj.data._d.content instanceof Object)) {
            obj.data._d.content = {display : []};
          }
          else if (!obj.data._d) {
            obj.data._d = {style : duplicate(game.templates.display.sheet.style) || {}, content : {classes : "flexcolumn flex padding", display : []}};
          }
          if (app.attr("boxPaint")) {
            app.removeAttr("boxPaint");
          }
          else {
            app.attr("boxPaint", true);
          }
          obj.update();
        });


        var quickSheet = $("<button>").appendTo(modeBar);
        quickSheet.addClass("button subtitle");
        quickSheet.text("HTML Mode");

        if ((obj.data._d && !(obj.data._d.content instanceof Object)) || !(sheet.content instanceof Object)) {
          quickSheet.removeClass("button").addClass("highlight alttext");
        }
        quickSheet.click(function(){
          var content = $("<div>");
          content.addClass("flexcolumn fit-xy");

          var select = genInput({
            parent : content,
            type : "textarea",
            classes : "flex subtitle",
            id : app.attr("id") + "-html-edit"
          });
          if (obj.data._d && !(obj.data._d.content instanceof Object)) {
            select.text(obj.data._d.content);
          }
          else if (!(sheet.content instanceof Object)) {
            select.text(sheet.content);
          }
          select.change(function(){
            obj.data._d.content = $(this).val();
            obj.update();
          });

          var button = $("<button class='fit-x spadding'>Confirm</button>");
          content.append(button);

          setTimeout(function(){
            var editor = ace.edit(app.attr("id") + "-html-edit");
            editor.setTheme("ace/theme/monokai");
            $(editor.container).css("margin","0");
            $(editor.container).addClass("flex");
            $(editor.container).hover(function(){
              editor.resize();
            });
            editor.session.setMode("ace/mode/html");
            editor.setOptions({
              autoScrollEditorIntoView: true,
              useWorker: false
            });

            button.click(function(){
              obj.data._d.content = editor.getValue();
              obj.update();
            });
          }, 100);


          var popout = ui_popOut({
            target : $("body"),
            id : "json-editor",
            style : {"width" : "600px", "height" : "600px"}
          }, content);
          popout.resizable();
        });


        var quickSheet = $("<button>").appendTo(optionsBar);
        quickSheet.addClass("background subtitle alttext");
        quickSheet.text("Sheet Background");
        quickSheet.click(function(){
          var imgList = sync.render("ui_filePicker")(obj, app, {
            filter : "img",
            change : function(ev, ui, value){
              var img = new Image();
              img.src = value;
              img.onload = function(){
                obj.data._d = obj.data._d || {style : duplicate(sheet.style) || {}, content : duplicate(game.templates.display.sheet.content)};
                obj.data._d.style = obj.data._d.style || duplicate(sheet.style) || {};

                var aspect = this.naturalWidth/this.naturalHeight;

                var imageWidth = this.naturalWidth;
                var imageHeight = this.naturalHeight;
                var areaHeight = 750;
                var areaWidth = 700;

                if (aspect >= 1) { // landscape
                  imageWidth = areaWidth;
                  imageHeight = imageWidth / aspect;
                  if (imageHeight > areaHeight) {
                    imageHeight = areaHeight;
                    imageWidth = areaHeight * aspect;
                  }
                }
                else { // portrait
                  imageHeight = areaHeight;
                  imageWidth = imageHeight * aspect;
                  if (imageWidth > areaWidth) {
                    imageWidth = areaWidth;
                    imageHeight = areaWidth / aspect;
                  }
                }

                obj.data._d.style["background-image"] = 'url("'+value+'")';
                obj.data._d.style["background-size"] = imageWidth + "px " + imageHeight + "px";
                obj.data._d.style["background-repeat"] = "no-repeat";

                obj.update();
                layout.coverlay("icons-picker");
                layout.coverlay("style-sheet");
              };
              img.onerror = function(){
                sendAlert({text : "Error Loading Image"});
                layout.coverlay("icons-picker");
              }
            }
          });

          var pop = ui_popOut({
            target : $(this),
            id : "icons-picker",
            align : "top",
            prompt : true,
            style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
          }, imgList);
          pop.resizable();
        });

        if (!((obj.data._d && !(obj.data._d.content instanceof Object)) || !(sheet.content instanceof Object))) {
          var quickSheet = $("<button>").appendTo(optionsBar);
          quickSheet.addClass("background subtitle alttext");
          quickSheet.text("Blank Sheet");
          quickSheet.click(function(){
            ui_prompt({
              target : $(this),
              confirm : "Clear Sheet?",
              click : function() {
                obj.data._d = {style : duplicate(sheet.style) || {}, content : {classes : "flexcolumn flex padding", display : []}};
                app.attr("simpleEditing", true);
                obj.update();
              }
            });
          });
          var quickSheet = $("<button>").appendTo(optionsBar);
          quickSheet.addClass("background subtitle alttext");
          quickSheet.text("Default Sheet");
          quickSheet.click(function(){
            obj.data._d = {style : duplicate(sheet.style) || {}, content : duplicate(game.templates.display.sheet.content)};
            app.attr("simpleEditing", true);
            obj.update();
          });
          var quickSheet = $("<button>").appendTo(optionsBar);
          quickSheet.addClass("background subtitle alttext");
          quickSheet.text("Pre-made");
          quickSheet.click(function(){
            var actionList = [];
            for (var key in game.templates.display.premade) {
              function wrap(key){
                actionList.push({
                  name : key,
                  click : function(){
                    obj.data._d = duplicate(game.templates.display.premade[key]);
                    obj.sync("updateAsset");
                  }
                });
              }
              wrap(key);
            }
            for (var key in util.premadeSheets) {
              function wrap(key){
                actionList.push({
                  name : key,
                  click : function(){
                    obj.data._d = duplicate(util.premadeSheets[key]);
                    obj.sync("updateAsset");
                  }
                });
              }
              wrap(key);
            }

            var actionList = util.customSheets(obj, app, scope, sheet);
            ui_dropMenu($(this), actionList, {id : "quick-sheet-drop", "z-index" : util.getMaxZ(".ui-popout")+1});
          });
        }

        var quickSheet = $("<button>").appendTo(optionsBar);
        quickSheet.addClass("background subtitle alttext");
        quickSheet.text("JSON");
        quickSheet.click(function(){
          var select = sync.newApp("ui_JSON");
          select.attr("lookup", "_d");
          select.attr("closeTarget", "json-editor");
          obj.addApp(select);

          var popout = ui_popOut({
            target : $(this),
            id : "json-editor",
          }, select);
          popout.resizable();
        });

        var quickSheet = $("<button>").appendTo(optionsBar);
        quickSheet.addClass("background subtitle alttext");
        quickSheet.text("Load a Sheet");
        quickSheet.click(function(){
          var content = sync.render("ui_assetPicker")(obj, app, {
            category : "c",
            select : function(ev, ui, ent, options, entities){
              if (ent.data._d) {
                obj.data._d = duplicate(ent.data._d);
                obj.update();
              }
              layout.coverlay("add-asset");
            }
          });
          var pop = ui_popOut({
            target : $("body"),
            prompt : true,
            id : "add-asset",
            title : "Pick Sheet",
            style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
          }, content);
          pop.resizable();
        });
      }
    }
    else {
      if (app.attr("from") && sheet.summary) {
        var back = genIcon("arrow-left").appendTo(optionsBar);
        back.addClass("lrmargin");
        back.attr("title", "Back");
        back.click(function(){
          if (layout.mobile) {
            runCommand("selectPlayerEntity");
            obj.removeApp(app);
            var old = app.attr("ui-name");
            app.attr("ui-name", "ui_assetManager");
            app.attr("from", old);
            game.entities.addApp(app);
          }
          else {
            var old = app.attr("ui-name");
            app.attr("ui-name", app.attr("from"));
            app.attr("from", old);
            obj.update();
          }
          var parent = app.parent();
          if (parent && parent.parent() && parent.parent().parent() && parent.parent().parent().hasClass("ui-popout")) {
            parent = parent.parent().parent();
            parent.css("width", "");
            parent.css("height", "");
            parent.css("max-height", "");
            parent.resizable();
          }
        });
        div.mousemove(function(){
          if (_down["17"]) {
            div.css("cursor", "pointer");
          }
          else {
            div.css("cursor", "");
          }
        });
      }
      if (app.attr("homebrew") && game.templates.build) {
        var targetIcon = $("<button>").appendTo(optionsBar);
        targetIcon.addClass("background subtitle alttext");
        targetIcon.text("Default Data Model");
        targetIcon.click(function(){
          var select = sync.newApp("ui_JSON");
          select.attr("lookup", "templates.actors."+obj.data._type);
          select.attr("closeTarget", "json-editor");
          game.locals["homebrew"].addApp(select);

          var popout = ui_popOut({
            target : $("body"),
            id : "json-editor",
            title : "Default Data Model(JSON)"
          }, select);
          popout.resizable();
        });
      }

      if (!app.attr("homebrew")) {
        div.click(function(ev){
          if (_down["17"]) {
            if (optionsBar.hasClass("card-selected")) {
              targetIcon.text("Target");
              optionsBar.removeClass("card-selected");
              util.untarget(obj.id());
              sendAlert({text : "Released Target"});
            }
            else {
              optionsBar.addClass("card-selected");
              targetIcon.text("Release Target");
              util.target(obj.id());
              sendAlert({text : "Targeted"});
            }
          }
        });

        var targetIcon = $("<button>").appendTo(optionsBar);
        targetIcon.addClass("background subtitle alttext");
        if (optionsBar.hasClass("card-selected")) {
          targetIcon.text("Release Target");
        }
        else {
          targetIcon.text("Target");
        }
        targetIcon.click(function() {
          if (targetIcon.text() == "Target") {
            targetIcon.text("Release Target");
            if (optionsBar.hasClass("card-selected")) {
              optionsBar.removeClass("card-selected");
              util.untarget(obj.id());
            }
            else {
              optionsBar.addClass("card-selected");
              util.target(obj.id());
            }
          }
          else {
            targetIcon.text("Target");
            if (optionsBar.hasClass("card-selected")) {
              optionsBar.removeClass("card-selected");
              util.untarget(obj.id());
            }
            else {
              optionsBar.addClass("card-selected");
              util.target(obj.id());
            }
          }
        });
      }

      var buffer = $("<div>").appendTo(optionsBar);
      buffer.addClass("flex");

      if (!scope.viewOnly) {
        if (!app.attr("homebrew")) {
          var securityWrap = $("<button>").appendTo(optionsBar);
          securityWrap.addClass("background subtitle alttext");

          var security = genIcon("lock", "Grant Access").appendTo(securityWrap);
          security.attr("title", "Edit who has access to this character");
          security.click(function(){
            if (app.attr("viewingRights")) {
              app.removeAttr("viewingRights");
            }
            else {
              app.attr("viewingRights", true);
            }
            obj.update();
          });
        }

        var buffer = $("<div>").appendTo(optionsBar);
        buffer.addClass("flex");

        var cog = $("<button>").appendTo(optionsBar);
        cog.addClass("background subtitle alttext");
        cog.attr("title", "Manage attributes");
        cog.text("Attributes");
        cog.click(function(){
          if (app.attr("attributes")) {
            app.removeAttr("attributes");
          }
          else {
            app.attr("attributes", true);
          }
          obj.update();
        });
        if (!app.attr("homebrew")) {
          var icon = $("<button>").appendTo(optionsBar);
          icon.addClass("background subtitle alttext");
          icon.text("Update Map Token");
          icon.click(function() {
            if (boardApi.selections && Object.keys(boardApi.selections).length == 1) {
              var selectData = boardApi.selections[Object.keys(boardApi.selections)[0]];
              var ent = getEnt(selectData.board);
              if (selectData.layer && ent && ent.data && ent.data.layers && ent.data.layers[selectData.layer] && ent.data.layers[selectData.layer].p[selectData.index]) {
                found = true;
                var dupe = duplicate(ent.data.layers[selectData.layer].p[selectData.index]);
                delete dupe.x;
                delete dupe.y;
                dupe.w = boardApi.scale(dupe.w, ent, true);
                dupe.h = boardApi.scale(dupe.h, ent, true);
                delete dupe.l;
                delete dupe.e;
                delete dupe.v;
                delete dupe.eID;
                if (dupe.i) {
                  obj.data.info.img.min = dupe.i;
                }
                else {
                  delete obj.data.info.img.min;
                }
                sendAlert({text : "Saved as default token"});

                obj.data.info.img.modifiers = dupe;
                obj.sync("updateAsset");
              }
              else {
                sendAlert({text : "Invalid Token"});
              }
            }
            else {
              sendAlert({text : "Select a single piece to save as the default map token"})
            }
          });
        }

        var calculations = $("<button>").appendTo(optionsBar);
        calculations.addClass("background subtitle alttext");
        calculations.text("Math");
        calculations.click(function(){
          app.attr("viewingData", true);
          obj.update();
        });
        if (hasSecurity(getCookie("UserID"), "Rights", obj.data) || app.attr("homebrew")) {
          var quickSheet = $("<button>").appendTo(optionsBar);
          quickSheet.addClass("background subtitle alttext");
          quickSheet.text("Sheet");
          quickSheet.click(function(){
            obj.data._d = obj.data._d || {style : duplicate(sheet.style) || {}, content : duplicate(sheet.content)};
            app.attr("simpleEditing", true);
            obj.update();
          });
        }
        if (hasSecurity(getCookie("UserID"), "Rights", obj.data) || app.attr("homebrew")) {
          var tags = $("<button>")//.appendTo(optionsBar);
          tags.addClass("background subtitle alttext");
          tags.text("Notes");
          tags.click(function(){
            app.attr("viewingNotes", true);
            obj.update();
          });
        }

        var tags = $("<button>")//.appendTo(optionsBar);
        tags.addClass("background subtitle alttext");
        tags.text("Tags");
        if (app.attr("viewingTags")) {
          tags.removeClass("background");
          tags.addClass("highlight");
        }
        tags.click(function(){
          if (app.attr("viewingTags")) {
            app.removeAttr("viewingTags");
          }
          else {
            app.attr("viewingTags", true);
          }
          obj.update();
        });
        if (!app.attr("homebrew") || game.templates.build) {
          if (game.templates.build) {
            var actions = $("<button>").appendTo(optionsBar);
            actions.addClass("background subtitle alttext");
            actions.text("Hotbar");
            actions.click(function(){
              if (app.attr("viewingActions")) {
                app.removeAttr("viewingActions");
              }
              else {
                app.attr("viewingActions", true);
              }
              obj.update();
            });
          }
          else {
            var actions = $("<button>").appendTo(optionsBar);
            actions.addClass("background subtitle alttext");
            if (app.attr("viewingActions")) {
              actions.removeClass("background");
              actions.addClass("highlight");
            }
            actions.text("Actions");
            actions.click(function(){
              if (app.attr("viewingActions")) {
                app.removeAttr("viewingActions");
                div.empty();
              }
              else {
                app.attr("viewingActions", true);
              }
              obj.update();
            });
            actions.contextmenu(function(ev){
              var actionObj = sync.dummyObj();
              actionObj.data = {context : {c : obj.id()}};

              game.locals["actions"] = game.locals["actions"] || [];
              game.locals["actions"].push(actionObj);

              var newApp = sync.newApp("ui_actions");
              newApp.addClass("spadding");
              actionObj.addApp(newApp);

              var pop = ui_popOut({
                target : $(this),
                minimize : true,
                dragThickness : "0.5em",
                title : "Actions",
                align : "bottom",
                style : {"width" : "300px"},
              }, newApp);
              pop.resizable();

              ev.stopPropagation();
              return false;
            });
          }
        }

        if (hasSecurity(getCookie("UserID"), "Rights", data) && hasSecurity(getCookie("UserID"), "Assistant Master")) {
          if (hasSecurity(getCookie("UserID"), "Owner", data)) {
            var syncLabel;
            if (data._c == -1) {
              syncLabel = genIcon("remove").appendTo(optionsBar);
              syncLabel.addClass("alttext background outline");
              syncLabel.attr("title", "Duplicate to move to Asset Storage");
            }
            else {
              if (data._uid) {
                if (data._sync) {
                  var syncLabel = genIcon("refresh").appendTo(optionsBar);
                  syncLabel.addClass("alttext highlight smooth outline lrpadding");
                  syncLabel.attr("title", "This is saved, and is in-sync with Asset Storage");
                  syncLabel.click(function(ev){
                    runCommand("updateSync", {id : obj.id(), data : false});
                    ev.stopPropagation();
                    return false;
                  });
                }
                else {
                  var syncLabel = genIcon("cloud").appendTo(optionsBar);
                  syncLabel.addClass("alttext highlight smooth outline lrpadding");
                  syncLabel.attr("title", "This is saved, but is not in-sync with Asset Storage");
                  syncLabel.click(function(ev){
                    runCommand("updateSync", {id : obj.id(), data : true});
                    ev.stopPropagation();
                    return false;
                  });
                }
              }
              else {
                var syncLabel = genIcon("cloud")//.appendTo(optionsBar);
                syncLabel.addClass("lrpadding");
                syncLabel.attr("title", "Enable Asset Storage");
                syncLabel.click(function(ev){
                  var popOut = ui_prompt({
                    target : $(this),
                    id : "confirm-store-char",
                    confirm : "Move to Asset Storage",
                    click : function(){
                      runCommand("storeAsset", {id: obj.id()});
                      layout.coverlay("quick-storage-popout");
                      syncLabel.remove();
                    }
                  });
                  ev.stopPropagation();
                  return false;
                });
              }
            }
          }
        }
      }
    }
  }

  var charWrapper = $("<div>").appendTo(div);
  charWrapper.addClass("flexcolumn flex");
  charWrapper.css("overflow-y", "auto");
  charWrapper.attr("_lastScrollTop", app.attr("_lastScrollTop"));
  charWrapper.scroll(function(){
    app.attr("_lastScrollTop", charWrapper.scrollTop());
    app.attr("_lastScrollLeft", charWrapper.scrollLeft());
  });


  var charContents = $("<div>").appendTo(charWrapper);
  charContents.addClass("fit-xy flexcolumn");

  var list = $("<div>").appendTo(charContents);
  list.addClass("fit-x flexaround flexwrap");

  if (obj.data._d) { // flat sheets
    sheet = obj.data._d;

    for (var i in sheet.style) {
      charWrapper.css(i, sheet.style[i]);
    }

    var newScope = duplicate(scope);
    newScope.display = sheet.content;
    if (scope.markup || app.attr("simpleEditing")) {
      newScope.markup = "editing";
    }
    newScope.context = ctx;
    charContents.append(sync.render("ui_processUI")(obj, app, newScope));

    if (obj.data._d.content instanceof Object) {
      if (app.attr("simpleEditing")) {
        if (app.attr("boxPaint")) {
          charWrapper.css("position", "relative");
          charContents.children().children().children().find("*").css("opacity", "0").css("pointer-events","none");

          var sX;
          var sY;
          var snap;
          var fit = $("<div>").appendTo(charWrapper);
          fit.css("position", "absolute");
          fit.css("background", "rgba(0,0,0,0.4)");
          fit.css("min-height", "100%");
          fit.css("min-width", "100%");
          fit.css("cursor", "pointer");
          fit.mousedown(function(ev){
            ghost.show();
            sX = ev.pageX;
            sY = ev.pageY;

            var offset = fit.offset();
            sX = sX - offset.left;
            sY = sY - offset.top;

            sX = sX + charWrapper.scrollLeft();
            sY = sY + charWrapper.scrollTop();
            ev.preventDefault();
          });
          fit.mousemove(function(ev){
            var eX = ev.pageX;
            var eY = ev.pageY;

            var offset = fit.offset();
            eX = eX - offset.left;
            eY = eY - offset.top;

            eX = eX + charWrapper.scrollLeft();
            eY = eY + charWrapper.scrollTop();

            var sXD = sX;
            var sYD = sY;

            if (snap || _down[16]) {
              if (eX < sX) {
                sXD = Math.round(eX/20) * 20;
                eX = Math.floor(sX/20) * 20;
              }
              if (eY < sY) {
                sYD = Math.round(eY/20) * 20;
                eY = Math.floor(sY/20) * 20;
              }
            }

            var eW = Math.round(Math.abs(sXD - eX));
            var eH = Math.round(Math.abs(sYD - eY));

            sXD = Math.round(Math.min(sXD, eX));
            sYD = Math.round(Math.min(sYD, eY));

            if (snap || _down[16]) {
              sXD = Math.round(sXD/20) * 20;
              sYD = Math.round(sYD/20) * 20;
              eW = Math.ceil(eW/20) * 20;
              eH = Math.ceil(eH/20) * 20;
            }

            ghost.css("left", sXD);
            ghost.css("top", sYD);
            ghost.width(eW);
            ghost.height(eH);
            ev.preventDefault();
          });
          fit.mouseup(function(ev){
            if (ev.which == 1) {
              var eX = ev.pageX;
              var eY = ev.pageY;

              var offset = fit.offset();
              eX = eX - offset.left;
              eY = eY - offset.top;

              eX = eX + charWrapper.scrollLeft();
              eY = eY + charWrapper.scrollTop();

              var sXD = sX;
              var sYD = sY;

              if (snap || _down[16]) {
                if (eX < sX) {
                  sXD = Math.round(eX/20) * 20;
                  eX = Math.floor(sX/20) * 20;
                }
                if (eY < sY) {
                  sYD = Math.round(eY/20) * 20;
                  eY = Math.floor(sY/20) * 20;
                }
              }

              var eW = Math.round(Math.abs(sXD - eX));
              var eH = Math.round(Math.abs(sYD - eY));

              sXD = Math.round(Math.min(sXD, eX));
              sYD = Math.round(Math.min(sYD, eY));

              if (snap || _down[16]) {
                sXD = Math.round(sXD/20) * 20;
                sYD = Math.round(sYD/20) * 20;
                eW = Math.ceil(eW/20) * 20;
                eH = Math.ceil(eH/20) * 20;
              }
              if (!_down[17]) {
                var dataList = [];

                var template = {stats : "", info : "", counters : ""};
                for (var key in template) {
                  var pathKey = key;
                  for (var subKey in obj.data[key]) {
                    pathKey = key + "." + subKey;
                    if (pathKey != "info.notes" && pathKey != "info.img") {
                      dataList.push(pathKey);
                    }
                  }
                }
                setTimeout(function(){
                  ui_prompt({
                    target : app,
                    prompt : false,
                    inputs : {
                      "Attribute" : {list : dataList},
                    },
                    click : function(ev, inputs) {
                      if (inputs["Attribute"].val()) {
                        if (obj.data._d && (obj.data._d.content && obj.data._d.content instanceof Object)) {
                          obj.data._d.content.style = obj.data._d.content.style || {};
                          obj.data._d.content.style.position = "relative";

                          obj.data._d.content.display = obj.data._d.content.display || [];
                          obj.data._d.content.display.push(
                            {
                              classes : "flexrow",
                              style : {width : eW, height : eH, position : "absolute", left : sXD, top : sYD},
                              name : "",
                              target : inputs["Attribute"].val(),
                              edit : {classes : "line fit-x middle"}
                            }
                          );
                        }
                        obj.update();
                      }
                      else {
                        sendAlert({text : "No Attribute Selected"});
                      }
                    }
                  });
                }, 10);
                sX = null;
                sY = null;
                ghost.hide();
              }
              else {
                if (obj.data._d && (obj.data._d.content && obj.data._d.content instanceof Object)) {
                  obj.data._d.content.style = obj.data._d.content.style || {};
                  obj.data._d.content.style.position = "relative";

                  obj.data._d.content.display = obj.data._d.content.display || [];

                  obj.data._d.content.display.push(
                    {
                      classes : "white outline smooth flexcolumn flexcontainer",
                      style : {width : eW, height : eH, position : "absolute", left : sXD, top : sYD},
                      display : []
                    }
                  );
                }
                obj.update();
              }
            }
            sX = null;
            sY = null;
            ev.preventDefault();
          });

          var ghost = $("<text>").appendTo(charWrapper);
          ghost.addClass("bold alttext selected");
          ghost.css("position","absolute");
          ghost.css("pointer-events", "none");

          var drawLabel = $("<div>").appendTo(charWrapper);
          drawLabel.addClass("fit-x alttext flexmiddle flexcolumn");
          drawLabel.css("position","absolute");
          drawLabel.css("left", "0");
          drawLabel.css("top", "45%");
          drawLabel.css("pointer-events", "none");
          drawLabel.append("<b>Draw Attribute Fields</b>");
          drawLabel.append("<b>Press Shift to Toggle Snap to Grid</b>");
          drawLabel.append("<b>Hold control to draw an attribute container</b>");
        }
        else {
          function sheetElementMenu(parent, path) {
            var contents = sync.render("ui_addElement")(obj, app, {path : path, closeTarget : "sheet-element-menu", viewOnly : scope.viewOnly});

            var pop = ui_popOut({
              target : app,
              prompt : true,
              id : "sheet-element-menu",
              style : {"width" : "400px", "height" : "400px"},
            }, contents);
            return pop;
          }

          charContents.click(function(){
            var replace = path.replace(app.attr("id")+"_0", "");
            while (replace.match("-")) {
              replace = replace.replace("-", ".");
            }
            if (replace[0] == ".") {
              replace = replace.substring(1, replace.length);
            }

            var select = sync.newApp("ui_JSON");
            select.attr("lookup", "_d.contents"+replace);
            select.attr("closeTarget", "json-editor");
            obj.addApp(select);

            var popout = ui_popOut({
              target : $(this),
              id : "json-editor",
            }, select);
            popout.resizable();
          });
          function build(sData, lastLookup) {
            var first = false;
            if (!lastLookup) {
              lastLookup = app.attr("id")+"_0";
              first = true;
            }
            var name = lastLookup;
            var icon = "";
            if (sData.classes && sData.classes.match("flexcolumn")) {
              icon = 'resize-vertical';
              name = "Columns";
            }
            else if (sData.classes && sData.classes.match("flexrow")) {
              name = "Rows";
              icon = "resize-horizontal";
            }
            if (sData.ui) {
              name = sData.ui;
              icon = "edit";
            }
            if (sData.apps) {
              name = "Apps";
              icon = "th-large";
            }
            if (sData.link) {
              name = sData.link;
              icon = "link"
            }
            if (sData.icon) {
              name = sData.icon;
              icon = "exclamation-sign"
            }

            if (sData.name) {
              name = sData.name;
              icon = "text-color"
            }
            if (sData.target) {
              name = sData.target;
              icon = "";
            }
            function clickWrap(scope, lastLookup) {
              setTimeout(function(){
                $("#"+(newScope.markup || "")+lastLookup).mousemove(function(ev){
                  cursorX = ev.pageX;
                  cursorY = ev.pageY;
                  if (!$("#sheet-element-menu").length) {
                    $(".selected").removeClass("selected");
                    $(this).addClass("selected");
                  }
                  ev.stopPropagation();
                  ev.preventDefault();
                });
                $("#"+(newScope.markup || "")+lastLookup).attr("target", lastLookup);
                $("#"+(newScope.markup || "")+lastLookup).unbind("click");
                $("#"+(newScope.markup || "")+lastLookup).css("cursor", "pointer");
                $("#"+(newScope.markup || "")+lastLookup).click(function(ev){
                  $(".selected").removeClass("selected");
                  $(this).addClass("selected");

                  var popout = sheetElementMenu($(this), lastLookup);

                  ev.stopPropagation();
                });
                $("#"+(newScope.markup || "")+lastLookup).contextmenu(function(ev){
                  $(".selected").removeClass("selected");
                  $(this).addClass("selected");
                  var focus = $(this);
                  var actionsList = [
                    {
                      name : "DELETE",
                      icon : "trash",
                      click : function(ev, ui) {
                        var replace = lastLookup.replace(app.attr("id")+"_0", "");
                        while (replace.match("-")) {
                          replace = replace.replace("-", ".");
                        }
                        if (replace[0] == ".") {
                          replace = replace.substring(1, replace.length);
                        }

                        var index = replace.split("\.");
                        index = index[index.length-1];
                        var final = replace.substring(0, replace.length-1-index.length);
                        var arr = sync.traverse(obj.data._d.content, final);
                        if (arr && Array.isArray(arr)) {
                          arr.splice(index, 1);
                          if (!_down[16]) {
                            layout.coverlay("sheet-element-menu");
                          }
                          obj.update();
                        }
                      }
                    },
                  ]

                  var drop = ui_dropMenu($(this), actionsList, {});

                  ev.stopPropagation();
                  return false;
                });
              }, 10);
            }
            clickWrap(newScope, lastLookup);
            if (sData.display) {
              for (var i in sData.display) {
                if (sData.display[i]) {
                  build(sData.display[i], lastLookup+"-display-"+i);
                }
              }
            }
          }
          build(newScope.display);
        }
      }

      if (sheet.tabs && sheet.tabs.length) {
        var tabContent = genNavBar("flexaround background alttext", "flex", "4px");
        tabContent.addClass("flex");
        function tabWrap(importData, index) {
          tabContent.generateTab(importData.name, importData.icon, function(parent) {
            var newScope = duplicate(scope);
            newScope.display = importData.display;
            newScope.context = ctx;
            if (scope.markup) {
              newScope.markup = "tabs"+index;
            }
            parent.append(sync.render("ui_processUI")(obj, app, newScope));

            if (app) {
              app.attr("char_tab", importData.name);
            }
          });
        }

        for (var index in sheet.tabs) {
          tabWrap(sheet.tabs[index], index);
        }
        if (sheet.tabs && sheet.tabs.length) {
          if (app) {
            if (!app.attr("char_tab") && sheet.tabs) {
              app.attr("char_tab", sheet.tabs[0].name);
            }
            tabContent.selectTab(app.attr("char_tab"));
          }
          else {
            tabContent.selectTab(sheet.tabs[0].name);
          }
        }

        tabContent.appendTo(charContents);
      }
    }
    return div;
  }

  for (var i in sheet.style) {
    charWrapper.css(i, sheet.style[i]);
  }

  var newScope = duplicate(scope);
  newScope.display = sheet.content;
  if (scope.markup) {
    newScope.markup = "content";
  }
  newScope.context = ctx;
  charContents.append(sync.render("ui_processUI")(obj, app, newScope));

  return div;
});


sync.render("ui_characterSheet", function(obj, app, scope){
  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");

  if (!obj || !obj.data || obj.data["_t"] != "c") {
    if (app && layout.mobile) {
      app.attr("ui-name", "ui_assetManager");
      game.entities.addApp(app);
    }
    return div;
  }

  scope = scope || {
    viewOnly: (app.attr("viewOnly") == "true"),
    local : (app.attr("local") == "true"),
    markup : app.attr("markup") == "true",
    editing : app.attr("editing") == "true",
  };

  obj.data._flags = obj.data._flags || duplicate(obj.data.tags || {});
  obj.data._hud = obj.data._hud || obj.data._a || {};

  // don't edit cloud entities
  if (obj.id() && isNaN(obj.id()) && obj.id().match("_") && !scope.editing && !(game.config && game.config.data.offline)) {
    scope.viewOnly = true;
    scope.local = true;
  }

  var sheet = scope.sheet || game.templates.display.sheet;
  var ctx = sync.defaultContext();
  ctx["c"] = obj.data;

  if (app.attr("attributes")) {
    div.removeClass("flexcolumn");
    div.addClass("foreground");
    div.css("overflow", "auto");
    div.scroll(function(){
      app.attr("_lastScrollTop", div.scrollTop());
      app.attr("_lastScrollLeft", div.scrollLeft());
    });

    var buttonList = $("<div>").appendTo(div);
    buttonList.addClass("flexrow foreground flexbetween subtitle");
    buttonList.css("margin-bottom", "1em");

    var reset = $("<button>").appendTo(buttonList);
    reset.addClass("highlight lrpadding alttext flexmiddle");
    reset.text("Back to Sheet");
    reset.click(function(){
      app.removeAttr("attributes");
      obj.update();
    });

    var template = {stats : "", info : "", counters : ""};
    if (!game.templates.build) {
      template["skills"] = "";
    }
    if (game.templates.display.sheet.categories) {
      template = {};
      for (var k in game.templates.display.sheet.categories) {
        template[k] = "";
      }
    }

    var reset = $("<button>").appendTo(buttonList);
    reset.addClass("background lrpadding alttext flexmiddle");
    reset.text("Load Attributes");
    reset.click(function(){
      var content = sync.render("ui_assetPicker")(obj, app, {
        category : "c",
        filter : "c",
        select : function(ev, ui, ent, options, entities){
          if (ent.data) {
            for (var key in template) {
              obj.data[key] = duplicate(ent.data[key]);
            }
            obj.update();
          }
          layout.coverlay("add-asset");
        }
      });
      var pop = ui_popOut({
        target : $("body"),
        prompt : true,
        id : "add-asset",
        title : "Pick Sheet",
        style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
      }, content);
      pop.resizable();
    });

    var keys = {};
    for (var key in template) {
      var path = key;
      var attrPlate = $("<div>").appendTo(div);
      attrPlate.addClass("lrpadding lrmargin");
      attrPlate.css("font-size", "1.2em");
      attrPlate.append("<u class='bold lrpadding lrmargin alttext'>"+key+"</b>");

      var attrWrap = $("<div>").appendTo(attrPlate);
      attrWrap.addClass("flexcolumn subtitle white outline smooth lpadding");
      attrWrap.css("margin-bottom", "1em");

      var headerRow = $("<div>").appendTo(attrWrap);
      headerRow.addClass("flexrow padding");
      headerRow.append("<u class='subtitle flexmiddle lrmargin' style='width:100px'>Macro Key</u>");
      headerRow.append("<u class='flex subtitle flexmiddle lrmargin' style='width:100px'>Name</u>");
      headerRow.append("<u class='flex2 subtitle flexmiddle lrmargin' style='width:100px'>Value</u>");
      headerRow.append("<u class='subtitle flexmiddle lrmargin' style='width:40px'>Min</u>");
      headerRow.append("<u class='subtitle flexmiddle lrmargin' style='width:40px'>Max</u>");
      headerRow.append("<u class='subtitle flexmiddle lrmargin' style='width:70px'>Modifiers</u>");
      headerRow.append(genIcon("remove").addClass("lrpadding lrmargin").css("color", "transparent"));
      for (var subKey in obj.data[key]) {
        path = key + "." + subKey;
        if (path != "info.notes" && path != "info.img" && path != "info.name") {
          var attrOption = $("<div>").appendTo(attrWrap);
          attrOption.addClass("flexrow padding");
          if (!keys[subKey]) {
            attrOption.append("<text class='subtitle flexmiddle' style='width:100px'>@"+subKey+"</text>");
            keys[subKey] = true;
          }
          else {
            attrOption.append("<text class='subtitle flexmiddle' style='width:100px'>@c."+path+"</text>");
          }

          var name = genInput({
            parent : attrOption,
            classes : "line subtitle lrmargin middle",
            value : obj.data[key][subKey],
            cmd : "updateAsset",
            obj : obj,
            name : true,
            style : {"width" : "150px"}
          });

          var value = genInput({
            parent : attrOption,
            classes : "line subtitle flex2 lrmargin middle",
            value : obj.data[key][subKey],
            cmd : "updateAsset",
            obj : obj,
          });

          var min = genInput({
            parent : attrOption,
            classes : "line subtitle lrmargin middle",
            value : obj.data[key][subKey],
            style : {"width" : "40px"},
            cmd : "updateAsset",
            obj : obj,
            raw : "min",
          });

          var max = genInput({
            parent : attrOption,
            classes : "line subtitle lrmargin middle",
            value : obj.data[key][subKey],
            style : {"width" : "40px"},
            cmd : "updateAsset",
            obj : obj,
            raw : "max"
          });

          var remove = genIcon("list-alt", "Mods").appendTo(attrOption);
          remove.addClass("flexmiddle lrmargin lrpadding");
          remove.attr("path", path);
          remove.css("width", "70px");
          remove.click(function(){
            var path = $(this).attr("path");

            var content = sync.newApp("ui_modifiers");
            content.attr("viewOnly", scope.viewOnly);
            content.attr("lookup", path);
            content.attr("modsOnly", "true");
            obj.addApp(content);

            ui_popOut({
              target : $(this),
              align : "top",
              title : "Modifiers",
              id : "modify-exp",
              style : {"min-width" : "100px"},
            }, content);
          });

          var remove = genIcon("remove").appendTo(attrOption);
          remove.addClass("destroy flexmiddle lrmargin lrpadding");
          remove.attr("path", path);
          remove.click(function(){
            var path = $(this).attr("path");

            ui_prompt({
              target : $(this),
              confirm : "Delete Attribute",
              click : function(){
                sync.traverse(obj.data, path, "");
                obj.sync("updateAsset");
              }
            });
          });
        }
      }

      var headerRow = genIcon("plus", "New Attribute").appendTo(attrWrap);
      headerRow.addClass("flexmiddle fit-x create");
      headerRow.attr("category", key);
      headerRow.click(function(){
        var category = $(this).attr("category");

        var invalidKeys = {
          "length" : "system",
        }; // invalid keys

        for (var key in obj.data) {
          invalidKeys[key] = key;
        }
        for (var key in obj.data.info) {
          invalidKeys[key] = "info."+key;
        }
        for (var key in obj.data.counters) {
          invalidKeys[key] = "counters."+key;
        }
        for (var key in obj.data.stats) {
          invalidKeys[key] = "stats."+key;
        }


        for (var key in game.templates.item.info) {
          invalidKeys[key] = "item.info."+key;
        }
        for (var key in game.templates.item.equip) {
          invalidKeys[key] = "item.equip."+key;
        }
        for (var key in game.templates.item.weapon) {
          invalidKeys[key] = "item.weapon."+key;
        }
        for (var key in game.templates.item.spell) {
          invalidKeys[key] = "item.spell."+key;
        }

        ui_prompt({
          target : $(this),
          inputs : {
            "Macro Key" : "",
          },
          click : function(ev, inputs){
            var path = inputs["Macro Key"].val();
            if (path && path != "notes" && path != "img" && path != "name" && isNaN(path)) {
              path = replaceAll(path, " ", "_");
              path = replaceAll(path, "@", "");
              path = replaceAll(path, "(", "_");
              path = replaceAll(path, ")", "_");
              path = replaceAll(path, "[", "_");
              path = replaceAll(path, "]", "_");
              path = replaceAll(path, "!", "_");
              path = replaceAll(path, "#", "_");
              path = replaceAll(path, "$", "_");
              if (invalidKeys[path]) {
                sendAlert({text : "This key is used somewhere else"});
              }
              else {
                obj.data[category][path] = {};
                obj.sync("updateAsset");
              }
            }
          }
        });
      });
    }

    return div;
  }

  if (app.attr("viewingData")) {
    var calcs = duplicate(obj.data._calc || sheet.calc || []);

    var buttonList = $("<div>").appendTo(div);
    buttonList.addClass("flexrow foreground subtitle flexbetween");

    if (hasSecurity(getCookie("UserID"), "Rights", obj.data) || app.attr("homebrew")) {
      var confirm = $("<button>").appendTo(buttonList);
      confirm.addClass("highlight alttext flexmiddle");
      confirm.text("Save");
      confirm.click(function(){
        obj.data._calc = calcs;

        app.removeAttr("viewingData");
        obj.sync("updateAsset");
      });
    }

    var discard = $("<button>").appendTo(buttonList);
    discard.addClass("highlight alttext flexmiddle");
    discard.text("Discard Changes");
    discard.click(function(){
      app.removeAttr("viewingData");
      obj.update();
    });


    if (!app.attr("homebrew")) {
      var reset = $("<button>").appendTo(buttonList);
      reset.addClass("highlight lrpadding alttext flexmiddle");
      reset.text("Clear");
      reset.click(function(){
        obj.data._calc = [];

        obj.update();
      });
    }

    if (!app.attr("homebrew")) {
      var reset = $("<button>").appendTo(buttonList);
      reset.addClass("highlight lrpadding alttext flexmiddle");
      reset.text("Reset to Default");
      reset.click(function(){
        delete obj.data._calc;

        app.removeAttr("viewingData");
        obj.sync("updateAsset");
      });
    }

    var header = $("<highlight>").appendTo(div);
    header.addClass("fit-x flexmiddle");
    header.text("Automatic Calculations");

    var calcWrapper = $("<div>").appendTo(div);
    calcWrapper.addClass("flexcolumn margin flex outline smooth");
    calcWrapper.css("position", "relative");
    calcWrapper.css("overflow-y", "auto");

    var calcList = $("<div>").appendTo(calcWrapper);
    calcList.addClass("fit-x");
    calcList.css("position", "absolute");
    calcList.css("top", "0");
    calcList.css("left", "0");

    if (!obj.data._calc) {
      calcList.css("opacity", "0.25");
      calcList.css("pointer-events", "none");

      var calcDefault = $("<highlight>").appendTo(calcWrapper);
      calcDefault.addClass("fit-xy flexcolumn flexmiddle");
      calcDefault.append("<text>System Calculations</text><br><text class='subtitle'>Click to overwrite system</text>");
      calcDefault.click(function(){
        calcDefault.remove();
        calcList.css("opacity", "");
        calcList.css("pointer-events", "");
      });
    }
    sync.render("ui_math")(obj, app, {calc : calcs}).appendTo(calcList);

    var warning = $("<i>").appendTo(div);
    warning.addClass("flexmiddle subtitle bold")
    warning.text("Calculations that are applied automatically after a sheet has been changed. Calculations are applied in sequential order, allowing you to reference a value affected by a previous calculation");

    return div;
  }

  if (app.attr("viewingNotes")) {
    var content = sync.newApp("ui_editPage").appendTo(div);
    content.attr("targetApp", app.attr("id"));
    obj.addApp(content);

    return div;
  }

  if (app.attr("viewingActions")) {
    div.addClass("foreground");

    var buttonList = $("<div>").appendTo(div);
    buttonList.addClass("flexrow foreground");

    var reset = $("<button>").appendTo(buttonList);
    reset.addClass("highlight lrpadding alttext flexmiddle");
    reset.text("Save Changes");
    reset.click(function(){
      app.removeAttr("viewingActions");
      obj.sync("updateAsset");
    });

    var actionObj = sync.dummyObj();
    actionObj.data = {context : {c : obj.id()}};

    game.locals["actions"] = game.locals["actions"] || [];
    game.locals["actions"].push(actionObj);

    var charWrapper = $("<div>").appendTo(div);
    charWrapper.addClass("flexcolumn flex");
    charWrapper.css("overflow-y", "auto");
    charWrapper.attr("_lastScrollTop", app.attr("_lastScrollTop"));
    charWrapper.scroll(function(){
      app.attr("_lastScrollTop", charWrapper.scrollTop());
      app.attr("_lastScrollLeft", charWrapper.scrollLeft());
    });

    sync.render("ui_manageActions")(obj, app, scope).appendTo(charWrapper);

    /*var newApp = sync.newApp("ui_actions").appendTo(div);
    newApp.addClass("spadding");
    actionObj.addApp(newApp);*/
    return div;
  }

  if (app.attr("viewingRights")) {
    var buttonList = $("<div>").appendTo(div);
    buttonList.addClass("flexrow foreground");
    buttonList.css("margin-bottom", "1em");

    var reset = $("<button>").appendTo(buttonList);
    reset.addClass("highlight lrpadding alttext flexmiddle");
    reset.text("Back to Sheet");
    reset.click(function(){
      app.removeAttr("viewingRights");
      obj.update();
    });

    var content = sync.newApp("ui_rights").appendTo(div);
    content.attr("viewOnly", scope.viewOnly);
    content.attr("last_rights", "indv");
    obj.addApp(content);

    return div;
  }

  if (!app.attr("homebrew") && !scope.editing) {
    var calc = obj.data._calc || sheet.calc || [];
    for (var i=0; i<calc.length; i++) {
      if (!calc[i].cond || sync.eval(calc[i].cond, ctx)) {
        var val = sync.eval(calc[i].eq, ctx);
        var target = sync.traverse(obj.data, calc[i].target);
        if (target instanceof Object) {
          sync.rawVal(target, val);
        }
        else {
          sync.traverse(obj.data, calc[i].target, val);
        }
      }
    }
    if (game.templates.build) {
      for (var key in game.templates.hudLookups) {
        var listKey = game.templates.hudLookups[key];
        var list = sync.traverse(obj.data, listKey);
        if (list) {
          for (var id in list) {
            var itemData = list[id];
            ctx["i"] = itemData;
            var calc = itemData._calc || [];
            for (var i=0; i<calc.length; i++) {
              if (calc[i].cond == null || sync.eval(calc[i].cond, ctx)) {
                var val = sync.eval(calc[i].eq, ctx);
                var target = sync.traverse(obj.data, calc[i].target);
                if (target instanceof Object) {
                  sync.rawVal(target, val);
                }
                else {
                  sync.traverse(obj.data, calc[i].target, val);
                }
              }
            }
          }
        }
      }
    }
    else {
      for (var id in obj.data.inventory) {
        var itemData = obj.data.inventory[id];
        ctx["i"] = itemData;
        var calc = itemData._calc || [];
        for (var i=0; i<calc.length; i++) {
          if (calc[i].cond == null || sync.eval(calc[i].cond, ctx)) {
            var val = sync.eval(calc[i].eq, ctx);
            var target = sync.traverse(obj.data, calc[i].target);
            if (target instanceof Object) {
              sync.rawVal(target, val);
            }
            else {
              sync.traverse(obj.data, calc[i].target, val);
            }
          }
        }
      }
      for (var id in obj.data.spellbook) {
        var itemData = obj.data.spellbook[id];
        ctx["i"] = itemData;
        var calc = itemData._calc || [];
        for (var i=0; i<calc.length; i++) {
          if (calc[i].cond == null || sync.eval(calc[i].cond, ctx)) {
            var val = sync.eval(calc[i].eq, ctx);
            var target = sync.traverse(obj.data, calc[i].target);
            if (target instanceof Object) {
              sync.rawVal(target, val);
            }
            else {
              sync.traverse(obj.data, calc[i].target, val);
            }
          }
        }
      }
    }
    delete ctx["i"];
  }

  ctx["c"] = obj.data;

  var data = obj.data || {info : {}};

  if (!scope.viewOnly) {
    div.on("dragover", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      if (_dragTransfer) {
        var olay = layout.overlay({
          target : app,
          id : app.attr("id")+"-drag-overlay",
          style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
        });
        olay.addClass("flexcolumn flexmiddle alttext");
        olay.css("font-size", "2em");
        olay.css("z-index", util.getMaxZ(".ui-popout")+1);
        if (_dragTransfer.roll) {
          olay.addClass("focus");
          olay.append("<b>Targeting</b>");
        }
      }
      else if (!$("#"+app.attr("id")+"-drag-overlay").length) {
    		var olay = layout.overlay({
          target : app,
          id : app.attr("id")+"-drag-overlay",
          style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
        });
        olay.addClass("flexcolumn flexmiddle alttext");
        olay.css("font-size", "2em");
        olay.css("z-index", util.getMaxZ(".ui-popout")+1);
        olay.append("<b>Drop to Create</b>");
      }
    });
    div.droppable();
    div.on('drop', function(ev, ui){
      ev.preventDefault();
      ev.stopPropagation();
      if (_dragTransfer) {
        if (_dragTransfer.roll) {
          optionsBar.addClass("card-selected");
          sendAlert({text : "Targeted " + sync.rawVal(obj.data.info.name)});
          var pop = ui_dropMenu(app, util.buildActions(_dragTransfer.roll), {id : "dice-action", align : "center", style : {"font-size" : "1.6em"}});
        }
      }
      else {
        var dt = ev.originalEvent.dataTransfer||$(ui.draggable).data("dt");
        if (hook.call("OnDropCharacter", obj, app, scope, dt)) {
          if (dt && dt.getData("OBJ")) {
            var ent = JSON.parse(dt.getData("OBJ"));
            if (ent._t == "i") {
              if (ent._drop) {
                var list = sync.traverse(obj.data, ent._drop);
                if (!ent._dropKey && Array.isArray(list)) {
                  list.push(ent);
                }
                else if (list && list instanceof Object) {
                  var ui = $(this);
                  if (!ent._dropKey) {
                    ui_prompt({
                      inputs : {"Unique Key" : ""},
                      click: function(ev, inputs){
                        ent._dropKey = inputs["Unique Key"].val().toLowerCase().replace(/ /g,"_");
                        if (list[ent._dropKey]) {
                          ui_dropMenu(ui, [{name : "Overwrite?", click : function(){list[ent._dropKey] = ent; obj.sync("updateAsset");}}], {id : "quick-sheet-drop", hideClose : true, "z-index" : util.getMaxZ(".ui-popout")+1});
                        }
                        else {
                          list[ent._dropKey] = ent;
                        }
                      }
                    });
                    return;
                  }
                  else {
                    if (list[ent._dropKey]) {
                      ui_dropMenu(ui, [{name : "Overwrite?", click : function(){list[ent._dropKey] = ent; obj.sync("updateAsset");}}], {id : "quick-sheet-drop", hideClose : true, "z-index" : util.getMaxZ(".ui-popout")+1});
                      return;
                    }
                    else {
                      list[ent._dropKey] = ent;
                    }
                  }
                }
              }
              else if (dt.getData("spell") || ent.tags["spell"]) {
                obj.data.spellbook.push(ent);
              }
              else {
                obj.data.inventory.push(ent);
              }
            }
            else if (dt.getData("target")) {
              obj.data[dt.getData("target")][dt.getData("key")] = ent;
            }
            obj.sync("updateAsset");
          }
          else if (dt && dt.getData("Text")) {
            sync.rawVal(obj.data.info.img, dt.getData("Text"));
            obj.sync("updateAsset");
          }
        }
      }

      layout.coverlay(app.attr("id")+"-drag-overlay");
    });
  	div.on("dragleave", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      layout.coverlay(app.attr("id")+"-drag-overlay");
  	});
  }

  var info = data.info;
  if (!scope.local) {
    var optionsBar = $("<div>").appendTo(div);
    optionsBar.addClass("flexwrap flexbetween background boxinshadow alttext");
    optionsBar.css("color", "white");
    optionsBar.attr("index", obj.id());
    div.contextmenu(function(ev){
      if (!_down["16"]) {
        var menu = assetTypes.contextmenu(ev, optionsBar, obj, app, scope);
        menu.css("left", ev.pageX - 10);
        menu.css("top", ev.pageY - 10);
        util.windowBound(menu);
        return false;
      }
    });

    if (app.attr("simpleEditing")) {
      if (hasSecurity(getCookie("UserID"), "Rights", obj.data) || app.attr("homebrew")) {
        var quickSheet = $("<button>").appendTo(optionsBar);
        quickSheet.addClass("highlight subtitle alttext");
        quickSheet.text("Stop Editing");
        quickSheet.click(function(){
          if (JSON.stringify(obj.data._d.content) == JSON.stringify(game.templates.display.sheet.content)) {
            if (JSON.stringify(obj.data._d.style) == JSON.stringify(game.templates.display.sheet.style)) {
              delete obj.data._d;
            }
          }
          app.removeAttr("simpleEditing");
          obj.sync("updateAsset");
        });

        var modeBar = $("<div>").appendTo(optionsBar)
        modeBar.addClass("flexrow");
        modeBar.css("color", "#333");
        modeBar.css("text-shadow", "none");

        var quickSheet = $("<button>").appendTo(modeBar);
        quickSheet.addClass("button subtitle");
        quickSheet.text("Paint Mode");
        if (app.attr("boxPaint")) {
          if ((obj.data._d && obj.data._d.content instanceof Object) || (!obj.data._d && sheet.content instanceof Object)) {
            quickSheet.removeClass("button").addClass("highlight alttext");
          }
        }
        quickSheet.click(function(){
          if (obj.data._d && !(obj.data._d.content instanceof Object)) {
            obj.data._d.content = {display : []};
          }
          else if (!obj.data._d) {
            obj.data._d = {style : duplicate(game.templates.display.sheet.style) || {}, content : {classes : "flexcolumn flex padding", display : []}};
          }
          if (app.attr("boxPaint")) {
            app.removeAttr("boxPaint");
          }
          else {
            app.attr("boxPaint", true);
          }
          obj.update();
        });

        var quickSheet = $("<button>").appendTo(modeBar);
        quickSheet.addClass("button subtitle");
        quickSheet.text("Build Mode");
        if (!app.attr("boxPaint")) {
          if ((obj.data._d && obj.data._d.content instanceof Object) || (!obj.data._d && sheet.content instanceof Object)) {
            quickSheet.removeClass("button").addClass("highlight alttext");
          }
        }
        quickSheet.click(function(){
          if (obj.data._d && !(obj.data._d.content instanceof Object)) {
            obj.data._d.content = {display : []};
          }
          else if (!obj.data._d) {
            obj.data._d = {style : duplicate(game.templates.display.sheet.style) || {}, content : {classes : "flexcolumn flex padding", display : []}};
          }
          if (app.attr("boxPaint")) {
            app.removeAttr("boxPaint");
          }
          else {
            app.attr("boxPaint", true);
          }
          obj.update();
        });


        var quickSheet = $("<button>").appendTo(modeBar);
        quickSheet.addClass("button subtitle");
        quickSheet.text("HTML Mode");

        if ((obj.data._d && !(obj.data._d.content instanceof Object)) || !(sheet.content instanceof Object)) {
          quickSheet.removeClass("button").addClass("highlight alttext");
        }
        quickSheet.click(function(){
          var content = $("<div>");
          content.addClass("flexcolumn fit-xy");

          var select = genInput({
            parent : content,
            type : "textarea",
            classes : "flex subtitle",
          });
          if (obj.data._d && !(obj.data._d.content instanceof Object)) {
            select.text(obj.data._d.content);
          }
          else if (!(sheet.content instanceof Object)) {
            select.text(sheet.content);
          }
          select.change(function(){
            obj.data._d.content = $(this).val();
            obj.update();
          });

          content.append("<button class='fit-x spadding'>Confirm</button>");

          var popout = ui_popOut({
            target : $("body"),
            id : "json-editor",
            style : {"width" : "600px", "height" : "600px"}
          }, content);
          popout.resizable();
        });


        var quickSheet = $("<button>").appendTo(optionsBar);
        quickSheet.addClass("background subtitle alttext");
        quickSheet.text("Sheet Background");
        quickSheet.click(function(){
          var imgList = sync.render("ui_filePicker")(obj, app, {
            filter : "img",
            change : function(ev, ui, value){
              var img = new Image();
              img.src = value;
              img.onload = function(){
                obj.data._d = obj.data._d || {style : duplicate(game.templates.display.sheet.style) || {}, content : duplicate(game.templates.display.sheet.content)};
                obj.data._d.style = obj.data._d.style || duplicate(game.templates.display.sheet.style) || {};

                var aspect = this.naturalWidth/this.naturalHeight;

                var imageWidth = this.naturalWidth;
                var imageHeight = this.naturalHeight;
                var areaHeight = 750;
                var areaWidth = 700;

                if (aspect >= 1) { // landscape
                  imageWidth = areaWidth;
                  imageHeight = imageWidth / aspect;
                  if (imageHeight > areaHeight) {
                    imageHeight = areaHeight;
                    imageWidth = areaHeight * aspect;
                  }
                }
                else { // portrait
                  imageHeight = areaHeight;
                  imageWidth = imageHeight * aspect;
                  if (imageWidth > areaWidth) {
                    imageWidth = areaWidth;
                    imageHeight = areaWidth / aspect;
                  }
                }

                obj.data._d.style["background-image"] = 'url("'+value+'")';
                obj.data._d.style["background-size"] = imageWidth + "px " + imageHeight + "px";
                obj.data._d.style["background-repeat"] = "no-repeat";

                obj.update();
                layout.coverlay("icons-picker");
                layout.coverlay("style-sheet");
              };
              img.onerror = function(){
                sendAlert({text : "Error Loading Image"});
                layout.coverlay("icons-picker");
              }
            }
          });

          var pop = ui_popOut({
            target : $(this),
            id : "icons-picker",
            align : "top",
            prompt : true,
            style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
          }, imgList);
          pop.resizable();
        });

        if (!((obj.data._d && !(obj.data._d.content instanceof Object)) || !(sheet.content instanceof Object))) {
          var quickSheet = $("<button>").appendTo(optionsBar);
          quickSheet.addClass("background subtitle alttext");
          quickSheet.text("Blank Sheet");
          quickSheet.click(function(){
            ui_prompt({
              target : $(this),
              confirm : "Clear Sheet?",
              click : function() {
                obj.data._d = {style : duplicate(game.templates.display.sheet.style) || {}, content : {classes : "flexcolumn flex padding", display : []}};
                app.attr("simpleEditing", true);
                obj.update();
              }
            });
          });
          var quickSheet = $("<button>").appendTo(optionsBar);
          quickSheet.addClass("background subtitle alttext");
          quickSheet.text("Default Sheet");
          quickSheet.click(function(){
            obj.data._d = {style : duplicate(game.templates.display.sheet.style) || {}, content : duplicate(game.templates.display.sheet.content)};
            app.attr("simpleEditing", true);
            obj.update();
          });
          var quickSheet = $("<button>").appendTo(optionsBar);
          quickSheet.addClass("background subtitle alttext");
          quickSheet.text("Pre-made");
          quickSheet.click(function(){
            var actionList = [];
            for (var key in game.templates.display.sheet.premade) {
              function wrap(key){
                actionList.push({
                  name : key,
                  click : function(){
                    obj.data._d = duplicate(game.templates.display.sheet.premade[key]);
                    obj.sync("updateAsset");
                  }
                });
              }
              wrap(key);
            }
            for (var key in util.premadeSheets) {
              function wrap(key){
                actionList.push({
                  name : key,
                  click : function(){
                    obj.data._d = duplicate(util.premadeSheets[key]);
                    obj.sync("updateAsset");
                  }
                });
              }
              wrap(key);
            }

            var actionList = util.customSheets(obj, app, scope, sheet);
            ui_dropMenu($(this), actionList, {id : "quick-sheet-drop", "z-index" : util.getMaxZ(".ui-popout")+1});
          });
        }

        var quickSheet = $("<button>").appendTo(optionsBar);
        quickSheet.addClass("background subtitle alttext");
        quickSheet.text("JSON");
        quickSheet.click(function(){
          var select = sync.newApp("ui_JSON");
          select.attr("lookup", "_d");
          select.attr("closeTarget", "json-editor");
          obj.addApp(select);

          var popout = ui_popOut({
            target : $(this),
            id : "json-editor",
          }, select);
          popout.resizable();
        });

        var quickSheet = $("<button>").appendTo(optionsBar);
        quickSheet.addClass("background subtitle alttext");
        quickSheet.text("Load a Sheet");
        quickSheet.click(function(){
          var content = sync.render("ui_assetPicker")(obj, app, {
            category : "c",
            select : function(ev, ui, ent, options, entities){
              if (ent.data._d) {
                obj.data._d = duplicate(ent.data._d);
                obj.update();
              }
              layout.coverlay("add-asset");
            }
          });
          var pop = ui_popOut({
            target : $("body"),
            prompt : true,
            id : "add-asset",
            title : "Pick Sheet",
            style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
          }, content);
          pop.resizable();
        });
      }
    }
    else {
      if (app.attr("from") && game.templates.display.sheet.summary) {
        var back = genIcon("arrow-left").appendTo(optionsBar);
        back.addClass("lrmargin");
        back.attr("title", "Back");
        back.click(function(){
          if (layout.mobile) {
            runCommand("selectPlayerEntity");
            obj.removeApp(app);
            var old = app.attr("ui-name");
            app.attr("ui-name", "ui_assetManager");
            app.attr("from", old);
            game.entities.addApp(app);
          }
          else {
            var old = app.attr("ui-name");
            app.attr("ui-name", app.attr("from"));
            app.attr("from", old);
            obj.update();
          }
          var parent = app.parent();
          if (parent && parent.parent() && parent.parent().parent() && parent.parent().parent().hasClass("ui-popout")) {
            parent = parent.parent().parent();
            parent.css("width", "");
            parent.css("height", "");
            parent.css("max-height", "");
            parent.resizable();
          }
        });
        div.mousemove(function(){
          if (_down["17"]) {
            div.css("cursor", "pointer");
          }
          else {
            div.css("cursor", "");
          }
        });
      }
      if (!app.attr("homebrew")) {
        div.click(function(ev){
          if (_down["17"]) {
            if (optionsBar.hasClass("card-selected")) {
              targetIcon.text("Target");
              optionsBar.removeClass("card-selected");
              util.untarget(obj.id());
              sendAlert({text : "Released Target"});
            }
            else {
              optionsBar.addClass("card-selected");
              targetIcon.text("Release Target");
              util.target(obj.id());
              sendAlert({text : "Targeted"});
            }
          }
        });

        var targetIcon = $("<button>").appendTo(optionsBar);
        targetIcon.addClass("background subtitle alttext");
        if (optionsBar.hasClass("card-selected")) {
          targetIcon.text("Release Target");
        }
        else {
          targetIcon.text("Target");
        }
        targetIcon.click(function() {
          if (targetIcon.text() == "Target") {
            targetIcon.text("Release Target");
            if (optionsBar.hasClass("card-selected")) {
              optionsBar.removeClass("card-selected");
              util.untarget(obj.id());
            }
            else {
              optionsBar.addClass("card-selected");
              util.target(obj.id());
            }
          }
          else {
            targetIcon.text("Target");
            if (optionsBar.hasClass("card-selected")) {
              optionsBar.removeClass("card-selected");
              util.untarget(obj.id());
            }
            else {
              optionsBar.addClass("card-selected");
              util.target(obj.id());
            }
          }
        });
      }

      var buffer = $("<div>").appendTo(optionsBar);
      buffer.addClass("flex");

      if (!scope.viewOnly) {
        if (!app.attr("homebrew")) {
          var securityWrap = $("<button>").appendTo(optionsBar);
          securityWrap.addClass("background subtitle alttext");

          var security = genIcon("lock", "Grant Access").appendTo(securityWrap);
          security.attr("title", "Edit who has access to this character");
          security.click(function(){
            if (app.attr("viewingRights")) {
              app.removeAttr("viewingRights");
            }
            else {
              app.attr("viewingRights", true);
            }
            obj.update();
          });
        }

        var buffer = $("<div>").appendTo(optionsBar);
        buffer.addClass("flex");

        var cog = $("<button>").appendTo(optionsBar);
        cog.addClass("background subtitle alttext");
        cog.attr("title", "Manage attributes");
        cog.text("Attributes");
        cog.click(function(){
          if (app.attr("attributes")) {
            app.removeAttr("attributes");
          }
          else {
            app.attr("attributes", true);
          }
          obj.update();
        });
        if (!app.attr("homebrew")) {
          var icon = $("<button>").appendTo(optionsBar);
          icon.addClass("background subtitle alttext");
          icon.text("Update Map Token");
          icon.click(function() {
            if (boardApi.selections && Object.keys(boardApi.selections).length == 1) {
              var selectData = boardApi.selections[Object.keys(boardApi.selections)[0]];
              var ent = getEnt(selectData.board);
              if (selectData.layer && ent && ent.data && ent.data.layers && ent.data.layers[selectData.layer] && ent.data.layers[selectData.layer].p[selectData.index]) {
                found = true;
                var dupe = duplicate(ent.data.layers[selectData.layer].p[selectData.index]);
                delete dupe.x;
                delete dupe.y;
                dupe.w = boardApi.scale(dupe.w, ent, true);
                dupe.h = boardApi.scale(dupe.h, ent, true);
                delete dupe.l;
                delete dupe.e;
                delete dupe.v;
                delete dupe.eID;
                if (dupe.i) {
                  obj.data.info.img.min = dupe.i;
                }
                else {
                  delete obj.data.info.img.min;
                }
                sendAlert({text : "Saved as default token"});

                obj.data.info.img.modifiers = dupe;
                obj.sync("updateAsset");
              }
              else {
                sendAlert({text : "Invalid Token"});
              }
            }
            else {
              sendAlert({text : "Select a single piece to save as the default map token"})
            }
          });
        }

        var calculations = $("<button>").appendTo(optionsBar);
        calculations.addClass("background subtitle alttext");
        calculations.text("Math");
        calculations.click(function(){
          app.attr("viewingData", true);
          obj.update();
        });
        if (hasSecurity(getCookie("UserID"), "Rights", obj.data) || app.attr("homebrew")) {
          var quickSheet = $("<button>").appendTo(optionsBar);
          quickSheet.addClass("background subtitle alttext");
          quickSheet.text("Sheet");
          quickSheet.click(function(){
            obj.data._d = obj.data._d || {style : duplicate(game.templates.display.sheet.style) || {}, content : duplicate(game.templates.display.sheet.content)};
            app.attr("simpleEditing", true);
            obj.update();
          });
        }
        if (hasSecurity(getCookie("UserID"), "Rights", obj.data) || app.attr("homebrew")) {
          var tags = $("<button>")//.appendTo(optionsBar);
          tags.addClass("background subtitle alttext");
          tags.text("Notes");
          tags.click(function(){
            app.attr("viewingNotes", true);
            obj.update();
          });
        }

        var tags = $("<button>")//.appendTo(optionsBar);
        tags.addClass("background subtitle alttext");
        tags.text("Tags");
        if (app.attr("viewingTags")) {
          tags.removeClass("background");
          tags.addClass("highlight");
        }
        tags.click(function(){
          if (app.attr("viewingTags")) {
            app.removeAttr("viewingTags");
          }
          else {
            app.attr("viewingTags", true);
          }
          obj.update();
        });
        if (!app.attr("homebrew") || game.templates.build) {
          if (game.templates.build) {
            var actions = $("<button>").appendTo(optionsBar);
            actions.addClass("background subtitle alttext");
            actions.text("Actions");
            actions.click(function(ev){
              var newApp = sync.newApp("ui_manageActionsv2");
              newApp.attr("homebrew", app.attr("homebrew"));
              obj.addApp(newApp);

              var pop = ui_popOut({
                target : $(this),
                minimize : true,
                dragThickness : "0.5em",
                title : "Actions",
                align : "bottom",
                style : {"width" : "300px", "max-height" : "300px"},
              }, newApp);
              pop.resizable();

              ev.stopPropagation();
              return false;
            });
          }
          else {
            var actions = $("<button>").appendTo(optionsBar);
            actions.addClass("background subtitle alttext");
            if (app.attr("viewingActions")) {
              actions.removeClass("background");
              actions.addClass("highlight");
            }
            actions.text("Actions");
            actions.click(function(){
              if (app.attr("viewingActions")) {
                app.removeAttr("viewingActions");
                div.empty();
              }
              else {
                app.attr("viewingActions", true);
              }
              obj.update();
            });
            actions.contextmenu(function(ev){
              var actionObj = sync.dummyObj();
              actionObj.data = {context : {c : obj.id()}};

              game.locals["actions"] = game.locals["actions"] || [];
              game.locals["actions"].push(actionObj);

              var newApp = sync.newApp("ui_actions");
              newApp.addClass("spadding");
              actionObj.addApp(newApp);

              var pop = ui_popOut({
                target : $(this),
                minimize : true,
                dragThickness : "0.5em",
                title : "Actions",
                align : "bottom",
                style : {"width" : "300px"},
              }, newApp);
              pop.resizable();

              ev.stopPropagation();
              return false;
            });
          }
        }

        if (hasSecurity(getCookie("UserID"), "Rights", data) && hasSecurity(getCookie("UserID"), "Assistant Master")) {
          if (hasSecurity(getCookie("UserID"), "Owner", data)) {
            var syncLabel;
            if (data._c == -1) {
              syncLabel = genIcon("remove").appendTo(optionsBar);
              syncLabel.addClass("alttext background outline");
              syncLabel.attr("title", "Duplicate to move to Asset Storage");
            }
            else {
              if (data._uid) {
                if (data._sync) {
                  var syncLabel = genIcon("refresh").appendTo(optionsBar);
                  syncLabel.addClass("alttext highlight smooth outline lrpadding");
                  syncLabel.attr("title", "This is saved, and is in-sync with Asset Storage");
                  syncLabel.click(function(ev){
                    runCommand("updateSync", {id : obj.id(), data : false});
                    ev.stopPropagation();
                    return false;
                  });
                }
                else {
                  var syncLabel = genIcon("cloud").appendTo(optionsBar);
                  syncLabel.addClass("alttext highlight smooth outline lrpadding");
                  syncLabel.attr("title", "This is saved, but is not in-sync with Asset Storage");
                  syncLabel.click(function(ev){
                    runCommand("updateSync", {id : obj.id(), data : true});
                    ev.stopPropagation();
                    return false;
                  });
                }
              }
              else {
                var syncLabel = genIcon("cloud")//.appendTo(optionsBar);
                syncLabel.addClass("lrpadding");
                syncLabel.attr("title", "Enable Asset Storage");
                syncLabel.click(function(ev){
                  var popOut = ui_prompt({
                    target : $(this),
                    id : "confirm-store-char",
                    confirm : "Move to Asset Storage",
                    click : function(){
                      runCommand("storeAsset", {id: obj.id()});
                      layout.coverlay("quick-storage-popout");
                      syncLabel.remove();
                    }
                  });
                  ev.stopPropagation();
                  return false;
                });
              }
            }
          }
        }
      }
    }
  }
  else if (obj.id() && isNaN(obj.id()) && obj.id().match(getCookie("UserID"))) {
    var optionsBar = $("<div>").appendTo(div);
    optionsBar.addClass("flexaround background");
    optionsBar.css("color", "white");

    var cloudWrap = genIcon("cloud-download", "Download Asset").appendTo(optionsBar);
    cloudWrap.attr("title", "Download Asset");

    cloudWrap.click(function(ev){
      if (game.locals["storage"]) {
        for (var i in game.locals["storage"].data.l) {
          var listEntry = game.locals["storage"].data.l[i];
          var split = obj.id().split("_");
          if (obj.data._c == getCookie("UserID") && listEntry._uid == split[1]) {
            listEntry.move = true;
            runCommand("moveAssets", {l : game.locals["storage"].data.l});
            delete listEntry.move;
            game.entities.listen[obj.id()] = function(src, update, target) {
              for (var key in src.data) {
                var newEnt = src.data[key];
                if (newEnt.data && newEnt.data._c == split[0] && newEnt.data._uid == split[1]) {
                  obj.removeApp(app);
                  newEnt.addApp(app);
                  return false;
                }
              }
              return true;
            }
            break;
          }
        }
      }
      else {
        sendAlert({text : "Asset Storage hasn't loaded yet"});
      }
      ev.preventDefault();
      ev.stopPropagation();
    });
  }

  if (app.attr("viewingTags")) {
    var tags = sync.render("ui_tags")(obj, app, scope).appendTo(div);
    tags.addClass("foreground outlinebottom");
  }

  var charWrapper = $("<div>").appendTo(div);
  charWrapper.addClass("flexcolumn flex");
  charWrapper.css("overflow-y", "auto");
  charWrapper.attr("_lastScrollTop", app.attr("_lastScrollTop"));
  charWrapper.scroll(function(){
    app.attr("_lastScrollTop", charWrapper.scrollTop());
    app.attr("_lastScrollLeft", charWrapper.scrollLeft());
  });


  var charContents = $("<div>").appendTo(charWrapper);
  charContents.addClass("fit-xy flexcolumn");

  var list = $("<div>").appendTo(charContents);
  list.addClass("fit-x flexaround flexwrap");

  var ctx = sync.defaultContext();
  ctx[obj.data._t] = obj.data;

  if (obj.data._d) { // flat sheets
    sheet = obj.data._d;

    for (var i in sheet.style) {
      charWrapper.css(i, sheet.style[i]);
    }

    var newScope = duplicate(scope);
    newScope.display = sheet.content;
    if (scope.markup || app.attr("simpleEditing")) {
      newScope.markup = "editing";
    }
    newScope.context = ctx;
    charContents.append(sync.render("ui_processUI")(obj, app, newScope));

    if (obj.data._d.content instanceof Object) {
      if (app.attr("simpleEditing")) {
        if (app.attr("boxPaint")) {
          charWrapper.css("position", "relative");
          charContents.children().children().children().find("*").css("opacity", "0").css("pointer-events","none");

          var sX;
          var sY;
          var snap;
          var fit = $("<div>").appendTo(charWrapper);
          fit.css("position", "absolute");
          fit.css("background", "rgba(0,0,0,0.4)");
          fit.css("min-height", "100%");
          fit.css("min-width", "100%");
          fit.css("cursor", "pointer");
          fit.mousedown(function(ev){
            ghost.show();
            sX = ev.pageX;
            sY = ev.pageY;

            var offset = fit.offset();
            sX = sX - offset.left;
            sY = sY - offset.top;

            sX = sX + charWrapper.scrollLeft();
            sY = sY + charWrapper.scrollTop();
            ev.preventDefault();
          });
          fit.mousemove(function(ev){
            var eX = ev.pageX;
            var eY = ev.pageY;

            var offset = fit.offset();
            eX = eX - offset.left;
            eY = eY - offset.top;

            eX = eX + charWrapper.scrollLeft();
            eY = eY + charWrapper.scrollTop();

            var sXD = sX;
            var sYD = sY;

            if (snap || _down[16]) {
              if (eX < sX) {
                sXD = Math.round(eX/20) * 20;
                eX = Math.floor(sX/20) * 20;
              }
              if (eY < sY) {
                sYD = Math.round(eY/20) * 20;
                eY = Math.floor(sY/20) * 20;
              }
            }

            var eW = Math.round(Math.abs(sXD - eX));
            var eH = Math.round(Math.abs(sYD - eY));

            sXD = Math.round(Math.min(sXD, eX));
            sYD = Math.round(Math.min(sYD, eY));

            if (snap || _down[16]) {
              sXD = Math.round(sXD/20) * 20;
              sYD = Math.round(sYD/20) * 20;
              eW = Math.ceil(eW/20) * 20;
              eH = Math.ceil(eH/20) * 20;
            }

            ghost.css("left", sXD);
            ghost.css("top", sYD);
            ghost.width(eW);
            ghost.height(eH);
            ev.preventDefault();
          });
          fit.mouseup(function(ev){
            if (ev.which == 1) {
              var eX = ev.pageX;
              var eY = ev.pageY;

              var offset = fit.offset();
              eX = eX - offset.left;
              eY = eY - offset.top;

              eX = eX + charWrapper.scrollLeft();
              eY = eY + charWrapper.scrollTop();

              var sXD = sX;
              var sYD = sY;

              if (snap || _down[16]) {
                if (eX < sX) {
                  sXD = Math.round(eX/20) * 20;
                  eX = Math.floor(sX/20) * 20;
                }
                if (eY < sY) {
                  sYD = Math.round(eY/20) * 20;
                  eY = Math.floor(sY/20) * 20;
                }
              }

              var eW = Math.round(Math.abs(sXD - eX));
              var eH = Math.round(Math.abs(sYD - eY));

              sXD = Math.round(Math.min(sXD, eX));
              sYD = Math.round(Math.min(sYD, eY));

              if (snap || _down[16]) {
                sXD = Math.round(sXD/20) * 20;
                sYD = Math.round(sYD/20) * 20;
                eW = Math.ceil(eW/20) * 20;
                eH = Math.ceil(eH/20) * 20;
              }
              if (!_down[17]) {
                var dataList = [];

                var template = {stats : "", info : "", counters : ""};
                for (var key in template) {
                  var pathKey = key;
                  for (var subKey in obj.data[key]) {
                    pathKey = key + "." + subKey;
                    if (pathKey != "info.notes" && pathKey != "info.img") {
                      dataList.push(pathKey);
                    }
                  }
                }
                setTimeout(function(){
                  ui_prompt({
                    target : app,
                    prompt : false,
                    inputs : {
                      "Attribute" : {list : dataList},
                    },
                    click : function(ev, inputs) {
                      if (inputs["Attribute"].val()) {
                        if (obj.data._d) {
                          obj.data._d.content.style = obj.data._d.content.style || {};
                          obj.data._d.content.style.position = "relative";

                          obj.data._d.content.display = obj.data._d.content.display || [];
                          obj.data._d.content.display.push(
                            {
                              classes : "flexrow",
                              style : {width : eW, height : eH, position : "absolute", left : sXD, top : sYD},
                              name : "",
                              target : inputs["Attribute"].val(),
                              edit : {classes : "line fit-x middle"}
                            }
                          );
                        }
                        obj.update();
                      }
                      else {
                        sendAlert({text : "No Attribute Selected"});
                      }
                    }
                  });
                }, 10);
                sX = null;
                sY = null;
                ghost.hide();
              }
              else {
                if (obj.data._d) {
                  obj.data._d.content.style = obj.data._d.content.style || {};
                  obj.data._d.content.style.position = "relative";

                  obj.data._d.content.display = obj.data._d.content.display || [];

                  obj.data._d.content.display.push(
                    {
                      classes : "white outline smooth flexcolumn flexcontainer",
                      style : {width : eW, height : eH, position : "absolute", left : sXD, top : sYD},
                      display : []
                    }
                  );
                }
                obj.update();
              }
            }
            sX = null;
            sY = null;
            ev.preventDefault();
          });

          var ghost = $("<text>").appendTo(charWrapper);
          ghost.addClass("bold alttext selected");
          ghost.css("position","absolute");
          ghost.css("pointer-events", "none");

          var drawLabel = $("<div>").appendTo(charWrapper);
          drawLabel.addClass("fit-x alttext flexmiddle flexcolumn");
          drawLabel.css("position","absolute");
          drawLabel.css("left", "0");
          drawLabel.css("top", "45%");
          drawLabel.css("pointer-events", "none");
          drawLabel.append("<b>Draw Attribute Fields</b>");
          drawLabel.append("<b>Press Shift to Toggle Snap to Grid</b>");
          drawLabel.append("<b>Hold control to draw an attribute container</b>");
        }
        else {
          function sheetElementMenu(parent, path) {
            var contents = sync.render("ui_addElement")(obj, app, {path : path, closeTarget : "sheet-element-menu", viewOnly : scope.viewOnly});

            var pop = ui_popOut({
              target : app,
              prompt : true,
              id : "sheet-element-menu",
              style : {"width" : "400px", "height" : "400px"},
            }, contents);
            return pop;
          }

          charContents.click(function(){
            var replace = path.replace(app.attr("id")+"_0", "");
            while (replace.match("-")) {
              replace = replace.replace("-", ".");
            }
            if (replace[0] == ".") {
              replace = replace.substring(1, replace.length);
            }

            var select = sync.newApp("ui_JSON");
            select.attr("lookup", "_d.contents"+replace);
            select.attr("closeTarget", "json-editor");
            obj.addApp(select);

            var popout = ui_popOut({
              target : $(this),
              id : "json-editor",
            }, select);
            popout.resizable();
          });
          function build(sData, lastLookup) {
            var first = false;
            if (!lastLookup) {
              lastLookup = app.attr("id")+"_0";
              first = true;
            }
            var name = lastLookup;
            var icon = "";
            if (sData.classes && sData.classes.match("flexcolumn")) {
              icon = 'resize-vertical';
              name = "Columns";
            }
            else if (sData.classes && sData.classes.match("flexrow")) {
              name = "Rows";
              icon = "resize-horizontal";
            }
            if (sData.ui) {
              name = sData.ui;
              icon = "edit";
            }
            if (sData.apps) {
              name = "Apps";
              icon = "th-large";
            }
            if (sData.link) {
              name = sData.link;
              icon = "link"
            }
            if (sData.icon) {
              name = sData.icon;
              icon = "exclamation-sign"
            }

            if (sData.name) {
              name = sData.name;
              icon = "text-color"
            }
            if (sData.target) {
              name = sData.target;
              icon = "";
            }
            function clickWrap(scope, lastLookup) {
              setTimeout(function(){
                $("#"+(newScope.markup || "")+lastLookup).mousemove(function(ev){
                  cursorX = ev.pageX;
                  cursorY = ev.pageY;
                  if (!$("#sheet-element-menu").length) {
                    $(".selected").removeClass("selected");
                    $(this).addClass("selected");
                  }
                  ev.stopPropagation();
                  ev.preventDefault();
                });
                $("#"+(newScope.markup || "")+lastLookup).attr("target", lastLookup);
                $("#"+(newScope.markup || "")+lastLookup).unbind("click");
                $("#"+(newScope.markup || "")+lastLookup).css("cursor", "pointer");
                $("#"+(newScope.markup || "")+lastLookup).click(function(ev){
                  $(".selected").removeClass("selected");
                  $(this).addClass("selected");

                  var popout = sheetElementMenu($(this), lastLookup);

                  ev.stopPropagation();
                });
                $("#"+(newScope.markup || "")+lastLookup).contextmenu(function(ev){
                  $(".selected").removeClass("selected");
                  $(this).addClass("selected");
                  var focus = $(this);
                  var actionsList = [
                    {
                      name : "DELETE",
                      icon : "trash",
                      click : function(ev, ui) {
                        var replace = lastLookup.replace(app.attr("id")+"_0", "");
                        while (replace.match("-")) {
                          replace = replace.replace("-", ".");
                        }
                        if (replace[0] == ".") {
                          replace = replace.substring(1, replace.length);
                        }

                        var index = replace.split("\.");
                        index = index[index.length-1];
                        var final = replace.substring(0, replace.length-1-index.length);
                        var arr = sync.traverse(obj.data._d.content, final);
                        if (arr && Array.isArray(arr)) {
                          arr.splice(index, 1);
                          if (!_down[16]) {
                            layout.coverlay("sheet-element-menu");
                          }
                          obj.update();
                        }
                      }
                    },
                  ]

                  var drop = ui_dropMenu($(this), actionsList, {});

                  ev.stopPropagation();
                  return false;
                });
              }, 10);
            }
            clickWrap(newScope, lastLookup);
            if (sData.display) {
              for (var i in sData.display) {
                if (sData.display[i]) {
                  build(sData.display[i], lastLookup+"-display-"+i);
                }
              }
            }
          }
          build(newScope.display);
        }
      }

      if (sheet.tabs && sheet.tabs.length) {
        var tabContent = genNavBar("flexaround background alttext", "flex", "4px");
        tabContent.addClass("flex");
        function tabWrap(importData, index) {
          tabContent.generateTab(importData.name, importData.icon, function(parent) {
            var newScope = duplicate(scope);
            newScope.display = importData.display;
            newScope.context = ctx;
            if (scope.markup) {
              newScope.markup = "tabs"+index;
            }
            parent.append(sync.render("ui_processUI")(obj, app, newScope));

            if (app) {
              app.attr("char_tab", importData.name);
            }
          });
        }

        for (var index in sheet.tabs) {
          tabWrap(sheet.tabs[index], index);
        }
        if (sheet.tabs && sheet.tabs.length) {
          if (app) {
            if (!app.attr("char_tab") && sheet.tabs) {
              app.attr("char_tab", sheet.tabs[0].name);
            }
            tabContent.selectTab(app.attr("char_tab"));
          }
          else {
            tabContent.selectTab(sheet.tabs[0].name);
          }
        }

        tabContent.appendTo(charContents);
      }
    }
    return div;
  }

  for (var i in sheet.style) {
    charWrapper.css(i, sheet.style[i]);
  }

  var newScope = duplicate(scope);
  newScope.display = sheet.content;
  if (scope.markup) {
    newScope.markup = "content";
  }
  newScope.context = ctx;
  charContents.append(sync.render("ui_processUI")(obj, app, newScope));
  if (sheet.tabs && sheet.tabs.length) {
    var tabContent = genNavBar("flexaround background alttext", "flex", "4px");
    tabContent.addClass("flex");
    function tabWrap(importData, index) {
      tabContent.generateTab(importData.name, importData.icon, function(parent) {
        var newScope = duplicate(scope);
        newScope.display = importData.display;
        newScope.context = ctx;
        if (scope.markup) {
          newScope.markup = "tabs"+index;
        }
        parent.append(sync.render("ui_processUI")(obj, app, newScope));

        if (app) {
          app.attr("char_tab", importData.name);
        }
      });
    }

    for (var index in sheet.tabs) {
      tabWrap(sheet.tabs[index], index);
    }
    if (sheet.tabs && sheet.tabs.length) {
      if (app) {
        if (!app.attr("char_tab") && sheet.tabs) {
          app.attr("char_tab", sheet.tabs[0].name);
        }
        tabContent.selectTab(app.attr("char_tab"));
      }
      else {
        tabContent.selectTab(sheet.tabs[0].name);
      }
    }

    tabContent.appendTo(charContents);
  }

  return div;
});

sync.render("ui_skillDiceLookup", function(obj, app, scope) {
  var data = obj.data;
  var value = sync.traverse(data, scope.lookup);

  if (sync.val(value)) {
    for (var i in obj.data.skills) {
      if (obj.data.skills[i] && obj.data.skills[i].name.toLowerCase() == sync.val(value).toLowerCase()) {
        return sync.render("ui_skillDice")(obj, app, {skill : i});
      }
    }
  }
  return $("<div>");
});

sync.render("ui_skillDice", function(obj, app, scope) {
  var data = obj.data;

  var diceWrapper = $("<div>");
  diceWrapper.addClass("flexbetween hover2");
  diceWrapper.css("cursor", "pointer");

  var stat;
  if (scope.stat) {
    stat = data.stats[scope.stat];
  }

  var skill = data.skills[scope.skill];

  var ctx = sync.defaultContext();
  ctx["skill"] = skill;

  if (!stat) {
    var skillRegex = /\(([^(]+[^)]+)\)/;
    var statRes = skillRegex.exec(skill.name);
    if (statRes) {
      var statName = (statRes[1].charAt(0).toUpperCase() + statRes[1].substring(1, statRes[1].length).toLowerCase());
      stat = data.stats[statName];
    }
  }
  ctx["stat"] = duplicate(stat);
  ctx["statKey"] = statName;
  ctx["c"] = duplicate(obj.data);

  var query = sync.executeQuery(game.templates.display.sheet.skills.roll, ctx, true);

  for (var index in query.equations) {
    sync.render("ui_dice")(query.equations[index], app, {width : "10px", height : "10px"}).appendTo(diceWrapper);
  }

  diceWrapper.attr("name", skill.name);
  diceWrapper.click(function(ev){
    var skillName = $(this).attr("name");
    var eventData = {
      msg : "@me.name+' used "+skillName+"'",
      ui : game.templates.display.sheet.skills.evUI,
      data : game.templates.display.sheet.skills.roll
    };
    _diceable(ev, $(this), eventData, ctx);
  });
  return diceWrapper;
});

sync.render("ui_characterTraits", function(obj, app, scope) {
  var data = obj.data;
  var div = $("<div>");
  var info = data.info;
  ////////////////
  //// Traits ////
  ////////////////

  var title = $("<b class='flexmiddle'>Traits</b>").appendTo(div);
  if (!scope.viewOnly) {
    var icon = genIcon("plus").appendTo(title);
    icon.addClass("create");
    icon.click(function() {
      data.traits.push(sync.newValue());
      obj.sync("updateAsset");
    });
  }

  var traitList = $("<div>").appendTo(div);
  traitList.addClass("flexwrap fit-x");
  traitList.css("background-color", "white");
  for (var index in data.traits) {
    var row = $("<div>").appendTo(traitList);
    row.addClass("outline flexbetween");
    row.css("width", "50%");

    if (!scope.viewOnly) {
      var up = genIcon("arrow-up").appendTo(row);
      up.addClass("subtitle");
      up.attr("ref", index);
      up.click(function() {
        var temp = data.traits[Math.max(parseInt($(this).attr("ref"))-1, 0)];
        data.traits[Math.max(parseInt($(this).attr("ref"))-1, 0)] = data.traits[$(this).attr("ref")];
        data.traits[$(this).attr("ref")] = temp;
        obj.sync("updateAsset");
      });
    }

    var infoPlate = $("<div>").appendTo(row);
    infoPlate.addClass("flexaround");

    var infoInput = genInput({
      classes : "line",
      parent: infoPlate,
      style: {"width": "100%", "font-size": "0.8em"},
      placeholder: "Trait Name",
      value: data.traits[index].name,
      disabled: scope.viewOnly,
      index : index
    });
    infoInput.change(function(){
      data.traits[$(this).attr("index")].name = $(this).val();
      obj.sync("updateAsset");
    });

    if (!scope.viewOnly) {
      var icon = genIcon("remove").css("color", "red").appendTo(row);
      icon.css("text-align", "center");
      icon.attr("i-ref", index);
      icon.click(function() {
        data.traits.splice(parseInt($(this).attr("i-ref")), 1);
        obj.sync("updateAsset");
      });
    }
  }
  return div;
});

var _skillCache = {};

sync.render("ui_characterSkills", function(obj, app, scope){
  var data = obj.data;
  var div = $("<div>");

  scope = scope || {viewOnly: (app.attr("viewOnly") == "true"), minimized : (app.attr("minimized") == "true")};
  if (!scope.noTitle) {
    if (!scope.minimized) {
      var title = $("<h1 style='text-align: center;'>Skills </h1>").appendTo(div);
      if (!scope.viewOnly) {
        var icon = genIcon("plus").appendTo(title);
        icon.addClass("create");
        icon.click(function() {
          ui_prompt({
            target : $(this),
            inputs : {
              "Skill Key" : {placeholder : "Enter a short unique key to reference this skill"}
            },
            click : function(ev, inputs) {
              if (inputs["Skill Key"].val()) {
                data.skills[inputs["Skill Key"].val()] = sync.newValue("");
                obj.sync("updateAsset");
              }
            }
          });
        });
      }
    }
    else {
      var title = $("<b>Skills</b>").appendTo(div);
      title.addClass("fit-x flexmiddle");
      title.css("font-size", "1em");
    }
  }

  var skillList = $("<div>").appendTo(div);
  skillList.addClass("flexcolumn");

  var keys = Object.keys(data.skills);
  keys.sort(function(a,b){
    var name1 = data.skills[a].name;
    var name2 = data.skills[b].name;
    if (name1 > name2) {
      return 1;
    }
    else if (name1 < name2) {
      return -1;
    }
    return 0;
  });

  for (var ind in keys) {
    var index = keys[ind];
    if (!game.templates.display.sheet.skills.applyUI) {
      skillList.addClass("outline smooth white");
      var row = $("<div>").appendTo(skillList);
      row.addClass("flexrow outlinebottom flexbetween subtitle hover2");
      row.attr("index", index);
      if (scope.minimized) {
        row.addClass("lrpadding");
        row.append("<b>"+data.skills[index].name+"</b>");

        var skillRegex = /\((.+)\)/;
        var statRes = skillRegex.exec(data.skills[index].name);
        if (statRes) {
          if (!game.templates.display.sheet.skills.ui) {
            var context = sync.defaultContext();
            context["skill"] = data.skills[index];

            context["c"] = obj.data;

            if (data.stats[statRes[1]]) {
              context["stat"] = data.stats[statRes[1]];
              context["statKey"] = statRes[1];
            }
            var bonusVal = "0";
            bonusVal = sync.eval(game.templates.display.sheet.skills.display || "M{skill}", context);

            var bonus = $("<b>").appendTo(row);
            bonus.addClass("lrpadding");
            if (bonusVal <= 0) {
              if (game.templates.display.sheet.skills.inverted) {
                bonus.text(String(bonusVal).replace("-", "+"));
              }
              else {
                bonus.text(bonusVal);
              }
            }
            else {
              if (game.templates.display.sheet.skills.inverted) {
                bonus.text("-"+bonusVal);
              }
              else {
                bonus.text("+"+bonusVal);
              }
            }
            row.addClass("hover2");
            row.attr("stat", statRes[1]);
            row.attr("val", game.templates.display.sheet.skills.roll);
            row.attr("name", data.skills[index].name);
            row.attr("index", index);
            row.click(function(ev){
              var context = {};
              context["skill"] = $(this).attr("index");
              context["c"] = obj.id();

              if (data.stats[$(this).attr("stat")]) {
                context["stat"] = $(this).attr("stat");
              }

              var actionObj = sync.dummyObj();

              var options = duplicate(game.templates.display.sheet.skills.options);
              var ctx = sync.defaultContext();
              ctx["skill"] = data.skills[$(this).attr("index")];
              ctx["c"] = obj.data;

              if (data.stats[$(this).attr("stat")]) {
                ctx["stat"] = data.stats[$(this).attr("stat")];
                ctx["statKey"] = $(this).attr("stat");
              }
              for (var i in options) {
                options[i] = sync.eval(options[i], ctx);
              }

              actionObj.data = {
                context : context,
                options : options,
                action : game.templates.display.sheet.skills.action,
                msg : sync.eval(game.templates.display.sheet.skills.msg, ctx)
              };

              if (obj.data._a) {
                actionObj.actionData = duplicate(obj.data._a[game.templates.display.sheet.skills.action]);
              }

              game.locals["actionsList"] = game.locals["actionsList"] || {};
              game.locals["actionsList"][app.attr("id")+"-"+obj.data._t] = actionObj;

              var actionApp = sync.newApp("ui_renderAction");
              actionObj.addApp(actionApp);

              var pop = ui_popOut({
                target : $(this),
                minimize : true,
                prompt : true,
                dragThickness : "0.5em",
                title : "Action"
              }, actionApp);
              pop.resizable();
            });
          }
          else {
            var statName = statRes[1].charAt(0).toUpperCase() + statRes[1].substring(1, statRes[1].length).toLowerCase();
            var diceWrapper = sync.render("ui_skillDice")(obj, app, {stat : statName, skill : index});
            diceWrapper.appendTo(row);
          }
        }
      }
      else {
        var key = $("<text>").appendTo(row);
        key.addClass("subtitle lrpadding flexmiddle");
        key.attr("title", "@c.skills."+index);
        key.append("@");
        if (hasSecurity(getCookie("UserID"), "Rights", obj.data)) {
          key.attr("index", index);
          key.click(function(){
            var oldIndex = $(this).attr("index");
            var pop = ui_prompt({
              target : $(this),
              inputs : {"Change Key" : {placeholder : "Assign a new key"}},
              click : function(ev, inputs) {
                var newKey = inputs["Change Key"].val();
                if (newKey) {
                  if (!obj.data.skills[newKey] && obj.data.skills[oldIndex]) {
                    obj.data.skills[newKey] = obj.data.skills[oldIndex];
                    delete obj.data.skills[oldIndex];
                    obj.sync("updateAsset");
                  }
                  else {
                    sendAlert({text : "Another entry exists with this key"});
                  }
                }
                else {
                  sendAlert({text : "Enter valid key"});
                }
              }
            });
          });
        }

        var skillCont = $("<div>").appendTo(row);
        skillCont.css("width", "40%");
        skillCont.css("display", "inline-block");

        var infoInput = genInput({
          classes : "line",
          parent: skillCont,
          placeholder: "Skill Name",
          value: data.skills[index].name,
          disabled : scope.viewOnly,
          style : {"width" : "100%", "color" : "#333"},
          index : index,
        });
        infoInput.change(function(){
          var index = $(this).attr("index");
          data.skills[index].name = $(this).val();
          obj.sync("updateAsset");
        });

        var skillRegex = /\((.+)\)/;
        var statRes = skillRegex.exec(data.skills[index].name);
        var statBonus;

        if (statRes) {
          var advances = $("<div>").appendTo(row);
          advances.addClass("flexaround flex");

          var checkWrapper = $("<div>").appendTo(advances);
          checkWrapper.css("width", "auto");
          checkWrapper.addClass("flexmiddle");

          var check = genInput({
            parent : checkWrapper,
            type : "checkbox",
            index : index,
            disabled : scope.viewOnly
          });
          if (sync.rawVal(data.skills[index]) > 0) {
            check.prop("checked", true);
          }
          checkWrapper.append(game.templates.display.sheet.skills.check);
          check.css("margin", "0");
          check.change(function() {
            if ($(this).prop("checked") == true) {
              sync.rawVal(data.skills[$(this).attr("index")], 1);
            }
            else {
              sync.rawVal(data.skills[$(this).attr("index")], "");
              if (game.templates.display.sheet.skills.check == null){
                sync.removeModifier(data.skills[$(this).attr("index")], "rank");
              }
            }
            obj.sync("updateAsset");
          });

          var statName = statRes[1].charAt(0).toUpperCase() + statRes[1].substring(1, statRes[1].length).toLowerCase();
          if (!game.templates.display.sheet.skills.ranks) {
            var bonusEntry = genInput({
              parent : advances,
              type : "number",
              value : sync.modifier(data.skills[index], "rank"),
              placeholder : "Ranks",
              index : index,
              disabled : scope.viewOnly,
              style : {"width": "55px", color : "#333"}
            });
            bonusEntry.change(function(){
              sync.modifier(data.skills[$(this).attr("index")], "rank", parseInt($(this).val()));
              obj.sync("updateAsset");
            });
          }
          else {
            if (game.templates.display.sheet.skills.ui) {
              advances.css("width", "");

              var statName = statRes[1].charAt(0).toUpperCase() + statRes[1].substring(1, statRes[1].length).toLowerCase();
              var diceWrapper = sync.render("ui_skillDice")(obj, app, {stat : statName, skill : index});
              diceWrapper.appendTo(row);
            }
            if (game.templates.display.sheet.skills.check){
              advances = $("<div>").appendTo(row);
              advances.addClass("flexmiddle");
              if (!game.templates.display.sheet.skills.ui) {
                advances.css("width", "25%");
              }
            }
            else {
              advances.removeClass("flexaround");
              advances.addClass("flexmiddle");
            }
            for (var i in game.templates.display.sheet.skills.ranks) {
              var advancement = genInput({
                parent: advances,
                class: "advancement",
                type: "checkbox",
                index: index,
                level : i,
                rank: game.templates.display.sheet.skills.ranks[i],
                disabled: scope.viewOnly,
                style : {"width" : "12px", "height" : "12px", "margin" : "0"},
              });

              if (sync.modifier(data.skills[index], "rank") > 0 && game.templates.display.sheet.skills.ranks[i] <= sync.modifier(data.skills[index], "rank")) {
                advancement.prop("checked", true);
              }
              if (!scope.viewOnly) {
                advancement.change(function() {
                  if ($(this).prop("checked")) {
                    if (game.templates.display.sheet.skills.check == null){
                      sync.rawVal(data.skills[$(this).attr("index")], 1);
                    }
                    sync.modifier(data.skills[$(this).attr("index")], "rank", parseInt($(this).attr("rank")));
                    obj.sync("updateAsset");
                  }
                  else {
                    var val = Math.max(parseInt($(this).attr("level"))-1,-1);
                    if (val < 0) {
                      sync.removeModifier(data.skills[$(this).attr("index")], "rank");
                    }
                    else {
                      sync.modifier(data.skills[$(this).attr("index")], "rank", parseInt($(this).attr("rank")));
                    }
                    obj.sync("updateAsset");
                  }
                });
              }
            }
          }
          if (!game.templates.display.sheet.skills.ui) {
            var context = sync.defaultContext();
            context["skill"] = data.skills[index];
            context["c"] = obj.data;

            if (data.stats[statRes[1]]) {
              context["stat"] = data.stats[statRes[1]];
              context["statKey"] = statRes[1];
            }
            var bonusVal = sync.eval(game.templates.display.sheet.skills.display || "M@skill", context);

            var bonus = $("<button>").appendTo(advances);
            if (bonusVal <= 0) {
              if (game.templates.display.sheet.skills.inverted) {
                bonus.text(String(bonusVal).replace("-", "+"));
              }
              else {
                bonus.text(bonusVal);
              }
            }
            else {
              if (game.templates.display.sheet.skills.inverted) {
                bonus.text("-"+bonusVal);
              }
              else {
                bonus.text("+"+bonusVal);
              }
            }
            bonus.addClass("flexmiddle hover2 lrpadding");
            bonus.css("color", "#333");
            bonus.css("cursor", "pointer");
            bonus.attr("stat", statRes[1]);
            bonus.attr("val", game.templates.display.sheet.skills.roll);
            bonus.attr("name", data.skills[index].name);
            bonus.attr("index", index);
            bonus.css("min-width", "40px");
            bonus.click(function(ev){
              var context = {};
              context["skill"] = $(this).attr("index");
              context["c"] = obj.id();

              if (data.stats[$(this).attr("stat")]) {
                context["stat"] = $(this).attr("stat");
              }

              var actionObj = sync.dummyObj();

              var options = duplicate(game.templates.display.sheet.skills.options);
              var ctx = sync.defaultContext();;
              ctx["skill"] = data.skills[$(this).attr("index")];
              ctx["c"] = obj.data;

              if (data.stats[$(this).attr("stat")]) {
                ctx["stat"] = data.stats[$(this).attr("stat")];
                ctx["statKey"] = $(this).attr("stat");
              }
              for (var i in options) {
                options[i] = sync.eval(options[i], ctx);
              }

              actionObj.data = {context : context, options : options, action : game.templates.display.sheet.skills.action, actionData : duplicate(game.templates.actions.c[game.templates.display.sheet.skills.action]), msg : sync.eval(game.templates.display.sheet.skills.msg, ctx)};

              if (obj.data._a) {
                actionObj.actionData = duplicate(obj.data._a[game.templates.display.sheet.skills.action]);
              }

              game.locals["actionsList"] = game.locals["actionsList"] || {};
              game.locals["actionsList"][app.attr("id")+"-"+obj.data._t] = actionObj;

              var actionApp = sync.newApp("ui_renderAction");
              actionObj.addApp(actionApp);

              var pop = ui_popOut({
                target : $(this),
                minimize : true,
                prompt : true,
                dragThickness : "0.5em",
                title : "Action"
              }, actionApp);
              pop.resizable();
            });
          }

          var iconWrap = $("<div>").appendTo(row);
          iconWrap.addClass("flexmiddle lrpadding");

          var icon = genIcon("list-alt", "Mods").appendTo(iconWrap);
          icon.css("text-align", "center");
          icon.attr("index", index);
          icon.attr("statBonus", statBonus);
          icon.attr("title", "Modifiers");
          icon.click(function() {
            var content = sync.newApp("ui_modifiers");
            content.attr("viewOnly", scope.viewOnly);
            content.attr("lookup", "skills."+$(this).attr("index"));
            content.attr("modsOnly", "true");
            content.attr("total", statBonus);
            obj.addApp(content);

            ui_popOut({
              target : $(this),
              align : "top",
              id : "skill-modifiers"
            }, content);
          });
        }
        else {
          infoInput.css("font-size", "1.4em");
          infoInput.css("font-weight", "bold");

          infoInput.css("text-align", "center");
          infoInput.attr("placeholder", "<Skill Name> (<Stat>)");
          skillCont.addClass("fit-x");
          skillCont.css("width", "");
          if (scope.viewOnly) {
            row.removeClass("flexbetween");
          }
          skillCont.addClass("flexmiddle");
        }

        if (!scope.viewOnly) {
          var icon = genIcon("remove").appendTo(row);
          icon.addClass("destroy");
          icon.css("text-align", "center");
          icon.attr("index", index);
          icon.click(function() {
            delete data.skills[$(this).attr("index")];
            obj.sync("updateAsset");
          });
        }
      }
    }
    else {
      var context = sync.defaultContext();
      context["skill"] = data.skills[index];
      context["skillKey"] = index;
      context["c"] = obj.data;

      var statBonus;
      var statRes;
      if (!_skillCache[data.skills[index].name]) {
        var skillRegex = /\((.+)\)/;
        statRes = skillRegex.exec(data.skills[index].name);
        if (statRes) {
          _skillCache[data.skills[index]] = statRes[1];
        }
      }
      else {
        statRes = _skillCache[data.skills[index]];
      }

      if (statRes && data.stats[statRes[1]]) {
        context["stat"] = data.stats[statRes[1]];
        context["statKey"] = statRes[1];
      }


      var display = JSON.stringify(game.templates.display.sheet.skills.applyUI.display);
      display = display.replace(new RegExp("@skillKey", 'g'), index);
      display = display.replace(new RegExp("@skillTarget", 'g'), "skills." + index);
      if (statRes && statRes[1]) {
        display = display.replace(new RegExp("@statKey", 'g'), statRes[1]);
      }
      else {
        display = display.replace(new RegExp("@statKey", 'g'), "");
      }
      display = JSON.parse(display);

      var ui = sync.render("ui_processUI")(obj, app, {display : display, context : context, viewOnly : scope.viewOnly}).appendTo(skillList);
    }
  }

  return div;
});

sync.render("ui_characterSpecials", function(obj, app, scope) {
  var div = $("<div>");

  var data = obj.data;
  var info = data.info;

  var specials = $("<div>").appendTo(div);

  var title = $("<b class='flexmiddle'>Special Rules</b>").appendTo(specials);
  if (!scope.viewOnly) {
    var icon = genIcon("plus").appendTo(title);
    icon.addClass("create");
    icon.click(function() {
      var popout = ui_prompt({
        target : $(this),
        id : "special-rule-popout",
        inputs : {"Name" : ""},
        click : function(ev, inputs) {
          obj.data.specials = obj.data.specials || {};
          obj.data.specials[inputs["Name"].val()] = sync.newValue(inputs["Name"].val());
          obj.sync("updateAsset");
          layout.coverlay("special-rule-popout");
        }
      });
    });
  }
  var specialList = $("<div>").appendTo(div);
  specialList.css("background-color", "white");

  var keys = Object.keys(data.specials);
  keys.sort(function(a,b){
    var name1 = data.specials[a].name;
    var name2 = data.specials[b].name;
    if (name1 > name2) {
      return 1;
    }
    else if (name1 < name2) {
      return -1;
    }
    return 0;
  });

  for (var ind in keys) {
    var index = keys[ind];
    var specialData = data.specials[index];
    if (specialData) {
      var specialCont = $("<div>").appendTo(specialList);
      specialCont.addClass("fit-x outline specialContent");
      if (scope.minimized) {
        specialCont.addClass("subtitle");
      }
      if (!scope.viewOnly) {
        specialCont.addClass("hover2 flexbetween");
        specialCont.css("cursor", "pointer");
        specialCont.attr("index", index);

        var key = $("<text>").appendTo(specialCont);
        key.addClass("subtitle lrpadding flexmiddle");
        key.attr("title", "@c.specials."+index);
        key.append("@");
        if (hasSecurity(getCookie("UserID"), "Rights", obj.data)) {
          key.attr("index", index);
          key.click(function(){
            var oldIndex = $(this).attr("index");
            var pop = ui_prompt({
              target : $(this),
              inputs : {"Change Macro Key" : {placeholder : "Assign a new macro key"}},
              click : function(ev, inputs) {
                var newKey = inputs["Change Macro Key"].val();
                if (newKey) {
                  if (!obj.data.specials[newKey] && obj.data.specials[oldIndex]) {
                    obj.data.specials[newKey] = obj.data.specials[oldIndex];
                    delete obj.data.specials[oldIndex];
                    obj.sync("updateAsset");
                  }
                  else {
                    sendAlert({text : "Another entry exists with this macro key"});
                  }
                }
                else {
                  sendAlert({text : "Enter valid macro key"});
                }
              }
            });
          });
        }
      }

      var talent = sync.render("ui_renderTalent")(obj, app, {talentData: specialData, viewOnly: true}).appendTo(specialCont);
      talent.addClass("spadding");
      talent.attr("index", index);
      if (!scope.viewOnly) {
        talent.click(function(){
          var frame = $("<div>");
          frame.addClass("flexcolumn flex");

          var tRef = $(this).attr("index");
          var talentData = data.specials[tRef];

          var viewTalent = sync.obj("viewTalent");
          viewTalent.data = duplicate(game.templates.page);
          viewTalent.data._t = "t";
          viewTalent.data.info.name = sync.newValue("Name", duplicate(talentData.name));
          viewTalent.data.info.img = sync.newValue("Img", null);
          viewTalent.data.info.notes = sync.newValue("Notes", duplicate(talentData.current));

          var newApp  = sync.newApp("ui_renderPage").appendTo(frame);
          newApp.attr("viewOnly", true);
          viewTalent.addApp(newApp);

          var pop = ui_popOut({
            target : $("body"),
            id : "view-talent",
            title : sync.rawVal(talentData.name),
            style : {width : "400px", height : "400px"}
          }, frame);
          pop.resizable();
        });
      }
      if (!scope.viewOnly && !scope.minimized) {
        var icon = genIcon("edit").appendTo(specialCont);
        icon.attr("index", index);
        icon.attr("title", "Edit Special");
        icon.click(function(ev) {
          var frame = $("<div>");
          frame.addClass("flexcolumn flex");

          var tRef = $(this).attr("index");
          var talentData = data.specials[tRef];

          game.locals["editSpecial"] = game.locals["editSpecial"] || sync.obj("editSpecial");
          game.locals["editSpecial"].data = duplicate(game.templates.page);
          game.locals["editSpecial"].data._t = "t";
          game.locals["editSpecial"].data.info.name = sync.newValue("Name", duplicate(talentData.name));
          game.locals["editSpecial"].data.info.img = sync.newValue("Img", null);
          game.locals["editSpecial"].data.info.notes = sync.newValue("Notes", duplicate(talentData.current));

          var newApp  = sync.newApp("ui_editPage").appendTo(frame);
          newApp.attr("autosave", true);
          newApp.attr("entry", true);
          game.locals["editSpecial"].addApp(newApp);

          var confirm = $("<button>").appendTo(frame);
          confirm.addClass("fit-x");
          confirm.append("Confirm");
          confirm.click(function(){
            if (sync.rawVal(game.locals["editSpecial"].data.info.name)) {
              data.specials[tRef].name = duplicate(game.locals["editSpecial"].data.info.name.current);
              data.specials[tRef].current = duplicate(game.locals["editSpecial"].data.info.notes.current);
              obj.sync("updateAsset");
              layout.coverlay("edit-special");
            }
            else {
              sendAlert({text : "Name required"});
            }
          });

          var pop = ui_popOut({
            target : $("body"),
            id : "edit-special",
            title : "Editing Special",
            style : {width : "400px", height : "400px"}
          }, frame);
          pop.resizable();
          ev.stopPropagation();
          ev.preventDefault();
          return false;
        });


        var icon = genIcon("trash").appendTo(specialCont);
        icon.addClass("destroy");
        icon.attr("index", index);
        icon.click(function() {
          // remove from spells, and remove from equipment
          var talentIndex = $(this).attr("index");
          ui_prompt({
            target : $(this),
            id : "delete-speical-confirmation",
            confirm : "Delete Special Rule",
            click : function(){
              delete data.specials[talentIndex];
              obj.sync("updateAsset");
            }
          });
          return false;
        });
      }
    }
  }
  return div;
});

sync.render("ui_characterSpellSlots", function(obj, app, scope) {
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};

  var data = obj.data;

  var spellSlots = $("<div>");
  var title = $("<h1 style='text-align: center;'>Spell Slots </h1>").appendTo(spellSlots);
  if (!scope.viewOnly) {
    var icon = genIcon("plus").appendTo(title);
    icon.addClass("create");
    icon.click(function() {
      var content = $("<div>");
      content.append("<b style='display : block;'>Slot Level?</b>");
      var input = genInput({
        parent : content,
        value : 0,
        type : "number",
        min : 0,
        style : {"width": "100%", "display" : "block"}
      });
      var confirm = $("<button>").appendTo(content);
      confirm.addClass("fit-x");
      confirm.append("Confirm");
      confirm.click(function(){
        if (!data.spells[input.val()]) {
          data.spells[input.val()] = [];
        }
        data.spells[input.val()].push({u : 1});
        obj.sync("updateAsset");
        layout.coverlay("new-spell-slot");
      });

      var popout = ui_popOut({
        target : $(this),
        id : "new-spell-slot",
      }, content);
    });
  }

  var slotList = $("<div>").appendTo(spellSlots);
  slotList.addClass("flexaround flexwrap");
  slotList.css("margin", "1em");

  for (var level in data.spells) {
    if (data.spells[level] && data.spells[level].length) {
      var slotContainer = $("<div>").appendTo(slotList);
      slotContainer.css("background-color", "white");
      slotContainer.addClass("outline padding smooth");
      slotContainer.css("margin", "4px");
      slotContainer.append("<b class='outlinebottom fit-x flexmiddle'>Level " + level + " Spells</b>");

      var slots = $("<div>").appendTo(slotContainer);
      slots.addClass("flexcolumn");
      slots.css("padding", "4px");

      for (var index in data.spells[level]) {
        var spellSlot = data.spells[level][index];
        var slot = $("<div>").appendTo(slots);
        slot.addClass("spadding");

        var infoPlate = $("<div>").appendTo(slot);
        infoPlate.addClass("flexrow flexaround")
        if (!spellSlot.u) {
          slot.css("background-color", "rgb(235,235,228)");
        }
        else {
          slot.addClass("outlinebottom");
        }

        if (spellSlot.s == null) {
          slot.css("background-color", "");
        }

        if (!scope.viewOnly && spellSlot.s) {
          var refresh = genIcon("refresh");
          refresh.addClass("padding");
          refresh.attr("level", level);
          refresh.attr("slot", index);
          refresh.appendTo(infoPlate);
          refresh.click(function(){
            data.spells[$(this).attr("level")][$(this).attr("slot")].u = 1;
            obj.sync("updateAsset");
          });
        }

        var infoBar = $("<div>").appendTo(infoPlate);
        infoBar.addClass("flexbetween subtitle");
        if (!spellSlot.s) {
          var attune = genIcon("book", "Attune Spell");
          attune.addClass("flexmiddle padding");
          attune.attr("level", level);
          attune.attr("slot", index);
          attune.appendTo(infoBar);
          if (!scope.viewOnly) {
            attune.click(function(){
              var spellList = $("<div>");
              spellList.css("max-height", "50vh");
              spellList.css("overflow-y", "auto");

              for (var itemIndex in data.spellbook) {
                var itemData = data.spellbook[itemIndex];

                if (!sync.val(itemData.spell.level) || sync.val(itemData.spell.level) <= $(this).attr("level")) {
                  var spellPlate = $("<div>").appendTo(spellList);
                  spellPlate.addClass("flexbetween flexmiddle hover2 outline");
                  spellPlate.css("cursor", "pointer");
                  spellPlate.attr("level", $(this).attr("level"));
                  spellPlate.attr("slot", $(this).attr("slot"));
                  spellPlate.attr("index", itemIndex)
                  if (sync.val(itemData.info.img)) {
                    var img = $("<img>").appendTo(spellPlate);
                    img.addClass("lrpadding");
                    img.attr("width", "25px");
                    img.attr("src", sync.val(itemData.info.img));
                  }
                  spellPlate.append("<b class='padding'>"+(sync.val(itemData.info.name) || "")+"</b>");
                  spellPlate.append(genIcon({icon : "book", raw : true}).addClass("lrpadding"));
                  spellPlate.click(function() {
                    obj.data.spells[$(this).attr("level")][$(this).attr("slot")].s =  $(this).attr("index");
                    obj.sync("updateAsset");
                    layout.coverlay("attune-spell");
                  });
                }
              }
              if (spellList.children().length) {
                var popout = ui_popOut({
                  target : $(this),
                  id : "attune-spell",
                  title : "Pick a Spell"
                }, spellList);
              }
            });
          }
          if (!scope.viewOnly) {
            var remove = genIcon("remove");
            remove.appendTo(infoBar);
            remove.addClass("destroy lrpadding");
            remove.attr("level", level);
            remove.attr("slot", index);
            remove.click(function(){
              data.spells[$(this).attr("level")].splice(parseInt($(this).attr("slot")), 1);
              obj.sync("updateAsset");
            });
          }
        }
        else {
          var itemData = data.spellbook[spellSlot.s];
          if (itemData) {
            var spellPlate = $("<div>").appendTo(infoPlate);
            spellPlate.addClass("flexbetween hover3 subtitle padding");
            spellPlate.attr("level", level);
            spellPlate.attr("slot", index);

            spellPlate.append("<b class='flexmiddle'>"+(sync.val(itemData.info.name) || "")+"</b>");
            if (!scope.viewOnly) {
              spellPlate.click(function() {
                delete obj.data.spells[$(this).attr("level")][$(this).attr("slot")].s;
                obj.sync("updateAsset");
              });
            }
          }
          if (!scope.viewOnly) {
            var spend = genIcon("fire");
            spend.addClass("padding");
            spend.attr("level", level);
            spend.attr("slot", index);
            spend.appendTo(infoPlate);
            spend.click(function(){
              data.spells[$(this).attr("level")][$(this).attr("slot")].u = 0;
              obj.sync("updateAsset");
            });
          }
        }
      }
    }
  }

  return spellSlots;
});

sync.render("ui_characterSpellList", function(obj, app, scope){
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};

  var data = obj.data;
  var div = $("<div>");
  div.css("background-color", "white");
  if (!scope.filter) {
    div.sortable({
      filter : ".spellContent",
      update : function(ev, ui) {
        var newIndex;
        var count = 0;
        $(ui.item).attr("ignore", true);
        div.children().each(function(){
          if ($(this).attr("ignore")){
            newIndex = count;
          }
          count += 1;
        });
        var old = data.spellbook.splice($(ui.item).attr("index"), 1);
        util.insert(data.spellbook, newIndex, old[0]);
        for (var level in data.spells) {
          if (data.spells[level] && data.spells[level].length) {
            for (var index in data.spells[level]) {
              var spellSlot = data.spells[level][index];
              if (spellSlot.s == $(ui.item).attr("index")) {
                delete spellSlot.s;
              }
            }
          }
        }
        obj.sync("updateAsset");
      }
    });
  }
  for (var index in data.spellbook) {
    var itemData = data.spellbook[index];
    if (itemData && (!scope.filter || scope.filter == sync.val(itemData.spell.level))) {
      var itemWrap = $("<div>").appendTo(div);
      itemWrap.addClass("outline hover2 fit-x flexcolumn spellContent smooth");
      itemWrap.attr("index", index);

      var itemCont = $("<div>").appendTo(itemWrap);
      itemCont.addClass("flexbetween");
      itemCont.attr("index", index);
      itemWrap.click(function(){
        var frame = $("<div>");
        frame.addClass("flex");

        var iRef = $(this).attr("index");
        game.locals["editSpell"] = game.locals["editSpell"] || sync.obj("editSpell");
        game.locals["editSpell"].data = duplicate(data.spellbook[iRef]);

        merge(game.locals["editSpell"].data, duplicate(game.templates.item));

        var newApp = sync.newApp("ui_renderItem").appendTo(frame);
        newApp.attr("spell", "true");
        game.locals["editSpell"].addApp(newApp);

        if (!scope.viewOnly) {
          var confirm = $("<button>").appendTo(frame);
          confirm.addClass("fit-x");
          confirm.append("Confirm");
          confirm.click(function(){
            data.spellbook[iRef] = duplicate(game.locals["editSpell"].data);
            obj.sync("updateAsset");
            layout.coverlay("edit-spell");
          });
        }
        var pop = ui_popOut({
          target : $(this),
          align : "top",
          maximize : true,
          minimize : true,
          style : {"width" : "500px", "height" : "350px"}
        }, frame);
        pop.resizable();
      });

      if (scope.minimized) {
        itemCont.addClass("subtitle lrpadding");
        itemCont.append("<b class='lrpadding'>"+sync.val(itemData.info.name)+"</b>");

        if (!scope.viewOnly) {
          var icon = genIcon("trash").appendTo(itemCont);
          icon.addClass("destroy spadding");
          icon.attr("index", index);
          icon.click(function() {
            // remove from spells, and remove from equipment
            var itemIndex = $(this).attr("index");
            ui_prompt({
              target : $(this),
              id : "delete-spell-confirmation",
              confirm : "Delete Spell",
              click : function(){
                data.spellbook.splice(itemIndex, 1);
                obj.sync("updateAsset");
              }
            });
            return false;
          });
        }
      }
      else {
        if (sync.val(itemData.info.img)) {
          var imgDiv = $("<div>").appendTo(itemCont);
          imgDiv.addClass("flexbetween");
          imgDiv.css("width", "25%");
          imgDiv.css("height", "200px");
          imgDiv.css("display", "inline-block");

          imgDiv.css("background-image", "url('"+ sync.val(itemData.info.img) +"')");
          imgDiv.css("background-size", "contain");
          imgDiv.css("background-repeat", "no-repeat");
          imgDiv.css("background-position", "center");
        }

        var item = $("<div>").appendTo(itemCont);
        item.addClass("flex spadding")
        item.css("cursor", "pointer");

        var itemDiv = $("<div>").appendTo(item);
        itemDiv.addClass("flexbetween fit-x");

        var name = $("<b>").appendTo(itemDiv);
        name.addClass("lrpadding");
        name.append(sync.val(itemData.info.name));
        if (itemData.spell.components && sync.val(itemData.spell.components)) {
          name.append("("+sync.val(itemData.spell.components)+")");
        }

        var level = $("<b>").appendTo(itemDiv);
        level.append("Level - "+(sync.val(itemData.spell.level) || 0));

        var timeDiv = $("<div>").appendTo(item);
        timeDiv.addClass("flexbetween subtitle");

        var matDiv = $("<div>").appendTo(timeDiv);
        if (sync.rawVal(itemData.spell.duration)) {
          $("<b>"+itemData.spell.duration.name+" - </b>").appendTo(matDiv);

          var name = $("<t>").appendTo(matDiv);
          name.append(sync.val(itemData.spell.duration));
        }

        var matDiv = $("<div>").appendTo(timeDiv);
        if (sync.rawVal(itemData.spell.time)) {
          $("<b>"+itemData.spell.time.name+" - </b>").appendTo(matDiv);

          var name = $("<t>").appendTo(matDiv);
          name.append(sync.val(itemData.spell.time));
        }

        var matDiv = $("<div>").appendTo(item);
        matDiv.addClass("subtitle");
        if (sync.rawVal(itemData.spell.required)) {
          $("<b>Materials - </b>").appendTo(matDiv);

          var name = $("<t>").appendTo(matDiv);
          name.append(sync.rawVal(itemData.spell.required));
        }

        var weaponDiv = $("<div>").appendTo(item);
        weaponDiv.addClass("flexbetween subtitle");
        for (var key in itemData.weapon) {
          if (sync.val(itemData.weapon[key])) {
            var matDiv = $("<div>").appendTo(weaponDiv);
            $("<b>"+itemData.weapon[key].name+" - </b>").appendTo(matDiv);

            var name = $("<t>").appendTo(matDiv);
            name.append(sync.val(itemData.weapon[key]));
          }
        }

        if (sync.val(itemData.info.notes)) {
          $("<b>Spell Description</b>").appendTo(item);

          var notes = $("<p>").appendTo(item);
          notes.append(sync.val(itemData.info.notes));
        }

        if (!scope.viewOnly) {
          var icon = genIcon("trash").appendTo(itemCont);
          icon.addClass("destroy spadding");
          icon.attr("index", index);
          icon.click(function() {
            // remove from spells, and remove from equipment
            var itemIndex = $(this).attr("index");
            ui_prompt({
              target : $(this),
              id : "delete-spell-confirmation",
              confirm : "Delete Spell",
              click : function(){
                for (var level in data.spells) {
                  for (var slot in data.spells) {
                    if (data.spells[level][slot] && data.spells[level][slot].s == itemIndex) {
                      delete obj.data.spells[level][slot].s;
                    }
                  }
                }
                data.spellbook.splice(itemIndex, 1);
                obj.sync("updateAsset");
              }
            });
            return false;
          });
        }
      }
    }
  }

  return div;
});

sync.render("ui_characterSpellList", function(obj, app, scope){
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};

  var data = obj.data;
  var div = $("<div>");
  if (!scope.filter) {
    div.sortable({
      filter : ".spellContent",
      update : function(ev, ui) {
        var newIndex;
        var count = 0;
        $(ui.item).attr("ignore", true);
        div.children().each(function(){
          if ($(this).attr("ignore")){
            newIndex = count;
          }
          count += 1;
        });
        var old = data.spellbook.splice($(ui.item).attr("index"), 1);
        util.insert(data.spellbook, newIndex, old[0]);
        for (var level in data.spells) {
          if (data.spells[level] && data.spells[level].length) {
            for (var index in data.spells[level]) {
              var spellSlot = data.spells[level][index];
              if (spellSlot.s == $(ui.item).attr("index")) {
                delete spellSlot.s;
              }
            }
          }
        }
        obj.sync("updateAsset");
      }
    });
  }
  for (var index in data.spellbook) {
    var itemData = data.spellbook[index];
    if (itemData && (!scope.filter || scope.filter == sync.val(itemData.spell.level))) {
      var itemWrap = $("<div>").appendTo(div);
      itemWrap.addClass("outline hover2 fit-x flexcolumn spellContent smooth");
      itemWrap.attr("index", index);

      var itemCont = $("<div>").appendTo(itemWrap);
      itemCont.addClass("flexbetween");
      itemCont.attr("index", index);
      itemWrap.click(function(){
        var frame = $("<div>");
        frame.addClass("flex flexcolumn");

        var iRef = $(this).attr("index");
        game.locals["editSpell"] = game.locals["editSpell"] || sync.obj("editSpell");
        game.locals["editSpell"].data = duplicate(data.spellbook[iRef]);

        merge(game.locals["editSpell"].data, duplicate(game.templates.item));

        var newApp = sync.newApp("ui_renderItem").appendTo(frame);
        newApp.attr("spell", "true");
        game.locals["editSpell"].addApp(newApp);

        if (!scope.viewOnly) {
          var confirm = $("<button>").appendTo(frame);
          confirm.addClass("fit-x");
          confirm.append("Confirm");
          confirm.click(function(){
            data.spellbook[iRef] = duplicate(game.locals["editSpell"].data);
            obj.sync("updateAsset");
            layout.coverlay("edit-spell");
          });
        }
        var pop = ui_popOut({
          target : $(this),
          align : "top",
          id : "edit-spell",
          maximize : true,
          minimize : true,
          style : {"width" : "500px", "height" : "350px"}
        }, frame);
        pop.resizable();
      });

      if (scope.minimized) {
        itemCont.addClass("subtitle spadding");
        itemCont.append("<b class='lrpadding'>"+sync.val(itemData.info.name)+"</b>");

        if (!scope.viewOnly) {
          var icon = genIcon("trash").appendTo(itemCont);
          icon.addClass("destroy lrpadding");
          icon.attr("index", index);
          icon.click(function() {
            // remove from spells, and remove from equipment
            var itemIndex = $(this).attr("index");
            ui_prompt({
              target : $(this),
              id : "delete-spell-confirmation",
              confirm : "Delete Spell",
              click : function(){
                data.spellbook.splice(itemIndex, 1);
                obj.sync("updateAsset");
              }
            });
            return false;
          });
        }
      }
      else {
        if (sync.val(itemData.info.img)) {
          var imgDiv = $("<div>").appendTo(itemCont);
          imgDiv.addClass("flexbetween");
          imgDiv.css("width", "25%");
          imgDiv.css("height", "200px");
          imgDiv.css("display", "inline-block");

          imgDiv.css("background-image", "url('"+ sync.val(itemData.info.img) +"')");
          imgDiv.css("background-size", "contain");
          imgDiv.css("background-repeat", "no-repeat");
          imgDiv.css("background-position", "center");
        }

        var item = $("<div>").appendTo(itemCont);
        item.css("flex", "2");
        item.css("padding", "8px");
        item.css("cursor", "pointer");

        var itemDiv = $("<div>").appendTo(item);
        itemDiv.addClass("flexbetween fit-x");

        var name = $("<b>").appendTo(itemDiv);
        name.addClass("lrpadding");
        name.append(sync.val(itemData.info.name));
        if (itemData.spell.components && sync.val(itemData.spell.components)) {
          name.append("("+sync.val(itemData.spell.components)+")");
        }

        var level = $("<b>").appendTo(itemDiv);
        level.append(itemData.spell.level.name+" - "+(sync.val(itemData.spell.level) || 0));

        var weaponDiv = $("<div>").appendTo(item);
        weaponDiv.addClass("flexbetween subtitle");
        for (var key in itemData.weapon) {
          if (sync.val(itemData.weapon[key])) {
            var matDiv = $("<div>").appendTo(weaponDiv);
            $("<b>"+itemData.weapon[key].name+" - </b>").appendTo(matDiv);

            var name = $("<t>").appendTo(matDiv);
            name.append(sync.val(itemData.weapon[key]));
          }
        }

        var timeDiv = $("<div>").appendTo(item);
        timeDiv.addClass("flexbetween subtitle");

        var matDiv = $("<div>").appendTo(timeDiv);
        if (sync.rawVal(itemData.spell.duration)) {
          $("<b>"+itemData.spell.duration.name+" - </b>").appendTo(matDiv);

          var name = $("<t>").appendTo(matDiv);
          name.append(sync.val(itemData.spell.duration));
        }

        var matDiv = $("<div>").appendTo(timeDiv);
        if (sync.rawVal(itemData.spell.time)) {
          $("<b>"+itemData.spell.time.name+" - </b>").appendTo(matDiv);

          var name = $("<t>").appendTo(matDiv);
          name.append(sync.val(itemData.spell.time));
        }

        var matDiv = $("<div>").appendTo(item);
        matDiv.addClass("subtitle");

        if (sync.rawVal(itemData.spell.required)) {
          $("<b>Materials - </b>").appendTo(matDiv);

          var name = $("<t>").appendTo(matDiv);
          name.append(sync.rawVal(itemData.spell.required));
        }

        if (sync.val(itemData.info.notes)) {
          $("<b>Spell Description</b>").appendTo(item);

          var notes = $("<p>").appendTo(item);
          notes.append(sync.val(itemData.info.notes));
        }

        if (!scope.viewOnly) {
          var icon = genIcon("trash").appendTo(itemCont);
          icon.addClass("destroy lrpadding");
          icon.attr("index", index);
          icon.click(function() {
            // remove from spells, and remove from equipment
            var itemIndex = $(this).attr("index");
            ui_prompt({
              target : $(this),
              id : "delete-spell-confirmation",
              confirm : "Delete Spell",
              click : function(){
                for (var level in data.spells) {
                  for (var slot in data.spells) {
                    if (data.spells[level][slot] && data.spells[level][slot].s == itemIndex) {
                      delete obj.data.spells[level][slot].s;
                    }
                  }
                }
                data.spellbook.splice(itemIndex, 1);
                obj.sync("updateAsset");
              }
            });
            return false;
          });
        }
      }
    }
  }

  return div;
});

sync.render("ui_characterSpells", function(obj, app, scope){
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};

  var data = obj.data;
  var div = $("<div>");

  // scan and find all the different levels
  var levels = {};
  for (var index in data.spellbook) {
    var itemData = data.spellbook[index];
    if (itemData && sync.val(itemData.spell.level) != null) {
      levels[sync.val(itemData.spell.level)] = true;
    }
  }
  if (!scope.hideTitle) {
    var title = $("<h1 style='text-align: center;'>Spells </h1>").appendTo(div);
    if (!scope.viewOnly) {
      var icon = genIcon("plus").appendTo(title);
      icon.addClass("create");
      icon.click(function() {
        var frame = $("<div>");
        frame.addClass("flex flexcolumn");

        game.locals["createSpell"] = game.locals["createSpell"] || sync.obj("createSpell");
        game.locals["createSpell"].data = {};
        merge(game.locals["createSpell"].data, duplicate(game.templates.item));

        var newApp = sync.newApp("ui_renderItem").appendTo(frame);
        newApp.attr("spell", "true");
        newApp.attr("info", true);
        newApp.attr("weapon", true);

        game.locals["createSpell"].addApp(newApp);

        var buttonWrap = $("<div>").appendTo(frame);
        buttonWrap.addClass("flexrow");

        var confirm = $("<button>").appendTo(buttonWrap);
        confirm.addClass("flex");
        confirm.append("Create");
        confirm.click(function(){
          obj.data.spellbook.push(duplicate(game.locals["createSpell"].data));
          obj.sync("updateAsset");
        });

        var confirm = $("<button>").appendTo(buttonWrap);
        confirm.addClass("flex");
        confirm.append("Create and Close");
        confirm.click(function(){
          obj.data.spellbook.push(duplicate(game.locals["createSpell"].data));
          obj.sync("updateAsset");
          layout.coverlay("create-spell");
        });
        var pop = ui_popOut({
          target : $(this),
          id : "create-spell",
          align : "top",
          maximize : true,
          minimize : true,
          style : {"width" : "500px", height : "350px"}
        }, frame);
        pop.resizable();
      });
    }
  }

  var spellTabs = genNavBar();
  spellTabs.css("margin", "1em");
  spellTabs.css("background-color", "white");
  spellTabs.appendTo(div);

  spellTabs.generateTab("All Spells", "list", function(parent) {
    var columns = $("<div>").appendTo(parent);
    columns.addClass("flexrow flexaround flexwrap outlinebottom");
    for (var level in levels) {
      var container = $("<div>").appendTo(columns);
      container.addClass("flexcolumn flexmiddle");

      var title = $("<b>").appendTo(container);
      title.append("Level - " + level);

      var list = sync.render("ui_characterSpellList")(obj, app, {viewOnly: scope.viewOnly, filter : level, minimized : true});
      list.appendTo(container);
    }

    var container = $("<div>").appendTo(parent);
    container.addClass("flexcolumn");
    container.css("margin", "1em");

    var title = $("<div>").appendTo(container);
    title.addClass("flexbetween");
    title.append("<b>List</b>");

    var sortWrap = $("<div>").appendTo(title);
    sortWrap.addClass("flexrow flexaround");

    var minimize = genIcon("resize-small", "Minimize");
    if (app.attr("hideSpells")) {
      minimize = genIcon("resize-full", "Maximize");
    }
    minimize.appendTo(sortWrap);
    minimize.addClass("lrpadding");
    minimize.click(function(){
      if (app.attr("hideSpells")) {
        app.removeAttr("hideSpells");
      }
      else {
        app.attr("hideSpells", true);
      }
      obj.update();
    });

    var sort = genIcon("list", "Sort");
    sort.appendTo(sortWrap);
    sort.addClass("lrpadding");
    sort.click(function(){
      data.spellbook.sort(function(a,b) {
        if (sync.val(a.info.name) < sync.val(b.info.name)) {
          return -1;
        }
        if (sync.val(a.info.name) > sync.val(b.info.name)) {
          return 1;
        }
        // a must be equal to b
        return 0;
      });
      // clear equipped
      for (var level in data.spells) {
        if (data.spells[level] && data.spells[level].length) {
          for (var index in data.spells[level]) {
            var spellSlot = data.spells[level][index];
            delete spellSlot.s;
          }
        }
      }
      obj.sync("updateAsset");
    });

    var list = sync.render("ui_characterSpellList")(obj, app, {viewOnly: scope.viewOnly, minimized : app.attr("hideSpells") == "true"});
    list.appendTo(container);

    if (app) {
      app.attr("spell_tab", "All Spells");
    }
  });

  function tabWrap(level) {
    spellTabs.generateTab(level, "", function(parent) {
      var columns = $("<div>").appendTo(parent);
      columns.addClass("flexcolumn");
      columns.append(sync.render("ui_characterSpellList")(obj, app, {viewOnly: scope.viewOnly, filter : level}));

      if (app) {
        app.attr("spell_tab", level);
      }
    });
  }

  for (var key in levels) {
    tabWrap(key);
  }

  if (app) {
    if (!app.attr("spell_tab")) {
      app.attr("spell_tab", "All Spells");
    }
    spellTabs.selectTab(app.attr("spell_tab"));
  }
  else {
    spellTabs.selectTab("All Spells");
  }

  return div;
});

sync.render("ui_characterSummary", function(obj, app, scope){
  if (!obj) {
    return $("<div>");
  }
  var data = obj.data;
  var info = data.info;
  scope = scope || {
    viewOnly: (app.attr("viewOnly") == "true"),
    displayMode : parseInt(app.attr("displayMode") || 0),
    markup : app.attr("markup") == "true",
    minimized : app.attr("minimized") == "true",
    noOutline : app.attr("noOutline") == "true",
    hide : app.attr("hide") == "true",
  };
  // don't edit cloud entities
  if (obj.id() && isNaN(obj.id()) && obj.id().match("_") && !(game.config && game.config.data.offline)) {
    scope.viewOnly = true;
    scope.local = true;
  }

  var sheet = scope.sheet || game.templates.display.sheet;

  var div = $("<div>");
  if (!scope.noOutline) {
    div.addClass("outline");
  }
  div.mousemove(function(){
    if (_down["17"]) {
      div.css("cursor", "pointer");
    }
    else {
      div.css("cursor", "");
    }
  });
  div.click(function(ev){
    if (_down["17"]) {
      if (namePlate.hasClass("card-selected")) {
        namePlate.removeClass("card-selected");
        util.untarget(obj.id());
      }
      else {
        namePlate.addClass("card-selected");
        util.target(obj.id());
      }
      ev.stopPropagation();
      ev.preventDefault();
    }
  });

  var namePlate = $("<div>").appendTo(div);
  namePlate.addClass("flexbetween");
  namePlate.attr("index", obj.id());
  namePlate.css("cursor", "pointer");
  namePlate.click(function(ev) {
    var charDivRef = $(this);
    var index = $(this).attr("index");
    if (_down["16"]) {
      if (hasSecurity(getCookie("UserID"), "Visible", obj.data)) {
        assetTypes["c"].preview(obj, charDivRef);
      }
      else {
        sendAlert({text : "No Access"});
      }
    }
    else if (!scope.local) {
      if ($(this).hasClass("card-selected")) {
        $(this).removeClass("card-selected");
        util.untarget(obj.id());
      }
      else {
        $(this).addClass("card-selected");
        util.target(obj.id());
      }
    }
    ev.stopPropagation();
  });

  if (!scope.local) {
    div.contextmenu(function(ev){
      assetTypes.contextmenu(ev, namePlate, obj, app, scope);
      return false;
    });
  }

  var imgWrap = $("<div>").appendTo(namePlate);
  imgWrap.addClass("flexmiddle");
  imgWrap.css("width", (scope.width || ((parseInt(scope.height) || 20) * 2)) + "px");
  imgWrap.css("height", scope.height || "auto");
  imgWrap.css("background-image", "url('"+(info.img.min || sync.rawVal(info.img) || "/content/icons/blankchar.png")+"')");
  imgWrap.css("background-size", "cover");
  imgWrap.css("background-repeat", "no-repeat");
  imgWrap.css("background-position", "center 25%");

  $("<div class='padding'>").appendTo(namePlate); // so you can access actions

  var nameWrap = $("<div>").appendTo(namePlate);
  nameWrap.addClass("spadding flexmiddle");

  var name = $("<b>").appendTo(nameWrap);
  name.addClass("flexmiddle");
  if (scope.name) {
    var context = sync.defaultContext();
    context["c"] = duplicate(obj.data);
    name.text(sync.eval(scope.name, context));
  }
  else {
    name.text(sync.rawVal(info.name));
  }

  if (scope.hide) {
    imgWrap.css("background-image" , "url('/content/icons/blankchar.png')");
    name.text("[Unidentified]");
    if (hasSecurity(getCookie("UserID"), "Visible", obj.data)) {
      name.text(sync.rawVal(info.name)+" [Unidentified]");
    }
    else {
      name.text("[Unidentified]");
    }
  }
  if (app.width() && (name.text().length || "") * 12 > app.width()) {
    name.addClass("subtitle");
  }
  if (scope.minimized) {
    div.addClass("fit-xy flexcolumn");
    namePlate.addClass("flex");
    if (hasSecurity(getCookie("UserID"), "Visible", obj.data)) {
      name.css("text-decoration", "underline");
      name.click(function(ev){
        assetTypes["c"].preview(obj, $(this));
        ev.preventDefault();
        ev.stopPropagation();
      });
    }
    return div;
  }

  var optionsBack = $("<div>").appendTo(div);
  optionsBack.addClass("alttext background outline lrpadding flexbetween");

  if (scope.viewOnly) {
    var tags = genIcon("tags");
    tags.attr("title", "View the tags on this character");
    tags.appendTo(optionsBack);
    tags.click(function(){
      var content = sync.newApp("ui_tags");
      content.attr("viewOnly", scope.viewOnly);
      obj.addApp(content);

      var frame = ui_popOut({
        target : $(this),
        align : "bottom",
        title : sync.rawVal(obj.data.info.name) + " - Tags",
        style : {"width" : "250px"}
      }, content);
      frame.resizable();
    });

    if (obj.id() && isNaN(obj.id()) && obj.id().match(getCookie("UserID"))) {
      // download asset
      var optionsBar = $("<div>").appendTo(optionsBack);
      optionsBar.addClass("flex flexaround flexwrap");

      var cloudWrap = genIcon("cloud-download", "Download Asset").appendTo(optionsBar);
      cloudWrap.attr("title", "Download Asset");

      cloudWrap.click(function(ev){
        if (game.locals["storage"]) {
          for (var i in game.locals["storage"].data.l) {
            var listEntry = game.locals["storage"].data.l[i];
            var split = obj.id().split("_");
            if (obj.data._c == getCookie("UserID") && listEntry._uid == split[1]) {
              listEntry.move = true;
              runCommand("moveAssets", {l : game.locals["storage"].data.l});
              delete listEntry.move;
              game.entities.listen[obj.id()] = function(src, update, target) {
                for (var key in src.data) {
                  var newEnt = src.data[key];
                  if (newEnt.data && newEnt.data._c == split[0] && newEnt.data._uid == split[1]) {
                    obj.removeApp(app);
                    newEnt.addApp(app);
                    return false;
                  }
                }
                return true;
              }
              break;
            }
          }
        }
        else {
          sendAlert({text : "Asset Storage hasn't loaded yet"});
        }
        ev.preventDefault();
        ev.stopPropagation();
      });
    }
  }
  else {
    var oBar = $("<div>").appendTo(optionsBack);

    var security = genIcon("lock");
    security.attr("title", "Edit who has access to this character");
    security.appendTo(oBar);
    security.click(function(){
      var content = sync.newApp("ui_rights");
      obj.addApp(content);

      var frame = ui_popOut({
        target : $(this),
        prompt : true,
        align : "top",
        id : "ui-rights-dialog",
      }, content);
    });


    var tags = genIcon("tags");
    tags.addClass("lrpadding");
    tags.attr("title", "View the tags on this character");
    tags.appendTo(oBar);
    tags.click(function(){
      var content = sync.newApp("ui_tags");
      content.attr("viewOnly", scope.viewOnly);
      obj.addApp(content);

      var frame = ui_popOut({
        target : $(this),
        align : "bottom",
        title : sync.rawVal(obj.data.info.name) + " - Tags",
        style : {"width" : "250px"}
      }, content);
      frame.resizable();
    });


    if (hasSecurity(getCookie("UserID"), "Rights", data) || scope.markup) {
      var optionsBar = $("<div>").appendTo(optionsBack);
      optionsBar.addClass("lrpadding flexwrap");
      if (sheet.summary instanceof Object) {
        for (var i in sheet.summary) {
          var tabData = sheet.summary[i];
          var tab = genIcon(tabData.icon).appendTo(optionsBar);
          tab.addClass("lrpadding")
          tab.attr("title", tabData.name);
          tab.attr("index", i);
          tab.click(function(){
            app.attr("displayMode", $(this).attr("index"));
            obj.update();
          });
        }

        var expand = genIcon("new-window").appendTo(optionsBack);
        expand.css("margin-left", "8px");
        expand.attr("title", "hold shift to expand this menu");
        expand.click(function(){
          if (_down[16]) {
            app.attr("from", app.attr("ui-name"));
            app.attr("ui-name", "ui_characterSheet");
            var parent = app.parent();
            if (parent && parent.parent() && parent.parent().parent() && parent.parent().parent().hasClass("ui-popout")) {
              parent = parent.parent().parent();
              parent.css("width", assetTypes["c"].width);
              parent.css("height", assetTypes["c"].height);
              parent.resizable();
            }
            obj.update();
          }
          else {
            assetTypes[obj.data._t].preview(obj, $(this));
          }
        });
      }
    }
  }

  if (sheet.summary instanceof Object) {
    var infoPanel = $("<div>").appendTo(div);
    infoPanel.addClass("flexcolumn");

    var ctx = sync.defaultContext();
    ctx[obj.data._t] = duplicate(obj.data);

    var newScope = duplicate(scope);
    newScope.display = sheet.summary[scope.displayMode].display;
    newScope.context = ctx;
    if (scope.markup) {
      newScope.markup = "summary"+scope.displayMode;
    }
    infoPanel.append(sync.render("ui_processUI")(obj, app, newScope));

    var parent = app.parent();
    if (parent && parent.parent() && parent.parent().parent() && parent.parent().parent().hasClass("ui-popout")) {
      parent = parent.parent().parent();
      if (!parent.css("width")) {
        parent.css("width", "300px");
        parent.css("height", "");
      }
      parent.resizable();
    }
  }
  else {
    optionsBack.hide();
    div.removeClass("outline");
    var ctx = sync.defaultContext();
    ctx[obj.data._t] = duplicate(obj.data);

    var newScope = duplicate(scope);
    newScope.display = sheet.summary;
    newScope.context = ctx;

    div.append(sync.render("ui_processUI")(obj, app, newScope));
  }

  return div;
});

sync.render("ui_charGenerator", function(obj, app, scope) {
  scope = scope || {};

  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");

  var newApp = sync.render("ui_template")(obj, app, scope).appendTo(div);

  var buttonBar = $("<div>").appendTo(div);
  buttonBar.addClass("fit-x flexrow");

  var button = $("<div>").appendTo(buttonBar);
  button.addClass("flex2 flexmiddle alttext highlight hover2 spadding");
  button.append("Create this character!");
  button.click(function(){
    createCharacter(obj.data.override);
  });

  return div;
});


sync.render("ui_charImporter", function(obj, app, scope) {
  scope = scope || {};

  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");

  game.locals["newCharacter-"+app.attr("id")] = sync.obj("newCharacter-"+app.attr("id"));
  game.locals["newCharacter-"+app.attr("id")].data = {preview:{}, text:{}, options:{}, override:{}};

  var wrap = $("<div>").appendTo(div);
  wrap.addClass("flex flexcolumn");
  wrap.css("position", "relative");
  wrap.css("overflow", "auto");

  var newApp = sync.newApp("ui_import").appendTo(wrap);
  newApp.attr("XML", "true");
  game.locals["newCharacter-"+app.attr("id")].addApp(newApp);

  var button = $("<button>").appendTo(div);
  button.addClass("fit-x flexmiddle alttext highlight");
  button.css("font-size", "1.5em");
  button.append("Create this character!");
  button.click(function(){
    createCharacter(game.locals["newCharacter-"+app.attr("id")].data.override, true);
  });

  return div;
});

sync.render("ui_manageActionsv2", function(obj, app, scope){
  scope = scope || {viewOnly : app.attr("viewOnly") == "true"}

  var div = $("<div>");
  div.addClass("fit-xy");
  if (obj.data._hud) {
    for (var k in obj.data._hud) {
      var newApp = sync.newApp("ui_editActionv2").appendTo(div);
      newApp.attr("path", app.attr("path"));
      newApp.attr("index", app.attr("index"));
      newApp.attr("char-ref", app.attr("char-ref"));
      newApp.attr("action", k);
      newApp.attr("homebrew", app.attr("homebrew"));
      newApp.css("outline", "none");

      // update it this way so it doesn't rebuild the sheets for each action
      obj._apps.push(newApp.attr("id"));
      sync.updateApp(newApp, obj);
    }
  }
  if (!scope.viewOnly) {
    var actionWrap = $("<div>").appendTo(div);
    actionWrap.addClass("flexmiddle");

    var newAction = genIcon("plus", "New Action").appendTo(actionWrap);
    newAction.addClass("subtitle create");
    newAction.click(function(){
      ui_prompt({
        parent : $(this),
        inputs : {
          "Action Name" : "",
          "Flavor Text" : {placeholder : "Optional"},
          "Equation To Roll" : {placeholder : "Optional"},
        },
        click : function(ev, inputs) {
          var actionName = inputs["Action Name"].val();
          obj.data._hud = obj.data._hud || {};
          obj.data._hud[actionName] = {hot : 1, display : `<button>
  `+actionName+`
    <click>
      <chat roll='`+(inputs["Equation To Roll"].val() || "2d20 + 2")+`' flavor='`+(inputs["Flavor Text"].val() || "dice rolled")+`'/>
    </click>
  </button>`};
          obj.sync("updateAsset");
        }
      });
    });
  }

  return div;
});

sync.render("ui_actionsv2", function(obj, app, scope){
  scope = scope || {viewOnly : app.attr("viewOnly") == "true"}

  var div = $("<div>");
  div.addClass("flexrow flexwrap");

  var ent = getEnt(obj.data.c);

  if (ent && ent.data) {
    for (var k in ent.data._hud) {
      var newApp = sync.newApp("ui_renderActionv2").appendTo(div);
      newApp.attr("action", k);
      newApp.attr("viewOnly", scope.viewOnly);
      newApp.css("min-width", "100px");
      newApp.css("outline", "none");
      // update it this way so it doesn't rebuild the sheets for each action
      ent._apps.push(newApp.attr("id"));
      sync.updateApp(newApp, ent);
    }

    var lists = game.templates.hudLookups || ["inventory", "spellbook"];
    for (var t in lists) {
      var targetList = sync.traverse(ent.data, lists[t]);
      for (var index in targetList) {
        var itemData = targetList[index];
        for (var k in itemData._hud) {
          var newApp = sync.newApp("ui_renderActionv2").appendTo(div);
          newApp.attr("path", lists[t]);
          newApp.attr("index", index);
          newApp.attr("action", k);
          newApp.attr("viewOnly", scope.viewOnly);
          newApp.css("outline", "none");
          newApp.css("min-width", "100px");
          // update it this way so it doesn't rebuild the sheets for each action
          ent._apps.push(newApp.attr("id"));
          sync.updateApp(newApp, ent);
        }
      }
    }
  }
  return div;
});

sync.render("ui_renderActionv2", function(obj, app, scope){
  scope = scope || {viewOnly : app.attr("viewOnly") == "true"}

  var context = sync.defaultContext();
  context[obj.data._t] = duplicate(obj.data);

  var actionObj = obj.data._hud || {};
  var processed;

  if (app.attr("path") && app.attr("index")) {
    var lookup = sync.traverse(obj.data, app.attr("path") + "." + app.attr("index"));
    if (lookup && lookup instanceof Object) {
        actionObj = lookup._hud || {};
      context[lookup._t] = duplicate(lookup);

      processed = duplicate(actionObj[app.attr("action")].display);
      processed = processed.replace(new RegExp("%path%", 'g'), "c." + app.attr("path") + "." + app.attr("index"));
      processed = processed.replace(new RegExp("%index%", 'g'), app.attr("index"));
    }
  }
  else {
    processed = duplicate(actionObj[app.attr("action")].display);
  }
  if (actionObj[app.attr("action")] && (actionObj[app.attr("action")].hot == null || sync.eval(actionObj[app.attr("action")].hot, context))) {
    app.show();
    return sync.render("ui_processUI")(obj, app, {display : processed, context : context, viewOnly : scope.viewOnly});
  }
  app.hide();
  return $("<div>");
});

sync.render("ui_editActionv2", function(obj, app, scope){
  scope = scope || {viewOnly : app.attr("viewOnly") == "true"}

  var action = app.attr("action");

  var actionData = obj.data._hud[action] || {};

  var div = $("<div>");
  var ent;

  if (actionData) {
    var optionsBar = $("<div>").appendTo(div);
    optionsBar.addClass("flexrow fit-x flexmiddle subtitle background alttext lrpadding");
    optionsBar.append(action);

    var context = sync.defaultContext();
    context[obj.data._t] = duplicate(obj.data);

    var processed = duplicate(actionData.display);

    if (app.attr("char-ref")) {
      ent = getEnt(app.attr("char-ref"));
      if (ent && ent.data) {
        context[ent.data._t] = duplicate(ent.data);

        processed = processed.replace(new RegExp("%path%", 'g'), ent.data._t + "." + app.attr("path") + "." + app.attr("index"));
        processed = processed.replace(new RegExp("%index%", 'g'), app.attr("index"));
      }
    }
    var wrap = $("<div>").appendTo(div);
    wrap.addClass("padding flexmiddle");
    wrap.css("background", "rgba(0,0,0,0.4)");

    if (ent) {
      sync.render("ui_processUI")(ent, app, {display : processed, context : context, viewOnly : scope.viewOnly}).appendTo(wrap);
    }
    else {
      sync.render("ui_processUI")(obj, app, {display : processed, context : context, viewOnly : scope.viewOnly}).appendTo(wrap);
    }

    optionsBar.append("<div class='flex'></div>");

    var hotBarMenu = $("<div>").appendTo(optionsBar);
    hotBarMenu.addClass("flexrow alttext outline smooth spadding flex2");
    hotBarMenu.text("When...");
    if (sync.eval(actionData.hot, context)) {
      hotBarMenu.addClass("highlight");
    }
    else {
      hotBarMenu.addClass("background");
    }
    var hotBar = genInput({
      parent : hotBarMenu,
      classes : "middle lrmargin subtitle flex",
      value : actionData.hot,
      disabled : scope.viewOnly,
      style : {"color" : "#333"}
    });
    hotBar.change(function(){
      obj.data._hud = obj.data._hud || {};
      obj.data._hud[action] = obj.data._hud[action] || {hot : 1, display : ""};
      obj.data._hud[action].hot = $(this).val();
      obj.sync("updateAsset");
    });

    hotBarMenu.append("= 1");
    if (obj.data._hud) {
      var restore = genIcon("trash").appendTo(optionsBar);
      restore.addClass("destroy lrmargin");
      restore.attr("title", "Delete Action");
      restore.click(function(){
        delete obj.data._hud[action];
        obj.sync("updateAsset");
      });
    }

    var textarea = genInput({
      classes : "flex subtitle",
      parent : wrap,
      type : "textarea",
      value : actionData.display,
      disabled : scope.viewOnly,
      style : {"min-height" : "150px", "min-width" : "50%"}
    });
    textarea.change(function(){
      obj.data._hud = obj.data._hud || {};
      obj.data._hud[action] = obj.data._hud[action] || {hot : 1, display : ""};
      obj.data._hud[action].display = $(this).val();
      obj.sync("updateAsset");
    });
  }

  return div;
});

sync.render("ui_renderItemv2", function(obj, app, scope){
  if (!obj) {return $("<div>");}
  if (!game.templates.build) {
    return sync.render("ui_renderItem")(obj, app, scope);
  }

  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};
  scope.cref = scope.cref || app.attr("char-ref") || null;
  scope.mode = app.attr("mode") || "notes";
  scope.local = scope.local || (app.attr("local") == "true");
  scope.homebrew = scope.homebrew || (app.attr("homebrew") == "true");
  scope.path = app.attr("path");
  scope.index = app.attr("index");
  var templates = scope.templates || game.templates;

  var char;
  var ctx = sync.defaultContext();
  ctx[obj.data._t] = obj.data;
  if (scope.cref) {
    char = getEnt(scope.cref);
    ctx[char.data._t] = duplicate(char.data);
  }

  var itemData = scope.itemData || obj.data;

  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");

  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("flexrow fit-x background outline");

  if (app.attr("homebrew")) {
    var targetIcon = $("<button>").appendTo(optionsBar);
    targetIcon.addClass("background subtitle alttext");
    targetIcon.text("Default Data Model");
    targetIcon.click(function(){
      var select = sync.newApp("ui_JSON");
      select.attr("lookup", "templates.elements."+obj.data._type);
      select.attr("closeTarget", "json-editor");
      game.locals["homebrew"].addApp(select);

      var popout = ui_popOut({
        target : $("body"),
        id : "json-editor",
        title : "Default Data Model(JSON)"
      }, select);
      popout.resizable();
    });
  }
  else {
    var selectData = {};
    for (var k in game.templates.elements) {
      selectData[k] = k;
    }
    if (Object.keys(selectData)) {
      var select = genInput({
        select : selectData,
        parent : optionsBar,
        classes : "subtitle",
        value : obj.data._type,
        disabled : scope.viewOnly,
      });
      select.change(function(){
        var elementData = game.templates.elements[$(this).val()];
        obj.data._drop = elementData._drop;
        obj.data._t = elementData._t;
        obj.data._type = elementData._type;

        if (!scope.local) {
          obj.sync("updateAsset");
        }
        else {
          obj.update();
        }
      });
    }
  }

  var actions = $("<button>").appendTo(optionsBar);
  actions.addClass("background subtitle alttext");
  if (app.attr("mode") == "attributes") {
    actions.removeClass("background");
    actions.addClass("highlight");
  }
  actions.text("Attributes");
  actions.click(function(){
    if (app.attr("mode") == "attributes") {
      app.removeAttr("mode");
    }
    else {
      app.attr("mode", "attributes");
    }
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });

  var actions = $("<button>").appendTo(optionsBar);
  actions.addClass("background subtitle alttext");
  if (app.attr("mode") == "html") {
    actions.removeClass("background");
    actions.addClass("highlight");
  }
  actions.text("Sheet");
  actions.click(function(){
    var content = $("<div>");
    content.addClass("flexcolumn fit-xy");

    var select = genInput({
      parent : content,
      type : "textarea",
      classes : "flex subtitle",
      disabled : scope.viewOnly,
    });
    if (obj.data._d && obj.data._d.content) {
      select.text(obj.data._d.content);
    }
    else if (game.templates.display.elements[obj.data._type || Object.keys(game.templates.display.elements)[0]] && game.templates.display.elements[obj.data._type || Object.keys(game.templates.display.elements)[0]].content) {
      select.text(game.templates.display.elements[obj.data._type || Object.keys(game.templates.display.elements)[0]].content);
    }
    select.change(function(){
      if ($(this).val()) {
        obj.data._d = obj.data._d || {};
        obj.data._d.content = $(this).val();
      }
      else {
        delete obj.data._d;
      }
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });

    content.append("<button class='fit-x spadding'>Confirm</button>");

    var popout = ui_popOut({
      target : $("body"),
      id : "json-editor",
      style : {"width" : "600px", "height" : "600px"}
    }, content);
    popout.resizable();
  });

  var actions = $("<button>").appendTo(optionsBar);
  actions.addClass("background subtitle alttext");
  if (app.attr("mode") == "calc") {
    actions.removeClass("background");
    actions.addClass("highlight");
  }
  actions.text("Math");
  actions.click(function(){
    if (app.attr("mode") == "calc") {
      app.removeAttr("mode");
    }
    else {
      app.attr("mode", "calc");
    }
    obj.update();
  });

  var actions = $("<button>").appendTo(optionsBar);
  actions.addClass("background subtitle alttext");
  if (app.attr("mode") == "actions") {
    actions.removeClass("background");
    actions.addClass("highlight");
  }
  actions.text("Hotbar");
  actions.click(function(){
    if (app.attr("mode") == "actions") {
      app.removeAttr("mode");
    }
    else {
      app.attr("mode", "actions");
    }
    obj.update();
  });

//game.templates.display.item

  if (app.attr("mode") == "attributes") {
    optionsBar.empty();
    optionsBar.addClass("flexbetween");

    var reset = $("<button>").appendTo(optionsBar);
    reset.addClass("highlight lrpadding alttext flexmiddle subtitle");
    reset.text("Back to Sheet");
    reset.click(function(){
      app.removeAttr("mode");
      obj.update();
    });

    var template = {info : "", equip : "", weapon : "", spell : ""};
    var sheet = scope.sheet;
    if (app.attr("homebrew")) {
      sheet = sheet || game.locals["homebrew"].data.templates.display.elements[obj.data._type];
    }
    else {
      sheet = sheet || game.templates.display.elements[obj.data._type] || game.templates.display.elements[Object.keys(game.templates.display.elements)[0]];
    }
    if (sheet.categories) {
      template = {};
      for (var k in sheet.categories) {
        template[k] = sheet.categories[k];
      }
    }

    var reset = $("<button>").appendTo(optionsBar);
    reset.addClass("background lrpadding alttext flexmiddle subtitle");
    reset.text("Load Attributes");
    reset.click(function(){
      var content = sync.render("ui_assetPicker")(obj, app, {
        category : "i",
        filter : "i",
        select : function(ev, ui, ent, options, entities){
          if (ent.data) {
            var newData = duplicate(ent.data);
            for (var i in newData) {
              if (i && String(i)[0] == "_") {
                delete newData;
              }
            }
            merge(obj.data, newData, true);
            if (app.attr("homebrew") && game.templates.build) {
              game.locals["homebrew"].data.previewItem[obj.data._type] = duplicate(obj.data);
              game.locals["homebrew"].data.templates.elements[obj.data._type] = duplicate(obj.data);
            }
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
          layout.coverlay("add-asset");
        }
      });
      var pop = ui_popOut({
        target : $("body"),
        prompt : true,
        id : "add-asset",
        title : "Pick Sheet",
        style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
      }, content);
      pop.resizable();
    });

    var scrollDiv = $("<div>").appendTo(div);
    scrollDiv.addClass("flex foreground scroll-xy");
    scrollDiv.css("position", "relative");
    scrollDiv.scroll(function(){
      app.attr("_lastScrollTop", scrollDiv.scrollTop());
      app.attr("_lastScrollLeft", scrollDiv.scrollLeft());
    });

    var list = $("<div>").appendTo(scrollDiv);
    list.addClass("lrpadding fit-x");
    list.css("position", "absolute");

    var keys = {};
    for (var key in template) {
      var path = key;
      var attrPlate = $("<div>").appendTo(list);
      attrPlate.addClass("lrpadding");
      attrPlate.css("font-size", "1.2em");
      attrPlate.append("<u class='bold lrpadding lrmargin alttext'>"+key+"</b>");

      var attrWrap = $("<div>").appendTo(attrPlate);
      attrWrap.addClass("flexcolumn subtitle white outline smooth lpadding");
      attrWrap.css("margin-bottom", "1em");
      if (template[key] == "") {
        var headerRow = $("<div>").appendTo(attrWrap);
        headerRow.addClass("flexrow padding");
        headerRow.append("<u class='subtitle flexmiddle lrmargin' style='width:100px'>Macro Key</u>");
        headerRow.append("<u class='flex subtitle flexmiddle lrmargin' style='width:100px'>Name</u>");
        headerRow.append("<u class='flex2 subtitle flexmiddle lrmargin' style='width:100px'>Value</u>");
        headerRow.append("<u class='subtitle flexmiddle lrmargin' style='width:40px'>Min</u>");
        headerRow.append("<u class='subtitle flexmiddle lrmargin' style='width:40px'>Max</u>");
        headerRow.append("<u class='subtitle flexmiddle lrmargin' style='width:70px'>Modifiers</u>");
        if (!scope.viewOnly) {
          headerRow.append(genIcon("remove").addClass("lrpadding lrmargin").css("color", "transparent"));
        }
        for (var subKey in obj.data[key]) {
          path = key + "." + subKey;
          if (path != "info.notes" && path != "info.img" && path != "info.name") {
            var attrOption = $("<div>").appendTo(attrWrap);
            attrOption.addClass("flexrow padding");
            if (!keys[subKey]) {
              attrOption.append("<text class='subtitle flexmiddle' style='width:100px'>@"+subKey+"</text>");
              keys[subKey] = true;
            }
            else {
              attrOption.append("<text class='subtitle flexmiddle' style='width:100px'>@c."+path+"</text>");
            }

            var name = genInput({
              parent : attrOption,
              classes : "line subtitle lrmargin middle",
              value : obj.data[key][subKey],
              cmd : "updateAsset",
              obj : obj,
              name : true,
              disabled : scope.viewOnly,
              style : {"width" : "150px"}
            });

            var value = genInput({
              parent : attrOption,
              classes : "line subtitle flex2 lrmargin middle",
              value : obj.data[key][subKey],
              cmd : "updateAsset",
              obj : obj,
              disabled : scope.viewOnly,
            });

            var min = genInput({
              parent : attrOption,
              classes : "line subtitle lrmargin middle",
              value : obj.data[key][subKey],
              style : {"width" : "40px"},
              cmd : "updateAsset",
              obj : obj,
              raw : "min",
              disabled : scope.viewOnly,
            });

            var max = genInput({
              parent : attrOption,
              classes : "line subtitle lrmargin middle",
              value : obj.data[key][subKey],
              style : {"width" : "40px"},
              cmd : "updateAsset",
              obj : obj,
              disabled : scope.viewOnly,
              raw : "max"
            });

            var remove = genIcon("list-alt", "Mods").appendTo(attrOption);
            remove.addClass("flexmiddle lrmargin lrpadding");
            remove.attr("path", path);
            remove.css("width", "70px");
            remove.click(function(){
              var path = $(this).attr("path");

              var content = sync.newApp("ui_modifiers");
              content.attr("viewOnly", scope.viewOnly);
              content.attr("lookup", path);
              content.attr("modsOnly", "true");
              obj.addApp(content);

              ui_popOut({
                target : $(this),
                align : "top",
                title : "Modifiers",
                id : "modify-exp",
                style : {"min-width" : "100px"},
              }, content);
            });
            if (!scope.viewOnly) {
              var remove = genIcon("remove").appendTo(attrOption);
              remove.addClass("destroy flexmiddle lrmargin lrpadding");
              remove.attr("path", path);
              remove.click(function(){
                var path = $(this).attr("path");

                ui_prompt({
                  target : $(this),
                  confirm : "Delete Attribute",
                  click : function(){
                    sync.traverse(obj.data, path, "");
                    if (!scope.local) {
                      obj.sync("updateAsset");
                    }
                    else {
                      obj.update();
                    }
                  }
                });
              });
            }
          }
        }
        if (!scope.viewOnly) {
          var headerRow = genIcon("plus", "New Attribute").appendTo(attrWrap);
          headerRow.addClass("flexmiddle fit-x create");
          headerRow.attr("category", key);
          headerRow.click(function(){
            var category = $(this).attr("category");

            var invalidKeys = {
              "length" : "system",
            }; // invalid keys

            for (var key in obj.data) {
              invalidKeys[key] = key;
            }
            for (var key in obj.data.info) {
              invalidKeys[key] = "info."+key;
            }
            for (var key in obj.data.counters) {
              invalidKeys[key] = "counters."+key;
            }
            for (var key in obj.data.stats) {
              invalidKeys[key] = "stats."+key;
            }

            if (game.templates.item) {
              for (var key in game.templates.item.info) {
                invalidKeys[key] = "item.info."+key;
              }
              for (var key in game.templates.item.equip) {
                invalidKeys[key] = "item.equip."+key;
              }
              for (var key in game.templates.item.weapon) {
                invalidKeys[key] = "item.weapon."+key;
              }
              for (var key in game.templates.item.spell) {
                invalidKeys[key] = "item.spell."+key;
              }
            }

            ui_prompt({
              target : $(this),
              inputs : {
                "Macro Key" : "",
              },
              click : function(ev, inputs){
                var path = inputs["Macro Key"].val();
                if (path && path != "notes" && path != "img" && path != "name" && isNaN(path)) {
                  path = replaceAll(path, " ", "_");
                  path = replaceAll(path, "@", "");
                  path = replaceAll(path, "(", "_");
                  path = replaceAll(path, ")", "_");
                  path = replaceAll(path, "[", "_");
                  path = replaceAll(path, "]", "_");
                  path = replaceAll(path, "!", "_");
                  path = replaceAll(path, "#", "_");
                  path = replaceAll(path, "$", "_");
                  if (invalidKeys[path]) {
                    sendAlert({text : "This key is used somewhere else"});
                  }
                  else {
                    obj.data[category][path] = {};
                    obj.sync("updateAsset");
                  }
                }
              }
            });
          });
        }
      }
      else {
        sync.render("ui_processUI")(obj, app, {display : template[key], viewOnly : scope.viewOnly}).appendTo(attrWrap);
      }
    }
  }
  else if (app.attr("mode") == "calc") {
    obj.data._calc = obj.data._calc || [];
    var calcs = obj.data._calc;

    var warning = $("<i>").appendTo(div);
    warning.addClass("flexmiddle subtitle bold padding");
    warning.text("Calculations performed here are written to the parent character sheet, and change the values directly. Use with caution");

    var calcWrapper = $("<div>").appendTo(div);
    calcWrapper.addClass("flexcolumn flex smooth scroll-y");
    calcWrapper.css("position", "relative");

    var calcList = $("<div>").appendTo(calcWrapper);
    calcList.addClass("fit-x");
    calcList.css("position", "absolute");
    calcList.css("top", "0");
    calcList.css("left", "0");

    sync.render("ui_math")(obj, app, {calc : calcs, cref : scope.cref, viewOnly : scope.viewOnly}).appendTo(calcList);
  }
  else if (app.attr("mode") == "actions") {
    sync.render("ui_manageActionsv2")(obj, app, scope).appendTo(div);
  }
  else {
    var sheet = obj.data._d;
    if (app.attr("homebrew")) {
      sheet = sheet || game.locals["homebrew"].data.templates.display.elements[obj.data._type];
    }
    else {
      sheet = sheet || game.templates.display.elements[obj.data._type || Object.keys(game.templates.display.elements)[0]];
    }
    var displayPort = sync.render("ui_processUI")(obj, app, {display : sheet.content, viewOnly : scope.viewOnly}).appendTo(div);
    for (var i in sheet.style) {
      displayPort.css(i, sheet.style[i]);
    }
  }
  return div;
});


sync.render("ui_renderItem", function(obj, app, scope){
  if (!obj) {return $("<div>");}
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};
  scope.cref = scope.cref || app.attr("char-ref") || null;
  scope.mode = app.attr("mode") || "notes";
  scope.local = scope.local || (app.attr("local") == "true");
  scope.homebrew = scope.homebrew || (app.attr("homebrew") == "true");

  var templates = scope.templates || game.templates;
  var params = templates.display.item.params;

  var char;
  var ctx = sync.defaultContext();
  ctx[obj.data._t] = obj.data;
  if (scope.cref) {
    char = getEnt(scope.cref);
    ctx[char.data._t] = duplicate(char.data);
  }

  var itemData = scope.itemData || obj.data;

  if (!scope.itemData) {
    obj.data._flags = obj.data._flags || duplicate(obj.data.tags || {});
  }

  var div = $("<div>");
  div.addClass("fit-xy flexrow");
  if (!scope.viewOnly) {
    div.on("dragover", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      if (!$("#"+app.attr("id")+"-drag-overlay").length) {
        var olay = layout.overlay({
          target : app,
          id : app.attr("id")+"-drag-overlay",
          style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
        });
        olay.addClass("flexcolumn flexmiddle alttext");
        olay.css("font-size", "2em");
        olay.css("z-index", util.getMaxZ(".ui-popout")+1);
        olay.append("<b>Drop to Load</b>");
      }
    });
    div.droppable();
    div.on('drop', function(ev, ui){
      ev.preventDefault();
      ev.stopPropagation();
      var dt = ev.originalEvent.dataTransfer||$(ui.draggable).data("dt");
      if (hook.call("OnDropItem", obj, app, scope, dt)) {
        if (dt && dt.getData("OBJ")) {
          var ent = JSON.parse(dt.getData("OBJ"));
          if (ent._t == "i") {
            obj.data = ent;
          }
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        }
        else if (dt && dt.getData("Text")) {
          sync.rawVal(obj.data.info.img, dt.getData("Text"));
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        }
      }

      layout.coverlay(app.attr("id")+"-drag-overlay");
    });
    div.on("dragleave", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      layout.coverlay(app.attr("id")+"-drag-overlay");
    });
  }


  var overview = $("<div>").appendTo(div);
  overview.addClass("flexcolumn outline sheet1 padding");

  var info = itemData.info;

  var itemImage = $("<div>").appendTo(overview);
  itemImage.addClass("outline smooth flexmiddle white");
  itemImage.css("background-image", "url('"+ sync.rawVal(itemData.info.img) +"')");
  itemImage.css("background-size", "contain");
  itemImage.css("background-repeat", "no-repeat");
  itemImage.css("background-position", "center");
  itemImage.css("width", "150px");
  itemImage.css("height", "150px");
  if (!scope.viewOnly) {
    itemImage.addClass("hover2");
    itemImage.click(function(){
      var imgList = sync.render("ui_filePicker")(obj, app, {
        filter : "img",
        change : function(ev, ui, value){
          sync.rawVal(itemData.info.img, value);
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
          layout.coverlay("icons-picker");
        }
      });

      var pop = ui_popOut({
        target : $(this),
        id : "icons-picker",
        prompt : true,
        style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
      }, imgList);
      pop.resizable();
    });
  }
  itemImage.contextmenu(function(ev){
    if (sync.rawVal(itemData.info.img)) {
      assetTypes["img"].contextmenu(ev, $(this), sync.rawVal(itemData.info.img));
    }
    ev.stopPropagation();
    ev.preventDefault();
    return false;
  });

  var infoPane = $("<div>").appendTo(overview);
  infoPane.addClass("flexcolumn flexbetween fit-x padding");


  var wrap = $("<div>").appendTo(infoPane);
  wrap.addClass("flexrow flexbetween");

  wrap.append("<b>"+(info.weight.name || "Weight")+"</b>");


  var weight = genInput({
    classes : "subtitle line middle",
    parent: wrap,
    placeholder: info.weight.name || "Weight",
    value: sync.val(info.weight),
    disabled: scope.viewOnly,
    style : {width : "80px"},
    type: "number",
  })

  weight.change(function() {
    var newVal = $(this).val();
    if ($(this).val() == "") {
      newVal = null;
    }
    sync.val(info.weight, newVal);
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });


  var wrap = $("<div>").appendTo(infoPane);
  wrap.addClass("flexrow flexbetween");

  wrap.append("<b>"+(info.quantity.name || "Quantity")+"</b>");

  var quantity = genInput({
    classes : "subtitle line middle",
    parent : wrap,
    placeholder : info.quantity.name || "Quantity",
    value : info.quantity,
    disabled: scope.viewOnly,
    type : "number",
    style : {width : "80px"},
  });
  quantity.change(function() {
    sync.val(info.quantity, $(this).val());
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  }).addClass("subtitle");

  if (info.price) {
    var wrap = $("<div>").appendTo(infoPane);
    wrap.addClass("flexrow flexbetween");

    wrap.append("<b>"+(info.price.name || "Price")+"</b>");

    var price = genInput({
      classes : "subtitle line middle",
      parent : wrap,
      placeholder : info.price.name,
      title : info.price.name,
      value : info.price,
      disabled: scope.viewOnly,
      style : {width : "80px"},
    });
    price.change(function() {
      sync.val(info.price, $(this).val());
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });
  }

  overview.append("<div class='spadding'></div>");

  var tags = sync.render("ui_tags")(obj, app, {viewOnly : scope.viewOnly}).appendTo(overview);
  tags.addClass("fit-x");
  tags.removeClass("flexrow");
  tags.css("max-height", "100px");
  tags.css("overflow", "auto");


  var contentWrap = $("<div>").appendTo(div);
  contentWrap.addClass("flex2");
  contentWrap.css("position", "relative");
  contentWrap.css("overflow", "auto");

  var content = $("<div>").appendTo(contentWrap);
  content.addClass("fit-xy flexcolumn");
  content.css("position", "absolute");

  var wrap = $("<div>").appendTo(content);
  wrap.addClass("padding sheet1 outline");

  var name = genInput({
    classes : "line size4 bold fit-x",
    parent: wrap,
    placeholder: info.name.name,
    value: info.name,
    disabled: scope.viewOnly,
  });
  name.change(function() {
    sync.rawVal(info.name, $(this).val());
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });

  var optionsBar = $("<div>").appendTo(content);
  optionsBar.addClass("flexrow fit-x flexbetween background");

  var category = $("<div>").appendTo(optionsBar);
  category.addClass("flexrow subtitle");
  category.css("color", "#333");

  var notes = $("<button>").appendTo(category);
  notes.append("Notes");
  notes.click(function(){
    app.attr("mode", "notes");
    obj.update();
  });

  var armor = $("<button>").appendTo(category);
  armor.append("Armor");
  armor.click(function(){
    app.attr("mode", "armor");
    obj.update();
  });

  var weapon = $("<button>").appendTo(category);
  weapon.append("Weapon");
  weapon.click(function(){
    app.attr("mode", "weapon");
    obj.update();
  });

  var spell = $("<button>").appendTo(category);
  spell.append("Spell");
  spell.click(function(){
    app.attr("mode", "spell");
    obj.update();
  });

  var options = $("<div>").appendTo(optionsBar);
  options.addClass("flex");

  var options = $("<div>").appendTo(optionsBar);
  options.addClass("flexrow flexmiddle alttext");
  if (!scope.viewOnly) {
    var clear = genIcon("trash", "Clear").appendTo(options);
    clear.addClass("lrpadding subtitle");
    clear.click(function(){
      obj.data = duplicate(templates.item);
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });

    var load = genIcon("briefcase").appendTo(options);
    load.addClass("lrpadding subtitle");
    load.attr("title", "Load an Existing Item");
    load.click(function(){
      var content = sync.render("ui_existing")(obj, app, {lookup : (scope.mode=="spell")?("spellbook"):("inventory")});
      content.addClass("flex");

      if (content.children().length) {
        ui_popOut({
          target : $("body"),
          id : "item-picker",
          title : "Load Existing Item",
          style : {"width" : "80vw", "height" : "80vh"}
        }, content).resizable();
      }
    });
  }

  if (hasSecurity(getCookie("UserID"), "Rights")) {
    var security = genIcon("lock").appendTo(options);
    security.addClass("subtitle");
    security.attr("index", index);
    security.attr("title", "Configure who has access to this object");
    security.css("margin-right", "4px");
    security.click(function(ev){
      obj.data._s = obj.data._s || {default : 1};

      var content = sync.newApp("ui_rights");
      content.attr("viewOnly", scope.viewOnly);
      obj.addApp(content);

      var frame = ui_popOut({
        target : $(this),
        prompt : true,
        id : "ui-rights-dialog",
      }, content);
    });
  }

  if (!scope.viewOnly) {
    var stylePage = genIcon("tint").appendTo(options);
    stylePage.addClass("subtitle")
    stylePage.attr("title", "Change the style of how this page renders");
    stylePage.click(function(){
      var newApp = sync.newApp("ui_stylePage");
      obj.addApp(newApp);

      var pop = ui_popOut({
        target : app,
        align : "right",
        id : "page-styling",
        title : "Page Style",
        style : {width : assetTypes["p"].width, height : assetTypes["p"].height},
      }, newApp);
    });

    var actions = $("<div>").appendTo(optionsBar);
    actions.addClass("flex");

    var actions = $("<button>").appendTo(optionsBar);
    actions.addClass("background subtitle alttext");
    if (app.attr("mode") == "calc") {
      actions.removeClass("background");
      actions.addClass("highlight");
    }
    actions.text("Math");
    actions.click(function(){
      app.attr("mode", "calc");
      obj.update();
    });

    var actions = $("<button>").appendTo(optionsBar);
    actions.addClass("background subtitle alttext");
    if (app.attr("mode") == "actions") {
      actions.removeClass("background");
      actions.addClass("highlight");
    }
    actions.text("Actions");
    actions.click(function(){
      app.attr("mode", "actions");
      obj.update();
    });
  }

  var content = $("<div>").appendTo(content);
  content.addClass("padding flex flexcolumn");
  if (app.attr("mode") == "actions") {
    content.removeClass("padding");

    var charWrapper = $("<div>").appendTo(content);
    charWrapper.addClass("flexcolumn flex subtitle");
    charWrapper.css("overflow-y", "auto");
    charWrapper.attr("_lastScrollTop", app.attr("_lastScrollTop"));
    charWrapper.scroll(function(){
      app.attr("_lastScrollTop", charWrapper.scrollTop());
      app.attr("_lastScrollLeft", charWrapper.scrollLeft());
    });

    sync.render("ui_manageActions")(obj, app, scope).appendTo(charWrapper);
  }
  else if (scope.mode == "armor") {
    armor.addClass("highlight alttext");

    var armorDiv = $("<div>").appendTo(content);
    armorDiv.addClass("flexrow flex");

    if (templates.display.item.params && templates.display.item.params["equip"]) {
      for (var aKey in templates.display.item.params["equip"]) {
        var newScope = duplicate(scope);
        newScope.display = templates.display.item.params["equip"][aKey];
        newScope.char = char;
        if (scope.markup) {
          newScope.markup = scope.markup;
        }
        armorDiv.append(sync.render("ui_processUI")(obj, app, newScope));
      }
    }
    else {
      var armorRow = $("<div>").appendTo(armorDiv);
      armorRow.addClass("flex");

      var checkWrap = $("<div>").appendTo(armorRow);
      checkWrap.addClass("flexmiddle");

      var asEQ = genInput({
        parent : checkWrap,
        type : 'checkbox',
        style : {"margin-top" : "0"},
        disabled : scope.viewOnly
      });

      if (itemData.tags && itemData.tags["noEQ"]) {
        asEQ.prop("checked", true);
      }
      asEQ.change(function(){
        if ($(this).prop("checked")) {
          itemData.tags["noEQ"] = true;
        }
        else {
          delete itemData.tags["noEQ"];
        }
        if (!scope.local) {
          obj.sync("updateAsset");
        }
        else {
          obj.update()
        }
      });
      checkWrap.append("<text class='subtitle bold'>Do not display item as Gear</text>");

      var armorPlate = $("<div>").appendTo(armorRow);

      var newScope = duplicate(scope);
      newScope.target = obj.data.equip.armor;
      newScope.char = char;
      if (scope.markup) {
        newScope.markup = scope.markup;
      }
      sync.render("ui_armorValue")(obj, app, newScope).appendTo(armorPlate);

      //sync.render("ui_armorBonuses")(obj, app, newScope).appendTo(armorPlate);

      var mods = $("<div>").appendTo(armorDiv);
      mods.addClass("flex flexcolumn");

      sync.render("ui_modifiers")(obj, app, {text : "Modifiers", lookup : "equip.armor", total : "", modsOnly : true, viewOnly : scope.viewOnly}).appendTo(mods);
    }
  }
  else if (scope.mode == "weapon") {
    weapon.addClass("highlight alttext");

    for (var i in obj.data.weapon) {
      var modRow = $("<div>").appendTo(content);
      modRow.addClass("flexrow fit-x subtitle");

      var label = genInput({
        classes : "line lrmargin bold middle",
        parent : modRow,
        value : obj.data.weapon[i].name,
        index : i,
        title : "@i.weapon."+i,
        disabled : scope.viewOnly,
        style : {"width" : "100px"},
      });
      label.change(function(){
        obj.data.weapon[$(this).attr("index")].name = $(this).val();
        obj.update();
      });

      var val = genInput({
        classes : "line flex middle",
        parent : modRow,
        value : sync.rawVal(obj.data.weapon[i]),
        index : i,
        disabled : scope.viewOnly,
      });
      val.change(function(){
        sync.rawVal(obj.data.weapon[$(this).attr("index")], $(this).val());
        obj.update();
      });

      var min = genInput({
        parent : modRow,
        classes : "line lrmargin middle subtitle",
        value : obj.data.weapon[i].min,
        index : i,
        placeholder : "Min",
        disabled : scope.viewOnly,
        style : {"width" : "24px"},
      });
      min.change(function(){
        obj.data.weapon[$(this).attr("index")].min = $(this).val();
        obj.update();
      });

      var max = genInput({
        parent : modRow,
        classes : "line middle subtitle",
        value : obj.data.weapon[i].max,
        index : i,
        placeholder : "Max",
        disabled : scope.viewOnly,
        style : {"width" : "24px"},
      });
      max.change(function(){
        obj.data.weapon[$(this).attr("index")].max = $(this).val();
        obj.update();
      });

      var mods = genIcon("list-alt").appendTo(modRow);
      mods.addClass("flexmiddle lrmargin subtitle");
      mods.attr("path", "weapon."+i);
      mods.click(function(){
        var path = $(this).attr("path");

        var content = sync.newApp("ui_modifiers");
        content.attr("viewOnly", scope.viewOnly);
        content.attr("lookup", path);
        content.attr("modsOnly", "true");
        obj.addApp(content);

        ui_popOut({
          target : $(this),
          align : "top",
          title : "Modifiers",
          id : "modify-exp",
          style : {"min-width" : "100px"},
        }, content);
      });

      if (!game.templates.item.weapon[i] || scope.homebrew ) {
        if (!scope.viewOnly) {
          var remove = genIcon("remove").appendTo(modRow);
          remove.addClass("destroy");
          remove.attr("index", i);
          remove.click(function(){
            delete obj.data.weapon[$(this).attr("index")];
            obj.update();
          });
        }
      }
    }
    if (obj.data.info.skill) {
      var skillPlate = $("<div>").appendTo(content);
      skillPlate.addClass("flexrow subtitle");
      skillPlate.append("<b class='flexmiddle' style='min-width : 60px;'>"+obj.data.info.skill.name+"</b>");

      if ($("#item-skill-list").length) {
        $("#item-skill-list").remove();
      }
      var dataList = [];

      var skillRegex = /\(([^(]+[^)]+)\)/;

      if (char) {
        for (var index in char.data.skills) {
          var skill = char.data.skills[index];
          if (skillRegex.exec(skill.name)) {
            dataList.push(skill.name);
          }
        }
      }

      var skill = genInput({
        parent : skillPlate,
        list : dataList,
        placeholder : "Enter Related Skill",
        disabled: scope.viewOnly,
      });
      if (!scope.viewOnly) {
        skill.css("background-color", "rgb(235,235,228)");
      }
      skill.val(sync.val(obj.data.info.skill));
      skill.change(function(){
        sync.val(obj.data.info.skill, $(this).val());
        if (!scope.local) {
          obj.sync("updateAsset");
        }
        else {
          obj.update();
        }
      });

      var dicePlate = $("<div>").appendTo(skillPlate);

      var skillRef;
      if (sync.val(obj.data.info.skill) && char) {
        for (var index in char.data.skills) {
          if (char.data.skills[index] && char.data.skills[index].name.toLowerCase() == sync.val(obj.data.info.skill).toLowerCase()) {
            skillRef = index;
            break;
          }
        }
      }

      var diceWrap = $("<div>").appendTo(skillPlate);
      diceWrap.addClass("flexmiddle");
      diceWrap.css("min-width", "70px");
      if (skillRef) {
        var dice = sync.render("ui_skillDice")(char, app, {skill : skillRef}).appendTo(diceWrap);
      }
    }
    if (!scope.viewOnly) {
      var newField = genIcon("plus", "New Attribute").appendTo(content);
      newField.addClass("fit-x flexmiddle subtitle");
      newField.click(function(){
        var invalidKeys = {
          "length" : "system",
        }; // invalid keys

        for (var key in game.templates.character) {
          invalidKeys[key] = key;
        }
        for (var key in game.templates.character.info) {
          invalidKeys[key] = "info."+key;
        }
        for (var key in game.templates.character.counters) {
          invalidKeys[key] = "counters."+key;
        }
        for (var key in game.templates.character.stats) {
          invalidKeys[key] = "stats."+key;
        }


        for (var key in obj.info) {
          invalidKeys[key] = "item.info."+key;
        }
        for (var key in obj.equip) {
          invalidKeys[key] = "item.equip."+key;
        }
        for (var key in obj.weapon) {
          invalidKeys[key] = "item.weapon."+key;
        }
        for (var key in obj.spell) {
          invalidKeys[key] = "item.spell."+key;
        }


        ui_prompt({
          target : $(this),
          id : "add-field",
          inputs : {
            "Macro Key" : {},
          },
          click : function(ev, inputs) {
            var path = inputs["Macro Key"].val();
            if (path && path != "notes" && path != "img" && path != "name" && isNaN(path)) {
              path = replaceAll(path, " ", "_");
              path = replaceAll(path, "@", "");
              path = replaceAll(path, "(", "_");
              path = replaceAll(path, ")", "_");
              path = replaceAll(path, "[", "_");
              path = replaceAll(path, "]", "_");
              path = replaceAll(path, "!", "_");
              path = replaceAll(path, "#", "_");
              path = replaceAll(path, "$", "_");
              if (invalidKeys[path]) {
                sendAlert({text : "This key is used somewhere else"});
              }
              else {
                obj.data.weapon[path] = sync.newValue(path, null);
                obj.update();
              }
            }
            else {
              sendAlert({text : "Invalid Macro Key"});
            }
          }
        });
      });
    }
  }
  else if (scope.mode == "spell") {
    spell.addClass("highlight alttext");

    for (var i in obj.data.spell) {
      var modRow = $("<div>").appendTo(content);
      modRow.addClass("flexrow fit-x subtitle");

      var label = genInput({
        classes : "line lrmargin bold middle",
        parent : modRow,
        value : obj.data.spell[i].name,
        index : i,
        title : "@i.spell."+i,
        disabled : scope.viewOnly,
        style : {"width" : "100px"},
      });
      label.change(function(){
        obj.data.spell[$(this).attr("index")].name = $(this).val();
        obj.update();
      });

      var val = genInput({
        classes : "line flex middle",
        parent : modRow,
        value : sync.rawVal(obj.data.spell[i]),
        index : i,
        disabled : scope.viewOnly,
      });
      val.change(function(){
        sync.rawVal(obj.data.spell[$(this).attr("index")], $(this).val());
        obj.update();
      });

      var min = genInput({
        parent : modRow,
        classes : "line lrmargin middle subtitle",
        value : obj.data.spell[i].min,
        index : i,
        placeholder : "Min",
        disabled : scope.viewOnly,
        style : {"width" : "24px"},
      });
      min.change(function(){
        obj.data.spell[$(this).attr("index")].min = $(this).val();
        obj.update();
      });

      var max = genInput({
        parent : modRow,
        classes : "line middle subtitle",
        value : obj.data.spell[i].max,
        index : i,
        placeholder : "Max",
        disabled : scope.viewOnly,
        style : {"width" : "24px"},
      });
      max.change(function(){
        obj.data.spell[$(this).attr("index")].max = $(this).val();
        obj.update();
      });

      var mods = genIcon("list-alt").appendTo(modRow);
      mods.addClass("flexmiddle lrmargin subtitle");
      mods.attr("path", "spell."+i);
      mods.click(function(){
        var path = $(this).attr("path");

        var content = sync.newApp("ui_modifiers");
        content.attr("viewOnly", scope.viewOnly);
        content.attr("lookup", path);
        content.attr("modsOnly", "true");
        obj.addApp(content);

        ui_popOut({
          target : $(this),
          align : "top",
          title : "Modifiers",
          id : "modify-exp",
          style : {"min-width" : "100px"},
        }, content);
      });

      if (!game.templates.item.spell[i] || scope.homebrew) {
        if (!scope.viewOnly) {
          var remove = genIcon("remove").appendTo(modRow);
          remove.addClass("destroy");
          remove.attr("index", i);
          remove.click(function(){
            delete obj.data.spell[$(this).attr("index")];
            obj.update();
          });
        }
      }
    }
    if (!scope.viewOnly) {
      var newField = genIcon("plus", "New Attribute").appendTo(content);
      newField.addClass("fit-x flexmiddle subtitle");
      newField.click(function(){
        var invalidKeys = {
          "length" : "system",
        }; // invalid keys

        for (var key in game.templates.character) {
          invalidKeys[key] = key;
        }
        for (var key in game.templates.character.info) {
          invalidKeys[key] = "info."+key;
        }
        for (var key in game.templates.character.counters) {
          invalidKeys[key] = "counters."+key;
        }
        for (var key in game.templates.character.stats) {
          invalidKeys[key] = "stats."+key;
        }


        for (var key in obj.info) {
          invalidKeys[key] = "item.info."+key;
        }
        for (var key in obj.equip) {
          invalidKeys[key] = "item.equip."+key;
        }
        for (var key in obj.weapon) {
          invalidKeys[key] = "item.weapon."+key;
        }
        for (var key in obj.spell) {
          invalidKeys[key] = "item.spell."+key;
        }


        ui_prompt({
          target : $(this),
          id : "add-field",
          inputs : {
            "Macro Key" : {},
          },
          click : function(ev, inputs) {
            var path = inputs["Macro Key"].val();
            if (path && path != "notes" && path != "img" && path != "name" && isNaN(path)) {
              path = replaceAll(path, " ", "_");
              path = replaceAll(path, "@", "");
              path = replaceAll(path, "(", "_");
              path = replaceAll(path, ")", "_");
              path = replaceAll(path, "[", "_");
              path = replaceAll(path, "]", "_");
              path = replaceAll(path, "!", "_");
              path = replaceAll(path, "#", "_");
              path = replaceAll(path, "$", "_");
              if (invalidKeys[path]) {
                sendAlert({text : "This key is used somewhere else"});
              }
              else {
                obj.data.spell[path] = sync.newValue(path, null);
                obj.update();
              }
            }
            else {
              sendAlert({text : "Invalid Macro Key"});
            }
          }
        });
      });
    }
  }
  else if (scope.mode == "notes") {
    notes.addClass("highlight alttext");
    content.removeClass("padding");
    content.addClass("flexcolumn");

    var newApp = sync.newApp("ui_itemNotes").appendTo(content);
    newApp.attr("hideOptions", true);
    newApp.attr("autosave", true);
    newApp.attr("entry", true);
    obj.addApp(newApp);
  }
  else if (scope.mode == "calc") {
    obj.data._calc = obj.data._calc || [];
    var calcs = obj.data._calc;
    content.addClass("subtitle");
    content.removeClass("padding");

    var warning = $("<i>").appendTo(content);
    warning.addClass("flexmiddle subtitle bold padding")
    warning.text("Calculations performed here are written to the parent character sheet, and change the values directly. Use with caution");

    var calcWrapper = $("<div>").appendTo(content);
    calcWrapper.addClass("flexcolumn flex outlinebottom smooth");
    calcWrapper.css("position", "relative");
    calcWrapper.css("overflow-y", "auto");

    var calcList = $("<div>").appendTo(calcWrapper);
    calcList.addClass("fit-x");
    calcList.css("position", "absolute");
    calcList.css("top", "0");
    calcList.css("left", "0");

    sync.render("ui_math")(obj, app, {calc : calcs, cref : scope.cref}).appendTo(calcList);
  }

  return div;
});

sync.render("ui_inventory", function(obj, app, scope) {
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};

  var data = obj.data;
  var inventory = $("<div>");
  if (!scope.hideTitle) {
    var title = $("<h1 style='text-align: center;'>Inventory </h1>").appendTo(inventory);
    if (!scope.viewOnly) {
      var icon = genIcon("plus").appendTo(title);
      icon.addClass("create");
      icon.click(function() {
        var frame = $("<div>");
        frame.addClass("flex flexcolumn");

        game.locals["createItem"] = game.locals["createItem"] || sync.obj("createItem");
        game.locals["createItem"].data = {};
        merge(game.locals["createItem"].data, duplicate(game.templates.item));

        var newApp = sync.newApp("ui_renderItem").appendTo(frame);
        newApp.attr("char-ref", obj.id());
        game.locals["createItem"].addApp(newApp);

        var buttonWrap = $("<div>").appendTo(frame);
        buttonWrap.addClass("flexrow");

        var confirm = $("<button>").appendTo(buttonWrap);
        confirm.addClass("flex");
        confirm.append("Create");
        confirm.click(function(){
          obj.data.inventory.push(duplicate(game.locals["createItem"].data));
          obj.sync("updateAsset");
        });

        var confirm = $("<button>").appendTo(buttonWrap);
        confirm.addClass("flex");
        confirm.append("Create and Close");
        confirm.click(function(){
          obj.data.inventory.push(duplicate(game.locals["createItem"].data));
          obj.sync("updateAsset");
          layout.coverlay("create-item");
        });
        var pop = ui_popOut({
          target : $(this),
          align : "top",
          id : "create-item",
          maximize : true,
          minimize : true,
          style : {"width" : assetTypes["i"].width, height : assetTypes["i"].height}
        }, frame);
        pop.resizable();
      });
    }
  }

  if (!scope.hideWeight) {
    var weight = $("<div>").appendTo(inventory);
    weight.addClass("fit-x flexcolumn");
    weight.css("margin-bottom", "8px");
  }
  var totalWeight = 0;

  var inventoryList = $("<div>").appendTo(inventory);
  inventoryList.addClass("flexwrap flexaround inventoryContent");
  if (!scope.viewOnly) {
    inventoryList.sortable({
      filter : ".inventoryContent",
      update : function(ev, ui) {
        var newIndex;
        var count = 0;
        $(ui.item).attr("ignore", true);
        inventoryList.children().each(function(){
          if ($(this).attr("ignore")){
            newIndex = count;
          }
          count += 1;
        });
        var old = data.inventory.splice($(ui.item).attr("index"), 1);
        util.insert(data.inventory, newIndex, old[0]);
        obj.sync("updateAsset");
      }
    });
  }

  for (var index in data.inventory) {
    var itemData = data.inventory[index];
    if (!itemData._s || hasSecurity(getCookie("UserID"), "Owner", obj.data) || hasSecurity(getCookie("UserID"), "Visible", itemData)) {
      if (!scope.mode) {
        var itemBackground = $("<div>").appendTo(inventoryList);
        itemBackground.addClass("outline flexcolumn smooth");
        itemBackground.css("padding", "4px");
        itemBackground.css("min-width", "100px");
        itemBackground.css("max-width", "200px");
        itemBackground.css("height", "100px");
        itemBackground.attr("index", index);
        itemBackground.css("background-color", "white");

        var item = $("<div>").appendTo(itemBackground);
        item.addClass("flexcolumn flex hover2");
        item.attr("index", index);

        item.click(function() {
          var frame = $("<div>");
          frame.addClass("flex flexcolumn");

          var iRef = $(this).attr("index");
          game.locals["editItem"] = game.locals["editItem"] || sync.obj("editItem");
          game.locals["editItem"].data = JSON.parse(JSON.stringify(data.inventory[iRef]));

          merge(game.locals["editItem"].data, duplicate(game.templates.item));

          var newApp = sync.newApp("ui_renderItem").appendTo(frame);
          newApp.attr("char-ref", obj.id());
          newApp.attr("viewOnly", scope.viewOnly);
          if (data.inventory[iRef]._s && !hasSecurity(getCookie("UserID"), "Owner", obj.data) && !hasSecurity(getCookie("UserID"), "Rights", data.inventory[iRef]))  {
            newApp.attr("viewOnly", true);
          }
          newApp.attr("local", "true");

          game.locals["editItem"].addApp(newApp);

          if (!scope.viewOnly) {
            var confirm = $("<button>").appendTo(frame);
            confirm.addClass("fit-x");
            confirm.attr("index", iRef);
            confirm.append("Confirm");
            confirm.click(function(){
              var iRef = $(this).attr("index");
              data.inventory[iRef] = duplicate(game.locals["editItem"].data);
              obj.sync("updateAsset");
              layout.coverlay("edit-item");
            });
          }
          var pop = ui_popOut({
            target : $(this),
            align : "top",
            id : "edit-item",
            maximize : true,
            minimize : true,
            style : {"width" : assetTypes["i"].width, "height" : assetTypes["i"].height}
          }, frame);
          pop.resizable();
        });

        var infoBar = $("<div>").appendTo(item);
        infoBar.addClass("fit-x outline flexmiddle");
        infoBar.css("background-color", "white");

        if (itemData instanceof Object) {
          totalWeight = totalWeight + (sync.val(itemData.info.weight) || 0) * (sync.val(itemData.info.quantity) || 1);

          var name = $("<b>").appendTo(infoBar);
          name.css("color", "#333");
          name.append(sync.val(itemData.info.name));
          if (sync.val(itemData.info.name) && sync.val(itemData.info.name).length > 15) {
            name.addClass("subtitle spadding");
          }
          else {
            name.addClass("lrpadding");
          }
          if (sync.val(itemData.info.quantity) > 1) {
            name.append("<b style='font-size : 0.8em;'> x"+sync.val(itemData.info.quantity)+"</b>");
          }

          var itemImage = $("<div>").appendTo(item);
          itemImage.addClass("fit-x flexmiddle flex");
          itemImage.css("background-image", "url('"+ sync.val(itemData.info.img) +"')");
          itemImage.css("background-size", "contain");
          itemImage.css("background-repeat", "no-repeat");
          itemImage.css("background-position", "center");

          if (!scope.viewOnly) {
            var optionsBar = $("<div>").appendTo(item);
            optionsBar.addClass("fit-x flexrow outline flexbetween subtitle spadding");
            optionsBar.css("background-color", "white");
            optionsBar.css("color", "#333");

            var security = genIcon("lock");
            security.addClass("lrmargin");
            security.attr("index", index);
            security.attr("title", "Configure who has access to this object");
            security.appendTo(optionsBar);
            security.click(function(ev){
              var index = $(this).attr("index");
              var securityContent = $("<div>");
              function buildSecurity() {
                var secTbl = {};
                secTbl[getCookie("UserID")] = 1;
                secTbl["default"] = 1;
                secTbl = obj.data.inventory[index]._s || secTbl;
                var sec = sync.render("ui_rights")(obj, app, {
                  security : secTbl,
                  viewOnly : scope.viewOnly,
                  change : function(ev, ui, userID, newSecurity){
                    obj.data.inventory[index]._s = obj.data.inventory[index]._s || secTbl;
                    if (userID == "default" && newSecurity === "") {
                      obj.data.inventory[index]._s[userID] = "1";
                    }
                    else {
                      obj.data.inventory[index]._s[userID] = newSecurity;
                    }
                    if (!scope.local) {
                      obj.sync("updateBoard");
                    }
                    else {
                      obj.update();
                    }
                    securityContent.empty();
                    buildSecurity().appendTo(securityContent);
                  }
                });
                return sec;
              }
              buildSecurity().appendTo(securityContent);

              var pop = ui_popOut({
                id : "item-security",
                prompt : true,
                target : $(this),
                align : "top"
              }, securityContent);
              ev.stopPropagation();
              ev.preventDefault();
            });


            itemData.tags = itemData.tags || {};

            var equipWrap = $("<a>").appendTo(optionsBar);
            equipWrap.addClass("hover2 flex flexmiddle");
            equipWrap.attr("index", index);
            equipWrap.click(function(ev) {
              var itemData = data.inventory[$(this).attr("index")];
              if (itemData.tags["equipped"]) {
                delete itemData.tags["equipped"];
              }
              else {
                itemData.tags["equipped"] = 1;
              }
              if (!scope.local) {
                obj.sync("updateAsset");
              }
              else {
                obj.update();
              }
              ev.stopPropagation();
              ev.preventDefault();
            });

            if (itemData.tags["equipped"]) {
              equipWrap.text("un-equip");
              item.addClass("focus");
            }
            else {
              equipWrap.text("equip");
            }
          }
        }
        else {
          var name = $("<b>").appendTo(infoBar);
          name.addClass("lrpadding");
          name.css("color", "#333");
          name.append(itemData);
        }

        var icon = genIcon("trash");
        icon.appendTo(optionsBar);
        icon.addClass("destroy");
        icon.attr("index", index);
        icon.click(function(ev) {
          var itemIndex = $(this).attr("index");
          ui_prompt({
            target : $(this),
            id : "delete-item-confirmation",
            confirm : "Delete Item",
            click : function(){
              data.inventory.splice(itemIndex, 1);
              obj.sync("updateAsset");
            }
          });
          ev.stopPropagation();
          ev.preventDefault();
          return false;
        });
      }
      else if (scope.mode == 'list') {
        var itemBackground = $("<div>").appendTo(inventoryList);
        itemBackground.addClass("outline flexcolumn smooth");
        itemBackground.css("padding", "4px");
        itemBackground.css("min-width", "100px");
        itemBackground.css("max-width", "200px");
        itemBackground.css("height", "100px");
        itemBackground.attr("index", index);
        itemBackground.css("background-color", "white");

        var item = $("<div>").appendTo(itemBackground);
        item.addClass("flexcolumn flex hover2");
        item.attr("index", index);

        item.click(function() {
          var frame = $("<div>");
          frame.addClass("flex flexcolumn");

          var iRef = $(this).attr("index");
          game.locals["editItem"] = game.locals["editItem"] || sync.obj("editItem");
          game.locals["editItem"].data = JSON.parse(JSON.stringify(data.inventory[iRef]));

          merge(game.locals["editItem"].data, duplicate(game.templates.item));

          var newApp = sync.newApp("ui_renderItem").appendTo(frame);
          newApp.attr("char-ref", obj.id());
          newApp.attr("viewOnly", scope.viewOnly);
          if (data.inventory[iRef]._s && !hasSecurity(getCookie("UserID"), "Owner", obj.data) && !hasSecurity(getCookie("UserID"), "Rights", data.inventory[iRef]))  {
            newApp.attr("viewOnly", true);
          }
          newApp.attr("local", "true");

          game.locals["editItem"].addApp(newApp);

          if (!scope.viewOnly) {
            var confirm = $("<button>").appendTo(frame);
            confirm.addClass("fit-x");
            confirm.attr("index", iRef);
            confirm.append("Confirm");
            confirm.click(function(){
              var iRef = $(this).attr("index");
              data.inventory[iRef] = duplicate(game.locals["editItem"].data);
              obj.sync("updateAsset");
              layout.coverlay("edit-item");
            });
          }
          var pop = ui_popOut({
            target : $(this),
            align : "top",
            id : "edit-item",
            maximize : true,
            minimize : true,
            style : {"width" : "500px", "height" : "350px"}
          }, frame);
          pop.resizable();
        });

        var infoBar = $("<div>").appendTo(item);
        infoBar.addClass("fit-x outline flexmiddle");
        infoBar.css("background-color", "white");

        if (itemData instanceof Object) {
          totalWeight = totalWeight + (sync.val(itemData.info.weight) || 0) * (sync.val(itemData.info.quantity) || 1);

          var name = $("<b>").appendTo(infoBar);
          name.css("color", "#333");
          name.append(sync.val(itemData.info.name));
          if (sync.val(itemData.info.quantity) > 1) {
            name.append("<b style='font-size : 0.8em;'> x"+sync.val(itemData.info.quantity)+"</b>");
          }

          var itemImage = $("<div>").appendTo(item);
          itemImage.addClass("fit-x flexmiddle flex");
          itemImage.css("background-image", "url('"+ sync.val(itemData.info.img) +"')");
          itemImage.css("background-size", "contain");
          itemImage.css("background-repeat", "no-repeat");
          itemImage.css("background-position", "center");

          if (!scope.viewOnly) {
            var optionsBar = $("<div>").appendTo(item);
            optionsBar.addClass("fit-x flexrow outline flexbetween subtitle spadding");
            optionsBar.css("background-color", "white");
            optionsBar.css("color", "#333");

            var security = genIcon("lock");
            security.attr("index", index);
            security.attr("title", "Configure who has access to this object");
            security.appendTo(optionsBar);
            security.click(function(ev){
              var index = $(this).attr("index");
              var securityContent = $("<div>");
              function buildSecurity() {
                var secTbl = {};
                secTbl[getCookie("UserID")] = 1;
                secTbl["default"] = 1;
                secTbl = obj.data.inventory[index]._s || secTbl;
                var sec = sync.render("ui_rights")(obj, app, {
                  security : secTbl,
                  viewOnly : scope.viewOnly,
                  change : function(ev, ui, userID, newSecurity){
                    obj.data.inventory[index]._s = obj.data.inventory[index]._s || secTbl;
                    if (userID == "default" && newSecurity === "") {
                      obj.data.inventory[index]._s[userID] = "1";
                    }
                    else {
                      obj.data.inventory[index]._s[userID] = newSecurity;
                    }
                    if (!scope.local) {
                      obj.sync("updateBoard");
                    }
                    else {
                      obj.update();
                    }
                    securityContent.empty();
                    buildSecurity().appendTo(securityContent);
                  }
                });
                return sec;
              }
              buildSecurity().appendTo(securityContent);

              var pop = ui_popOut({
                id : "item-security",
                prompt : true,
                target : $(this),
                align : "top"
              }, securityContent);
              ev.stopPropagation();
              ev.preventDefault();
            });


            itemData.tags = itemData.tags || {};

            var equipWrap = $("<a>").appendTo(optionsBar);
            equipWrap.addClass("hover2 flex flexmiddle");
            equipWrap.attr("index", index);
            equipWrap.click(function(ev) {
              var itemData = data.inventory[$(this).attr("index")];
              if (itemData.tags["equipped"]) {
                delete itemData.tags["equipped"];
              }
              else {
                itemData.tags["equipped"] = 1;
              }
              if (!scope.local) {
                obj.sync("updateAsset");
              }
              else {
                obj.update();
              }
              ev.stopPropagation();
              ev.preventDefault();
            });

            if (itemData.tags["equipped"]) {
              equipWrap.text("un-equip");
              item.addClass("focus");
            }
            else {
              equipWrap.text("equip");
            }
          }
        }
        else {
          var name = $("<b>").appendTo(infoBar);
          name.css("color", "#333");
          name.append(itemData);
        }

        var icon = genIcon("trash");
        icon.appendTo(optionsBar);
        icon.addClass("destroy");
        icon.attr("index", index);
        icon.click(function(ev) {
          var itemIndex = $(this).attr("index");
          ui_prompt({
            target : $(this),
            id : "delete-item-confirmation",
            confirm : "Delete Item",
            click : function(){
              data.inventory.splice(itemIndex, 1);
              obj.sync("updateAsset");
            }
          });
          ev.stopPropagation();
          ev.preventDefault();
          return false;
        });
      }
    }
  }

  if (scope.weight) {
    var ctx = sync.defaultContext();
    ctx["c"] = obj.data;

    var tWeight = sync.eval(scope.weight, ctx);

    var percentage = totalWeight/tWeight;

    weight.append("<div class='flexmiddle subtitle bold'>Total " + game.templates.item.info.weight.name + " - " + totalWeight + " / " + tWeight + "("+Math.floor(percentage*100)+"%)</div>");

    var barWrap = $("<div>").appendTo(weight);

    var progress = $("<div>").appendTo(barWrap);
    progress.addClass("outline flex");
    progress.css("position", "relative");
    progress.css("border-radius", "2px");
    progress.css("height", "8px");
    progress.css("min-width", "20px");

    var col = "rgb("+(Math.ceil(200 * percentage))+","+(Math.ceil(200-200 * percentage))+",0)";
    progress.css("background-color", col);

    var bar = $("<div>").appendTo(progress);
    bar.addClass("outline");
    bar.css("position", "absolute");
    bar.css("right", 0);
    bar.css("width", 100-Math.ceil(percentage * 105)+"%");
    bar.css("background-color", "grey");
    bar.css("height", "100%");
  }
  else {
    if (!scope.hideWeight) {
      weight.append("<div class='flexmiddle subtitle bold'>Total " + game.templates.item.info.weight.name + " - " + totalWeight+"</div>");
    }
  }
  return inventory;
});


sync.render("ui_itemNotes", function(obj, app, scope){
  scope = scope || {};
  scope.removePadding = true;
  scope.noOutline = true;
  return sync.render("ui_characterNotes")(obj, app, scope).removeClass("padding");
});

//talents are felxible data that user enters, I have no intention of making this an automated system
sync.render("ui_renderTalent", function(obj, app, scope){
  if (!obj) {return $("<div>");}
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true"), minimized : (app.attr("minimized") == "true")};
  // if talentData is present, then use it to present data
  // only use scope.talentData when viewOnly
  var talentData = scope.talentData || obj.data;

  if (talentData.length) {
    return $("<div>"+talentData+"</div>");
  }

  var div = $("<div>");
  div.addClass("flex");

  if (!scope.viewOnly) {
    var optionsBar = $("<div>").appendTo(div);
    optionsBar.addClass("background alttext flexrow flexaround");

    var existing = genIcon("list", "Existing").appendTo(optionsBar);
    existing.attr("title", "Select from a list of existing content");
    existing.click(function(){
      var content = sync.render("ui_existing")(obj, app, {lookup : app.attr("lookup") || "talents"});
      if (content.children().length) {
        ui_popOut({
          target : div,
          id : "item-picker",
          align : "top",
          style : {"width" : "50vw", "height" : "35vh", "overflow-y" : "scroll"}
        }, content).resizable();
      }
    });
    var pack = genIcon("envelope", "Content Pack");//.appendTo(optionsBar);
    pack.attr("title", "Select from a list of a content package");

    var del = genIcon("trash", "Clear All Data").appendTo(optionsBar);
    del.attr("title", "Clear out All Data");
    del.click(function(){
      obj.data = sync.newValue();
      obj.update();
    });
  }
  else {
    div.css("padding-left", "0.5em");
    div.css("padding-right", "0.5em");
  }

  var talentDiv = $("<div>").appendTo(div);
  talentDiv.addClass("flexbetween");

  if (!scope.viewOnly) {
    var name = genInput({
      parent : talentDiv,
      value : talentData.name,
      placeholder : "Talent Name",
      style : {"width" : "30%"}
    });
    name.change(function(){
      obj.data.name = $(this).val();
      obj.update();
    });

    var rank = genInput({
      parent : talentDiv,
      value : sync.modifier(obj.data, "rank") || "",
      placeholder : "Rank",
      style : {"width" : "30%"}
    });
    rank.change(function(){
      sync.modifier(obj.data, "rank", $(this).val());
      obj.update();
    });

    if ($("#talent-filter-list").length) {
      $("#talent-filter-list").remove();
    }
    var dataList = $("<datalist>").appendTo(filter);
    dataList.attr("id", "talent-filter-list");

    var filterList = {};
    for (var index in obj.data.talents) {
      var tData = obj.data.talents[index];
      if (tData && sync.modifier(tData, "filter")) {
        filterList[sync.modifier(tData, "filter")];
      }
    }
    for (var index in filterList) {
      var option = $("<option>").appendTo(dataList);
      option.attr("value", index);
    }

    var filter = genInput({
      parent : talentDiv,
      value : sync.modifier(obj.data, "filter") || "",
      type : "list",
      list : "talent-filter-list",
      placeholder : "Filter",
      style : {"width" : "10%"},
      disabled : scope.viewOnly
    });
    if (scope.viewOnly) {
      filter.css("background-color", "rgb(235,235,228)");
    }
    filter.val(sync.modifier(obj.data, "filter"));
    filter.change(function(){
      sync.modifier(obj.data, "filter", $(this).val());
      obj.update();
    });

    var notes = $("<textarea>").appendTo(div);
    notes.addClass("fit-x subtitle");
    notes.css("height", "200px");
    notes.append(sync.rawVal(obj.data));
    notes.change(function(){
      sync.rawVal(obj.data, $(this).val());
      obj.update();
    });
  }
  else {
    var name = $("<b>").appendTo(talentDiv);
    name.addClass("subtitle");
    name.append(talentData.name);

    if (sync.modifier(talentData, "rank")) {
      var level = $("<text>").appendTo(talentDiv);
      level.append(sync.modifier(talentData, "rank"));
    }

    talentDiv.click(function(){
      var frame = $("<div>");
      frame.addClass("flexcolumn flex");

      var tRef = $(this).attr("index");
      var talentData = scope.talentData;

      var viewTalent = sync.obj("viewTalent");
      viewTalent.data = duplicate(game.templates.page);
      viewTalent.data._t = "t";
      viewTalent.data.info.name = sync.newValue("Name", duplicate(talentData.name));
      viewTalent.data.info.img = sync.newValue("Img", null);
      viewTalent.data.info.notes = sync.newValue("Notes", duplicate(talentData.current));

      var newApp  = sync.newApp("ui_renderPage").appendTo(frame);
      newApp.attr("viewOnly", true);
      viewTalent.addApp(newApp);

      var pop = ui_popOut({
        target : $("body"),
        id : "view-talent",
        prompt : true,
        title : sync.rawVal(talentData.name),
        style : {width : "400px", height : "400px"}
      }, frame);
      pop.resizable();
    });
  }

  return div;
});

sync.render("ui_characterTalentList", function(obj, app, scope) {
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};

  var data = obj.data;
  var div = $("<div>");
  div.css("background-color", "white");

  var keys = Object.keys(data.talents);
  keys.sort(function(a,b){
    var name1 = data.talents[a].name;
    var name2 = data.talents[b].name;
    if (name1 > name2) {
      return 1;
    }
    else if (name1 < name2) {
      return -1;
    }
    return 0;
  });

  for (var ind in keys) {
    var index = keys[ind];
    var talentData = data.talents[index];
    if (talentData && (!scope.filter || sync.modifier(talentData, "filter") == scope.filter)) {
      var talentCont = $("<div>").appendTo(div);
      talentCont.addClass("fit-x outline talentContent smooth spadding");
      if (scope.minimized) {
        //talentCont.addClass("subtitle");
      }
      if (!scope.viewOnly) {
        var key = $("<text>").appendTo(talentCont);
        key.addClass("subtitle lrpadding flexmiddle");
        key.attr("title", "@c.talents."+index);
        key.append("@");
        if (hasSecurity(getCookie("UserID"), "Rights", obj.data)) {
          key.attr("index", index);
          key.click(function(ev){
            var oldIndex = $(this).attr("index");
            var pop = ui_prompt({
              target : $(this),
              inputs : {"Change Key" : {placeholder : "Assign a new key"}},
              click : function(ev, inputs) {
                var newKey = inputs["Change Key"].val();
                if (newKey) {
                  if (!obj.data.talents[newKey] && obj.data.talents[oldIndex]) {
                    obj.data.talents[newKey] = obj.data.talents[oldIndex];
                    delete obj.data.talents[index];
                    obj.sync("updateAsset");
                  }
                  else {
                    sendAlert({text : "Another entry exists with this key"});
                  }
                }
                else {
                  sendAlert({text : "Enter valid key"});
                }
              }
            });
            ev.stopPropagation();
            ev.preventDefault();
          });
        }

        talentCont.addClass("flexbetween hover2");
        talentCont.css("cursor", "pointer");
        talentCont.attr("index", index);
        talentCont.click(function(){
          var frame = $("<div>");
          frame.addClass("flexcolumn flex");

          var tRef = $(this).attr("index");
          var talentData = data.talents[tRef];

          var viewTalent = sync.obj("viewTalent");
          viewTalent.data = duplicate(game.templates.page);
          viewTalent.data._t = "t";
          viewTalent.data.info.name = sync.newValue("Name", duplicate(talentData.name));
          viewTalent.data.info.img = sync.newValue("Img", null);
          viewTalent.data.info.notes = sync.newValue("Notes", duplicate(talentData.current));

          var newApp  = sync.newApp("ui_renderPage").appendTo(frame);
          newApp.attr("viewOnly", true);
          viewTalent.addApp(newApp);

          var pop = ui_popOut({
            target : $("body"),
            id : "view-talent",
            title : sync.rawVal(talentData.name),
            style : {width : "400px", height : "400px"}
          }, frame);
          pop.resizable();
        });
      }

      sync.render("ui_renderTalent")(obj, app, {talentData: talentData, viewOnly: true, minimized : scope.minimized}).appendTo(talentCont);

      if (!scope.viewOnly) {
        var icon = genIcon("edit").appendTo(talentCont);
        icon.attr("index", index);
        icon.attr("title", "Edit Talent");
        icon.click(function(ev) {
          var frame = $("<div>");
          frame.addClass("flexcolumn flex");

          var tRef = $(this).attr("index");
          var talentData = data.talents[tRef];

          game.locals["editTalent"] = game.locals["editTalent"] || sync.obj("editTalent");
          game.locals["editTalent"].data = duplicate(game.templates.page);
          game.locals["editTalent"].data._t = "t";
          game.locals["editTalent"].data.info.name = sync.newValue("Name", duplicate(talentData.name));
          game.locals["editTalent"].data.info.img = sync.newValue("Img", null);
          game.locals["editTalent"].data.info.notes = sync.newValue("Notes", duplicate(talentData.current));

          var newApp = sync.newApp("ui_editPage").appendTo(frame);
          newApp.attr("autosave", true);
          newApp.attr("entry", true);
          game.locals["editTalent"].addApp(newApp);

          var confirm = $("<button>").appendTo(frame);
          confirm.addClass("fit-x");
          confirm.append("Confirm");
          confirm.click(function(){
            if (sync.rawVal(game.locals["editTalent"].data.info.name)) {
              data.talents[tRef].name = duplicate(game.locals["editTalent"].data.info.name.current);
              data.talents[tRef].current = duplicate(game.locals["editTalent"].data.info.notes.current);
              obj.sync("updateAsset");
              layout.coverlay("edit-talent");
            }
            else {
              sendAlert({text : "Name required"});
            }
          });

          var pop = ui_popOut({
            target : $("body"),
            id : "edit-talent",
            title : "Editing Talent",
            style : {width : "400px", height : "400px"}
          }, frame);
          pop.resizable();
          ev.stopPropagation();
          ev.preventDefault();
          return false;
        });

        var icon = genIcon("trash").appendTo(talentCont);
        icon.addClass("destroy");
        icon.attr("index", index);
        icon.click(function(ev) {
          // remove from spells, and remove from equipment
          var talentIndex = $(this).attr("index");
          ui_prompt({
            target : $(this),
            id : "delete-talent-confirmation",
            confirm : "Delete Talent",
            click : function(){
              delete data.talents[talentIndex];
              obj.sync("updateAsset");
            }
          });
          ev.stopPropagation();
          ev.preventDefault();
          return false;
        });
      }
    }
  }
  return div;
});

sync.render("ui_characterTalents", function(obj, app, scope) {
  if (!obj) {return $("<div>");}
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true"), minimized : (app.attr("minimized") == "true")};

  var data = obj.data;
  var div = $("<div>");
  if (!scope.hideTitle) {
    if (!scope.minimized) {
      var title = $("<h1 style='text-align: center;'>"+(scope.title || "Talents")+" </h1>").appendTo(div);
      if (!scope.viewOnly) {
        var icon = genIcon("plus").appendTo(title);
        icon.addClass("create");
        icon.click(function() {
          ui_prompt({
            target : $(this),
            inputs : {
              "Name" : ""
            },
            click : function(ev, inputs) {
              if (inputs["Name"].val() && !obj.data.talents[inputs["Name"].val()]) {
                obj.data.talents[inputs["Name"].val()] = sync.newValue(inputs["Name"].val());
                obj.sync("updateAsset");
              }
              else {
                sendAlert({text : "Invalid Name"});
              }
            }
          });
        });
      }
    }
    else {
      var title = $("<b>"+(scope.title || "Talents")+"</b>").appendTo(div);
      title.addClass("fit-x flexmiddle");
    }
  }

  var filterList = {};
  for (var index in obj.data.talents) {
    var tData = obj.data.talents[index];
    if (tData && sync.modifier(tData, "filter")) {
      filterList[sync.modifier(tData, "filter")] = true;
    }
  }
  if (Object.keys(filterList).length && !scope.minimized) {
    var talentTabs = genNavBar();
    talentTabs.css("margin", "1em");
    talentTabs.css("background-color", "white");
    talentTabs.appendTo(div);

    talentTabs.generateTab("All Talents", "list", function(parent) {
      parent.append(sync.render("ui_characterTalentList")(obj, app, {viewOnly: scope.viewOnly, minimized : true}));
    });
    function tabWrap(level) {
      talentTabs.generateTab(level, "", function(parent) {
        var columns = $("<div>").appendTo(parent);
        columns.addClass("flexcolumn");
        columns.append(sync.render("ui_characterTalentList")(obj, app, {viewOnly: scope.viewOnly, filter : level}));

        if (app) {
          app.attr("talent_tab", level);
        }
      });
    }

    for (var key in filterList) {
      tabWrap(key);
    }

    if (app) {
      if (!app.attr("talent_tab")) {
        app.attr("talent_tab", "All Talents");
      }
      talentTabs.selectTab(app.attr("talent_tab"));
    }
    else {
      talentTabs.selectTab("All Talents");
    }
  }
  else {
    div.addClass("spadding");
    sync.render("ui_characterTalentList")(obj, app, {viewOnly: scope.viewOnly, minimized : true}).appendTo(div);
  }
  return div;
});

sync.render("ui_combat", function(obj, app, scope) {
  var div = $("<div>");
  div.addClass("flex flexcolumn");
  div.css("overflow-y", "auto");
  div.css("position", "relative");
  div.attr("_lastScrollTop", app.attr("_lastScrollTop_combat"));
  div.attr("_lastScrollLeft", app.attr("_lastScrollLeft_combat"));
  div.scroll(function(){
    app.attr("_lastScrollTop_combat", $(this).scrollTop());
    app.attr("_lastScrollLeft_combat", $(this).scrollLeft());
  });

  scope = scope || {viewOnly : app.attr("viewOnly") == "true", local : (app.attr("local") == "true"), minimized : app.attr("minimized") == "true"};
  if (game.config.data.offline) {
    scope.local = true;
  }
  if (scope.local) {
    var optionsBar = $("<div>").appendTo(div);
    optionsBar.addClass("middle");
  }
  var data = obj.data || {combat : {engaged : {}, current : {}}};
  if (!data.combat) {
    if (obj == game.state) {
      return $("<div>");
    }
    else {
      data.combat = {engaged : {}, current : {}};
    }
  }
  var compare = function (obj1, obj2) {
    return sync.eval(game.templates.initiative.compare, {i1 : obj1, i2 : obj2});
  }

  var inits = [];
  for (var i in data.combat.engaged) {
    if (getEnt(i) && getEnt(i).data) { // only live characters matter
      var ref = Math.max(inits.length-1, 0);
      while (ref != null && ref >= 0) {
        if (ref == inits.length && inits.length == 0) {
          var added;
          if (game.templates.initiative.data) {
            added = duplicate(game.templates.initiative.data);
            for (var key in added) {
              added[key] = data.combat.engaged[i][key];
            }
          }
          else {
            added = duplicate(data.combat.engaged[i]);
          }
          added.e = [i];
          inits.push(added);
          ref = null;
        }
        else {
          if (compare(data.combat.engaged[i], inits[ref]) > 0) {
            var added;
            if (game.templates.initiative.data) {
              added = duplicate(game.templates.initiative.data);
              for (var key in added) {
                added[key] = data.combat.engaged[i][key];
              }
            }
            else {
              added = duplicate(data.combat.engaged[i]);
            }
            added.e = [i];
            if (ref == inits.length-1) {
              inits.push(added);
            }
            else {
              util.insert(inits, ref+1, added);
            }
            ref = null;
          }
          else if (compare(data.combat.engaged[i], inits[ref]) == 0) {
            inits[ref].e = inits[ref].e || [];
            if (!util.contains(inits[ref].e, i)) {
              inits[ref].e.push(i);
            }
            ref = null;
          }
        }
        if (ref != null) {
          ref--;
        }
      }
      if (ref != null && ref == -1) {
        var added;
        if (game.templates.initiative.data) {
          added = duplicate(game.templates.initiative.data);
          for (var key in added) {
            added[key] = data.combat.engaged[i][key];
          }
        }
        else {
          added = duplicate(data.combat.engaged[i]);
        }
        added.e = [i];
        var newInit = [added];
        for (var j=0; j<inits.length; j++) {
          newInit.push(inits[j]);
        }
        inits = newInit;
      }
    }
  }

  var applied = false;
  var boardEnt;
  $(".application[ui-name='ui_board']").each(function(){
    if ($(this).is(":visible") && !boardEnt) {
      boardEnt = getEnt($(this).attr("index"));
    }
  });

  if (scope.local) {
    // always assign current to the random inits
    data.combat.current = duplicate(inits[0]);
  }
  var turnDiv = $("<div>").appendTo(div);
  turnDiv.addClass("fit-x dropContent");
  if (!scope.minimized) {
    turnDiv.css("min-height", "100%");
    turnDiv.css("position", "absolute");
  }
  if (hasSecurity(getCookie("UserID"), "Assistant Master") && !scope.viewOnly) {
    turnDiv.css("cursor", "pointer");
    turnDiv.click(function(ev){
      ev.stopPropagation();
      ev.preventDefault();

      var ignore = duplicate(obj.data.combat.engaged);
      var content = sync.render("ui_assetPicker")(obj, app, {
        filter : "c",
        category : "c",
        rights : "Rights",
        ignore : ignore,
        sessionOnly : true,
        select : function(ev, ui, ent, options, entities){
          var sp;
          var ok;
          var id = ent.id();
          if (obj.data.combat.engaged[id]) {
            if (obj.data.combat.engaged[id].sp) {
              sp = obj.data.combat.engaged[id].sp;
            }
            if (obj.data.combat.engaged[id].ok) {
              ok = obj.data.combat.engaged[id].ok;
            }
          }
          var context = sync.defaultContext();
          context[ent.data._t] = duplicate(ent.data);
          obj.data.combat.engaged[id] = sync.executeQuery(game.templates.initiative.query, context).pool;
          obj.data.combat.engaged[id].sp = sp;
          obj.data.combat.engaged[id].ok = ok;
          if (!scope.local) {
            obj.sync("updateCombatState");
          }
          else {
            obj.update();
          }
          options.data.ignore = options.data.ignore || {};
          options.data.ignore[id] = true;
          return true;
        }
      });
      var pop = ui_popOut({
        target : $("body"),
        prompt : true,
        id : "add-asset",
        title : "Add Combatant",
        style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
      }, content);
      pop.resizable();
    });
  }

  for (var j=inits.length-1; j>=0; j--) {
    var initWrap = $("<div>").appendTo(turnDiv);
    initWrap.addClass("flexrow flexbetween");
    if (!scope.minimized) {
      initWrap.css("padding-bottom", "0.5em");
    }

    var header = $("<div>").appendTo(initWrap);
    header.addClass("flexaround");
    header.attr("turn", j);
    if (!scope.local && (compare(data.combat.current, inits[j]) != 0 || data.combat.round == null)) {
      header.click(function(ev){
        data.combat.current = inits[$(this).attr("turn")];
        obj.sync("updateCombatState");
        ev.stopPropagation();
        ev.preventDefault();
      });
    }
    else {
      header.click(function(ev){
        ev.stopPropagation();
        ev.preventDefault();
      });
    }

    if (game.templates.initiative.display) {
      if (compare(data.combat.current, inits[j]) == 0 && data.combat.round != null) { // not prepraings
        header.addClass("highlight alttext");
        initWrap.css("font-size", "1.4em");
      }
      else if (data.combat.round != null) {
        initWrap.addClass("subtitle");
      }
      var label = sync.render("ui_processUI")(obj, app, {display : game.templates.initiative.display, context : duplicate(inits[j])}).appendTo(header);
    }
    else {
      var label = $("<b>").appendTo(header);

      if (compare(data.combat.current, inits[j]) == 0 && data.combat.round != null) { // not prepraings
        initWrap.addClass("highlight");
        initWrap.css("font-size", "1.4em");
      }
      else if (data.combat.round != null) {
        initWrap.addClass("subtitle");
        label.addClass("background");
        if (obj == game.state && hasSecurity(getCookie("UserID"), "Assistant Master")) {
          label.addClass("hover2");
        }
      }
      else {
        label.addClass("background");
        if (obj == game.state && hasSecurity(getCookie("UserID"), "Assistant Master")) {
          label.addClass("hover2");
        }
      }
      if (compare(inits[j], {}) == 0) {
        label.addClass("padding flexmiddle alttext");
        label.css("font-size", "0.8em");
        label.css("padding-top", "0.05em");
        label.css("padding-bottom", "0.05em");
        label.css("max-width", "70px");
        label.append("<text>Rolling Initiative</text>");
      }
      else {
        label.addClass("padding alttext");
        label.css("font-size", "1.6em");
        label.css("padding-top", "0.05em");
        label.css("padding-bottom", "0.05em");
        label.text((inits[j].total || 0));
      }
      label.attr("turn", j);
    }

    var turnPlate = $("<div>").appendTo(initWrap);
    turnPlate.addClass("flex flexcolumn");
    turnPlate.css("border-top", "1px solid rgba(0,0,0,0.4)");

    var charPlate = $("<div>").appendTo(turnPlate);
    charPlate.addClass("fit-x flex dropContent");
    charPlate.attr("turn", j);
    charPlate.css("min-height", "20px");
    charPlate.css("min-width", "10vw");
    function sortWrap(refPlate) {
      refPlate.sortable({
        connectWith : ".dropContent",
        out : function(ev, ui){
          refPlate.removeClass("boxinshadow");
        },
        over : function(ev, ui){
          refPlate.addClass("boxinshadow");
        },
        update : function(ev, ui) {
          ev.stopPropagation();
          var newDat = duplicate(inits[refPlate.attr("turn")]);
          delete newDat.e;
          if (newDat) {
            if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
              if (obj.data.combat.engaged[$(ui.item).attr("index")]) {
                if (obj.data.combat.engaged[$(ui.item).attr("index")].sp) {
                  newDat.sp = obj.data.combat.engaged[$(ui.item).attr("index")].sp;
                }
                if (obj.data.combat.engaged[$(ui.item).attr("index")].ok) {
                  newDat.ok = obj.data.combat.engaged[$(ui.item).attr("index")].ok;
                }
              }
              obj.data.combat.engaged[$(ui.item).attr("index")] = newDat;
              $(ui.item).remove();
              ev.stopPropagation();
              if (!scope.local) {
                obj.sync("updateCombatState");
              }
              else {
                obj.update();
              }
            }
            else {
              obj.update();
            }
          }
          return false;
        }
      });
    }
    if (!scope.viewOnly) {
      sortWrap(charPlate);
    }
    if (inits[j].e && inits[j].e.length > 5) {
      charPlate.addClass("subtitle");
    }
    for (var idx in inits[j].e) {
      var index = inits[j].e[idx];
      if (game.entities.data[index]) {
        var charObj = game.entities.data[index];
        var hidden = charObj.data._flags && charObj.data._flags.hidden;
        if (!hidden || (hidden && hasSecurity(getCookie("UserID"), "Visible", charObj.data))) {
          var charDivWrap = $("<div>").appendTo(charPlate);
          charDivWrap.addClass("flexrow flex smooth white outlinebottom");
          charDivWrap.attr("src", "state");
          charDivWrap.attr("index", index);
          charDivWrap.attr("turn", j);
          charDivWrap.css("border-right-width", "1px");

          var color = null;

          if (boardEnt && boardEnt.data) {
            for (var lid in boardEnt.data.layers) {
              var layerData = boardEnt.data.layers[lid];
              var pieces = layerData.p;
              for (var pid in pieces) {
                var pieceData = pieces[pid];
                if (pieceData.eID == index && pieceData.c != "transparent") {
                  color = pieceData.c;
                  break;
                }
              }
              if (color) {
                break;
              }
            }
          }
          if (color && (color.match("rgb\\(255,255,255") || color.match("rgb\\(255, 255, 255") || color == "white")) {
            charDivWrap.css("color", "rgb(190,190,170)");
          }
          else {
            charDivWrap.css("color", color || "#333");
          }

          var charDiv = sync.newApp("ui_characterSummary").appendTo(charDivWrap);
          charDiv.attr("viewOnly", scope.viewOnly);
          charDiv.attr("noOutline", true);
          charDiv.attr("minimized", "true");
          charDiv.attr("hide", charObj.data.tags && charObj.data.tags.unidentified);
          charDiv.addClass("subtitle flex");
          charDiv.removeClass("application");

          if (game.templates.initiative.charMarker) {
            var context = sync.defaultContext();
            context[charObj.data._t] = duplicate(charObj.data._t);
            context["pool"] = duplicate(data.combat.engaged[index]);
            if (game.templates.initiative.charMarker.cond == null || sync.eval(game.templates.initiative.charMarker.cond, context)) {
              var label = sync.render("ui_processUI")(obj, app, {display : game.templates.initiative.charMarker, context : context}).appendTo(charDivWrap);
            }
          }

          if (data.combat.engaged[index].ok) {
            charDivWrap.css("background-color", "rgb(235,235,228)");
            if (compare(data.combat.current, inits[j]) == 0) {
              charDivWrap.css("font-size", "0.8em");
            }
          }
          if (data.combat.engaged[index].sp) {
            charDivWrap.addClass("boxinshadow");
          }
          charDiv.click(function(ev) {
          ev.stopPropagation();
          });
          charObj.addApp(charDiv);
          
          function visionWrap(target, cObj, charDiv, turn) {
            if (hasSecurity(getCookie("UserID"), "Rights", cObj.data)) {
              var optionsBar = $("<div>").appendTo(target);
              optionsBar.addClass("flexrow");
              optionsBar.css("font-size", "1.4em");

              if (scope.local) {
                optionsBar.addClass("subtitle");

                var surprised = genIcon("warning-sign");
                surprised.addClass("flexmiddle spadding");
                surprised.appendTo(optionsBar);
                surprised.attr("title", "Surprised (only lasts for the first turn)");
                surprised.click(function(){
                  data.combat.engaged[cObj.id()].sp = !data.combat.engaged[cObj.id()].sp;
                  data.combat.engaged[cObj.id()].ok = data.combat.engaged[cObj.id()].sp;
                  if (!scope.local) {
                    obj.sync("updateCombatState");
                  }
                  else {
                    obj.update();
                  }
                });
              }

              if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
                var optionsBarWrap = $("<div>").appendTo(optionsBar);
                optionsBarWrap.addClass("flexcolumn flexmiddle lrmargin subtitle");

                var changeInit = genIcon("retweet").appendTo(optionsBarWrap);
                changeInit.attr("Title", "Reroll Initiative");
                changeInit.attr("index", index);
                changeInit.click(function(ev){
                  var ent = getEnt($(this).attr("index"));
                  if (ent && ent.data) {
                    if (ent.data.tags && ent.data._flags.hidden) {
                      _actions["Set/Roll Initiative"].click(null, $(this), ent, $(this), {});
                    }
                    else {
                      _actions["Set/Roll Initiative (Hidden)"].click(null, $(this), ent, $(this), {});
                    }
                  }

                  ev.stopPropagation();
                });


                var eye = genIcon("eye-open");
                eye.appendTo(optionsBarWrap);
                eye.addClass("flexmiddle spadding");
                eye.attr("title", "Hide Actor");
                if (cObj.data.tags && cObj.data._flags.hidden) {
                  eye.changeIcon("eye-close");
                  eye.attr("title", "Show Actor");
                }
                eye.click(function(ev){
                  if (hasSecurity(getCookie("UserID"), "Rights", cObj.data)) {
                    cObj.data._flags = cObj.data._flags || duplicate(cObj.data.tags) || {};
                    cObj.data._flags.hidden = !cObj.data._flags.hidden;
                    if (cObj.data.tags && cObj.data._flags.hidden) {
                      charDiv.attr("hide", cObj.data.tags.unidentified);
                      eye.changeIcon("eye-close");
                      eye.attr("title", "Show Actor");
                    }
                    else {
                      charDiv.attr("hide", cObj.data.tags.unidentified);
                      eye.changeIcon("eye-open");
                      eye.attr("title", "Hide Actor");
                    }
                    cObj.sync("updateAsset");
                    $(".application[ui-name='ui_board']").each(function(){
                      var app = $(this);
                      var board = getEnt(app.attr("index"));
                      for (var lid in board.data.layers) {
                        var layerData = board.data.layers[lid];
                        for (var pInd in layerData.p) {
                          var pieceData = layerData.p[pInd];
                          if (pieceData.eID == cObj.id()) {
                            board.data.layers[lid].p[pInd].v = cObj.data._flags.hidden;
                            runCommand("boardMove", {id : board.id(), layer : lid, type : "p", index : pInd, data : board.data.layers[lid].p[pInd]});
                            boardApi.updateObject(lid, "p", pInd, board);
                          }
                        }
                      }
                    });
                  }
                  else {
                    eye.remove();
                  }
                  ev.stopPropagation();
                });
              }


              var ok = $("<div>");
              ok.addClass("smooth background flexmiddle spadding");
              ok.css("cursor", "pointer");
              ok.append(genIcon("ok"));
              ok.attr("title", "Complete Turn");
              if (data.combat.engaged[cObj.id()].ok) {
                ok.addClass("create");
              }
              else {
                ok.addClass("alttext");
              }
              ok.appendTo(optionsBar);
              ok.click(function(ev){
                ev.stopPropagation();
                ev.preventDefault();
                data.combat.engaged[cObj.id()].ok = !data.combat.engaged[cObj.id()].ok;
                if (!scope.local) {
                  if (data.combat.engaged[cObj.id()].ok && compare(data.combat.current, inits[turn]) == 0 && data.combat.round != null) {
                    var change = true;
                    for (var eIDs in inits[turn].e) {
                      if (!data.combat.engaged[inits[turn].e[eIDs]].ok) {
                        change = false;
                        break;
                      }
                    }
                    if (change) {
                      var newTurn = turn-1;
                      function changeTurn() {
                        if (turn == 0) {
                          newTurn = inits.length-1;
                          sync.val(data.combat.round, sync.val(data.combat.round) + 1);
                          for (var key in data.combat.engaged) {
                            delete data.combat.engaged[key].ok;
                            delete data.combat.engaged[key].sp;
                          }
                        }
                        else {
                          for (var key in data.combat.engaged) {
                            if (compare(inits[turn], data.combat.engaged[key]) == 0) {
                              obj.data.combat.engaged[key].ok = true;
                            }
                          }
                        }
                        for (var key in data.combat.engaged) {
                          if (compare(inits[newTurn], data.combat.engaged[key]) == 0) {
                            if (game.templates.initiative.skip && sync.eval(game.templates.initiative.skip, {c : duplicate(getEnt(key))})) {
                              obj.data.combat.engaged[key].ok = true;
                            }
                          }
                        }
                        obj.data.combat.current = inits[newTurn];
                        obj.sync("updateCombatState");
                      }
                      changeTurn();
                    }
                    else {
                      obj.sync("updateCombatState");
                    }
                  }
                  else {
                    obj.sync("updateCombatState");
                  }
                }
                else {
                  obj.update();
                }
              });
              if (scope.local) {
                var remove = genIcon("remove");
                remove.addClass("flexmiddle spadding");
                remove.appendTo(optionsBar);
                remove.attr("title", "Remove From Combat");
                remove.click(function(){
                  delete data.combat.engaged[cObj.id()];
                  if (!scope.local) {
                    obj.sync("updateCombatState");
                  }
                  else {
                    obj.update();
                  }
                });
              }
            }
          }
          if (!scope.viewOnly) {
            visionWrap(charDivWrap, charObj, charDiv, j);
          }
        }
      }
    }
    if (!charPlate.children().length) {
      initWrap.remove();
    }
  }
  if (!scope.viewOnly) {
    //var randomPadding = $("<div>").appendTo(turnDiv);
    //randomPadding.addClass("flex dropContent");
    turnDiv.sortable({
      handle : ".nothing",
      connectWith : ".dropContent",
      over : function(ev, ui){
        if ($(ui.item).attr("index")) {
          if (!$("#"+app.attr("id")+"-drag-overlay").length) {
            var olay = layout.overlay({
              target : turnDiv,
              id : app.attr("id")+"-drag-overlay",
              style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
            });
            var maxZ = util.getMaxZ(".ui-popout");
            olay.addClass("flexcolumn flexmiddle alttext");
            olay.css("z-index", maxZ + 1);
            olay.css("font-size", "2em");
            olay.css("pointer-events", "none");
            olay.append("<b>Drop to Add Combattant</b>");
          }
        }
      },
      out : function(ev, ui) {
        layout.coverlay(app.attr("id")+"-drag-overlay");
      },
      update : function(ev, ui) {
        if ($(ui.item).attr("index")) {
          var ent = game.entities.data[$(ui.item).attr("index")];
          var sp;
          var ok;
          if (obj.data.combat.engaged[$(ui.item).attr("index")]) {
            if (obj.data.combat.engaged[$(ui.item).attr("index")].sp) {
              sp = obj.data.combat.engaged[$(ui.item).attr("index")].sp;
            }
            if (obj.data.combat.engaged[$(ui.item).attr("index")].ok) {
              ok = obj.data.combat.engaged[$(ui.item).attr("index")].ok;
            }
          }
          var context = sync.defaultContext();
          context[ent.data._t] = duplicate(ent.data);
          obj.data.combat.engaged[$(ui.item).attr("index")] = sync.executeQuery(game.templates.initiative.query, context).pool;
          obj.data.combat.engaged[$(ui.item).attr("index")].sp = sp;
          obj.data.combat.engaged[$(ui.item).attr("index")].ok = ok;
          if (!scope.local) {
            obj.sync("updateCombatState");
          }
          else {
            obj.update();
          }
        }
        ev.stopPropagation();
        layout.coverlay(app.attr("id")+"-drag-overlay");
      }
    });
    if (!turnDiv.children().length) {
      $("<i class='subtitle fit-xy flexmiddle'>Click here or Drop an asset to begin</i>").appendTo(div);
    }
  }
  return div;
});


sync.render("ui_turnOrder", function(obj, app, scope) {
  scope = scope || {viewOnly : app.attr("viewOnly") == "true", minimized : app.attr("minimized") == "true"};

  var div = $("<div>");
  div.addClass("flexcolumn flex");
  if (!obj) {
    game.locals["turnOrder"] = game.locals["turnOrder"] || sync.obj();
    game.locals["turnOrder"].data = game.locals["turnOrder"].data || {combat : {engaged : {}, current : {}}};
    game.locals["turnOrder"].addApp(app);
    return $("<div>");
  }

  if (obj != game.state) {
    scope.local = true;
  }

  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("flexwrap flexaround foreground alttext subtitle");

  var trash = genIcon("trash", "Clear Combat").appendTo(optionsBar);
  trash.click(function(){
    obj.data = {combat : {engaged : {}, current : {}}};
    obj.update();
  });


  var addCombatant = genIcon("plus", "Add Combatant").appendTo(optionsBar);
  addCombatant.click(function(){
    var ignore = duplicate(obj.data.combat.engaged);
    var content = sync.render("ui_assetPicker")(obj, app, {
      filter : "c",
      category : "c",
      rights : "Rights",
      ignore : ignore,
      sessionOnly : true,
      select : function(ev, ui, ent, options, entities){
        var sp;
        var ok;
        var id = ent.id();
        if (obj.data.combat.engaged[id]) {
          if (obj.data.combat.engaged[id].sp) {
            sp = obj.data.combat.engaged[id].sp;
          }
          if (obj.data.combat.engaged[id].ok) {
            ok = obj.data.combat.engaged[id].ok;
          }
        }
        var context = sync.defaultContext();
        context[ent.data._t] = duplicate(ent.data);
        obj.data.combat.engaged[id] = sync.executeQuery(game.templates.initiative.query, context).pool;
        obj.data.combat.engaged[id].sp = sp;
        obj.data.combat.engaged[id].ok = ok;
        if (!scope.local) {
          obj.sync("updateCombatState");
        }
        else {
          obj.update();
        }
        options.data.ignore = options.data.ignore || {};
        options.data.ignore[id] = true;
        return true;
      }
    });
    var pop = ui_popOut({
      target : $("body"),
      prompt : true,
      id : "add-asset",
      title : "Add Combatant",
      style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
    }, content);
    pop.resizable();
  });

  var combatList = sync.render("ui_combat")(obj || game.locals["turnOrder"], app, scope).appendTo(div);
  combatList.addClass("flex flexcolumn");

  return div;
});


var altInitiative = {
  initPrompt : function(ev, ui, ent, obj, app, scope){
    var frame = $("<div>");

    var dice = $("<div>").appendTo(frame);
    dice.addClass("flexbetween");

    var successes = $("<div>").appendTo(dice);
    successes.addClass("flexmiddle");
    successes.css("display", "inline-block");
    successes.css("width", "auto");

    var die = $("<img>").appendTo(successes);
    die.attr("src", "/content/dice/success.png");
    die.css("width", "20px");
    die.css("height", "20px");

    var sInput = genInput({
      parent : successes,
      type : "number",
      value : 0,
      style : {"width" : "50px", "display": "inline-block"},
      min : 0,
    });

    var advantages = $("<div>").appendTo(dice);
    advantages.addClass("flexmiddle");
    advantages.css("display", "inline-block");
    advantages.css("width", "auto");

    var die = $("<img>").appendTo(advantages);
    die.attr("src", "/content/dice/advantage.png");
    die.css("width", "20px");
    die.css("height", "20px");

    var input = genInput({
      parent : advantages,
      type : "number",
      value : 0,
      style : {"width" : "50px", "display": "inline-block"},
      min : 0,
    });

    var triumphs = $("<div>").appendTo(dice);
    triumphs.addClass("flexmiddle");
    triumphs.css("display", "inline-block");
    triumphs.css("width", "auto");

    var die = $("<img>").appendTo(triumphs);
    die.attr("src", "/content/dice/triumph.png");
    die.css("width", "20px");
    die.css("height", "20px");

    var tInput = genInput({
      parent : triumphs,
      type : "number",
      value : 0,
      style : {"width" : "50px", "display": "inline-block"},
      min : 0,
    });

    if ($("#turnorder-skill-list").length) {
      $("#turnorder-skill-list").remove();
    }
    var dataList = $("<datalist>").appendTo(frame);
    dataList.attr("id", "turnorder-skill-list");

    var skillRegex = /\(([^(]+[^)]+)\)/;

    for (var index in ent.data.skills) {
      var skill = ent.data.skills[index];
      if (skillRegex.exec(skill.name)) {
        var option = $("<option>").appendTo(dataList);
        option.attr("value", skill.name);
      }
    }
    var skillVal = sync.newValue("Skill", "Cool (Pr)");
    var skill = genInput({
      parent : frame,
      type : "list",
      list : "turnorder-skill-list",
      placeholder : "Select Skill to Roll Random",
      style : {"width" : "100%"},
    });

    var skillPlate = $("<div>").appendTo(frame);

    skill.change(function(){
      sync.val(skillVal, $(this).val());
      if (sync.val(skillVal)) {
        for (var idx in ent.data.skills) {
          if (ent.data.skills[idx] && ent.data.skills[idx].name.toLowerCase() == sync.val(skillVal).toLowerCase()) {
            skillPlate.empty();
            var equations = [];

            var stat;
            var skill = ent.data.skills[idx];
            var statRes = skillRegex.exec(ent.data.skills[idx].name);
            if (statRes) {
              var statName = (statRes[1].charAt(0).toUpperCase() + statRes[1].substring(1, statRes[1].length).toLowerCase());
              stat = ent.data.stats[statName];
            }

            var originalDice = sync.val(stat);
            var ranksCount = sync.modifier(skill, "rank") || 0;

            var yellowCount = 0;
            var greenCount = originalDice;

            if (ranksCount >= greenCount) {
              greenCount = (ranksCount - greenCount);
              yellowCount = originalDice;
            }
            else {
              greenCount = (greenCount - ranksCount);
              yellowCount = ranksCount;
            }
            for (var i=0; i<yellowCount; i++) {
              var val = sync.newValue("proficiency", "1d12", null , null, {"result" : sync.result("1d12")});
              equations.push(val);
            }
            for (var i=0; i<greenCount; i++) {
              var val = sync.newValue("ability", "1d8", null ,null, {"result" : sync.result("1d8")});
              equations.push(val);
            }
            var resultTable = {};
            for (var index in equations) {
              var eq = equations[index];
              var res = sync.eval(sync.modifier(eq, "result"));
              if (res) {
                for (var key in game.templates.dice.pool[eq.name].translations[res]) {
                  if (key != "imgs") {
                    resultTable[key] = (resultTable[key] || 0) + game.templates.dice.pool[eq.name].translations[res][key];
                  }
                }
              }
            }
            sInput.val(resultTable.s);
            input.val(resultTable.a);
            tInput.val(resultTable.tri);
            //sync.render("ui_diceResults")({data : {data : {equations : equations}}}, app, {viewOnly : true}).appendTo(skillPlate);
            break;
          }
        }
      }
    });

    var button = $("<button>").appendTo(frame);
    button.css("width", "100%");
    button.append("Confirm");
    button.click(function() {
      obj.data.combat.engaged[ent.id()] = {s : parseInt(sInput.val() || 0) + parseInt(tInput.val() || 0) * 1, a : parseInt(input.val() || 0) + parseInt(tInput.val() || 0) * 1, tri : parseInt(tInput.val() || 0)};
      obj.update();
      layout.coverlay("init-popout");
    });
    ui_popOut({
      target : ui,
      id : "init-popout",
    }, frame);
  },
  initLabel : function(data, ent) {
    var header = $("<div>");
    header.addClass("flexrow flexaround flexwrap");
    if (!ent) {
      header.addClass("outline smooth");
      if (data.s) {
        var success = $("<div>").appendTo(header);
        success.addClass("smargin flexmiddle");
        var die = $("<img>").appendTo(success);
        die.attr("src", "/content/dice/success.png");
        die.css("width", "20px");
        die.css("height", "20px");

        if (data.s > 1) {
          success.append("<b style='font-size:0.8em'>x"+data.s+"</b>");
        }
      }

      if (data.a) {
        var advantage = $("<div>").appendTo(header);
        advantage.addClass("smargin flexmiddle");
        var die = $("<img>").appendTo(advantage);
        die.attr("src", "/content/dice/advantage.png");
        die.css("width", "20px");
        die.css("height", "20px");

        if (data.a > 1) {
          advantage.append("<b style='font-size:0.8em'>x"+data.a+"</b>");
        }
      }
      if (header.children().length == 0) {
        header.addClass("flexmiddle lrpadding");
        header.append("<b>No Initiative</b>");
      }
    }
    else {
      if (data.tri) {
        var advantage = $("<div>").appendTo(header);
        var die = $("<img>").appendTo(advantage);
        die.attr("src", "/content/dice/triumph.png");
        die.css("width", "20px");
        die.css("height", "20px");

        if (data.tri > 1) {
          advantage.append("<b style='font-size:0.8em'>x"+data.tri+"</b>");
        }
      }
    }
    return header;
  },
}

sync.render("ui_upgrade", function(obj, app, scope){
  scope = scope || {viewOnly : app.attr("viewOnly") == "true", mode : app.attr("mode")}

  var div = $("<div>");
  div.addClass("flexcolumn flex inactive");

  /*

  {
    info : {
      name : {},
      img : {},
      notes : {},
    },
    cond : "",
    bonus : [
      {
        cond : "",
        target : "",
        eq : "",
      }
    ],
    cost : [
      {
        cond : "",
        target : "",
        value : ""
      }
    ],
    reset : []
  }

  */


  var titlePlate = $("<div>").appendTo(div);
  titlePlate.addClass("flexrow");

  var image = $("<div>").appendTo(titlePlate);
  image.addClass("outline smooth hover2 margin white");
  image.css("width", "150px");
  image.css("height", "150px");

  var namePlate = $("<div>").appendTo(titlePlate);
  namePlate.addClass("flexcolumn flex");

  var title = genInput({
    parent : namePlate,
    classes : "margin",
    placeholder : "Package Title",
  });

  var packageDesc = genInput({
    parent : namePlate,
    type : "textarea",
    classes : "flex margin",
    placeholder : "Package Summary",
  });

  var buttonPlate = $("<div>").appendTo(div);
  buttonPlate.addClass("flexrow");

  var addButton = $("<div>").appendTo(buttonPlate);
  addButton.addClass("flexmiddle alttext padding subtitle hover2 smooth");
  addButton.text("Bonus Effects");
  addButton.click(function(){
    app.removeAttr("mode");
    obj.update();
  });

  var costButton = $("<div>").appendTo(buttonPlate);
  costButton.addClass("flexmiddle alttext padding subtitle hover2 smooth");
  costButton.text("Cost Effects");
  costButton.click(function(){
    app.attr("mode", "cost");
    obj.update();
  });

  var removeButton = $("<div>").appendTo(buttonPlate);
  removeButton.addClass("flexmiddle padding subtitle hover2 smooth");
  removeButton.text("Reset Effects");
  removeButton.click(function(){
    app.attr("mode", "reset");
    obj.update();
  });

  var effectsPlate = $("<div>").appendTo(div);
  effectsPlate.addClass("flex flexcolumn outline smooth white");

  if (!scope.mode) {
    addButton.addClass("highlight");
    costButton.addClass("background");
    removeButton.addClass("button").css("color", "#333");

    var boonPlate = $("<div>").appendTo(effectsPlate);
    boonPlate.addClass("flex scroll-y lrpadding");

    sync.render("ui_math")(getPlayerCharacter(getCookie("UserID")) || obj, app, {calc : []}).appendTo(boonPlate);

    var newBoonWrap = $("<div>").appendTo(effectsPlate);
    newBoonWrap.addClass("fit-x flexrow flexaround bold lrpadding subtitle create");

    var addTalent = genIcon("plus", "Add Talent").appendTo(newBoonWrap);
    addTalent.click(function(){
      ui_prompt({
        target : $(this),
        inputs : {
          "Name" : "",
        },
        click : function(ev, inputs) {
          if (inputs["Name"].val()) {
            var lookupData = {};
            lookupData[inputs["Name"].val().toLowerCase().replace(/ /g,"_")] = sync.newValue(inputs["Name"].val());
          }
        }
      });
    });
    var addSpecial = genIcon("plus", "Add Special Rule").appendTo(newBoonWrap);
    addSpecial.click(function(){
      ui_prompt({
        target : $(this),
        inputs : {
          "Name" : "",
        },
        click : function(ev, inputs) {
          if (inputs["Name"].val()) {
            var lookupData = {};
            lookupData[inputs["Name"].val().toLowerCase().replace(/ /g,"_")] = sync.newValue(inputs["Name"].val());
          }
        }
      });
    });
  }
  if (scope.mode == "cost") {
    costButton.addClass("highlight");
    addButton.addClass("background");
    removeButton.addClass("button").css("color", "#333");

    var banePlate = $("<div>").appendTo(effectsPlate);
    banePlate.addClass("flex scroll-y lrpadding");

    sync.render("ui_math")(getPlayerCharacter(getCookie("UserID")) || obj, app, {calc : []}).appendTo(banePlate);

    var newBaneWrap = $("<div>").appendTo(effectsPlate);
    newBaneWrap.addClass("fit-x flexrow flexaround bold lrpadding subtitle destroy");

    var removeTalent = genIcon("minus", "Remove Talent").appendTo(newBaneWrap);

    var removeSpecial = genIcon("minus", "Remove Special Rule").appendTo(newBaneWrap);
  }
  else if (scope.mode == "reset") {
    removeButton.addClass("alttext highlight");
    costButton.addClass("background");
    addButton.addClass("background");

    var banePlate = $("<div>").appendTo(effectsPlate);
    banePlate.addClass("flexcolumn flex scroll-y");

    var newBaneWrap = $("<div>").appendTo(banePlate);
    newBaneWrap.addClass("flexmiddle fit-x destroy");

    var newBane = genIcon("minus", "Remove Effect").appendTo(newBaneWrap);
    newBane.click(function(){
      sync.render("ui_math")(obj, app, {calc : []}).appendTo(banePlate);
    });
  }


  return div;
});

sync.render("ui_vehicle", function(obj, app, scope) {
  scope = scope || {
    viewOnly: (app.attr("viewOnly") == "true"),
    displayMode : parseInt(app.attr("displayMode") || 0),
    editable: (app.attr("editable") == "true"),
    markup : app.attr("markup") == "true"
  };

  var data = obj.data;

  var div = $("<div>");
  div.addClass("flexcolumn outline");

  var sheet = scope.sheet || game.templates.display.vehicle;
  for (var i in sheet.style) {
    div.css(i, sheet.style[i]);
  }

  if (!obj.local) {
    for (var i in sheet.calc) {
      if (!sheet.calc[i].cond || sync.eval(sheet.calc[i].cond, [obj.data])) {
        var val = sheet.calc[i].eq;
        if (val && val.length) {
          val = sync.result(val, [obj.data]);
          val = sync.eval(val);
        }
        var target = sync.traverse(obj.data, sheet.calc[i].target, val);
      }
    }
  }

  if (!scope.viewOnly) {
    div.on("dragover", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      if (!$("#"+app.attr("id")+"-drag-overlay").length) {
    		var olay = layout.overlay({
          target : app,
          id : app.attr("id")+"-drag-overlay",
          style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
        });
        olay.addClass("flexcolumn flexmiddle alttext");
        olay.css("font-size", "2em");
        olay.append("<b>Drop to Create</b>");
      }
  	});
    div.on('drop', function(ev){
      ev.preventDefault();
      ev.stopPropagation();
      var dt = ev.originalEvent.dataTransfer;
      if (dt.getData("Text").match("{")) {
        var ent = JSON.parse(dt.getData("Text"));
        if (ent._t == "i") {
          if (!dt.getData("spell")) {
            obj.data.inventory.push(ent);
            obj.sync("updateAsset");
          }
        }
      }

      layout.coverlay(app.attr("id")+"-drag-overlay");
    });

  	div.on("dragleave", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      layout.coverlay(app.attr("id")+"-drag-overlay");
  	});
  }

  if (!scope.viewOnly) {
    var optionsBack = $("<div>").appendTo(div);
    optionsBack.addClass("alttext background outline");

    var optionsBar = $("<div>").appendTo(optionsBack);
    optionsBar.addClass("flexwrap");

    var security = genIcon("lock");
    security.attr("title", "Edit who has access to this character");
    security.appendTo(optionsBar);
    security.click(function(){
      var content = sync.newApp("ui_rights");
      obj.addApp(content);

      var frame = ui_popOut({
        target : $(this),
        prompt : true,
        align : "top",
        id : "ui-rights-dialog",
      }, content);
    });

    if (hasSecurity(getCookie("UserID"), "Rights", data)) {
      var icon = genIcon("heart");
      icon.css("margin-left", "8px");
      icon.attr("title", "Change wounds");
      if (sheet.altStat) {
        icon.attr("title", "Change wounds, ctrl for "+sync.traverse(obj.data, sheet.altStat).name);
      }
      icon.appendTo(optionsBar);
      icon.click(function(e) {
        var target = sync.traverse(obj.data, sheet.health || "counters.wounds");

        if (e.ctrlKey && sheet.altStat) {
         target = sync.traverse(obj.data, sheet.altStat);
        }
        var text = {};
        text[(target.name + " Amount")] = {type : "number", value : 1};
        ui_prompt({
          target : $(this),
          inputs : text,
          click : function(ev, inputs) {
            sync.val(target, sync.rawVal(target)+parseInt(inputs[(target.name + " Amount")].val() || 0));
            obj.sync("updateAsset");
          }
        });
      });

      var icon = genIcon("heart-empty");
      icon.css("margin-left", "8px");
      icon.attr("title", "Change wounds");
      if (sheet.altStat) {
        icon.attr("title", "Change wounds, ctrl for "+sync.traverse(obj.data, sheet.altStat).name);
      }
      icon.appendTo(optionsBar);
      icon.click(function(e) {
        var target = sync.traverse(obj.data, sheet.health || "counters.wounds");

        if (e.ctrlKey && sheet.altStat) {
         target = sync.traverse(obj.data, sheet.altStat);
        }
        var text = {};
        text[(target.name + " Amount")] = {type : "number", value : -1};
        ui_prompt({
          target : $(this),
          inputs : text,
          click : function(ev, inputs) {
            sync.val(target, sync.rawVal(target)+parseInt(inputs[(target.name + " Amount")].val() || 0));
            obj.sync("updateAsset");
          }
        });
      });

      for (var i in sheet.summary) {
        var tabData = sheet.summary[i];
        var tab = genIcon(tabData.icon, tabData.name).appendTo(optionsBar);
        tab.attr("title", tabData.name);
        tab.css("margin-left", "8px");
        tab.attr("index", i);
        tab.click(function(){
          if ($(this).attr("index") < 0) {
            app.attr("displayMode", sheet.summary.length-1);
          }
          else if ($(this).attr("index") >= sheet.summary.length) {
            app.attr("displayMode", 0);
          }
          else {
            app.attr("displayMode", $(this).attr("index"));
          }
          obj.update();
        });
      }
    }
  }

  var infoPanel = $("<div>").appendTo(div);
  infoPanel.addClass("flexcolumn");

  var ctx = sync.defaultContext();
  ctx["c"] = obj.data;

  var newScope = duplicate(scope);
  newScope.display = sheet.summary[scope.displayMode].display;
  newScope.context = ctx;
  if (scope.markup) {
    newScope.markup = "vehicle"+scope.displayMode;
  }
  infoPanel.append(sync.render("ui_processUI")(obj, app, newScope));

  return div;
});

sync.render("ui_crew", function(obj, app, scope) {
  var data = obj.data;
  var div = $("<div>");

  var title = $("<h4>Crew</h4>").appendTo(div);
  title.addClass("flexmiddle");
  if (!scope.viewOnly) {
    var newCrew = genIcon("plus");
    newCrew.attr("title", "Add Crew Slot");
    newCrew.appendTo(title);
    newCrew.click(function(){
      data.crew.push({img : "/content/icons/Toolbox1000p.png", title : "Seat"});
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });
  }

  var list = $("<div>").appendTo(div);
  list.addClass("fit-x flexaround flexwrap");
  for (var crewIndex in data.crew) {
    var crewData = data.crew[crewIndex];
    var crewContainer = $("<div>").appendTo(list);
    crewContainer.addClass("outline flexrow");

    var crewPlate = $("<div>").appendTo(crewContainer);
    crewPlate.addClass("flexcolumn flexmiddle subtitle");

    var crewTitle = genIcon("", (crewData.title || "").substring(0, 16)).appendTo(crewPlate);
    crewTitle.attr("title", "Change Name")
    crewTitle.attr("index", crewIndex);
    crewTitle.click(function(){
      var index = $(this).attr("index");
      ui_prompt({
        target : $(this),
        id : "change-crew-title",
        inputs : {
          "Title" : data.crew[index].title,
        },
        click : function(ev, inputs) {
          data.crew[index].title = inputs["Title"].val();
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        }
      });
    });

    var crewContent = $("<div>").appendTo(crewPlate);
    crewContent.addClass("outline subtitle");
    crewContent.css("width", "50px");
    crewContent.css("height", "50px");

    if (crewData.eID && game.entities.data[crewData.eID]) {
      var ent = game.entities.data[crewData.eID];
      crewContent.css("background-image", "url('"+ (sync.rawVal(ent.data.info.img)  || "/content/icons/blankchar.png") +"')");
      crewContent.css("background-size", "contain");
      crewContent.css("background-repeat", "no-repeat");
      crewContent.css("background-position", "center");
      if (hasSecurity(getCookie("UserID"), "Visible", ent.data)) {
        crewContent.addClass("hover2");
        crewContent.attr("index", crewData.eID);
        crewContent.attr("name", crewData.title);
        crewContent.click(function() {
          if (_down[16]) {
            var content = sync.newApp("ui_characterSummary");
            game.entities.data[$(this).attr("index")].addApp(content);
            var popOut = ui_popOut({
              target: $(this),
              id: "char-summary-"+$(this).attr("index"),
              dragThickness : "0.5em",
              title : $(this).attr("name"),
              minimize : true,
            }, content);
            popOut.resizable();
          }
          else {
            var content = sync.newApp("ui_characterSheet");
            game.entities.data[$(this).attr("index")].addApp(content);
            var popOut = ui_popOut({
              target: $(this),
              id: "char-summary-"+$(this).attr("index"),
              dragThickness : "0.5em",
              title : $(this).attr("name"),
              minimize : true,
            }, content);
            popOut.resizable();
          }
        });
        if (hasSecurity(getCookie("UserID"), "Rights", ent.data)) {
          var optionsList = $("<div>").appendTo(crewContainer);
          optionsList.addClass("flexcolumn");

          var disembark = genIcon("log-out").appendTo(optionsList);
          disembark.attr("title", "Leave Vehicle");
          disembark.attr("index", crewIndex);
          disembark.click(function(){
            delete data.crew[$(this).attr("index")].eID;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          });
        }
      }
    }
    else {
      if (crewData.img) {
        crewContent.css("background-image", "url('"+ crewData.img +"')");
        crewContent.css("background-size", "contain");
        crewContent.css("background-repeat", "no-repeat");
        crewContent.css("background-position", "center");
      }
      var optionsList = $("<div>").appendTo(crewContainer);
      optionsList.addClass("flexcolumn");

      var crewMember = genIcon("user").appendTo(optionsList);
      crewMember.attr("title", "Change Crew Member");
      crewMember.attr("index", crewIndex);
      crewMember.click(function(){
        var index = $(this).attr("index");
        var content = sync.render("ui_entList")(obj, app, {
          filter : "c",
          click : function(ev, ui, charObj) {
            data.crew[index].eID = charObj.id();
            layout.coverlay("popout-chars");
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        });

        var popOut = ui_popOut({
          target : $(this),
          id : "popout-chars",
          style : {"max-height" : "25vh", "overflow-y" : "auto"}
        }, content);
      });

      var img = genIcon("picture").appendTo(optionsList);
      img.attr("title", "Change Image");
      img.attr("index", crewIndex);
      img.click(function(){
        var index = $(this).attr("index");

        var content = $("<div>");

        var iconDiv = $("<div>").appendTo(content);

        for (var i in util.art.icons) {
          var imgClick = $("<img>").appendTo(iconDiv);
          imgClick.addClass("outline hover2");
          imgClick.css("cursor", "pointer");
          imgClick.css("width", "32px");
          imgClick.css("height", "32px");
          imgClick.attr("src", "/content/icons/"+util.art.icons[i]);
          imgClick.click(function(){
            imgInput.val($(this).attr("src"));
            layout.coverlay("icons-picker");
          });
        }

        var imgInput = genInput({
          parent : content,
          value : data.crew[index].img || "",
          style : {"font-size" : "0.8em", "width" : "100%"}
        });

        var confirm = $("<button>").appendTo(content);
        confirm.addClass("fit-x");
        confirm.append("Confirm");
        confirm.click(function(){
          data.crew[index].img = imgInput.val() || "";
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
          layout.coverlay("change-crew-img", 300);
        });

        ui_popOut({
          target : $(this),
          id : "change-crew-img",
          style : {"max-width" : "30vw"}
        }, content);
      });

      var del = genIcon("trash").appendTo(optionsList);
      del.attr("title", "Delete Crew Slot");
      del.attr("index", crewIndex);
      del.click(function(){
        var index = $(this).attr("index");
        ui_prompt({
          target : $(this),
          id : "delete-crew",
          confirm : "Delete Slot",
          click : function(){
            data.crew.splice(index, 1);
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        });
      });
    }
  }
  return div;
});

sync.render("ui_locations", function(obj, app, scope) {
  scope = scope || {viewOnly : app.attr("viewOnly") == "true"};
  scope.editable = (app.attr("editable") == "true");
  var div = $("<div>");
  var data = obj.data;

  var title = $("<h4 style='text-align: center;'>Locations</h4>").appendTo(div);
  if (!scope.viewOnly) {
    if (scope.editable) {
      var icon = genIcon("plus").appendTo(title);
      icon.click(function() {
        var popout = ui_prompt({
          target : $(this),
          id : "special-rule-popout",
          inputs : {"Name" : ""},
          click : function(ev, inputs) {
            if (inputs["Name"].val() && inputs["Name"].val().trim()) {
              data.body[inputs["Name"].val().trim()] = {coords: [0,0], size: ["50%","50%"], value : 0};
              obj.update();
            }
          }
        });
      });
      var icon = genIcon("ok").appendTo(title);
      icon.click(function() {
        app.removeAttr("editable");
        if (!scope.local) {
          obj.sync("updateAsset");
        }
        else {
          obj.update();
        }
      });
    }
    else {
      var icon = genIcon("pencil").appendTo(title);
      icon.click(function() {
        app.attr("editable", "true");
        obj.update();
      });
    }
  }
  var newScope = {
    viewOnly : scope.viewOnly,
    url : sync.rawVal(data.info.img) || "/content/icons/blankvehicle.png",
    body : data.body,
    editable : scope.editable,
    displayText : function(ui, key){
      if (data.body[ui.attr("key")] != null && !scope.editable) {
        ui.css("text-shadow", "0px 0px 4px black");
        ui.css("color", "white");
        ui.text(data.body[ui.attr("key")].value);
      }
      else {
        ui.css("text-shadow", "0px 0px 4px white");
      }
    },
    click : function(ev, ui) {
      if (data.body[ui.attr("key")] != null) {
        if (_down["17"]) {
          data.body[ui.attr("key")].value = (data.body[ui.attr("key")].value || 0) + 1;
        }
        else {
          data.body[ui.attr("key")].value = (data.body[ui.attr("key")].value || 0) - 1;
        }
        if (!scope.local) {
          obj.sync("updateAsset");
        }
        else {
          obj.update();
        }
      }
    }
  };
  if (scope.editable) {
    newScope.click = function(ev, ui) {
      delete data.body[ui.attr("key")];
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    }
  }
  var dragContainer = sync.render("ui_body")(obj, app, newScope).appendTo(div);

  return div;
});

sync.render("ui_boardActions", function(obj, app, scope) {
  var content = $("<div>");
  content.addClass("flexcolumn");

  game.state.listen[obj.id()] = function(){obj.update();}
  if (isNaN(obj.id()) && obj.id().match("_") && hasSecurity(getCookie("UserID"), "Assistant Master")) {
    var cloudWrap = genIcon("cloud-download", "Download Asset").appendTo(content);
    cloudWrap.attr("title", "Download Asset");
    cloudWrap.addClass("bold");
    cloudWrap.click(function(ev){
      if (game.locals["storage"]) {
        for (var i in game.locals["storage"].data.l) {
          var listEntry = game.locals["storage"].data.l[i];
          var split = obj.id().split("_");
          if (obj.data._c == getCookie("UserID") && listEntry._uid == split[1]) {
            listEntry.move = true;
            runCommand("moveAssets", {l : game.locals["storage"].data.l});
            delete listEntry.move;
            game.entities.listen[obj.id()] = function(src, update, target) {
              for (var key in src.data) {
                var newEnt = src.data[key];
                if (newEnt.data && newEnt.data._c == split[0] && newEnt.data._uid == split[1]) {
                  obj.removeApp(app);
                  newEnt.addApp(app);
                  return false;
                }
              }
              return true;
            }
            break;
          }
        }
      }
      else {
        sendAlert({text : "Asset Storage hasn't loaded yet"});
      }
      ev.preventDefault();
      ev.stopPropagation();
    });
  }
  else {
    var buttonList = $("<div>");
    buttonList.addClass("lrpadding flexcolumn");

    var tabs = game.state.data.tabs;
    var active;
    for (var i in tabs) {
      if (obj.id() == tabs[i].index) {
        active = i;
        break;
      }
    }

    if (hasSecurity(getCookie("UserID"), "Assistant Master") || active != null) {
      var open = $("<button>").appendTo(content);
      open.addClass("highlight alttext");
      open.append(genIcon("log-in", "Enter"));
      open.click(function(){
        var tabs = game.state.data.tabs;
        var active;
        for (var i in tabs) {
          if (obj.id() == tabs[i].index) {
            active = i;
            break;
          }
        }
        if (active) {
          if (app.attr("targetApp") && $("#"+app.attr("targetApp")).length) {
            $("#"+app.attr("targetApp")).removeAttr("scrollLeft");
            $("#"+app.attr("targetApp")).removeAttr("scrollTop");
            $("#"+app.attr("targetApp")).removeAttr("zoom");
          }
          for (var i in game.state._apps) {
            if ($("#"+game.state._apps[i]).length) {
              $("#"+game.state._apps[i]).attr("tab", active);
            }
          }
          game.state.update();
        }
        else if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
          game.state.data.tabs.push({index : obj.id(), ui : "ui_board"});
          if (app.attr("targetApp") && $("#"+app.attr("targetApp")).length) {
            $("#"+app.attr("targetApp")).removeAttr("scrollLeft");
            $("#"+app.attr("targetApp")).removeAttr("scrollTop");
            $("#"+app.attr("targetApp")).removeAttr("zoom");
          }
          for (var i in game.state._apps) {
            if ($("#"+game.state._apps[i]).length) {
              $("#"+game.state._apps[i]).attr("tab", game.state.data.tabs.length-1);
            }
          }
          game.state.sync("updateState");
        }
        layout.coverlay($(".piece-quick-edit"));
        layout.coverlay(obj.id()+"-actions");
      });
    }
  }

  return content;
});

sync.render("ui_boardControls", function(obj, app, scope) {
  var data = obj.data;
  scope = scope || {viewOnly : app.attr("viewOnly"), local : app.attr("local") == "true", layer : app.attr("layer") || 0};
  if (game.config.data.offline) {
    scope.local = true;
  }

  if (scope.layer >= data.layers.length - 1) {
    // fuck fireffox
    scope.layer = data.layers.length - 1;
    app.attr("layer", data.layers.length - 1);
  }
  scope.layer = Math.max(scope.layer, 0);

  var div = $("<div>");
  var optionsBar = $("<div>")//.appendTo(div);
  optionsBar.addClass("flexrow flexwrap flexaround background alttext");

  var security = genIcon("lock").appendTo(optionsBar);
  security.addClass("lrpadding");
  security.attr("title", "Configure who can access this");
  security.click(function(){
    var content = sync.newApp("ui_rights");
    obj.addApp(content);

    var frame = ui_popOut({
      target : $(this),
      align : "right",
      id : "ui-rights-dialog",
    }, content);
  });

  var bEdit = genIcon("tint", "Filters").appendTo(optionsBar);
  bEdit.addClass("lrpadding");
  bEdit.attr("title", "Filters");
  bEdit.click(function(){
    var targetApp = $("#"+app.attr("target"));
    var content = sync.newApp("ui_boardFilters");
    content.attr("local", scope.local);
    content.attr("viewOnly", scope.viewOnly);
    content.attr("target", targetApp.attr("id"));
    obj.addApp(content);

    ui_popOut({
      target : app,
      id : "board-background-editing-"+targetApp.attr("id"),
    }, content);
  });

  var bEdit = genIcon("cog", "Advanced").appendTo(optionsBar);
  bEdit.addClass("lrpadding");
  bEdit.attr("title", "Advanced");
  bEdit.click(function(){
    var targetApp = $("#"+app.attr("target"));
    var content = sync.newApp("ui_backgroundControls");
    content.attr("local", scope.local);
    content.attr("viewOnly", scope.viewOnly);
    content.attr("target", targetApp.attr("id"));
    obj.addApp(content);

    ui_popOut({
      target : app,
      id : "board-background-editing-"+targetApp.attr("id"),
    }, content);
    layout.coverlay("board-controls-"+targetApp.attr("id"));
  });

  var gColor = genInput({
    parent : controls,
    placeholder : "Color",
    value : data.gc,
  });

  var colDiv1 = sync.render("ui_colorPicker")(obj, app, {
    cols : [
      "rgba(255, 255, 255, 0.25)",
      "rgba(187, 0, 0, 0.25)",
      "rgba(0, 187, 0, 0.25)",
      "rgba(0, 15, 255, 0.25)",
      "rgba(255, 240, 0, 0.25)",
      "rgba(176, 0, 187, 0.25)",
      "rgba(51, 51, 51, 0.25)"
    ],
    hideColor : true,
    update : true,
    colorChange : function(ev, ui, col){
      gColor.val(col);
      gColor.change();
    }
  }).addClass("flexmiddle flex");
  var wColDiv = $("<div>");
  wColDiv.addClass("flexrow");

  var weatherType = $("<select>").appendTo(wColDiv);

  var optionList = ["None", "Rain", "Rain Mix", "Downpour", "Snow"];
  for (var i in optionList) {
    var option = $("<option>").appendTo(weatherType);
    option.attr("value", optionList[i].toLowerCase());
    option.text(optionList[i]);
    if (data.options.weather == optionList[i].toLowerCase()) {
      option.attr("selected", "selected");
    }
  }
  weatherType.attr("value", data.options.weather);

  var wColor = $("<button>").appendTo(wColDiv);
  wColor.addClass("padding outline smooth");
  wColor.attr("background", data.options.weatherStyle || "");
  wColor.css("background", data.options.weatherStyle || "");
  wColor.css("width", "2em");
  wColor.click(function(){
    var optionList = [];
    var submenu = [
      "rgba(34,34,34,1)",
      "rgba(187,0,0,1)",
      "rgba(255,153,0,1)",
      "rgba(255,240,0,1)",
      "rgba(0,187,0,1)",
      "rgba(0,115,230,1)",
      "rgba(176,0,187,1)",
      "rgba(255,115,255,1)",
      "rgba(255,255,255,1)",
    ];
    for (var i in submenu) {
      optionList.push({
        icon : "tint",
        style : {"background-color" : submenu[i], "color" : "transparent"},
        click : function(ev, ui){
          var col = ui.css("background-color");
          var correctedCol = col.replace("rgb(", "rgba(");
          if (weatherType.val() == "rain" || weatherType.val() == "rain mix" || weatherType.val() == "downpour") {
            wColor.attr("background", "linear-gradient(to bottom, "+correctedCol.replace(")", ",0)")+" 0%, "+correctedCol.replace(")", ",0.5)")+" 100%)");
            wColor.css("background", "linear-gradient(to bottom, "+correctedCol.replace(")", ",0)")+" 0%, "+correctedCol.replace(")", ",0.5)")+" 100%)");
          }
          else if (weatherType.val() == "snow") {
            wColor.attr("background", "radial-gradient("+correctedCol.replace(")", ",1.0)")+" 0%, "+correctedCol.replace(")", ",0)")+" 50%)");
            wColor.css("background", "radial-gradient("+correctedCol.replace(")", ",1.0)")+" 0%, "+correctedCol.replace(")", ",0)")+" 50%)");
          }
          else {
            wColor.attr("background", "");
            wColor.css("background", "");
          }
        },
      });
    }

    optionList.push({
      icon : "tint",
      style : {"background-image" : "url('/content/checkered.png')", "color" : "transparent"},
      click : function(ev, ui){
        var col = ui.css("background-color");
        var correctedCol = col.replace("rgb(", "rgba(");
        if (weatherType.val() == "rain") {
          wColor.attr("background", "linear-gradient(to bottom, "+correctedCol.replace(")", ",0)")+" 0%, "+correctedCol.replace(")", ",0.5)")+" 100%)");
          wColor.css("background", "linear-gradient(to bottom, "+correctedCol.replace(")", ",0)")+" 0%, "+correctedCol.replace(")", ",0.5)")+" 100%)");
        }
        else if (weatherType.val() == "snow") {
          wColor.attr("background", "radial-gradient("+correctedCol.replace(")", ",1.0)")+" 0%, "+correctedCol.replace(")", ",0)")+" 50%)");
          wColor.css("background", "radial-gradient("+correctedCol.replace(")", ",1.0)")+" 0%, "+correctedCol.replace(")", ",0)")+" 50%)");
        }
        else {
          wColor.attr("background", "");
          wColor.css("background", "");
        }
      },
    });

    optionList.push({
      icon : "cog",
      click : function(){
        var target = wColor;
        var primaryCol = sync.render("ui_colorPicker")(obj, app, {
          hideColor : true,
          custom : true,
          update : true,
          colorChange : function(ev, ui, value){
            var correctedCol = value.split(",");
            var str = "";
            for (var i=0; i<correctedCol.length-1; i++) {
              str += correctedCol[i]+",";
            }
            str = str.substring(0, str.length-1) + ")";
            correctedCol = str;
            if (weatherType.val() == "rain") {
              wColor.attr("background", "linear-gradient(to bottom, "+correctedCol.replace(")", ",0)")+" 0%, "+correctedCol.replace(")", ",0.5)")+" 100%)");
              wColor.css("background", "linear-gradient(to bottom, "+correctedCol.replace(")", ",0)")+" 0%, "+correctedCol.replace(")", ",0.5)")+" 100%)");
            }
            else if (weatherType.val() == "snow") {
              wColor.attr("background", "radial-gradient("+correctedCol.replace(")", ",1.0)")+" 0%, "+correctedCol.replace(")", ",0)")+" 50%)");
              wColor.css("background", "radial-gradient("+correctedCol.replace(")", ",1.0)")+" 0%, "+correctedCol.replace(")", ",0)")+" 50%)");
            }
            else {
              wColor.attr("background", "");
              wColor.css("background", "");
            }
          }
        });

        ui_popOut({
          target : wColor,
          id : "piece-color",
          align : "right"
        }, primaryCol);
      },
    });
    var menu = ui_dropMenu($(this), optionList, {"id" : "color-picker", hideClose : true});
    menu.removeClass("outline");
  });


  var boardScaleWrap = $("<div>");
  boardScaleWrap.addClass("flexrow");

  var scale = genInput({
    parent : boardScaleWrap,
    value : (data.options.unitScale || 1),
    type : "number",
    min : 1,
    style : {"width" : "50px"}
  });

  var units = genInput({
    parent : boardScaleWrap,
    value : (data.options.unit || "un"),
    style : {"width" : "50px"}
  });

  var size = $("<div>");
  size.addClass("flexrow");

  var width = genInput({
    parent : size,
    type : "number",
    placeholder : "width",
    value : data.w,
    style : {"width" : "50px"},
  });

  var height = genInput({
    parent : size,
    type : "number",
    placeholder : "height",
    value : data.h,
    style : {"width" : "50px", color : "#333"},
  });

  var offsets = $("<div>");
  offsets.addClass("flexrow");

  var gridX = genInput({
    parent : offsets,
    type : "number",
    placeholder : "pixels",
    value : data.gridX,
    style : {"width" : "50px", color : "#333"},
  });

  var gridY = genInput({
    parent : offsets,
    type : "number",
    placeholder : "pixels",
    value : data.gridY,
    style : {"width" : "50px", color : "#333"},
  });

  var sizes = $("<div>");
  sizes.addClass("flexrow");

  var wPos = genInput({
    parent : sizes,
    type : "number",
    placeholder : "pixels",
    value : data.gridW,
    style : {"width" : "50px", color : "#333"},
  });
  var hPos;

  if (data.options && data.options.hex) {
    hPos = genInput({
      parent : sizes,
      type : "number",
      placeholder : "pixels",
      value : data.gridH,
      style : {"width" : "50px", color : "#333"},
    });
  }

  var gridTypeWrap = $("<div>");
  gridTypeWrap.addClass("flexrow");

  var gridType = $("<select>").appendTo(gridTypeWrap);

  if (data.options && data.options.hex) {
    gridType.append("<option value='Grid'>Grid</option>");
    gridType.append("<option value='Hex' selected='selected'>Hex</option>");
  }
  else {
    gridType.append("<option value='Grid' selected='selected'>Grid</option>");
    gridType.append("<option value='Hex'>Hex</option>");
  }

  var gridButton = $("<button>").appendTo(gridTypeWrap);
  gridButton.addClass("padding outline smooth");
  gridButton.css("background", data.gc);
  gridButton.css("width", "2em");
  gridButton.click(function(){
    var optionList = [];
    var submenu = [
      "rgba(34,34,34,1)",
      "rgba(187,0,0,1)",
      "rgba(255,153,0,1)",
      "rgba(255,240,0,1)",
      "rgba(0,187,0,1)",
      "rgba(0,115,230,1)",
      "rgba(176,0,187,1)",
      "rgba(255,115,255,1)",
      "rgba(255,255,255,1)",
    ];
    for (var i in submenu) {
      optionList.push({
        icon : "tint",
        style : {"background-color" : submenu[i], "color" : "transparent"},
        click : function(ev, ui){
          gridButton.css("background", ui.css("background-color"));
        },
      });
    }

    optionList.push({
      icon : "tint",
      style : {"background-image" : "url('/content/checkered.png')", "color" : "transparent"},
      click : function(ev, ui){
        gridButton.css("background", "rgba(0,0,0,0)");
      },
    });

    optionList.push({
      icon : "cog",
      click : function(){
        var primaryCol = sync.render("ui_colorPicker")(obj, app, {
          hideColor : true,
          custom : true,
          update : true,
          colorChange : function(ev, ui, value){
            gridButton.css("background", value);
          }
        });

        ui_popOut({
          target : gridButton,
          id : "piece-color",
          align : "right"
        }, primaryCol);
      },
    });
    var menu = ui_dropMenu($(this), optionList, {"id" : "color-picker", hideClose : true});
    menu.removeClass("outline");
  });

  //gridType.append("<option value='Iso'>Iso</option>");

  var hpType = $("<select>");

  var optionList = ["Show All", "Has Access", "Never Show"];
  for (var i in optionList) {
    var option = $("<option>").appendTo(hpType);
    option.attr("value", i);
    option.text(optionList[i]);
    if ((data.options.hpMode || 0) == i) {
      option.attr("selected", "selected");
    }
  }
  hpType.attr("value", data.options.hpMode);

  var bgDrop = $("<div>");
  bgDrop.addClass("flexrow");

  var url = $("<button>").appendTo(bgDrop);
  url.addClass("hover2 smooth padding");
  url.attr("src", data.map);
  url.css("background-image", "url('"+data.map+"')");
  url.css("background-size", "contain");
  url.css("background-repeat", "no-repeat");
  url.css("background-position", "center");
  url.css("width", "50px");
  url.click(function(){
    var imgList = sync.render("ui_filePicker")(obj, app, {
      filter : "img",
      change : function(ev, ui, val){
        url.attr("src", val);
        url.css("background-image", "url('"+val+"')");
        layout.coverlay("icons-picker");
      }
    });

    var pop = ui_popOut({
      target : $(this),
      id : "icons-picker",
      prompt : true,
      align : "top",
      style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
    }, imgList);
    pop.resizable();
  });

  var repeat = $("<select>").appendTo(bgDrop);

  var optionList = ["No Repeat", "Repeat"];
  for (var i in optionList) {
    var option = $("<option>").appendTo(repeat);
    option.attr("value", optionList[i].toLowerCase());
    option.text(optionList[i]);
    if (data.options.weather == optionList[i].toLowerCase()) {
      option.attr("selected", "selected");
    }
  }
  repeat.attr("value", data.options.weather);

  var bgButton = $("<button>")//.appendTo(gridTypeWrap);
  bgButton.addClass("padding outline smooth");
  bgButton.css("background", data.c || "white");
  bgButton.css("width", "2em");
  bgButton.click(function(){
    var optionList = [];
    var submenu = [
      "rgba(34,34,34,1)",
      "rgba(187,0,0,1)",
      "rgba(255,153,0,1)",
      "rgba(255,240,0,1)",
      "rgba(0,187,0,1)",
      "rgba(0,115,230,1)",
      "rgba(176,0,187,1)",
      "rgba(255,115,255,1)",
      "rgba(255,255,255,1)",
    ];
    for (var i in submenu) {
      optionList.push({
        icon : "tint",
        style : {"background-color" : submenu[i], "color" : "transparent"},
        click : function(ev, ui){
          bgButton.css("background", ui.css("background-color"));
        },
      });
    }
    optionList.push({
      icon : "cog",
      click : function(){
        var primaryCol = sync.render("ui_colorPicker")(obj, app, {
          hideColor : true,
          custom : true,
          update : true,
          colorChange : function(ev, ui, value){
            bgButton.css("background", value);
          }
        });

        ui_popOut({
          target : bgButton,
          id : "piece-color",
          align : "right"
        }, primaryCol);
      },
    });
    var menu = ui_dropMenu($(this), optionList, {"id" : "color-picker", hideClose : true});
    menu.removeClass("outline");
  });


  data.info = data.info || {name : sync.newValue(null, "[No Name]")};
  data.options = data.options || {};
  var controls = ui_controlForm({
    inputs : {
      "Grid X/Y Offset" : offsets,
      "Grid Size" : sizes,
    },
    click : function(ev, inputs) {
      var lastGrid = data.gridW;

      data.gridX = Math.min(Number(gridX.val()), 1600);
      data.gridY = Math.min(Number(gridY.val()), 1600);
      data.gridW = Math.min(Number(wPos.val()), 640);
      if (hPos) {
        data.gridH = Math.min(Number(hPos.val()), 640);
      }
      else {
        data.gridH = Math.min(Number(wPos.val()), 640);
      }
      data.gc = gridButton.css("background-color");

      var gridScale = lastGrid/data.gridW;
      if (lastGrid && data.gridW && data.options) {
        if (data.options.unitScale == null && game.templates.grid) {
          data.options.unitScale = game.templates.grid.unitScale;
        }
        data.options.unitScale = data.options.unitScale / gridScale;
      }

      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
      layout.coverlay("board-controls");
    }
  }).appendTo(div);
  return div;
});

sync.render("ui_boardFilters", function(obj, app, scope) {
  var data = obj.data;
  scope = scope || {viewOnly : app.attr("viewOnly"), local : app.attr("local") == "true"};
  if (game.config.data.offline) {
    scope.local = true;
  }
  var div = $("<div>");
  var filterWrap = genIcon("refresh", "Reset Filters");
  filterWrap.addClass("flex flexmiddle");
  filterWrap.click(function(){
    brightness.val(100);
    contrast.val(100);
    gray.val(0);
    hue.val(0);
    invert.val(0);
    sepia.val(0);
  });

  var brightness = genInput({
    type : "range",
    min : 50,
    max : 150,
    step : 5,
  }, 1);

  var contrast = genInput({
    type : "range",
    min : 50,
    max : 100,
    step : 5,
  }, 1);

  var gray = genInput({
    type : "range",
    min : 0,
    max : 100,
    step : 5,
  }, 1);

  var hue = genInput({
    type : "range",
    min : 0,
    max : 360,
    step : 30,
  }, 1);

  var invert = genInput({
    type : "range",
    min : 0,
    max : 100,
    step : 5,
  }, 1);

  var sepia = genInput({
    type : "range",
    min : 0,
    max : 100,
    step : 5,
  }, 1);

  brightness.val(100);
  contrast.val(100);
  gray.val(0);
  hue.val(0);
  invert.val(0);
  sepia.val(0);

  if (data.options && data.options.filter) {
    var filters = data.options.filter;
    brightness.val(parseInt(filters["brightness"]) || 100);
    contrast.val(parseInt(filters["contrast"]) || 100);
    gray.val(parseInt(filters["grayscale"]) || 0);
    hue.val(parseInt(filters["hue-rotate"]) || 0);
    invert.val(parseInt(filters["invert"]) || 0);
    sepia.val(parseInt(filters["sepia"]) || 0);
  }

  var controls = ui_controlForm({
    inputs : {
      "Filters" : filterWrap,
      "Brightness" : $("<div>").addClass("flexmiddle flex").append(brightness),
      //"Contrast" : contrast,
      "Grayscale" : $("<div>").addClass("flexmiddle flex").append(gray),
      "Hue Shift" : $("<div>").addClass("flexmiddle flex").append(hue),
      "Inverted" : $("<div>").addClass("flexmiddle flex").append(invert),
      "Sepia" : $("<div>").addClass("flexmiddle flex").append(sepia),
    },
    lblStyle : "width : 100px",
    click : function(ev, inputs) {
      data.options.filter = {};
      if (brightness.val() != 100) {
        data.options.filter["brightness"] = brightness.val();
      }
      else {
        delete data.options.filter["brightness"];
      }
      if (contrast.val() != 100) {
        data.options.filter["contrast"] = contrast.val();
      }
      else {
        delete data.options.filter["contrast"];
      }
      if (gray.val() != 0) {
        data.options.filter["grayscale"] = gray.val();
      }
      else {
        delete data.options.filter["grayscale"];
      }
      if (hue.val() != 0) {
        data.options.filter["hue-rotate"] = hue.val();
      }
      else {
        delete data.options.filter["hue-rotate"];
      }
      if (invert.val() != 0) {
        data.options.filter["invert"] = invert.val();
      }
      else {
        delete data.options.filter["inverts"];
      }
      if (sepia.val() != 0) {
        data.options.filter["sepia"] = sepia.val();
      }
      else {
        delete data.options.filter["sepia"];
      }

      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    }
  }).appendTo(div);

  return div;
});

sync.render("ui_boardEditor", function(obj, app, scope) {
  var data = obj.data;
  scope = scope || {
    viewOnly : (app.attr("viewOnly") == "true"),
    local : (app.attr("local") == "true"),
    printing : (app.attr("printing") == "true"),
    layer : (app.attr("layer") || 0),
  };

  var targetApp = app;

  var div = $("<div>");
  div.addClass("flexcolumn flex");

  var buttonList = $("<div>")//.appendTo(div);
  buttonList.addClass("flexrow fit-x");

  var playmode = $("<button>").appendTo(buttonList);
  playmode.addClass("subtitle flex");
  playmode.text("Play Mode");
  playmode.click(function(){
    var content = $("<div>");
    content.addClass("flexcolumn");

    var optimizer = $("<button>").appendTo(content);
    optimizer.addClass("highlight alttext hover2");
    optimizer.attr("title", "Condenses the map size down to the smallest it can be, attempts to merge 'tiled' pieces for added performance and removes duplicate tiles.");
    optimizer.append("With Optimizer");
    optimizer.click(function(){
      if (boardApi.saveChanges(obj)) {
        targetApp.removeAttr("background");
        targetApp.removeAttr("ignore");
        targetApp.removeAttr("local");

        layout.coverlay("save-changes");
      }
    });

    var noOptimizer = $("<button>").appendTo(content);
    noOptimizer.addClass("background alttext hover2");
    noOptimizer.append("Without Optimizer");
    noOptimizer.click(function(){
      if (boardApi.saveChanges(obj, true)) {
        targetApp.removeAttr("background");
        targetApp.removeAttr("ignore");
        targetApp.removeAttr("local");

        layout.coverlay("save-changes");
      }
    });

    var discard = $("<button>").appendTo(content);
    discard.addClass("subtitle");
    discard.css("margin", "1em");
    discard.append("Discard Changes");
    discard.click(function(){
      if (boardApi.saveChanges(obj, "discard")) {
        targetApp.removeAttr("background");
        targetApp.removeAttr("ignore");
        targetApp.removeAttr("local");
        obj.update();

        layout.coverlay("save-changes");
      }
    });

    var pop = ui_popOut({
      target : $(this),
      align : "bottom",
      id : "save-changes",
      title : "Save Changes...",
    }, content);
  });

  var tilemode = $("<button>").appendTo(buttonList);
  tilemode.addClass("subtitle flex");
  tilemode.text("Tile Mode");
  tilemode.click(function(){
    targetApp.attr("background", true);
    obj.update();
  });

  if (targetApp.attr("background") == "true") {
    tilemode.addClass("highlight alttext");
  }
  else {
    playmode.addClass("highlight alttext");
  }

  var tabWrapper = $("<div>").appendTo(div);
  tabWrapper.addClass("flexcolumn flex");

  var tabBar = genNavBar("foreground alttext subtitle", "flexcolumn flex", "4px");
  tabBar.addClass("flex flexcolumn");
  tabBar.appendTo(tabWrapper);

  tabBar.generateTab("Layer Order", "align-justify", function(parent){
    var layers = sync.render("ui_boardLayers")(obj, app, scope).appendTo(parent);
    layers.addClass("inactive flex");

    app.attr("tab", "Layer Order");
  });

  tabBar.generateTab("Tile Sheets", "picture", function(parent) {
    var content = sync.newApp("ui_boardSheets").appendTo(parent);
    content.attr("local", scope.local);
    content.attr("viewOnly", scope.viewOnly);
    content.attr("targetApp", app.attr("id"));
    obj.addApp(content);
    app.attr("tab", "Tile Sheets");
  });

  function tabWrap(key, icon, target) {
    tabBar.generateTab(key, icon, function(parent){
      var content = $("<div>").appendTo(parent);
      content.addClass("flex flexcolumn");
      content.css("position", "relative");
      content.css("overflow", "auto");

      var list = $("<div>").appendTo(content);
      list.addClass("fit-x");
      list.css("position", "absolute");
      list.sortable({
        update : function(ev, ui) {
          var newIndex;
          var count = 0;
          $(ui.item).attr("ignore", true);
          list.children().each(function(){
            if ($(this).attr("ignore")){
              newIndex = count;
            }
            count += 1;
          });
          var old = obj.data.layers[scope.layer][target].splice($(ui.item).attr("index"), 1);
          util.insert(obj.data.layers[scope.layer][target], newIndex, old[0]);
          boardApi.updateLayer(scope.layer, null, obj);
        }
      });
      for (var i in obj.data.layers[scope.layer][target]) {
        var itemWrap = $("<div>").appendTo(list);
        itemWrap.addClass("white hover2 flexrow");
        itemWrap.attr("index", i);
        itemWrap.click(function(){
          var index = $(this).attr("index");
          list.children().each(function(){
            $(this).removeClass("highlight2");
          });
          $(this).addClass("highlight2");

          var index = $(this).attr("index");
          // To Do :
          // unselect all
          var itemData = obj.data.layers[scope.layer][target][index];
          list.children().each(function(){
            $(this).removeClass("highlight2");
          });
          $(this).addClass("highlight2");
          if (itemData.x != null && itemData.y != null) {
            boardApi.scrollTo(targetApp, itemData.x + itemData.w/2, itemData.y + itemData.h/2);
          }
          if (!_down[16]) {
            boardApi.clearSelection(targetApp);
          }
          boardApi.lookup(scope.layer, target, $(this).attr("index"), targetApp).select();
        });
        var wrap = $("<div>").appendTo(itemWrap);
        wrap.addClass("alttext foreground spadding");

        var number = $("<b class='alttext spadding'>#"+i+"</b>").appendTo(itemWrap);
        var remove = genIcon("trash").appendTo(wrap);
        remove.addClass("flexmiddle");
        remove.attr("index", i);
        remove.click(function(ev){
          var index = $(this).attr("index");
          ui_prompt({
            target : $(this),
            confirm : "Delete",
            click : function(){
              obj.data.layers[scope.layer][target].splice(index, 1);
              if (!scope.local) {
                obj.sync("updateAsset");
              }
              else {
                obj.update();
              }
            }
          });
          ev.stopPropagation();
          ev.preventDefault();
        });

        if (target == "t") {
          var canvasWrap = $("<div>").appendTo(itemWrap);
          canvasWrap.addClass("fit-x outlinebottom");
          canvasWrap.css("position", "relative");
          canvasWrap.css("overflow", "hidden");
          canvasWrap.css("height", (data.gridH || 64) * 2);
          canvasWrap.css("margin", "0.25em");

          var tileData = obj.data.layers[scope.layer][target][i];

          var img = $("<canvas>").appendTo(canvasWrap);
          img.attr("width", tileData.w);
          img.attr("height", tileData.h);
          img.css("position", "absolute");
          img.css("pointer-events", "none");

          var sheetData = data.sheets[tileData.s];
          var tileW = sheetData.gW + sheetData.p;
          var tileH = sheetData.gH + sheetData.p;
          var xGrid = Math.ceil(sheetData.w/(tileW));
          var yGrid = Math.ceil(sheetData.h/(tileH));

          var sX = (tileData.i % xGrid) * tileW;
          var sY = Math.floor(tileData.i / xGrid) * tileH;

          var isHex = data.options && data.options.hex;

          var dummyCanvas = $("<canvas>");
          dummyCanvas.attr("width", tileData.w);
          dummyCanvas.attr("height", tileData.h);
          if (tileData.t && (tileData.w >= (data.gridW || tileData.w) && tileData.h >= (data.gridH || tileData.h)) && !(isHex)) {
            var tileX = (tileData.gW || 1) * sheetData.gW + ((tileData.gW || 1)-1) * sheetData.p;
            var tileY = (tileData.gH || 1) * sheetData.gH + ((tileData.gH || 1)-1) * sheetData.p;
            var gridX = Math.floor((tileData.w || data.gridW)/tileX);
            var gridY = Math.floor((tileData.h || data.gridH)/tileY);
            var width = (tileX || tileData.w || data.gridW);
            var height = (tileY || tileData.h || data.gridH);
            for (var x=0; x<gridX; x++) {
              for (var y=0; y<gridY; y++) {
                dummyCanvas.drawImage({
                  source : sheetData.i,
                  x : (x * width),
                  y : (y * height),
                  width : width,
                  height : height,
                  sWidth: tileX,
                  sHeight: tileY,
                  sx: sX, sy: sY,
                  fromCenter : false,
                  rotate : tileData.r || 0,
                });
              }
            }
          }
          else {
            if (isHex) {
              dummyCanvas.drawLine({
                mask : true,
                strokeStyle: 'rgba(0,0,0,0)',
                strokeWidth: 1,
                x1: (tileData.x)-1, y1: (tileData.y + (tileData.h || data.gridH)/2),
                x2: (tileData.x + (tileData.w || data.gridW) * 4/16), y2: (tileData.y)-1,
                x3: (tileData.x + (tileData.w || data.gridW) * 12/16), y3: (tileData.y)-1,
                x4: (tileData.x + (tileData.w || data.gridW))+1, y4: (tileData.y + (tileData.h || data.gridH)/2),
                x5: (tileData.x + (tileData.w || data.gridW) * 12/16), y5: (tileData.y + (tileData.h || data.gridH))+1,
                x6: (tileData.x + (tileData.w || data.gridW) * 4/16), y6: (tileData.y + (tileData.h || data.gridH))+1,
                x7: (tileData.x)-1, y7: (tileData.y + (tileData.h || data.gridH)/2),
              }).drawImage({
                source : sheetData.i,
                width : (tileData.w || data.gridW),
                height : (tileData.h || data.gridH),
                sWidth: (tileData.gW || 1) * sheetData.gW + ((tileData.gW || 1)-1) * sheetData.p,
                sHeight: (tileData.gH || 1) * sheetData.gH + ((tileData.gH || 1)-1) * sheetData.p,
                sx: sX, sy: sY,
                fromCenter: false,
                rotate : tileData.r || 0,
              }).restoreCanvas();
            }
            else {
              dummyCanvas.drawImage({
                source : sheetData.i,
                width : (tileData.w || data.gridW),
                height : (tileData.h || data.gridH),
                sWidth: (tileData.gW || 1) * sheetData.gW + ((tileData.gW || 1)-1) * sheetData.p,
                sHeight: (tileData.gH || 1) * sheetData.gH + ((tileData.gH || 1)-1) * sheetData.p,
                sx: sX, sy: sY,
                fromCenter: false,
                rotate : tileData.r || 0,
              });
            }
          }
          img.drawImage({
            source : dummyCanvas[0],
            layer : true,
            width : tileData.w, height : tileData.h,
            strokeStyle: "rgba(0,0,0,0)",
            strokeWidth: 4,
            fromCenter : false,
          });
        }
        else if (target == "p") {
          number.css("background-color", obj.data.layers[scope.layer][target][i].c || "#333");
          if (obj.data.layers[scope.layer][target][i].i && obj.data.layers[scope.layer][target][i].i.trim()) {
            var imgWrap = $("<div>").appendTo(itemWrap);
            imgWrap.addClass("flexmiddle");

            var img = $("<img>").appendTo(imgWrap);
            img.attr("src", obj.data.layers[scope.layer][target][i].i);
            img.attr("width", "20px");
            img.attr("height", "20px");
          }
          var ent = getEnt(obj.data.layers[scope.layer][target][i].eID);
          if (ent) {
            if (ent.data._t == "c") {
              var summary = sync.render("ui_characterCombatSummary")(ent, app, {viewOnly : true}).addClass("flex").appendTo(itemWrap);
              $(summary.children()[0]).removeClass("outline");
              summary.addClass("outlinebottom");
            }
            else {
              sync.render("ui_ent")(ent, app, {viewOnly : true}).addClass("flex outlinebottom").appendTo(itemWrap);
            }
          }
          else {
            var filler = $("<div>").appendTo(itemWrap);
            filler.addClass("outlinebottom flex");
          }
        }
        else if (target == "d") {
          var drawing = obj.data.layers[scope.layer][target][i];
          if (drawing) {
            number.css("background-color", drawing.c || "#333");
            number.css("outline-color", drawing.c2 || "#333");

            if (drawing.t) {
              if (drawing.t == "t") {
                itemWrap.append("<text class='subtitle spadding outlinebottom'>"+drawing.text+"</text>");
              }
            }
          }
        }
      }

      if (app) {
        app.attr("tab", key);
      }
    });
  }
  tabWrap("Tiles", "th", "t");
  tabWrap("Pieces", "pushpin", "p");
  tabWrap("Drawings", "pencil", "d");

  tabBar.selectTab(app.attr("tab") || "Tile Sheets");

  return div;
});


sync.render("ui_backgroundControls", function(obj, app, scope) {
  var data = obj.data;
  scope = scope || {viewOnly : app.attr("viewOnly"), local : app.attr("local") == "true"};
  if (game.config.data.offline) {
    scope.local = true;
  }
  var targetApp = $("#"+app.attr("target"));
  var div = $("<div>");
  var optionsBar = $("<div>")//.appendTo(div);
  optionsBar.addClass("flexrow flexwrap flexaround highlight alttext outline");
  optionsBar.css("color", "white");

  var showViewPort = genIcon("facetime-video", "Save Default View").appendTo(optionsBar);
  showViewPort.attr("title", "Assign the default ViewPort");
  showViewPort.click(function(){
    var zoom = parseInt(targetApp.attr("zoom"))/100 || 1;

    data.vX = (Number(targetApp.attr("scrollLeft")) + $("#"+targetApp.attr("id")+"-scroll").width()/2)/zoom;
    data.vY = (Number(targetApp.attr("scrollTop")) + $("#"+targetApp.attr("id")+"-scroll").height()/2)/zoom;
    data.vZ = zoom * 100;
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
    sendAlert({text : "Default View Updated"});
  });

  var bColor = genInput({
    placeholder : "Color",
    value : data.c,
  });

  var colDiv = sync.render("ui_colorPicker")(obj, app, {
    hideColor : true,
    update : true,
    colorChange : function(ev, ui, col){
      bColor.val(col);
      bColor.change();
    }
  }).addClass("flexmiddle flex");

  var shapeInput = genInput({
    type : "number",
    value : data.pD || 0
  });

  var shapeDiv = $("<div>");
  shapeDiv.addClass("flex flexaround");
  shapeDiv.css("padding", "4px");

  var shapes = ["0", "20%", "50%"];
  for (var s in shapes) {
    var shape = $("<div>").appendTo(shapeDiv);
    shape.addClass("outline");
    shape.css("padding", "8px");
    shape.css("cursor", "pointer");
    shape.css("border-radius", shapes[s]);
    shape.attr("index", s);
    if (data.pD == s) {
      shape.css("background-color", "rgba(0,255,0,0.2)");
    }
    shape.click(function(){
      shapeInput.val(parseInt($(this).attr("index")));
    });
  }

  var controls = ui_controlForm({
    inputs : {
      "Piece Width" : data.pW,
      "Piece Height" : data.pH,
      "Piece Color" : data.pC || "transparent",
      "Piece Shape" : shapeInput,
      "   " : shapeDiv,
    },
    click : function(ev, inputs) {

      data.options = data.options || {};

      data.pW = Math.min(Number(inputs["Piece Width"].val()), 3200);
      data.pH = Math.min(Number(inputs["Piece Height"].val()), 3200);
      data.pC = inputs["Piece Color"].val();
      data.pD = Number(inputs["Piece Shape"].val());

      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
      layout.coverlay("board-background-editing-"+targetApp.attr("id"));
    }
  }).appendTo(div);

  return div;
});

sync.render("ui_boardList", function(obj, app, scope) {
  if (!obj) {
    game.entities.addApp(app);
    return $("<div>");
  }

  var data = obj.data;
  scope = scope || {local : app.attr("local") == "true"};
  if (game.config.data.offline) {
    scope.local = true;
  }
  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");

  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("flexaround background alttext outline");
  if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
    var button = genIcon("plus", "New Map").appendTo(optionsBar);
    button.addClass("lrpadding");
    button.attr("title", "Creates a New Map");
    button.click(function(){
      runCommand("createBoard", {data : {}});
    });
    var boardList = $("<div>").appendTo(div);
    boardList.addClass("flexrow flexaround flexwrap lightoutline flex");
  }

  for (var key in data) {
    var ent = data[key];
    if (ent && ent.data["_t"] == "b" && hasSecurity(getCookie("UserID"), "Visible", ent.data)) {
      //build a preview
      var boardPlate = $("<div>").appendTo(boardList);
      boardPlate.addClass("flexcolumn");
      function boardWrap(parent, index) {
        var board = sync.render("ui_boardCard")(ent, app, {
          click : function(ev, ui, charObj) {
            game.state.data.tabs = game.state.data.tabs || [];
            game.state.data.tabs.push({ui : "ui_board", index : index});
            game.state.sync("updateState");
          }
        });
        board.css("background-color", "white");
        board.appendTo(parent);
      }
      boardWrap(boardPlate, key);

      var useButton = $("<button>").appendTo(boardPlate);
      useButton.addClass("fit-x");
      useButton.attr("index", key);
      useButton.append("Use Map");
      useButton.click(function(ev){
        game.state.data.tabs = game.state.data.tabs || [];
        game.state.data.tabs.push({ui : "ui_board", index : $(this).attr("index")});
        game.state.sync("updateState");
      });
    }
  }
  return div;
});

sync.render("ui_boardSelection", function(obj, app, scope) {
  var data = game.entities.data;
  scope = scope || {local : app.attr("local") == "true"};
  if (game.config.data.offline) {
    scope.local = true;
  }

  var div = $("<div>");
  div.addClass("fit-xy");

  var columns = $("<div>").appendTo(div);
  columns.addClass("flexrow flexbetween");

  var tempApp = sync.newApp("ui_boardList");
  tempApp.appendTo(columns);

  var preview = $("<div>").appendTo(columns);
  preview.addClass("lightoutline");
  preview.css("width", "100%");
  preview.css("height", "55vh");
  preview.attr("id", "boardPreview");

  game.entities.addApp(tempApp);

  return div;
});

sync.render("ui_boardListener", function(obj, app, scope) {
  if (!obj) {
    game.state.addApp(app);
    return $("<div>");
  }
  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");

  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("flexaround foreground bold");
  optionsBar.css("color", "transparent");
  optionsBar.css("font-size", "1.2em");
  optionsBar.css("padding", "3px");

  var create = genIcon("plus").appendTo(optionsBar);
  create.css("pointer-events", "none");

  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("flexaround background bold");
  optionsBar.css("color", "transparent");

  var create = genIcon("plus").appendTo(optionsBar);
  create.css("pointer-events", "none");

  setTimeout(function(){
    $(".application[ui-name='ui_board']").each(function(){
      var boardApp = $(this);
      var ent = getEnt(boardApp.attr("entindex"));
      if (ent) {
        optionsBar.remove();
        var newApp = sync.newApp("ui_boardEditor").appendTo(div);
        newApp.addClass("flex");
        newApp.attr("viewOnly", boardApp.attr("viewOnly"));
        newApp.attr("layer", boardApp.attr("layer"));
        newApp.attr("local", boardApp.attr("local"));
        newApp.attr("targetApp", boardApp.attr("id"));
        newApp.attr("hideLayers", "true");
        ent.addApp(newApp);
      }
    });
  }, 100);

  return div;
});

var boardApi = {};
var time = 0;
boardApi.saveChanges = function(obj, mode){
  if (mode == "discard") {
    runCommand("refreshEntity", {id : obj.id()});
    return true;
  }

  var data = obj.data;

  var gridWidth = data.gridW;
  var gridHeight = data.gridH;

  var isHex = data.options && data.options.hex;
  var hasGrid = data.gridW && data.gridW;

  if (mode == null) { // run the optimizer
    function duplicateCheck(layer, index) {
      var layerData = data.layers[layer];
      var stamps = layerData.s;
      var tiles = layerData.t;
      var pieces = layerData.p;
      var strokes = layerData.d;

      var tile = duplicate(tiles[index]);
      delete tile.remove;
      if (tile.t) {
        if ((tile.w >= (data.gridW || tile.w) && tile.h >= (data.gridH || tile.h))) {
          for (var j=0; j<tiles.length; j++) {
            if (j != index) {
              var cTile = tiles[j];
              if (cTile.t) {
                if ((cTile.w >= (data.gridW || cTile.w) && cTile.h >= (data.gridH || cTile.h))) {
                  if (cTile.i == tile.i && cTile.s == tile.s) {
                    if (tile.x == cTile.x && cTile.x + cTile.w == tile.x + tile.w) {
                      // they are on the same plane
                      if ((cTile.y+cTile.h >= tile.y && cTile.y+cTile.h <= tile.y+tile.h) || (tile.y+tile.h >= cTile.y && tile.y+tile.h <= cTile.y+cTile.h)) {
                        // they overlapping
                        var changed = 0;
                        if ((cTile.y + cTile.h) - (tile.y + tile.h) > 0){
                          changed += (cTile.y + cTile.h) - (tile.y + tile.h);
                        }
                        if (cTile.y < tile.y) {
                          changed += Math.abs(tile.y-cTile.y);
                          tile.y = cTile.y;
                        }
                        tile.h += changed;
                        tile.t = true;
                        cTile.remove = true;
                      }
                    }
                    else if (tile.y == cTile.y && cTile.y + cTile.h == tile.y + tile.h) {
                      // they are on the same plane
                      if ((cTile.x+cTile.w >= tile.x && cTile.x+cTile.w <= tile.x+tile.w) || (tile.x+tile.w >= cTile.x && tile.w+tile.x <= cTile.x+cTile.w)) {
                        // they overlapping
                        var changed = 0;
                        if ((cTile.x + cTile.w) - (tile.x + tile.w) > 0){
                          changed += (cTile.x + cTile.w) - (tile.x + tile.w);
                        }
                        if (cTile.x < tile.x) {
                          changed += Math.abs(tile.x-cTile.x);
                          tile.x = cTile.x;
                        }
                        tile.w += changed;
                        tile.t = true;
                        cTile.remove = true;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return tile;
    }
    if (hasGrid && !(isHex)) {
      for (var lid in data.layers) {
        var layerData = data.layers[lid];
        var stamps = layerData.s;
        var tiles = layerData.t;
        var pieces = layerData.p;
        var strokes = layerData.d;

        // to do : handle rotations
        for (var i in stamps) {
          var coordData = stamps[i];
        }
        var i = 0;
        var remove = true;
        while(remove) {
          remove = false;
          for (var i=0; i<tiles.length; i++) {
            tiles[i] = duplicateCheck(lid, i);
            for (var j=tiles.length-1; j>i; j--) {
              if (tiles[j].remove) {
                tiles.splice(j, 1);
                remove = true;
              }
            }
          }
        }
      }
    }

    var x = Number(data.x || 0);
    var y = Number(data.y || 0);
    for (var lid in data.layers) {
      var layerData = data.layers[lid];
      var stamps = layerData.s;
      var tiles = layerData.t;
      var pieces = layerData.p;
      var strokes = layerData.d;

      // to do : handle rotations
      for (var i in stamps) {
        var coordData = stamps[i];
        if (Number(coordData.x || 0) + Number(coordData.w || 0) > x) {
          x = Number(coordData.x || 0) + Number(coordData.w || 0);
        }
        if (Number(coordData.y || 0) + Number(coordData.h || 0) > y) {
          y = Number(coordData.y || 0) + Number(coordData.h || 0);
        }
      }
      for (var i in tiles) {
        var coordData = tiles[i];
        if (Number(coordData.x || 0) + Number(coordData.w || 0) > x) {
          x = Number(coordData.x || 0) + Number(coordData.w || 0);
        }
        if (Number(coordData.y || 0) + Number(coordData.h || 0) > y) {
          y = Number(coordData.y || 0) + Number(coordData.h || 0);
        }
      }
      for (var i in pieces) {
        var coordData = pieces[i];
        if (Number(coordData.x || 0) + Number(coordData.w || 0) > x) {
          x = Number(coordData.x || 0) + Number(coordData.w || 0);
        }
        if (Number(coordData.y || 0) + Number(coordData.h || 0) > y) {
          y = Number(coordData.y || 0) + Number(coordData.h || 0);
        }
      }
    }
    if (Number(x) - Number(data.x || 0)) {
      data.w = Number(x) - Number(data.x || 0);
    }
    if (Number(y) - Number(data.y || 0)) {
      data.h = Number(y) - Number(data.y || 0);
    }
    obj.sync("updateAsset");
  }
  else {
    obj.sync("updateAsset");
  }
  return true;
};

boardApi.dragging = null;
boardApi.apps = {};
boardApi.selections = {};
boardApi.triggers = {flush : {}, cache : {}}; // a cache for triggers
boardApi.fog = {};

boardApi.fonts = {
  default : {
    fontFamily: "Arial",
    fontWeight: "bold",
    fontSize : 10,
    fill: "white",
    stroke: 'black',
    strokeThickness: 0,
    dropShadow: true,
    dropShadowAngle : 0.001,
    dropShadowColor: "rgba(0,0,0,1)",
    dropShadowBlur: 3,
    dropShadowDistance : 0,
  }
}

boardApi.scale = function(value, obj, reverse) {
  if (value != null && !isNaN(value)) {
    if (obj.data.options && obj.data.options.unitScale) {
      if (reverse) {
        return value * obj.data.options.unitScale;
      }
      return value / obj.data.options.unitScale;
    }
  }
  return value;
}

boardApi.tileLayer = function(stage, layer) {
  return stage.children[1].children[layer].children[1];
}

boardApi.lookup = function(layer, type, index, app) {
  var stage = boardApi.apps[app.attr("id")].stage;
  var board = getEnt(app.attr("index"));
  var layerData = board.data.layers[layer];
  var layerCont = stage.children[1].children[layer];
  if (layerCont && layerCont.children && layerCont.children.length) {
    if (type == "t") {
      var tiles = layerCont.children[1];
      if (tiles.children && tiles.children[index]) {
        // naively rebuild because I don't know how to update transformations
        return tiles.children[index];
      }
    }
    else if (type == "p") {
      var pieces = layerCont.children[2];
      if (pieces.children && pieces.children[index]) {
        // naively rebuild because I don't know how to update transformations
        return pieces.children[index];
      }
    }
    else if (type == "d") {
      var drawings = layerCont.children[3];
      if (drawings.children && drawings.children[index]) {
        // naively rebuild because I don't know how to update transformations
        return drawings.children[index];
      }
    }
  }
}

boardApi.context = function(obj, app, scope, ev) {
  var actionList = [];

  var data = obj.data;

  var gridWidth = data.gridW;
  var gridHeight = data.gridH;

  var zoom = app.attr("zoom") / 100;

  var isHex = data.options && data.options.hex;
  var hasGrid = data.gridW && data.gridW;
  var userID = app.attr("UserID") || getCookie("UserID");
  var hasRights = hasSecurity(userID, "Rights", data) || hasSecurity(userID, "Game Master");

  var point = boardApi.apps[app.attr("id")].stage.toLocal({x : ev.pageX, y : ev.pageY});

  var xPos = point.x;
  var yPos = point.y;

  var selections = null;
  for (var key in boardApi.selections) {
    if (boardApi.selections[key].app == app.attr("id")) {
      if (!selections) {
        selections = selections || {};
      }
      selections[key] = boardApi.selections[key];
    }
  }

  if (selections && Object.keys(selections).length == 1) {
    for (var key in boardApi.selections) {
      var selectData = boardApi.selections[key];
      if (selectData.app == app.attr("id") && selectData.type == "p") {
        var pieceData = obj.data.layers[selectData.layer][selectData.type][selectData.index];
        if (pieceData.eID) {
          var ent = getEnt(pieceData.eID);
          if (ent && ent.data) {
            actionList = [
              {
                name : "Asset",
                submenu : assetTypes.contextmenu(null, null, ent, app, scope, true)
              }
            ];
          }
        }

      }
    }
  }

  var layerChoices = [];
  for (var lid in data.layers) {
    layerChoices.push({
      name : data.layers[lid].n,
      attr : {layer : lid},
      click : function(ev, ui){
        var targetLayer = ui.attr("layer");
        var layers = {};
        var selected = selections;

        var splice = {};
        var push = {
          t : [],
          p : [],
          d : [],
          w : []
        };
        for (var i in selected) {
          if (obj.data.layers[selected[i].layer][selected[i].type][selected[i].index]) {
            push[selected[i].type].push(duplicate(obj.data.layers[selected[i].layer][selected[i].type][selected[i].index]));
            splice[selected[i].layer] = splice[selected[i].layer] || {t : {indexs : []}, p : {indexs : []}, d : {indexs : []}, w : {indexs : []}};
            splice[selected[i].layer][selected[i].type].indexs.push(Number(selected[i].index));
            if (splice[selected[i].layer][selected[i].type].rebuild == null || splice[selected[i].layer][selected[i].type].rebuild > selected[i].index) {
              splice[selected[i].layer][selected[i].type].rebuild = Number(selected[i].index);
            }
            boardApi.selections[i].selected.visible = false;
          }
        }
        for (var layer in obj.data.layers) {
          var update = {
            id : obj.id(),
            layer : layer,
            rebuild : {}
          };
          var layerData = splice[layer];
          if (layerData) {
            for (var type in layerData) {
              var typeData = layerData[type];
              if (typeData.indexs.length && typeData.rebuild != null) {
                update.cmd = "destroy";
                update.rebuild[type] = typeData.rebuild;

                typeData.indexs.sort();
                for (var idx=typeData.indexs.length-1; idx>=0; idx--) {
                  obj.data.layers[layer][type].splice(typeData.indexs[idx], 1);
                }
                if (layer == targetLayer) {
                  for (var j=0; j<push[type].length; j++) {
                    if (push[type][j]) {
                      obj.data.layers[layer][type].push(push[type][j]);
                    }
                  }
                }
              }
            }
          }
          else if (layer == targetLayer) {
            for (var type in push) {
              for (var j=0; j<push[type].length; j++) {
                if (push[type][j]) {
                  obj.data.layers[layer][type].push(push[type][j]);
                }
              }
            }
          }
          update.result = duplicate(obj.data.layers[layer]);
          boardApi.applyUpdate(getCookie("UserID"), update);
          runCommand("updateBoardLayer", update);
        }

        // perform the move
      }
    })
  }

  if (selections) {
    if (hasRights) {
      actionList.push({
        name : "To Back",
        click : function(ev, ui){
          var splice = {};
          var push = {
            t : [],
            p : [],
            d : [],
            w : []
          };
          var selected = selections;
          for (var i in selected) {
            if (obj.data.layers[selected[i].layer][selected[i].type][selected[i].index]) {
              push[selected[i].layer] = push[selected[i].layer] || {t : [], p : [], d : [], w : []};
              push[selected[i].layer][selected[i].type].push(duplicate(obj.data.layers[selected[i].layer][selected[i].type][selected[i].index]));
              splice[selected[i].layer] = splice[selected[i].layer] || {t : {indexs : []}, p : {indexs : []}, d : {indexs : []}, w : {indexs : []}};
              splice[selected[i].layer][selected[i].type].indexs.push(Number(selected[i].index));
              splice[selected[i].layer][selected[i].type].rebuild = 0;
              boardApi.selections[i].selected.visible = false;
            }
          }

          for (var layer in obj.data.layers) {
            var update = {
              id : obj.id(),
              layer : layer,
              rebuild : {}
            };
            var layerData = splice[layer];
            if (layerData) {
              for (var type in layerData) {
                var typeData = layerData[type];
                if (typeData.indexs.length && typeData.rebuild != null) {
                  update.cmd = "destroy";
                  update.rebuild[type] = typeData.rebuild;

                  typeData.indexs.sort();
                  for (var idx=typeData.indexs.length-1; idx>=0; idx--) {
                    obj.data.layers[layer][type].splice(typeData.indexs[idx], 1);
                  }
                  for (var j=push[layer][type].length-1; j>=0; j--) {
                    util.insert(obj.data.layers[layer][type], 0, push[layer][type][j]);
                  }
                }
              }
            }
            update.result = duplicate(obj.data.layers[layer]);
            boardApi.applyUpdate(getCookie("UserID"), update);
            runCommand("updateBoardLayer", update);
          }
          boardApi.selections = {};
        }
      });
      actionList.push({
        name : "To Front",
        click : function(ev, ui){
          var splice = {};
          var push = {
            t : [],
            p : [],
            d : [],
            w : []
          };
          var selected = selections;

          for (var i in selected) {
            if (obj.data.layers[selected[i].layer][selected[i].type][selected[i].index]) {
              push[selected[i].layer] = push[selected[i].layer] || {t : [], p : [], d : [], w : []};
              push[selected[i].layer][selected[i].type].push(duplicate(obj.data.layers[selected[i].layer][selected[i].type][selected[i].index]));
              splice[selected[i].layer] = splice[selected[i].layer] || {t : {indexs : []}, p : {indexs : []}, d : {indexs : []}, w : {indexs : []}};
              splice[selected[i].layer][selected[i].type].indexs.push(Number(selected[i].index));
              if (splice[selected[i].layer][selected[i].type].rebuild == null || splice[selected[i].layer][selected[i].type].rebuild > selected[i].index) {
                splice[selected[i].layer][selected[i].type].rebuild = Number(selected[i].index);
              }
              boardApi.selections[i].selected.visible = false;
            }
          }

          for (var layer in obj.data.layers) {
            var update = {
              id : obj.id(),
              layer : layer,
              rebuild : {}
            };
            var layerData = splice[layer];
            if (layerData) {
              for (var type in layerData) {
                var typeData = layerData[type];
                if (typeData.indexs.length && typeData.rebuild != null) {
                  update.cmd = "destroy";
                  update.rebuild[type] = typeData.rebuild;

                  typeData.indexs.sort();
                  for (var idx=typeData.indexs.length-1; idx>=0; idx--) {
                    obj.data.layers[layer][type].splice(typeData.indexs[idx], 1);
                  }
                  for (var j=0; j<push[layer][type].length; j++) {
                    if (push[layer][type][j]) {
                      obj.data.layers[layer][type].push(push[layer][type][j]);
                    }
                  }
                }
              }
            }
            update.result = duplicate(obj.data.layers[layer]);
            boardApi.applyUpdate(getCookie("UserID"), update);
            runCommand("updateBoardLayer", update);
          }
          boardApi.selections = {};
        }
      });
      actionList.push({
        name : "To Layer",
        submenu : layerChoices
      });
    }
  }

  if (app.attr("background") == "true") {
    if (!selections) {
      actionList.push({
        name : "Exit Build Mode",
        click : function(ev, ui){
          if (boardApi.saveChanges(obj, true)) {
            app.removeAttr("background");
            app.removeAttr("ignore");
            app.removeAttr("local");

            layout.coverlay("save-changes");
          }
        }
      });
    }
  }
  else {
    if (!selections) {
      if (hasRights) {
        actionList.push({
          name : "Create Asset",
          click : function(ev, ui){
            var content = sync.render("ui_assetPicker")(obj, app, {
              category : "c",
              select : function(ev, ui, ent, options, entities){
                var newP = {
                  x : xPos,
                  y : yPos,
                  w : (data.pW || data.gridW || 64),
                  h : (data.pH || data.gridH || 64),
                  d : (data.pD || null),
                  c : (data.pC || null),
                  eID : ent.id(),
                  i : (ent.data.info.img != null)?(ent.data.info.img.min):(null)
                };
                if (ent.data._t == "c") {
                  ent = duplicate(ent);
                  var context = sync.defaultContext();
                  context[ent.data._t] = ent.data;

                  for (var i in ent.data.info.img.modifiers) {
                    var val = ent.data.info.img.modifiers[i];
                    if (val) {
                      newP[i] = val;
                    }
                  }
                  if (ent.data.info.img.modifiers) {
                    if (ent.data.info.img.modifiers.w) {
                      newP.w = Math.max(newP.w/(data.options.unitScale || 1), 10);
                    }
                    if (ent.data.info.img.modifiers.h) {
                      newP.h = Math.max(newP.h/(data.options.unitScale || 1), 10);
                    }
                  }
                }
                boardApi.addObject(newP, scope.layer, "p", obj);
                layout.coverlay("add-asset");
              }
            });
            var pop = ui_popOut({
              target : $("body"),
              prompt : true,
              id : "add-asset",
              title : "Add Asset",
              style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
            }, content);
            pop.resizable();
          }
        });
        actionList.push({
          name : "Create Token",
          click : function(ev, ui){
            var newP = {
              x : xPos,
              y : yPos,
              w : (data.pW || data.gridW || 64),
              h : (data.pH || data.gridH || 64),
              d : (data.pD || null),
              c : (data.pC || "rgba(255,255,255,1)"),
            };
            boardApi.addObject(newP, scope.layer, "p", obj);
          }
        });
        actionList.push({
          name : "Create Image",
          click : function(ev, ui){
            var picker = sync.render("ui_filePicker")(obj, app, {
              filter : "img",
              change : function(ev, ui2, value) {
                if (value) {
                  var img = new Image();
                  img.src = value;
                  img.onload = function(){
                    var newP = {
                      x : xPos, y : yPos,
                      w : Math.min(this.naturalWidth, (data.pW || data.gridW || 64)), h : Math.min(this.naturalHeight, (data.pH || data.gridH || 64)),
                      i : value
                    };
                    boardApi.addObject(newP, scope.layer, "p", obj);
                    layout.coverlay("icons-picker");
                  }
                }
              }
            });
            var pop = ui_popOut({
              target : ui,
              prompt : true,
              align : "right",
              id : "icons-picker",
              style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
            }, picker);
            pop.resizable();
          }
        });
      }
      else {
        actionList.push({
          name : "Create Token",
          click : function(ev, ui) {
            var ent = getPlayerCharacter(getCookie("UserID"));
            if (ent && ent.data) {
              var proceed = true;
              for (var i in data.layers[scope.layer].p) {
                if (data.layers[scope.layer].p[i].eID == game.players.data[getCookie("UserID")].entity) {
                  proceed = false;
                  break;
                }
              }
              if (proceed) {
                var newP = {
                  x : xPos,
                  y : yPos,
                  w : (data.pW || data.gridW || 64),
                  h : (data.pH || data.gridH || 64),
                  d : (data.pD || null),
                  c : (game.players.data[getCookie("UserID")].color || data.pC || null),
                  eID : game.players.data[getCookie("UserID")].entity,
                  i : (ent.data.info.img != null)?(ent.data.info.img.min):(null)
                };
                if (ent.data._t == "c") {
                  ent = duplicate(ent);
                  var context = sync.defaultContext();
                  context[ent.data._t] = ent.data;

                  for (var i in ent.data.info.img.modifiers) {
                    var val = ent.data.info.img.modifiers[i];
                    if (val) {
                      newP[i] = val;
                    }
                  }
                  if (ent.data.info.img.modifiers) {
                    if (ent.data.info.img.modifiers.w) {
                      newP.w = Math.max(newP.w/(data.options.unitScale || 1), 10);
                    }
                    if (ent.data.info.img.modifiers.h) {
                      newP.h = Math.max(newP.h/(data.options.unitScale || 1), 10);
                    }
                  }
                }
                runCommand("createPiece", {id : obj.id(), layer : scope.layer, data : newP});
              }
              else {
                sendAlert({text : "You have already been placed!"});
              }
            }
            else {
              sendAlert({text : "You are not impersonating a character"});
            }
          }
        });
      }
    }
    else if (hasRights && (boardApi.fog[obj.id()] && boardApi.fog[obj.id()].length)) {
      actionList.push({
        name : "Selection Vision",
        click : function(ev, ui) {
          app.attr("UserID", "default");
          boardApi.rebuildFog(obj, app);
          for (var i in boardApi.apps[app.attr("id")].views) {
            boardApi.apps[app.attr("id")].views[i].destroy(true);
            delete boardApi.apps[app.attr("id")].views[i];
          }
          for (var key in boardApi.selections) {
            var selectData = boardApi.selections[key];
            if (selectData.app == app.attr("id") && selectData.type == "p") {
              var pieceData = obj.data.layers[selectData.layer][selectData.type][selectData.index];
              var range;
              if (pieceData.eID && pieceData.o && pieceData.o.Sight) {
                var ent = getEnt(pieceData.eID);
                var context = sync.defaultContext();
                if (ent && ent.data) {
                  context[ent.data._t] = duplicate(ent.data);
                }
                var auraData = pieceData.o.Sight;
                range = boardApi.scale(sync.eval(auraData.d, context), obj, true);
              }
              boardApi.apps[app.attr("id")].views[selectData.layer+"-"+selectData.type+"-"+selectData.index] = boardApi.buildDynamicFog(obj, app, pieceData.x + pieceData.w/2, pieceData.y + pieceData.h/2, range);
              boardApi.rebuildDynamicFog(obj, app);
            }
          }
        }
      });
    }
  }
  if (app.attr("UserID") == "default" && (boardApi.fog[obj.id()] && boardApi.fog[obj.id()].length)) {
    actionList.push({
      name : "Restore Vision",
      click : function(ev, ui) {
        app.removeAttr("UserID");
        obj.update();
      }
    });
  }
  else if (app.attr("UserID")) {
    actionList.push({
      name : "Exit Player Vision",
      click : function(ev, ui) {
        app.removeAttr("UserID");
        obj.update();
      }
    });
  }
  if (app.attr("hidemenu")) {
    actionList.push({
      name : "Show Menu",
      click : function(ev, ui) {
        $("#"+app.attr("id")+"-menuu-"+obj.id()).show();
        app.removeAttr("hidemenu");
      }
    });
  }
  else {
    actionList.push({
      name : "Hide Menu",
      click : function(ev, ui) {
        $("#"+app.attr("id")+"-menuu-"+obj.id()).hide();
        app.attr("hidemenu", true);
      }
    });
  }
  if (hasRights) {
    var submenu = [
      {name : "All Players", click : function(){runCommand("command", {cmd : "forceToPoint", id : obj.id(), x : xPos, y : yPos, zoom : app.attr("zoom")});}}
    ];
    for (var k in game.players.data) {
      submenu.push({name : game.players.data[k].displayName || k, attr : {player : k}, click : function(ev, ui){runCommand("command", {cmd : "forceToPoint", id : obj.id(), x : xPos, y : yPos, userID : ui.attr("player"), zoom : app.attr("zoom")});}});
    }
    actionList.push({
      name : "Focus on point...",
      submenu : submenu,
      click : function(ev, ui){
        runCommand("command", {cmd : "forceToPoint", id : obj.id(), x : xPos, y : yPos, zoom : app.attr("zoom")});
      }
    });
  }

  return actionList;
}

boardApi.revealLayers = function(obj, app) {
  var data = obj.data;

  var userID = app.attr("UserID") || getCookie("UserID");
  var hasRights = hasSecurity(userID, "Rights", data) || hasSecurity(userID, "Game Master");
  var stage = boardApi.apps[app.attr("id")].stage;
  for (var lid in data.layers) {
    var layerData = data.layers[lid];
    var playerVision = app.attr("UserID") && !layerData.h && (!layerData._s || layerData._s.default == 1);
    var layerVisible = !layerData.h && (hasRights || hasSecurity(userID, "Visible", layerData));
    layerVisible = layerVisible || (lid == app.attr("layer"));

    var layerCont = stage.children[1].children[lid];
    if (playerVision || (!app.attr("UserID") && layerVisible)) {
      layerCont.visible = true;
    }
    else {
      layerCont.visible = false;
    }
    playerVision = null;
    layerVisible = null;

    var pieces = data.layers[lid].p;

    for (var pid in pieces) {
      var pieceData = pieces[pid];
      if (pieceData.l) {
        var lyr = stage.children[1].children[lid];
        if (lyr && lyr.children && lyr.children[2] && lyr.children[2].children) {
          var pce = lyr.children[2].children[pid];
          if (pce) {
            pce.update();
          }
        }
      }
    }
  }
}

boardApi.updateLayer = function(layer, rebuild, obj, cmd) {
  var update = {
    layer : layer,
    id : obj.id(),
    rebuild : rebuild || {"r" : true},
    cmd : cmd,
    result : duplicate(obj.data.layers[layer])
  };
  boardApi.applyUpdate(getCookie("UserID"), update);
  runCommand("updateBoardLayer", update);
}

boardApi.addObject = function(pieceData, layer, type, obj) {
  var update = {
    layer : layer,
    id : obj.id(),
    cmd : "create",
    type : type,
    data : pieceData,
  };
  if (type == "r" || type == "w" || (pieceData.eID && obj.data.options.fog)){
    update.rebuild = update.rebuild || {};
    update.rebuild.r = true;
  }
  obj.data.layers[layer][type].push(pieceData);
  update.result = duplicate(obj.data.layers[layer]);
  update.index = obj.data.layers[layer][type].length-1;
  boardApi.applyUpdate(getCookie("UserID"), update);
  runCommand("updateBoardLayer", update);
}

boardApi.destroyObject = function(layer, type, index, obj) {
  var update = {
    layer : layer,
    id : obj.id(),
    cmd : "destroy",
    type : type,
  };
  var pieceData = duplicate(obj.data.layers[layer][type][index]);
  obj.data.layers[layer][type].splice(index, 1);
  update.result = duplicate(obj.data.layers[layer]);
  update.index = index;
  update.rebuild = {};
  update.rebuild[type] = update.index;
  if (type == "r" || type == "w" || (pieceData.eID && obj.data.options.fog)){
    update.rebuild = update.rebuild || {};
    update.rebuild.r = true;
  }
  boardApi.applyUpdate(getCookie("UserID"), update);
  runCommand("updateBoardLayer", update);
}

boardApi.clearSelection = function(app) {
  for (var key in boardApi.selections) {
    var selectData = boardApi.selections[key];
    if (!app || app.attr("id") == selectData.app) {
      selectData.wrap.unselect();
      delete boardApi.selections[key];
    }
  }
}

boardApi.updateObject = function(layer, type, index, board) {
  $(".application[ui-name='ui_board']").each(function(){
    var userID = $(this).attr("UserID") || getCookie("UserID");
    if ($(this).attr("index") == board.id()) {
      var stage = boardApi.apps[$(this).attr("id")].stage;
      var layerData = board.data.layers[layer];
      var layerCont = stage.children[1].children[layer];
      if (layerCont && layerCont.children && layerCont.children.length) {
        if (type == "p") {
          var pieces = layerCont.children[2];
          if (pieces.children && pieces.children[index]) {
            // naively rebuild because I don't know how to update transformations
            pieces.removeChildren();
            var fogRebuild = false;
            for (var i=0; i<layerData[type].length; i++) {
              var pieceData = layerData[type][i];
              var newChild = boardApi.createPiece({data : pieceData, index : i, layer : layer}, board, $(this), {layer : layer});
              pieces.addChild(newChild);
              var selectData = boardApi.selections[board.id()+"-"+layer+"-"+type+"-"+i];
              if (selectData && selectData.app == $(this).attr("id")) {
                newChild.select();
              }
              if (boardApi.fog[board.id()] && boardApi.fog[board.id()].length) { // if dynamic fog
                // rebuild dynamic fog cache
                if (pieceData.eID) {
                  var ent = getEnt(pieceData.eID);
                  if (ent && ent.data && ent.data._t == "c") {
                    if (hasSecurity(userID, "Visible", ent.data)) {
                      fogRebuild = true;
                    }
                  }
                }
              }
            }
            if (fogRebuild) {
              boardApi.rebuildFog(board, $(this));
            }
          }
        }
        else if (type == "d") {
          var drawings = layerCont.children[3];
          if (drawings.children && drawings.children[index]) {
            drawings.removeChildren();
            for (var i=0; i<layerData[type].length; i++) {
              var newChild = boardApi.createDrawing({data : layerData[type][i], index : i, layer : layer}, board, $(this), {layer : layer});
              drawings.addChild(newChild);

              var selectData = boardApi.selections[board.id()+"-"+layer+"-"+type+"-"+i];
              if (selectData && selectData.app == $(this).attr("id")) {
                newChild.select();
              }
            }
          }
        }
        else if (type == "t") {
          var tiles = layerCont.children[1];
          if (tiles.children && tiles.children[index]) {
            tiles.removeChildren();
            for (var i=0; i<layerData[type].length; i++) {
              var newChild = boardApi.createTile({data : layerData[type][i], index : i, layer : layer}, board, $(this), {layer : layer});
              tiles.addChild(newChild);

              var selectData = boardApi.selections[board.id()+"-"+layer+"-"+type+"-"+i];
              if (selectData && selectData.app == $(this).attr("id")) {
                newChild.select();
              }
            }
          }
        }
      }
    }
  });
};

boardApi.moveObject = function(layer, type, index, board, newData, oldData, speed) {
  $(".application[ui-name='ui_board']").each(function(){
    var stage = boardApi.apps[$(this).attr("id")].stage;
    var layerData = board.data.layers[layer];
    var layerCont = stage.children[1].children[layer];
    if (layerCont && layerCont.children && layerCont.children.length) {
      if (type == "p") {
        var pieces = layerCont.children[2];
        if (pieces.children && pieces.children[index]) {
          pieces.children[index].animate(newData, oldData, speed);
        }
      }
      else if (type == "d") {
        var drawings = layerCont.children[3];
        if (drawings.children && drawings.children[index]) {
          drawings.children[index].animate(newData, oldData, speed);
        }
      }
      else if (type == "t") {
        var tiles = layerCont.children[1];
        if (tiles.children && tiles.children[index]) {
          tiles.children[index].animate(newData, oldData, speed);
        }
      }
    }
  });
}

boardApi.applyUpdate = function(userID, data, last) {
  if (data.cmd == "destroy") {
    if (game.locals["pieceBuilding"] && game.locals["pieceBuilding"].data) {
      delete game.locals["pieceBuilding"].data.layer;
      delete game.locals["pieceBuilding"].data.piece;
      game.locals["pieceBuilding"].update();
    }
  }
  var board = getEnt(data.id);
  if (board) {
    // found the board, now update it
    board.data.layers[data.layer] = data.result;
    $(".application[ui-name='ui_board']").each(function(){
      if (boardApi.apps[$(this).attr("id")] && boardApi.apps[$(this).attr("id")].board == data.id) {
        var stage = boardApi.apps[$(this).attr("id")].stage;
        var layer = stage.children[1].children[data.layer];
        var layerData = board.data.layers[data.layer];
        var hasRights = hasSecurity(getCookie("UserID"), "Rights", board.data) || hasSecurity(getCookie("UserID"), "Game Master");
        var playerVision = $(this).attr("UserID") && !layerData.h && (!layerData._s || layerData._s.default == 1);
        var layerVisible = !layerData.h && (hasRights || hasSecurity(getCookie("UserID"), "Visible", layerData));
        layerVisible = layerVisible || (data.layer == $(this).attr("layer"));

        if (layer && layer.children && layer.children.length) {
          if (playerVision || (!$(this).attr("UserID") && layerVisible)) {
            layer.visible = true;
          }
          else {
            layer.visible = false;
          }
          // add any missing pieces
          var tiles = layer.children[1];
          if (tiles.children && tiles.children.length) {
            if (data.cmd == "destroy") {
              tiles.removeChildren();
              for (var i=0; i<layerData.t.length; i++) {
                var newChild = boardApi.createTile({data : layerData.t[i], index : i, layer : data.layer}, board, $(this), {layer : data.layer});
                tiles.addChild(newChild);

                var selectData = boardApi.selections[board.id()+"-"+data.layer+"-"+data.type+"-"+i];
                if (selectData && selectData.app == $(this).attr("id")) {
                  newChild.select();
                }
              }
            }
            else {
              if (data.rebuild && data.rebuild.t != null) {
                var len = tiles.children.length;
                for (var i=data.rebuild.t; i<len; i++) {
                  if (data.cmd == "destroy" && i >= layerData.p.length) {
                    tiles.children[tiles.children.length-1].parent.removeChild(tiles.children[tiles.children.length-1]);
                  }
                  else {
                    tiles.children[i].update(board.data.layers.t[data.type][i]);
                  }
                }
              }
              var start = tiles.children.length;
              while (layerData.t.length > tiles.children.length) {
                tiles.addChild(boardApi.createTile({data : layerData.t[start], index : start, layer : data.layer}, board, $(this), {layer : data.layer}));
                start++;
              }
            }
          }
          else {
            for (var i=0; i<layerData.t.length; i++) {
              tiles.addChild(boardApi.createTile({data : layerData.t[i], index : i, layer : data.layer}, board, $(this), {layer : data.layer}));
            }
          }
          var pieces = layer.children[2];
          if (pieces.children && pieces.children.length) {
            if (data.cmd == "destroy") {
              data.rebuild = data.rebuild || {};
              data.rebuild.r = true;
              pieces.removeChildren();
              for (var i=0; i<layerData.p.length; i++) {
                var newChild = boardApi.createPiece({data : layerData.p[i], index : i, layer : data.layer}, board, $(this), {layer : data.layer});
                pieces.addChild(newChild);

                var selectData = boardApi.selections[board.id()+"-"+data.layer+"-"+data.type+"-"+i];
                if (selectData && selectData.app == $(this).attr("id")) {
                  newChild.select();
                }
              }
            }
            else {
              if (data.rebuild && data.rebuild.p != null) {
                var len = pieces.children.length;
                for (var i=data.rebuild.p; i<len; i++) {
                  if (data.cmd == "destroy" && i >= layerData.p.length) {
                    pieces.children[pieces.children.length-1].parent.removeChild(pieces.children[pieces.children.length-1]);
                  }
                  else {
                    pieces.children[i].update(board.data.layers[data.layer].p[i]);
                  }
                }
              }
              var start = pieces.children.length;
              while (layerData.p.length > pieces.children.length) {
                pieces.addChild(boardApi.createPiece({data : layerData.p[start], index : start, layer : data.layer}, board, $(this), {layer : data.layer}));
                start++;
              }
            }
          }
          else {
            for (var i=0; i<layerData.p.length; i++) {
              pieces.addChild(boardApi.createPiece({data : layerData.p[i], index : i, layer : data.layer}, board, $(this), {layer : data.layer}));
            }
          }
          var drawings = layer.children[3];
          if (drawings.children && drawings.children.length) {
            if (data.cmd == "destroy") {
              drawings.removeChildren();
              for (var i=0; i<layerData.d.length; i++) {
                var newChild = boardApi.createDrawing({data : layerData.d[i], index : i, layer : data.layer}, board, $(this), {layer : data.layer});
                drawings.addChild(newChild);

                var selectData = boardApi.selections[board.id()+"-"+data.layer+"-"+data.type+"-"+i];
                if (selectData && selectData.app == $(this).attr("id")) {
                  newChild.select();
                }
              }
            }
            else {
              if (data.rebuild && data.rebuild.d != null) {
                var len = drawings.children.length;
                for (var i=data.rebuild.d; i<len; i++) {
                  drawings.children[i].update(board.data.layers[data.layer].d[i]);
                }
              }
              var start = drawings.children.length;
              while (layerData.d.length > drawings.children.length) {
                drawings.addChild(boardApi.createDrawing({data : layerData.d[start], index : start, layer : data.layer}, board, $(this), {layer : data.layer}));
                start++;
              }
            }
          }
          else {
            for (var i=0; i<layerData.d.length; i++) {
              drawings.addChild(boardApi.createDrawing({data : layerData.d[i], index : i, layer : data.layer}, board, $(this), {layer : data.layer}));
            }
          }

          var walls = layer.children[4];
          if (walls.children && walls.children.length) {
            if (data.cmd == "destroy") {
              walls.removeChildren();
              for (var i=0; i<layerData.w.length; i++) {
                var newChild = boardApi.createWall({data : layerData.w[i], index : i, layer : data.layer}, board, $(this), {layer : data.layer});
                walls.addChild(newChild);

                var selectData = boardApi.selections[board.id()+"-"+data.layer+"-"+data.type+"-"+i];
                if (selectData && selectData.app == $(this).attr("id")) {
                  newChild.select();
                }
              }
            }
            else {
              if (data.rebuild && data.rebuild.w != null) {
                var len = walls.children.length;
                for (var i=data.rebuild.w; i<len; i++) {
                  walls.children[i].update(board.data.layers[data.layer].w[i]);
                }
              }
              var start = walls.children.length;
              while (layerData.w.length > walls.children.length) {
                walls.addChild(boardApi.createWall({data : layerData.w[start], index : start, layer : data.layer}, board, $(this), {layer : data.layer}));
                start++;
              }
            }
          }
          else {
            for (var i=0; i<layerData.w.length; i++) {
              walls.addChild(boardApi.createWall({data : layerData.w[i], index : i, layer : data.layer}, board, $(this), {layer : data.layer}));
            }
          }
          if (data.rebuild && data.rebuild.r) {
            // updateTriggers
            for (var trigID in boardApi.triggers.cache[board.id()]) {
              var split = trigID.split("-");
              var tL = split[0];
              var tI = split[1];
              var lyr = stage.children[1].children[tL];
              if (lyr && lyr.children && lyr.children[2] && lyr.children[2].children) {
                var pce = lyr.children[2].children[tI];
                if (pce) {
                  pce.update();
                }
              }
            }
          }
          if (board.data.options.fog) {
            boardApi.rebuildFog(board, $(this));
          }
        }

        if ($(this).attr("configuring") == "manage") {
          var scope = {
            viewOnly : ($(this).attr("viewOnly") == "true"),
            local : ($(this).attr("local") == "true"),
            layer : $(this).attr("layer"),
            noOptions : ($(this).attr("noOptions") == "true")
          };
          var parent = $("#"+$(this).attr("id")+"-menu-"+board.id());
          parent.replaceWith(boardApi.buildMenu(board, $(this), scope));
        }
      }
    });
    for (var i in boardApi.selections) {
      var selectData = boardApi.selections[i];
      if (selectData.board == data.id) {
        if (!board.data.layers[selectData.layer] || !board.data.layers[selectData.layer][selectData.type] || !board.data.layers[selectData.layer][selectData.type][selectData.index]) {
          delete boardApi.selections[i];
        }
      }
    }
  }
}

boardApi.scrollTo = function(app, xPos, yPos, blend) {
  var zoom = app.attr("zoom") / 100;
  var stage = boardApi.apps[app.attr("id")].stage;
  app.attr("scrollLeft", Number(xPos));
  app.attr("scrollTop", Number(yPos));
  if (blend) {
    stage.dX = Math.round(-xPos*zoom + app.attr("divWidth")/2);
    stage.dY = Math.round(-yPos*zoom + app.attr("divHeight")/2);
  }
  else {
    stage.x = (-xPos*zoom + app.attr("divWidth")/2);
    stage.y = (-yPos*zoom + app.attr("divHeight")/2);
  }
}

boardApi.entListen = function(entID){
  var ent = getEnt(entID);
  if (ent && ent.data) {
    ent.listen["healthbars"] = function(oldObj, newObj, override){
      setTimeout(function(){
        for (var i in boardApi.apps) {
          var app = $("#"+i);
          var layers = boardApi.apps[i].stage.children[1];
          if (layers && layers.children) {
            for (var lid in layers.children) {
              var layerCanvas = layers.children[lid];
              if (layerCanvas && layerCanvas.children) {
                if (layerCanvas.children[2] && layerCanvas.children[2].children) {
                  for (var index in layerCanvas.children[2].children) { // pieces
                    var piece = layerCanvas.children[2].children[index];
                    var board = getEnt(boardApi.apps[i].board);
                    if (board.data && board.data.layers[lid] && board.data.layers[lid].p[index]) {
                      var pieceData = board.data.layers[lid].p[index];
                      if (pieceData && pieceData.eID == entID) {
                        piece.animate(pieceData, null, 1);
                        if (boardApi.fog[board.id()] && boardApi.fog[board.id()].length) { // if dynamic fog
                          var ent = getEnt(pieceData.eID);
                          if (ent && ent.data && ent.data._t == "c" && hasSecurity(getCookie("UserID"), "Visible", ent.data)) {
                            var range;
                            if (pieceData.o && pieceData.o.Sight) {
                              var ent = getEnt(pieceData.eID);
                              var context = sync.defaultContext();
                              if (ent && ent.data) {
                                context[ent.data._t] = duplicate(ent.data);
                              }
                              var auraData = pieceData.o.Sight;
                              range = boardApi.scale(sync.eval(auraData.d, context), board, true);
                            }
                            boardApi.apps[i].views[lid+"-p-"+index] = boardApi.buildDynamicFog(board, app, pieceData.x + pieceData.w/2, pieceData.y + pieceData.h/2, range);
                            boardApi.rebuildDynamicFog(board, app);
                          }
                          else if (boardApi.apps[i].views[lid+"-p-"+index]) {
                            boardApi.apps[i].views[lid+"-p-"+index].destroy(true);
                            delete boardApi.apps[i].views[lid+"-p-"+index];
                            boardApi.rebuildDynamicFog(board, app);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },10);
      return true;
    }
  }
}

boardApi.endDragEvent = function(ev){
  if (boardApi.dragging) {
    boardApi.dragging.end(ev);
    delete boardApi.dragging;
  }
}

boardApi.newDragEvent = function(options, ev){
  boardApi.endDragEvent(ev);
  boardApi.dragging = options;
}

function buildBoardIcon(data, width, height, noOffset) {
  var zoom = 1;
  var isHex;
  if (data.options && data.options.hex) {
    isHex = true;
  }

  var layerCanvas = $("<canvas>");
  layerCanvas.attr("height", width || "100px");
  layerCanvas.attr("width", height || "100px");

  var scale = Math.max(Math.max(100/data.w, 100/data.h), 0.25);

  var xPos = scale * data.w/-4;
  var yPos = scale * data.h/-4;
  if (noOffset) {
    xPos = 0;
    yPos = 0;
  }

  layerCanvas.scaleCanvas({
    x : xPos,
    y : yPos,
    scale : scale,
  });

  for (var lid in data.layers) {
    var layerData = data.layers[lid];
    var tiles = layerData.t;

    for (var index in tiles) {
      var decorData = tiles[index];
      var sheetData = data.sheets[decorData.s];
      var tileW = sheetData.gW + sheetData.p;
      var tileH = sheetData.gH + sheetData.p;
      var xGrid = Math.ceil(sheetData.w/(tileW));
      var yGrid = Math.ceil(sheetData.h/(tileH));

      var sX = (decorData.i % xGrid) * tileW;
      var sY = Math.floor(decorData.i / xGrid) * tileH;
      if (decorData.t && (decorData.w >= (data.gridW || decorData.w) && decorData.h >= (data.gridH || decorData.h)) && !(isHex)) {
        var tileX = (decorData.gW || 1) * sheetData.gW + ((decorData.gW || 1)-1) * sheetData.p;
        var tileY = (decorData.gH || 1) * sheetData.gH + ((decorData.gH || 1)-1) * sheetData.p;
        var gridX = Math.floor((decorData.w || data.gridW)/tileX);
        var gridY = Math.floor((decorData.h || data.gridH)/tileY);
        var width = (tileX || decorData.w || data.gridW);
        var height = (tileY || decorData.h || data.gridH);
        for (var x=0; x<gridX; x++) {
          for (var y=0; y<gridY; y++) {
            try {
              layerCanvas.drawImage({
                source : sheetData.i,
                x : (decorData.x + x * width) * zoom,
                y : (decorData.y + y * height) * zoom,
                width : width * zoom,
                height : height * zoom,
                sWidth: tileX,
                sHeight: tileY,
                sx: sX, sy: sY,
                fromCenter : false,
                rotate : decorData.r || 0,
              });
            }
            catch (err) {
              layerCanvas.drawImage({
                source : "/content/error.png",
                x : (decorData.x + x * width) * zoom,
                y : (decorData.y + y * height) * zoom,
                width : width * zoom,
                height : height * zoom,
                sWidth: tileX,
                sHeight: tileY,
                sx: sX, sy: sY,
                fromCenter : false,
                rotate : decorData.r || 0,
              });
            }
          }
        }
      }
      else {
        try {
          layerCanvas.drawImage({
            source : sheetData.i,
            x : decorData.x * zoom,
            y : decorData.y * zoom,
            width : (decorData.w || data.gridW) * zoom,
            height : (decorData.h || data.gridH) * zoom,
            sWidth: (decorData.gW || 1) * sheetData.gW + ((decorData.gW || 1)-1) * sheetData.p,
            sHeight: (decorData.gH || 1) * sheetData.gH + ((decorData.gH || 1)-1) * sheetData.p,
            sx: sX, sy: sY,
            fromCenter: false,
            rotate : decorData.r || 0,
          });
        }
        catch (err) {
          layerCanvas.drawImage({
            source : "/content/error.png",
            x : decorData.x * zoom,
            y : decorData.y * zoom,
            width : (decorData.w || data.gridW) * zoom,
            height : (decorData.h || data.gridH) * zoom,
            sWidth: (decorData.gW || 1) * sheetData.gW + ((decorData.gW || 1)-1) * sheetData.p,
            sHeight: (decorData.gH || 1) * sheetData.gH + ((decorData.gH || 1)-1) * sheetData.p,
            sx: sX, sy: sY,
            fromCenter: false,
            rotate : decorData.r || 0,
          });
        }
      }
    }
  }
  return layerCanvas;
}

sync.render("ui_boardCard", function(obj, app, scope){
  var data = obj.data;
  var info = data.info;
  var charContainer = $("<div>");
  charContainer.addClass("flexcolumn flexmiddle");
  charContainer.attr("index", obj.id());

  var charOutline = $("<div>").appendTo(charContainer);
  charOutline.addClass("outline");
  charOutline.css("cursor", "pointer");
  if (!scope.viewOnly) {
    charOutline.addClass("hover3");
  }
  var optionsBar = $("<div>").appendTo(charOutline);
  optionsBar.addClass("flexaround");

  if (hasSecurity(getCookie("UserID"), "Rights", data) && !scope.viewOnly) {
    var deleteButton = genIcon("trash").appendTo(optionsBar);
    deleteButton.attr("title", "Delete Board");
    deleteButton.click(function() {
      var popOut = ui_prompt({
        target : $(this),
        id : "confirm-delete-board",
        confirm : "Delete Board",
        click : function(){
          runCommand("deleteAsset", {id: obj.id()});
          delete game.entities.data[obj.id()];
          game.entities.update();
        }
      });
    });

    var dupe = genIcon("duplicate");
    dupe.appendTo(optionsBar);
    dupe.attr("title", "Duplicate this Board");
    dupe.click(function(){
      runCommand("createPage", data);
    });

    var security = genIcon("lock").appendTo(optionsBar);
    security.attr("title", "Configure who can access this");
    security.click(function(){
      var content = sync.newApp("ui_rights");
      obj.addApp(content);

      var frame = ui_popOut({
        target : $(this),
        align : "bottom",
        id : "ui-rights-dialog",
      }, content);
    });
  }

  var charDiv = $("<div>").appendTo(charOutline);
  charDiv.css("overflow-y", "hidden");
  charDiv.css("min-width", "8em");
  charDiv.attr("index", obj.id());
  charDiv.css("cursor", "pointer");
  charDiv.click(function(ev){
    if (scope.click) {
      scope.click(ev, $(this), obj);
    }
  });
  if (!data.info) {
    data.info = {name : sync.newValue(null, data.name)};
  }
  var title = $("<b style='text-align : center;'>"+sync.rawVal(data.info.name)+"</b>").appendTo(charDiv);
  title.addClass("flexmiddle outlinebottom");

  if (sync.rawVal(data.info.name) && sync.rawVal(data.info.name).length > 20) {
    title.addClass("subtitle");
    title.css("text-align", "center");
    if (sync.rawVal(data.info.name).length > 35) {
      title.text(sync.rawVal(data.info.name).substring(0, 33)+"..");
    }
  }

  var zoom = 1;
  var isHex;
  if (data.options && data.options.hex) {
    isHex = true;
  }

  var icon = $("<div>").appendTo(charDiv);
  icon.addClass("flexmiddle");
  icon.css("position", "relative");
  icon.css("overflow", "hidden");

  var layerCanvas = $("<canvas>").appendTo(icon);
  layerCanvas.attr("height", "100px");
  layerCanvas.attr("width", "100px");

  var scale = Math.max(Math.max(100/data.w, 100/data.h), 0.25);

  layerCanvas.scaleCanvas({
    x : scale * data.w/-4,
    y : scale * data.h/-4,
    scale : scale,
  });

  if (data.map) {
    layerCanvas.drawImage({
      source : data.map,
      width : data.w,
      height : data.h,
      fromCenter: false,
    });
  }

  for (var lid in data.layers) {
    var layerData = data.layers[lid];
    var stamps = layerData.s;
    var tiles = layerData.t;

    for (var index in stamps) {
      var stampData = stamps[index];
      layerCanvas.drawImage({
        source : stampData.i,
        x : stampData.x * zoom,
        y : stampData.y * zoom,
        width : (stampData.w || data.gridW) * zoom,
        height : (stampData.h || data.gridH) * zoom,
        fromCenter: false,
        rotate : stampData.r || 0,
      });
    }

    for (var index in tiles) {
      var decorData = tiles[index];
      var sheetData = data.sheets[decorData.s];
      var tileW = sheetData.gW + sheetData.p;
      var tileH = sheetData.gH + sheetData.p;
      var xGrid = Math.ceil(sheetData.w/(tileW));
      var yGrid = Math.ceil(sheetData.h/(tileH));

      var sX = (decorData.i % xGrid) * tileW;
      var sY = Math.floor(decorData.i / xGrid) * tileH;
      if (decorData.t && (decorData.w >= (data.gridW || decorData.w) && decorData.h >= (data.gridH || decorData.h)) && !(isHex)) {
        var tileX = (decorData.gW || 1) * sheetData.gW + ((decorData.gW || 1)-1) * sheetData.p;
        var tileY = (decorData.gH || 1) * sheetData.gH + ((decorData.gH || 1)-1) * sheetData.p;
        var gridX = Math.floor((decorData.w || data.gridW)/tileX);
        var gridY = Math.floor((decorData.h || data.gridH)/tileY);
        var width = (tileX || decorData.w || data.gridW);
        var height = (tileY || decorData.h || data.gridH);
        for (var x=0; x<gridX; x++) {
          for (var y=0; y<gridY; y++) {
            layerCanvas.drawImage({
              source : sheetData.i,
              x : (decorData.x + x * width) * zoom,
              y : (decorData.y + y * height) * zoom,
              width : width * zoom,
              height : height * zoom,
              sWidth: tileX,
              sHeight: tileY,
              sx: sX, sy: sY,
              fromCenter : false,
              rotate : decorData.r || 0,
            });
          }
        }
      }
      else {
        if (isHex) {
          layerCanvas.drawLine({
            strokeStyle: 'rgba(0,0,0,0)',
            strokeWidth: 1,
            x1: (decorData.x) * zoom-1, y1: (decorData.y + (decorData.h || data.gridH)/2) * zoom,
            x2: (decorData.x + (decorData.w || data.gridW) * 4/16) * zoom, y2: (decorData.y) * zoom-1,
            x3: (decorData.x + (decorData.w || data.gridW) * 12/16) * zoom, y3: (decorData.y) * zoom-1,
            x4: (decorData.x + (decorData.w || data.gridW)) * zoom+1, y4: (decorData.y + (decorData.h || data.gridH)/2) * zoom,
            x5: (decorData.x + (decorData.w || data.gridW) * 12/16) * zoom, y5: (decorData.y + (decorData.h || data.gridH)) * zoom+1,
            x6: (decorData.x + (decorData.w || data.gridW) * 4/16) * zoom, y6: (decorData.y + (decorData.h || data.gridH)) * zoom+1,
            x7: (decorData.x) * zoom-1, y7: (decorData.y + (decorData.h || data.gridH)/2) * zoom,
            mask : true,
          }).drawImage({
            source : sheetData.i,
            x : decorData.x * zoom,
            y : decorData.y * zoom,
            width : (decorData.w || data.gridW) * zoom,
            height : (decorData.h || data.gridH) * zoom,
            sWidth: (decorData.gW || 1) * sheetData.gW + ((decorData.gW || 1)-1) * sheetData.p,
            sHeight: (decorData.gH || 1) * sheetData.gH + ((decorData.gH || 1)-1) * sheetData.p,
            sx: sX, sy: sY,
            fromCenter: false,
            rotate : decorData.r || 0,
          }).restoreCanvas();
        }
        else {
          layerCanvas.drawImage({
            source : sheetData.i,
            x : decorData.x * zoom,
            y : decorData.y * zoom,
            width : (decorData.w || data.gridW) * zoom,
            height : (decorData.h || data.gridH) * zoom,
            sWidth: (decorData.gW || 1) * sheetData.gW + ((decorData.gW || 1)-1) * sheetData.p,
            sHeight: (decorData.gH || 1) * sheetData.gH + ((decorData.gH || 1)-1) * sheetData.p,
            sx: sX, sy: sY,
            fromCenter: false,
            rotate : decorData.r || 0,
          });
        }
      }
    }
  }

  if (scope.label) {
    var labelDiv = $("<div>").appendTo(icon);
    labelDiv.addClass("alttext background outline subtitle");
    labelDiv.css("position", "absolute");
    labelDiv.css("padding", "2px");
    if (scope.label instanceof String) {
      labelDiv.append("<i>"+scope.label+"</i>");
    }
    else {
      labelDiv.append(scope.label);
    }
  }

  if (hasSecurity(getCookie("UserID"), "Owner", data) && !scope.viewOnly) {
    var syncLabel;
    if (data._c == -1) {
      syncLabel = genIcon("remove").appendTo(icon);
      syncLabel.addClass("alttext background outline");
      syncLabel.attr("title", "Duplicate to move to Asset Storage");
      syncLabel.css("right", "0");
      syncLabel.css("bottom", "0");
      syncLabel.css("position", "absolute");
      syncLabel.css("padding", "2px");
    }
    else {
      if (data._uid) {
        if (data._sync) {
          syncLabel = genIcon("refresh").appendTo(icon);
          syncLabel.addClass("alttext background outline");
          syncLabel.attr("title", "This is saved, and in-sync with Asset Storage");
          syncLabel.click(function(ev){
            runCommand("updateSync", {id : obj.id(), data : false});
            ev.stopPropagation();
            return false;
          });
        }
        else {
          syncLabel = genIcon("cloud").appendTo(icon);
          syncLabel.addClass("alttext background outline");
          syncLabel.attr("title", "This is saved, but is not in-sync with Asset Storage");
          syncLabel.click(function(ev){
            runCommand("updateSync", {id : obj.id(), data : true});
            ev.stopPropagation();
            return false;
          });
        }
      }
      else {
        syncLabel = genIcon("cloud").appendTo(icon);
        syncLabel.addClass("outline");
        syncLabel.css("background-color", "white");
        syncLabel.attr("title", "Enable Asset Storage");
        syncLabel.click(function(ev){
          var popOut = ui_prompt({
            target : $(this),
            id : "confirm-store-char",
            confirm : "Move to Asset Storage",
            click : function(){
              runCommand("storeAsset", {id: obj.id()});
              layout.coverlay("quick-storage-popout");
              syncLabel.remove();
            }
          });
          ev.stopPropagation();
          return false;
        });
      }
      syncLabel.css("right", "0");
      syncLabel.css("bottom", "0");
      syncLabel.css("position", "absolute");
      syncLabel.css("padding", "2px");
    }
  }

  return charContainer;
});

sync.render("ui_tab", function(obj, app, scope){
  var div = $("<b>");
  var fallbackName = "Unnamed Tab";
  if (obj && obj.data && obj.data.info) {
    fallbackName = sync.rawVal(obj.data.info.name);
  }
  div.text((app.attr("tabName") || fallbackName));
  if (app.attr("endTime") && (Number(app.attr("endTime")) - Date.now()) > -5000) {
    function check() {
      if (app.attr("endTime") && (Number(app.attr("endTime")) - Date.now()) > -5000) {
        div.text((app.attr("tabName") || fallbackName) + " - " + String(Math.max(0, Number(app.attr("endTime")) - Date.now())/1000*60).formatTime());
        setTimeout(check, 10);
      }
      else {
        div.text((app.attr("tabName") || fallbackName));
      }
    }
    setTimeout(check(), 10);
  }

  return div;
});

sync.render("ui_displayTabs", function(obj, app, scope) {
  if (!obj) {
    game.state.addApp(app);
    return $("<div>");
  }

  game.locals["tabAttrs-"+app.attr("id")] = game.locals["tabAttrs-"+app.attr("id")] || sync.obj();
  game.locals["tabAttrs-"+app.attr("id")].data = game.locals["tabAttrs-"+app.attr("id")].data || {};

  var noTab;

  if (app.attr("tab") == null && obj.data.tabs && obj.data.tabs.length) {
    setTimeout(function(){
      for (var key in obj.data.tabs) {
        var tabData = obj.data.tabs[key];
        if (tabData && (!tabData._s || hasSecurity(getCookie("UserID"), "Visible", tabData))) {
          app.attr("tab", key);
          noTab = key;
          break;
        }
      }
      obj.update();
    }, 10);
    return $("<div>");
  }

  var del = [];
  for (var key in obj.data.tabs) {
    var tabData = obj.data.tabs[key];
    if (!tabData || (tabData.index && tabData.index != "config" && (!getEnt(tabData.index) || !(getEnt(tabData.index).data)))) {
      del.push(key);
    }
  }
  del = del.reverse();
  for (var i in del) {
    obj.data.tabs.splice(del[i],1);
  }

  var data = obj.data;
  var resourcePath = app.attr("resourcePath");
  app.removeAttr("resourcePath");

  var displayApp = $("#"+app.attr("target"));
  displayApp.addClass("white");
  displayApp.attr("currentTab", app.attr("tab"));
  displayApp.attr("displayApp", true);

  var tabData = data.tabs[app.attr("tab")];
  var filterStr = "";
  if (tabData && tabData.data && tabData.data.options) {
    for (var key in tabData.data.options.effects) {
      if (key == "hue-rotate") {
        filterStr = filterStr + " " + key + "("+tabData.data.options.effects[key]+"deg)";
      }
      else {
        filterStr = filterStr + " " + key + "("+tabData.data.options.effects[key]+"%)";
      }
    }
  }
  displayApp.css("filter", filterStr);
  displayApp.css("transition", "");

  var boardTabs = $("<div>");
  boardTabs.addClass("flexrow flexwrap fit-x dropContent");
  boardTabs.css("font-size", "1.2em");
  if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
    boardTabs.sortable({
      over : function(ev, ui){
        if ($(ui.item).attr("index")) {
          if (!$("#"+app.attr("id")+"-drag-overlay").length) {
            var olay = layout.overlay({
              target : app,
              id : app.attr("id")+"-drag-overlay",
              style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
            });
            olay.addClass("flexcolumn flexmiddle alttext");
            olay.css("font-size", "2em");
            olay.css("pointer-events", "none");
            olay.append("<b>Drop to Add Tab</b>");
          }
        }
      },
      out : function(ev, ui) {
        layout.coverlay(app.attr("id")+"-drag-overlay");
      },
      update : function(ev, ui) {
        if (!$(ui.item).attr("tabKey")) {
          if ($(ui.item).attr("index")) {
            if ($(ui.item).attr("src")) {
              if ($(ui.item).attr("src") == "state") {
                game.state.update(); // refresh the list
              }
              else if ($(ui.item).attr("src") == "players") {
                game.players.update(); // refresh the list
              }
              else {
                getEnt($(ui.item).attr("src")).update(); // refresh the list
              }
            }
            else {
              game.entities.update(); // refresh the list
            }

            game.state.data.tabs = game.state.data.tabs || [];
            var charObj = getEnt($(ui.item).attr("index"));
            var useTab = true;
            for (var i in game.state.data.tabs) {
              if (game.state.data.tabs[i].index == charObj.id()) {
                useTab = false;
                break;
              }
            }

            if (useTab) {
              $(ui.item).attr("default", true);
              var found = false;
              var finalOrder = [];
              boardTabs.children().each(function(){
                if (!$(this).attr("default") && $(this).attr("tabKey")){
                  finalOrder.push(game.state.data.tabs[$(this).attr("tabKey")]);
                }
                else if ($(this).attr("default") && !found) {
                  found = true;
                  if (charObj.data._t == "b") {
                    finalOrder.push({index : charObj.id(), ui : "ui_board"});
                  }
                  else if (charObj.data._t == "c") {
                    finalOrder.push({index : charObj.id(), ui : "ui_characterSheetv2"});
                  }
                  else if (charObj.data._t == "p") {
                    finalOrder.push({index : charObj.id(), ui : "ui_renderPage"});
                  }
                }
              });
              game.state.data.tabs = finalOrder;
              obj.sync("updateState");
            }
            else {
              sendAlert({text : "Entity already in use"});
              $(ui.item).remove();
            }
          }
        }
        else {
          var finalOrder = [];
          boardTabs.children().each(function(){
            if (!$(this).attr("default")){
              finalOrder.push(game.state.data.tabs[$(this).attr("tabKey")]);
            }
          });
          game.state.data.tabs = finalOrder;
          obj.sync("updateState");
        }
      }
    });
    boardTabs.mouseout(function(){
      layout.coverlay(app.attr("id")+"-drag-overlay");
    });
  }

  if (layout.mobile) {
    boardTabs.addClass("subtitle");
  }

  for (var key in data.tabs) {
    var tabData = data.tabs[key];
    if (tabData && (!tabData._s || hasSecurity(getCookie("UserID"), "Visible", tabData) || (app.attr("forced") && (app.attr("tab") == key)))) {
      var index = tabData.index;
      var tabWrapper = $("<div>").appendTo(boardTabs);
      tabWrapper.addClass("outline flexmiddle tab spadding subtitle");
      tabWrapper.attr("tabKey", key);
      tabWrapper.css("min-width", "100px");
      tabWrapper.css("position", "relative");
      tabWrapper.css("font-family", "Scaly Sans");
      if (!tabData._s || tabData._s.default == 1) {
        if (app.attr("tab") != key) {
          tabWrapper.addClass("button");
          tabWrapper.css("color", "#333");
          tabWrapper.css("text-shadow", "0 0 1em white");
        }
      }
      else {
        if (app.attr("tab") != key) {
          tabWrapper.addClass("foreground dull");
        }
      }

      if (app.attr("preview") != "true" && hasSecurity(getCookie("UserID"), "Assistant Master")) {
        tabWrapper.attr("title", "Right click for more options");

        tabWrapper.contextmenu(function(){
          var tabIndex = $(this).attr("tabKey");

          var actionList = [];

          actionList.push({
            name : "Force Players to Tab",
            click : function(){
              runCommand("forceTab", {index : tabIndex});
            }
          });

          actionList.push({
            name : "Override Tab Name",
            click : function(ev, ui){
              ui_prompt({
                target : ui,
                inputs : {
                  "Tab Name" : {placeholder : "Empty for default"}
                },
                click : function(ev, inputs) {
                  if (inputs["Tab Name"].val()) {
                    obj.data.tabs[tabIndex].name = inputs["Tab Name"].val();
                  }
                  else {
                    delete obj.data.tabs[tabIndex].name;
                  }
                  obj.sync("updateState");
                  layout.coverlay("tab-options");
                }
              });
            }
          });

          actionList.push({
            name : "Tab Access",
            submenu : [
              {
                name : "GM Only",
                click : function(){
                  obj.data.tabs[tabIndex]._s = obj.data.tabs[tabIndex]._s || {};
                  obj.data.tabs[tabIndex]._s["default"] = "@:gm()";
                  obj.sync("updateState");
                }
              },
              {
                name : "Everybody",
                click : function(){
                  delete obj.data.tabs[tabIndex]._s;
                  obj.sync("updateState");
                }
              },
              {
                name : "Advanced...",
                click  : function(ev, ui){
                  var content = $("<div>");
                  content.addClass("flexcolumn");

                  var tabData = data.tabs[tabIndex];

                  var securityContent = $("<div>").appendTo(content);
                  function buildSecurity() {
                    var secTbl = {};
                    secTbl[getCookie("UserID")] = 1;
                    secTbl = obj.data.tabs[tabIndex]._s || secTbl;
                    var sec = sync.render("ui_rights")(obj, app, {
                      security : secTbl,
                      change : function(ev, ui, userID, newSecurity){
                        obj.data.tabs[tabIndex]._s = obj.data.tabs[tabIndex]._s || secTbl;
                        if (userID == "default" && newSecurity === "") {
                          obj.data.tabs[tabIndex]._s[userID] = "1";
                        }
                        else {
                          obj.data.tabs[tabIndex]._s[userID] = newSecurity;
                        }
                        obj.sync("updateState");
                        securityContent.empty();
                        buildSecurity().appendTo(securityContent);
                      }
                    });
                    return sec;
                  }
                  buildSecurity().appendTo(securityContent);

                  ui_popOut({
                    target : ui,
                    prompt : true,
                    title : "Set Access",
                    id : "tab-options",
                  }, content);
                }
              }
            ]
          });

          actionList.push({
            name : "Countdown",
            submenu : [
              {
                name : "Clear Timer",
                click : function(){
                  delete obj.data.tabs[tabIndex].end;
                  obj.sync("updateState");
                }
              },
              {
                name : "5 minutes",
                click : function(){
                  obj.data.tabs[tabIndex].end = Date.now() + 5 * 60 * 1000;
                  obj.sync("updateState");
                }
              },
              {
                name : "1 minute",
                click : function(){
                  obj.data.tabs[tabIndex].end = Date.now() + 60 * 1000;
                  obj.sync("updateState");
                }
              },
              {
                name : "30 seconds",
                click : function(){
                  obj.data.tabs[tabIndex].end = Date.now() + 30 * 1000;
                  obj.sync("updateState");
                }
              },
              {
                name : "Custom",
                click : function(ev, ui) {
                  ui_prompt({
                    target : ui,
                    inputs : {
                      "Duration" : {placeholder : "Seconds"}
                    },
                    click : function(ev, inputs) {
                      if (!isNaN(inputs["Duration"].val())) {
                        obj.data.tabs[tabIndex].end = Date.now() + Number(inputs["Duration"].val()) * 1000;
                      }
                      else {
                        delete obj.data.tabs[tabIndex].end;
                      }
                      obj.sync("updateState");
                    }
                  });
                }
              }
            ]
          });
          ui_dropMenu($(this), actionList, {id: "tab-actions", align : "bottom"});
          return false;
        });
      }

      if (index != null) {
        if (index == "config") {
          var tab = $("<b>").appendTo(tabWrapper);
          tab.addClass("flex flexmiddle");

          var name = sync.newApp("ui_tab");
          name.attr("tabName", tabData.name);
          name.attr("endTime", tabData.end);
          name.css("outline", "none");

          game.state.addApp(name);

          tab.append(name);
          if (app.attr("preview") != "true" && hasSecurity(getCookie("UserID"), "Assistant Master")) {
            var stop = genIcon("remove").appendTo(tabWrapper);
            stop.addClass("lrpadding");
            stop.attr("index", key);
            stop.click(function(){
              data.tabs = data.tabs || [];
              if (app.attr("tab") == $(this).attr("key")) {
                if (displayApp.attr("entIndex") && displayApp.attr("entIndex") != "config") {
                  var oldEnt = getEnt(displayApp.attr("entIndex"));
                  if (oldEnt) {
                    $("#board-layer-controls-"+oldEnt.id()).hide();
                    oldEnt.removeApp(displayApp);
                  }
                }
                else if (displayApp.attr("entIndex") == "config") {
                  displayApp.removeAttr("resourcePath");
                  displayApp.removeAttr("tabKey");
                  game.config.removeApp(displayApp);
                }
                else {
                  displayApp.removeAttr("tabKey");
                  game.state.removeApp(displayApp);
                }
                displayApp.removeAttr("entIndex");
              }
              data.tabs.splice($(this).attr("index"), 1);
              obj.sync("updateState");
            });
          }
          tab.hover(function(){
            $(this).parent().addClass("hover2");
          },
          function(){
            $(this).parent().removeClass("hover2");
          });

          if (app.attr("tab") == key) {
            for (var attr in game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0]) {
              displayApp.attr(attr, game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0][attr]);
            }
            game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0] = {};
            tabWrapper.addClass("highlight alttext");
            tabWrapper.removeClass("button");
            if (displayApp.attr("entIndex") && displayApp.attr("entIndex") != "config") {
              var oldEnt = getEnt(displayApp.attr("entIndex"));;
              if (oldEnt) {
                if (oldEnt.data && oldEnt.data._t == "b") {
                  $("#board-layer-controls-"+oldEnt.id()).hide();
                  runCommand("updateBoardCursor", {id : oldEnt.id(), data : {x : 0, y : 0, v : true}});
                }
                oldEnt.removeApp(displayApp);
              }
              displayApp.removeAttr("entIndex");
            }
            else if (displayApp.attr("entIndex") == "config") {
              //displayApp.removeAttr("entIndex");
              //displayApp.removeAttr("resourcePath");
              //game.config.removeApp(displayApp);
            }
            else {
              displayApp.removeAttr("tabKey");
              game.state.removeApp(displayApp);
            }
            displayApp.attr("tabKey", key);
            displayApp.attr("entIndex", tabData.index);
            displayApp.attr("resourcePath", resourcePath);
            displayApp.attr("ui-name", tabData.ui);
            game.config.addApp(displayApp);

            tabWrapper.click(function(){$(this).contextmenu();});
          }
          else {
            tab.attr("tab", key)
            tab.attr("entIndex", index);
            tab.click(function(){
              function changeTab(newTab) {
                displayApp.removeAttr("background");
                displayApp.removeAttr("ignore");
                displayApp.removeAttr("printing");

                game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0] = {};
                if (document.getElementById(app.attr("target"))) {
                  var attributes = document.getElementById(app.attr("target")).attributes;
                  for (var j=0; j<attributes.length; j++) {
                    var attrib = attributes[j];
                    if (attrib.specified == true && (attrib.name == "scrolltop" || attrib.name == "scrollleft" || attrib.name == "zoom" || attrib.name == "viewonly" || attrib.name == "layer")) {
                      game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0][attrib.name] = attrib.value;
                    }
                  }
                }
                displayApp.removeAttr("scrolLLeft");
                displayApp.removeAttr("scrollTop");
                displayApp.removeAttr("zoom");
                app.attr("tab", newTab);
                obj.update();
                layout.coverlay($(".piece-quick-edit"));
              }

              var newTab = $(this).attr("tab");
              var oldEnt = getEnt(displayApp.attr("entIndex"));
              if (oldEnt) {
                $("#board-layer-controls-"+oldEnt.id()).hide();
              }
              if (displayApp.attr("background") == "true") {
                var content = $("<div>");
                content.addClass("flexcolumn");

                var optimizer = $("<button>").appendTo(content);
                optimizer.addClass("highlight alttext hover2");
                optimizer.attr("title", "Condenses the map size down to the smallest it can be, attempts to merge 'tiled' pieces for added performance and removes duplicate tiles.");
                optimizer.append("With Optimizer");
                optimizer.click(function(){
                  if (boardApi.saveChanges(oldEnt)) {
                    displayApp.removeAttr("background");
                    displayApp.removeAttr("ignore");
                    displayApp.removeAttr("local");

                    layout.coverlay("save-changes");
                    changeTab(newTab);
                  }
                });

                var noOptimizer = $("<button>").appendTo(content);
                noOptimizer.addClass("background alttext hover2");
                noOptimizer.append("Without Optimizer");
                noOptimizer.click(function(){
                  if (boardApi.saveChanges(oldEnt, true)) {
                    displayApp.removeAttr("background");
                    displayApp.removeAttr("ignore");
                    displayApp.removeAttr("local");

                    layout.coverlay("save-changes");
                    changeTab(newTab);
                  }
                });

                var discard = $("<button>").appendTo(content);
                discard.addClass("subtitle hover2");
                discard.css("margin", "1em");
                discard.append("Discard Changes");
                discard.click(function(){
                  if (boardApi.saveChanges(oldEnt, "discard")) {
                    displayApp.removeAttr("background");
                    displayApp.removeAttr("ignore");
                    displayApp.removeAttr("local");

                    layout.coverlay("save-changes");
                    changeTab(newTab);
                  }
                });

                var pop = ui_popOut({
                  target : displayApp,
                  id : "save-changes",
                  title : "Save Changes...",
                }, content);
              }
              else {
                changeTab(newTab);
              }
            });
          }
          if (noTab != null && noTab == key) {
            tab.click();
          }
        }
        else {
          var ent = getEnt(index);
          if (ent) {
            var tab = $("<b>").appendTo(tabWrapper);
            tab.addClass("flex flexmiddle");

            var name = sync.newApp("ui_tab");
            name.attr("tabName", tabData.name);
            name.attr("endTime", tabData.end);
            name.css("outline", "none");

            ent.addApp(name);

            tab.append(name);
            if (app.attr("preview") != "true" && hasSecurity(getCookie("UserID"), "Assistant Master")) {
              var stop = genIcon("remove").appendTo(tabWrapper);
              stop.addClass("lrpadding");
              stop.attr("index", key);
              stop.click(function(){
                data.tabs = data.tabs || [];
                if (app.attr("tab") == $(this).attr("index")) {
                  if (displayApp.attr("entIndex") && displayApp.attr("entIndex") != "config") {
                    var oldEnt = getEnt(displayApp.attr("entIndex"));
                    if (oldEnt) {
                      $("#board-layer-controls-"+oldEnt.id()).hide();
                      oldEnt.removeApp(displayApp);
                    }
                  }
                  else if (displayApp.attr("entIndex") == "config") {
                    displayApp.removeAttr("resourcePath");
                    game.config.removeApp(displayApp);
                  }
                  else {
                    displayApp.removeAttr("tabKey");
                    game.state.removeApp(displayApp);
                  }
                  displayApp.removeAttr("entIndex");
                }
                data.tabs.splice($(this).attr("index"), 1);
                obj.sync("updateState");
              });
            }
            tab.hover(function(){
              $(this).parent().addClass("hover2");
            },
            function(){
              $(this).parent().removeClass("hover2");
            });
            if (app.attr("tab") == key) {
              for (var attr in game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0]) {
                displayApp.attr(attr, game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0][attr]);
              }
              game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0] = {};
              tabWrapper.addClass("highlight alttext");
              tabWrapper.removeClass("button");
              tabWrapper.click(function(){$(this).contextmenu();});

              if (displayApp.attr("entIndex") != index) {
                if (displayApp.attr("entIndex") && displayApp.attr("entIndex") != "config") {
                  var oldEnt = getEnt(displayApp.attr("entIndex"));
                  if (oldEnt) {
                    if (oldEnt.data && oldEnt.data._t == "b") {
                      $("#board-layer-controls-"+oldEnt.id()).hide();
                      runCommand("updateBoardCursor", {id : oldEnt.id(), data : {x : 0, y : 0, v : true}});
                    }
                    oldEnt.removeApp(displayApp);
                  }
                  displayApp.removeAttr("entIndex");
                }
                else if (displayApp.attr("entIndex") == "config") {
                  game.config.removeApp(displayApp);
                  displayApp.attr("entIndex", index);
                }
                else {
                  game.state.removeApp(displayApp);
                  displayApp.attr("entIndex", index);
                }
                var newEnt = getEnt(index);
                displayApp.attr("entIndex", index);
                displayApp.attr("ui-name", tabData.ui);
                newEnt.addApp(displayApp);
              }
            }
            else {
              tab.attr("tab", key)
              tab.attr("entIndex", index);
              tab.click(function(){
                function changeTab(newTab) {
                  displayApp.removeAttr("background");
                  displayApp.removeAttr("ignore");
                  displayApp.removeAttr("printing");

                  game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0] = {};
                  if (document.getElementById(app.attr("target"))) {
                    var attributes = document.getElementById(app.attr("target")).attributes;
                    for (var j=0; j<attributes.length; j++) {
                      var attrib = attributes[j];
                      if (attrib.specified == true && (attrib.name == "scrolltop" || attrib.name == "scrollleft" || attrib.name == "zoom" || attrib.name == "viewonly" || attrib.name == "layer")) {
                        game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0][attrib.name] = attrib.value;
                      }
                    }
                  }
                  displayApp.removeAttr("scrolLLeft");
                  displayApp.removeAttr("scrollTop");
                  displayApp.removeAttr("zoom");
                  app.attr("tab", newTab);
                  obj.update();
                  layout.coverlay($(".piece-quick-edit"));
                }

                var newTab = $(this).attr("tab");
                var oldEnt = getEnt(displayApp.attr("entIndex"));
                if (oldEnt) {
                  $("#board-layer-controls-"+oldEnt.id()).hide();
                }
                if (displayApp.attr("background") == "true") {
                  var content = $("<div>");
                  content.addClass("flexcolumn");

                  var optimizer = $("<button>").appendTo(content);
                  optimizer.addClass("highlight alttext hover2");
                  optimizer.attr("title", "Condenses the map size down to the smallest it can be, attempts to merge 'tiled' pieces for added performance and removes duplicate tiles.");
                  optimizer.append("With Optimizer");
                  optimizer.click(function(){
                    if (boardApi.saveChanges(oldEnt)) {
                      displayApp.removeAttr("background");
                      displayApp.removeAttr("ignore");
                      displayApp.removeAttr("local");

                      layout.coverlay("save-changes");
                      changeTab(newTab);
                    }
                  });

                  var noOptimizer = $("<button>").appendTo(content);
                  noOptimizer.addClass("background alttext hover2");
                  noOptimizer.append("Without Optimizer");
                  noOptimizer.click(function(){
                    if (boardApi.saveChanges(oldEnt, true)) {
                      displayApp.removeAttr("background");
                      displayApp.removeAttr("ignore");
                      displayApp.removeAttr("local");

                      layout.coverlay("save-changes");
                      changeTab(newTab);
                    }
                  });

                  var discard = $("<button>").appendTo(content);
                  discard.addClass("subtitle hover2");
                  discard.css("margin", "1em");
                  discard.append("Discard Changes");
                  discard.click(function(){
                    if (boardApi.saveChanges(oldEnt, "discard")) {
                      displayApp.removeAttr("background");
                      displayApp.removeAttr("ignore");
                      displayApp.removeAttr("local");

                      layout.coverlay("save-changes");
                      changeTab(newTab);
                    }
                  });

                  var pop = ui_popOut({
                    target : displayApp,
                    id : "save-changes",
                    title : "Save Changes...",
                  }, content);
                }
                else {
                  changeTab(newTab);
                }
              });
            }
          }
          else {
            tabWrapper.remove();
          }
        }
      }
      else {
        var tab = $("<b>").appendTo(tabWrapper);
        tab.addClass("flex flexmiddle");

        var name = sync.newApp("ui_tab");
        name.attr("tabName", tabData.name);
        name.attr("endTime", tabData.end);
        name.css("outline", "none");

        game.state.addApp(name);

        tab.append(name);
        if (app.attr("preview") != "true" && hasSecurity(getCookie("UserID"), "Assistant Master")) {
          var stop = genIcon("remove").appendTo(tabWrapper);
          stop.addClass("lrpadding");
          stop.attr("index", key);
          stop.click(function(){
            data.tabs = data.tabs || [];
            if (app.attr("tab") == key) {
              if (displayApp.attr("entIndex") && displayApp.attr("entIndex") != "config") {
                var oldEnt = getEnt(displayApp.attr("entIndex"));
                if (oldEnt) {
                  $("#board-layer-controls-"+oldEnt.id()).hide();
                  oldEnt.removeApp(displayApp);
                }
              }
              else {
                displayApp.removeAttr("tabKey");
                game.state.removeApp(displayApp);
              }
              displayApp.removeAttr("entIndex");
            }
            data.tabs.splice($(this).attr("index"), 1);
            obj.sync("updateState");
          });
        }
        tab.hover(function(){
          $(this).parent().addClass("hover2");
        },
        function(){
          $(this).parent().removeClass("hover2");
        });

        if (app.attr("tab") == key) {
          for (var attr in game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0]) {
            displayApp.attr(attr, game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0][attr]);
          }
          game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0] = {};
          tabWrapper.addClass("highlight alttext");
          tabWrapper.removeClass("button");
          if (displayApp.attr("entIndex") && displayApp.attr("entIndex") != "config") {
            var oldEnt = getEnt(displayApp.attr("entIndex"));
            if (oldEnt) {
              if (oldEnt.data && oldEnt.data._t == "b") {
                $("#board-layer-controls-"+oldEnt.id()).hide();
                runCommand("updateBoardCursor", {id : oldEnt.id(), data : {x : 0, y : 0, v : true}});
              }
              oldEnt.removeApp(displayApp);
            }
            displayApp.removeAttr("entIndex");
          }
          else if (displayApp.attr("entIndex") == "config") {
            game.config.removeApp(displayApp);
          }
          displayApp.removeAttr("entIndex");
          displayApp.attr("ui-name", tabData.ui || "ui_display");
          displayApp.attr("tabKey", app.attr("tab"));
          game.state.addApp(displayApp);

          tabWrapper.click(function(){$(this).contextmenu();});
        }
        else {
          tab.attr("tab", key)
          tab.attr("entIndex", index);
          tab.click(function(){
            function changeTab(newTab) {
              displayApp.removeAttr("background");
              displayApp.removeAttr("ignore");
              displayApp.removeAttr("printing");

              game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0] = {};
              if (document.getElementById(app.attr("target"))) {
                var attributes = document.getElementById(app.attr("target")).attributes;
                for (var j=0; j<attributes.length; j++) {
                  var attrib = attributes[j];
                  if (attrib.specified == true && (attrib.name == "scrolltop" || attrib.name == "scrollleft" || attrib.name == "zoom" || attrib.name == "viewonly" || attrib.name == "layer")) {
                    game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0][attrib.name] = attrib.value;
                  }
                }
              }
              displayApp.removeAttr("scrolLLeft");
              displayApp.removeAttr("scrollTop");
              displayApp.removeAttr("zoom");
              app.attr("tab", newTab);
              displayApp.attr("tabKey", newTab);
              obj.update();
              layout.coverlay($(".piece-quick-edit"));
            }

            var newTab = $(this).attr("tab");
            var oldEnt = getEnt(displayApp.attr("entIndex"));
            if (oldEnt) {
              $("#board-layer-controls-"+oldEnt.id()).hide();
            }
            if (displayApp.attr("background") == "true") {
              var content = $("<div>");
              content.addClass("flexcolumn");

              var optimizer = $("<button>").appendTo(content);
              optimizer.addClass("highlight alttext hover2");
              optimizer.attr("title", "Condenses the map size down to the smallest it can be, attempts to merge 'tiled' pieces for added performance and removes duplicate tiles.");
              optimizer.append("With Optimizer");
              optimizer.click(function(){
                if (boardApi.saveChanges(oldEnt)) {
                  displayApp.removeAttr("background");
                  displayApp.removeAttr("ignore");
                  displayApp.removeAttr("local");

                  layout.coverlay("save-changes");
                  changeTab(newTab);
                }
              });

              var noOptimizer = $("<button>").appendTo(content);
              noOptimizer.addClass("background alttext hover2");
              noOptimizer.append("Without Optimizer");
              noOptimizer.click(function(){
                if (boardApi.saveChanges(oldEnt, true)) {
                  displayApp.removeAttr("background");
                  displayApp.removeAttr("ignore");
                  displayApp.removeAttr("local");

                  layout.coverlay("save-changes");
                  changeTab(newTab);
                }
              });

              var discard = $("<button>").appendTo(content);
              discard.addClass("subtitle hover2");
              discard.css("margin", "1em");
              discard.append("Discard Changes");
              discard.click(function(){
                if (boardApi.saveChanges(oldEnt, "discard")) {
                  displayApp.removeAttr("background");
                  displayApp.removeAttr("ignore");
                  displayApp.removeAttr("local");

                  layout.coverlay("save-changes");
                  changeTab(newTab);
                }
              });

              var pop = ui_popOut({
                target : displayApp,
                id : "save-changes",
                title : "Save Changes...",
              }, content);
            }
            else {
              changeTab(newTab);
            }
          });
        }

        if (noTab != null && noTab == key) {
          tab.click();
        }
      }
    }
  }

  if (app.attr("preview") != "true" && hasSecurity(getCookie("UserID"), "Assistant Master")) {
    var tabWrap = $("<div>").appendTo(boardTabs);
    tabWrap.addClass("flexmiddle lrpadding alttext");

    var newTab = genIcon("plus").appendTo(tabWrap);
    newTab.attr("title", "Add a new tab");
    newTab.click(function(){
      var actionList = [];

      actionList.push({
        name : "Slideshow",
        icon : "picture",
        click : function(ev, ui) {
          game.state.data.tabs.push({name : "Slideshow", data : {}});
          game.state.sync("updateState");
        }
      });

      actionList.push({
        name : "Map",
        icon : "globe",
        click : function(ev, ui) {
          var ignore = {};
          for (var i in game.state.data.tabs) {
            ignore[game.state.data.tabs[i].index] = true;
          }
          var content = sync.render("ui_assetPicker")(obj, app, {
            ignore : ignore,
            filter : "b",
            select : function(ev, ui, ent, options, entities){
              game.state.data.tabs = game.state.data.tabs || [];
              game.state.data.tabs.push({ui : "ui_board", index : ent.id()});
              game.state.sync("updateState");
              options.data.ignore = options.data.ignore || {};
              options.data.ignore[ent.id()] = true;
              return true;
            }
          });
          var pop = ui_popOut({
            target : $("body"),
            id : "add-asset",
            title : "Add Asset",
            style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
          }, content);
          pop.resizable();
        }
      });

      actionList.push({
        name : "Resource Page",
        icon : "book",
        click : function(ev, ui) {
          game.state.data.tabs = game.state.data.tabs || [];
          game.config.data.resources = game.config.data.resources || [];
          game.config.sync("updateConfig");
          game.state.data.tabs.push({name : "Resource Page", ui : "ui_resourcePage", index : "config"});
          game.state.sync("updateState");
        }
      });

      actionList.push({
        name : "Asset",
        icon : "user",
        click : function(ev, ui) {
          var ignore = {};
          for (var i in game.state.data.tabs) {
            ignore[game.state.data.tabs[i].index] = true;
          }
          var content = sync.render("ui_assetPicker")(obj, app, {
            ignore : ignore,
            select : function(ev, ui, ent, options, entities){
              game.state.data.tabs = game.state.data.tabs || [];
              game.state.data.tabs.push({ui : assetTypes[ent.data._t].handout, index : ent.id()});
              game.state.sync("updateState");
              layout.coverlay("add-asset");
            }
          });
          var pop = ui_popOut({
            target : $("body"),
            prompt : true,
            id : "add-asset",
            title : "Add Asset",
            style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
          }, content);
          pop.resizable();
        }
      });

      ui_dropMenu($(this), actionList, {id : "new-tab", align : "bottom"});
    });
  }

  app.removeAttr("forced");

  return boardTabs;
});

sync.render("ui_displayTabs", function(obj, app, scope) {
  if (!obj) {
    game.state.addApp(app);
    return $("<div>");
  }

  
  game.locals["tabAttrs-"+app.attr("id")] = game.locals["tabAttrs-"+app.attr("id")] || sync.obj();
  game.locals["tabAttrs-"+app.attr("id")].data = game.locals["tabAttrs-"+app.attr("id")].data || {};

  var noTab;

  if (app.attr("tab") == null && obj.data.tabs && obj.data.tabs.length) {
    setTimeout(function(){
      for (var key in obj.data.tabs) {
        var tabData = obj.data.tabs[key];
        if (tabData && (!tabData._s || hasSecurity(getCookie("UserID"), "Visible", tabData))) {
          app.attr("tab", key);
          noTab = key;
          break;
        }
      }
      obj.update();
    }, 10);
    return $("<div>");
  }

  var del = [];
  for (var key in obj.data.tabs) {
    var tabData = obj.data.tabs[key];
    if (!tabData || (tabData.index && tabData.index != "config" && (!getEnt(tabData.index) || !(getEnt(tabData.index).data)))) {
      del.push(key);
    }
  }
  del = del.reverse();
  for (var i in del) {
    obj.data.tabs.splice(del[i],1);
  }

  var data = obj.data;
  var resourcePath = app.attr("resourcePath");
  app.removeAttr("resourcePath");

  var displayApp = $("#"+app.attr("target"));
  displayApp.addClass("white");
  displayApp.attr("currentTab", app.attr("tab"));
  displayApp.attr("displayApp", true);

  var tabData = data.tabs[app.attr("tab")];
  var filterStr = "";
  if (tabData && tabData.data && tabData.data.options) {
    for (var key in tabData.data.options.effects) {
      if (key == "hue-rotate") {
        filterStr = filterStr + " " + key + "("+tabData.data.options.effects[key]+"deg)";
      }
      else {
        filterStr = filterStr + " " + key + "("+tabData.data.options.effects[key]+"%)";
      }
    }
  }
  displayApp.css("filter", filterStr);
  displayApp.css("transition", "");

  if (app.attr("tab") && data.tabs[app.attr("tab")] && data.tabs[app.attr("tab")].ui == "ui_homebrew") {
    $("#player-menu").hide();
  }
  else {
    $("#player-menu").show();
  }

  var boardTabs = $("<div>");
  boardTabs.addClass("flexrow flexwrap fit-x dropContent");
  boardTabs.css("font-size", "1.2em");
  if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
    boardTabs.sortable({
      over : function(ev, ui){
        if ($(ui.item).attr("index")) {
          if (!$("#"+app.attr("id")+"-drag-overlay").length) {
            var olay = layout.overlay({
              target : app,
              id : app.attr("id")+"-drag-overlay",
              style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
            });
            olay.addClass("flexcolumn flexmiddle alttext");
            olay.css("font-size", "2em");
            olay.css("pointer-events", "none");
            olay.append("<b>Drop to Add Tab</b>");
          }
        }
      },
      out : function(ev, ui) {
        layout.coverlay(app.attr("id")+"-drag-overlay");
      },
      update : function(ev, ui) {
        if (!$(ui.item).attr("tabKey")) {
          if ($(ui.item).attr("index")) {
            if ($(ui.item).attr("src")) {
              if ($(ui.item).attr("src") == "state") {
                game.state.update(); // refresh the list
              }
              else if ($(ui.item).attr("src") == "players") {
                game.players.update(); // refresh the list
              }
              else {
                getEnt($(ui.item).attr("src")).update(); // refresh the list
              }
            }
            else {
              game.entities.update(); // refresh the list
            }

            game.state.data.tabs = game.state.data.tabs || [];
            var charObj = getEnt($(ui.item).attr("index"));
            var useTab = true;
            for (var i in game.state.data.tabs) {
              if (game.state.data.tabs[i].index == charObj.id()) {
                useTab = false;
                break;
              }
            }

            if (useTab) {
              $(ui.item).attr("default", true);
              var found = false;
              var finalOrder = [];
              boardTabs.children().each(function(){
                if (!$(this).attr("default") && $(this).attr("tabKey")){
                  finalOrder.push(game.state.data.tabs[$(this).attr("tabKey")]);
                }
                else if ($(this).attr("default") && !found) {
                  found = true;
                  if (charObj.data._t == "b") {
                    finalOrder.push({index : charObj.id(), ui : "ui_board"});
                  }
                  else if (charObj.data._t == "c") {
                    finalOrder.push({index : charObj.id(), ui : "ui_characterSheetv2"});
                  }
                  else if (charObj.data._t == "p") {
                    finalOrder.push({index : charObj.id(), ui : "ui_renderPage"});
                  }
                }
              });
              game.state.data.tabs = finalOrder;
              obj.sync("updateState");
            }
            else {
              sendAlert({text : "Entity already in use"});
              $(ui.item).remove();
            }
          }
        }
        else {
          var finalOrder = [];
          boardTabs.children().each(function(){
            if (!$(this).attr("default")){
              finalOrder.push(game.state.data.tabs[$(this).attr("tabKey")]);
            }
          });
          game.state.data.tabs = finalOrder;
          obj.sync("updateState");
        }
      }
    });
    boardTabs.mouseout(function(){
      layout.coverlay(app.attr("id")+"-drag-overlay");
    });
  }

  if (layout.mobile) {
    boardTabs.addClass("subtitle");
  }

  for (var key in data.tabs) {
    var tabData = data.tabs[key];
    if (tabData && (!tabData._s || hasSecurity(getCookie("UserID"), "Visible", tabData) || (app.attr("forced") && (app.attr("tab") == key)))) {
      var index = tabData.index;
      var tabWrapper = $("<div>").appendTo(boardTabs);
      tabWrapper.addClass("outline flexmiddle tab spadding subtitle");
      tabWrapper.attr("tabKey", key);
      tabWrapper.css("min-width", "100px");
      tabWrapper.css("position", "relative");
      tabWrapper.css("font-family", "Scaly Sans");
      if (!tabData._s || tabData._s.default == 1) {
        if (app.attr("tab") != key) {
          tabWrapper.addClass("button");
          tabWrapper.css("color", "#333");
          tabWrapper.css("text-shadow", "0 0 1em white");
        }
      }
      else {
        if (app.attr("tab") != key) {
          tabWrapper.addClass("foreground dull");
        }
      }

      if (app.attr("preview") != "true" && hasSecurity(getCookie("UserID"), "Assistant Master")) {
        tabWrapper.attr("title", "Right click for more options");

        tabWrapper.contextmenu(function(){
          var tabIndex = $(this).attr("tabKey");

          var actionList = [];

          actionList.push({
            name : "Force Players to Tab",
            click : function(){
              runCommand("forceTab", {index : tabIndex});
            }
          });

          actionList.push({
            name : "Override Tab Name",
            click : function(ev, ui){
              ui_prompt({
                target : ui,
                inputs : {
                  "Tab Name" : {placeholder : "Empty for default"}
                },
                click : function(ev, inputs) {
                  if (inputs["Tab Name"].val()) {
                    obj.data.tabs[tabIndex].name = inputs["Tab Name"].val();
                  }
                  else {
                    delete obj.data.tabs[tabIndex].name;
                  }
                  obj.sync("updateState");
                  layout.coverlay("tab-options");
                }
              });
            }
          });

          actionList.push({
            name : "Tab Access",
            submenu : [
              {
                name : "GM Only",
                click : function(){
                  obj.data.tabs[tabIndex]._s = obj.data.tabs[tabIndex]._s || {};
                  obj.data.tabs[tabIndex]._s["default"] = "@:gm()";
                  obj.sync("updateState");
                }
              },
              {
                name : "Everybody",
                click : function(){
                  delete obj.data.tabs[tabIndex]._s;
                  obj.sync("updateState");
                }
              },
              {
                name : "Advanced...",
                click  : function(ev, ui){
                  var content = $("<div>");
                  content.addClass("flexcolumn");

                  var tabData = data.tabs[tabIndex];

                  var securityContent = $("<div>").appendTo(content);
                  function buildSecurity() {
                    var secTbl = {};
                    secTbl[getCookie("UserID")] = 1;
                    secTbl = obj.data.tabs[tabIndex]._s || secTbl;
                    var sec = sync.render("ui_rights")(obj, app, {
                      security : secTbl,
                      change : function(ev, ui, userID, newSecurity){
                        obj.data.tabs[tabIndex]._s = obj.data.tabs[tabIndex]._s || secTbl;
                        if (userID == "default" && newSecurity === "") {
                          obj.data.tabs[tabIndex]._s[userID] = "1";
                        }
                        else {
                          obj.data.tabs[tabIndex]._s[userID] = newSecurity;
                        }
                        obj.sync("updateState");
                        securityContent.empty();
                        buildSecurity().appendTo(securityContent);
                      }
                    });
                    return sec;
                  }
                  buildSecurity().appendTo(securityContent);

                  ui_popOut({
                    target : ui,
                    prompt : true,
                    title : "Set Access",
                    id : "tab-options",
                  }, content);
                }
              }
            ]
          });

          actionList.push({
            name : "Countdown",
            submenu : [
              {
                name : "Clear Timer",
                click : function(){
                  delete obj.data.tabs[tabIndex].end;
                  obj.sync("updateState");
                }
              },
              {
                name : "5 minutes",
                click : function(){
                  obj.data.tabs[tabIndex].end = Date.now() + 5 * 60 * 1000;
                  obj.sync("updateState");
                }
              },
              {
                name : "1 minute",
                click : function(){
                  obj.data.tabs[tabIndex].end = Date.now() + 60 * 1000;
                  obj.sync("updateState");
                }
              },
              {
                name : "30 seconds",
                click : function(){
                  obj.data.tabs[tabIndex].end = Date.now() + 30 * 1000;
                  obj.sync("updateState");
                }
              },
              {
                name : "Custom",
                click : function(ev, ui) {
                  ui_prompt({
                    target : ui,
                    inputs : {
                      "Duration" : {placeholder : "Seconds"}
                    },
                    click : function(ev, inputs) {
                      if (!isNaN(inputs["Duration"].val())) {
                        obj.data.tabs[tabIndex].end = Date.now() + Number(inputs["Duration"].val()) * 1000;
                      }
                      else {
                        delete obj.data.tabs[tabIndex].end;
                      }
                      obj.sync("updateState");
                    }
                  });
                }
              }
            ]
          });
          ui_dropMenu($(this), actionList, {id: "tab-actions", align : "bottom"});
          return false;
        });
      }

      if (index != null) {
        if (index == "config") {
          var tab = $("<b>").appendTo(tabWrapper);
          tab.addClass("flex flexmiddle");

          var name = sync.newApp("ui_tab");
          name.attr("tabName", tabData.name);
          name.attr("endTime", tabData.end);
          name.css("outline", "none");

          game.state.addApp(name);

          tab.append(name);
          if (app.attr("preview") != "true" && hasSecurity(getCookie("UserID"), "Assistant Master")) {
            var stop = genIcon("remove").appendTo(tabWrapper);
            stop.addClass("lrpadding");
            stop.attr("index", key);
            stop.click(function(){
              data.tabs = data.tabs || [];
              if (app.attr("tab") == $(this).attr("key")) {
                if (displayApp.attr("entIndex") && displayApp.attr("entIndex") != "config") {
                  var oldEnt = getEnt(displayApp.attr("entIndex"));
                  if (oldEnt) {
                    $("#board-layer-controls-"+oldEnt.id()).hide();
                    oldEnt.removeApp(displayApp);
                  }
                }
                else if (displayApp.attr("entIndex") == "config") {
                  displayApp.removeAttr("resourcePath");
                  displayApp.removeAttr("tabKey");
                  game.config.removeApp(displayApp);
                }
                else {
                  displayApp.removeAttr("tabKey");
                  game.state.removeApp(displayApp);
                }
                displayApp.removeAttr("entIndex");
              }
              data.tabs.splice($(this).attr("index"), 1);
              obj.sync("updateState");
            });
          }
          tab.hover(function(){
            $(this).parent().addClass("hover2");
          },
          function(){
            $(this).parent().removeClass("hover2");
          });

          if (app.attr("tab") == key) {
            for (var attr in game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0]) {
              displayApp.attr(attr, game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0][attr]);
            }
            game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0] = {};
            tabWrapper.addClass("highlight alttext");
            tabWrapper.removeClass("button");
            if (displayApp.attr("entIndex") && displayApp.attr("entIndex") != "config") {
              var oldEnt = getEnt(displayApp.attr("entIndex"));;
              if (oldEnt) {
                if (oldEnt.data && oldEnt.data._t == "b") {
                  $("#board-layer-controls-"+oldEnt.id()).hide();
                  runCommand("updateBoardCursor", {id : oldEnt.id(), data : {x : 0, y : 0, v : true}});
                }
                oldEnt.removeApp(displayApp);
              }
              displayApp.removeAttr("entIndex");
            }
            else if (displayApp.attr("entIndex") == "config") {
              //displayApp.removeAttr("entIndex");
              //displayApp.removeAttr("resourcePath");
              //game.config.removeApp(displayApp);
            }
            else {
              displayApp.removeAttr("tabKey");
              game.state.removeApp(displayApp);
            }
            displayApp.attr("tabKey", key);
            displayApp.attr("entIndex", tabData.index);
            displayApp.attr("resourcePath", resourcePath);
            displayApp.attr("ui-name", tabData.ui);
            game.config.addApp(displayApp);

            tabWrapper.click(function(){$(this).contextmenu();});
          }
          else {
            tab.attr("tab", key)
            tab.attr("entIndex", index);
            tab.click(function(){
              function changeTab(newTab) {
                displayApp.removeAttr("background");
                displayApp.removeAttr("ignore");
                displayApp.removeAttr("printing");

                game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0] = {};
                if (document.getElementById(app.attr("target"))) {
                  var attributes = document.getElementById(app.attr("target")).attributes;
                  for (var j=0; j<attributes.length; j++) {
                    var attrib = attributes[j];
                    if (attrib.specified == true && (attrib.name == "scrolltop" || attrib.name == "scrollleft" || attrib.name == "zoom" || attrib.name == "viewonly" || attrib.name == "layer")) {
                      game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0][attrib.name] = attrib.value;
                    }
                  }
                }
                displayApp.removeAttr("scrolLLeft");
                displayApp.removeAttr("scrollTop");
                displayApp.removeAttr("zoom");
                app.attr("tab", newTab);
                obj.update();
                layout.coverlay($(".piece-quick-edit"));
              }

              var newTab = $(this).attr("tab");
              var oldEnt = getEnt(displayApp.attr("entIndex"));
              if (oldEnt) {
                $("#board-layer-controls-"+oldEnt.id()).hide();
              }
              if (displayApp.attr("background") == "true") {
                var content = $("<div>");
                content.addClass("flexcolumn");

                var optimizer = $("<button>").appendTo(content);
                optimizer.addClass("highlight alttext hover2");
                optimizer.attr("title", "Condenses the map size down to the smallest it can be, attempts to merge 'tiled' pieces for added performance and removes duplicate tiles.");
                optimizer.append("With Optimizer");
                optimizer.click(function(){
                  if (boardApi.saveChanges(oldEnt)) {
                    displayApp.removeAttr("background");
                    displayApp.removeAttr("ignore");
                    displayApp.removeAttr("local");

                    layout.coverlay("save-changes");
                    changeTab(newTab);
                  }
                });

                var noOptimizer = $("<button>").appendTo(content);
                noOptimizer.addClass("background alttext hover2");
                noOptimizer.append("Without Optimizer");
                noOptimizer.click(function(){
                  if (boardApi.saveChanges(oldEnt, true)) {
                    displayApp.removeAttr("background");
                    displayApp.removeAttr("ignore");
                    displayApp.removeAttr("local");

                    layout.coverlay("save-changes");
                    changeTab(newTab);
                  }
                });

                var discard = $("<button>").appendTo(content);
                discard.addClass("subtitle hover2");
                discard.css("margin", "1em");
                discard.append("Discard Changes");
                discard.click(function(){
                  if (boardApi.saveChanges(oldEnt, "discard")) {
                    displayApp.removeAttr("background");
                    displayApp.removeAttr("ignore");
                    displayApp.removeAttr("local");

                    layout.coverlay("save-changes");
                    changeTab(newTab);
                  }
                });

                var pop = ui_popOut({
                  target : displayApp,
                  id : "save-changes",
                  title : "Save Changes...",
                }, content);
              }
              else {
                changeTab(newTab);
              }
            });
          }
          if (noTab != null && noTab == key) {
            tab.click();
          }
        }
        else {
          var ent = getEnt(index);
          if (ent) {
            var tab = $("<b>").appendTo(tabWrapper);
            tab.addClass("flex flexmiddle");

            var name = sync.newApp("ui_tab");
            name.attr("tabName", tabData.name);
            name.attr("endTime", tabData.end);
            name.css("outline", "none");

            ent.addApp(name);

            tab.append(name);
            if (app.attr("preview") != "true" && hasSecurity(getCookie("UserID"), "Assistant Master")) {
              var stop = genIcon("remove").appendTo(tabWrapper);
              stop.addClass("lrpadding");
              stop.attr("index", key);
              stop.click(function(){
                data.tabs = data.tabs || [];
                if (app.attr("tab") == $(this).attr("index")) {
                  if (displayApp.attr("entIndex") && displayApp.attr("entIndex") != "config") {
                    var oldEnt = getEnt(displayApp.attr("entIndex"));
                    if (oldEnt) {
                      $("#board-layer-controls-"+oldEnt.id()).hide();
                      oldEnt.removeApp(displayApp);
                    }
                  }
                  else if (displayApp.attr("entIndex") == "config") {
                    displayApp.removeAttr("resourcePath");
                    game.config.removeApp(displayApp);
                  }
                  else {
                    displayApp.removeAttr("tabKey");
                    game.state.removeApp(displayApp);
                  }
                  displayApp.removeAttr("entIndex");
                }
                data.tabs.splice($(this).attr("index"), 1);
                obj.sync("updateState");
              });
            }
            tab.hover(function(){
              $(this).parent().addClass("hover2");
            },
            function(){
              $(this).parent().removeClass("hover2");
            });
            if (app.attr("tab") == key) {
              for (var attr in game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0]) {
                displayApp.attr(attr, game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0][attr]);
              }
              game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0] = {};
              tabWrapper.addClass("highlight alttext");
              tabWrapper.removeClass("button");
              tabWrapper.click(function(){$(this).contextmenu();});

              if (displayApp.attr("entIndex") != index) {
                if (displayApp.attr("entIndex") && displayApp.attr("entIndex") != "config") {
                  var oldEnt = getEnt(displayApp.attr("entIndex"));
                  if (oldEnt) {
                    if (oldEnt.data && oldEnt.data._t == "b") {
                      $("#board-layer-controls-"+oldEnt.id()).hide();
                      runCommand("updateBoardCursor", {id : oldEnt.id(), data : {x : 0, y : 0, v : true}});
                    }
                    oldEnt.removeApp(displayApp);
                  }
                  displayApp.removeAttr("entIndex");
                }
                else if (displayApp.attr("entIndex") == "config") {
                  game.config.removeApp(displayApp);
                  displayApp.attr("entIndex", index);
                }
                else {
                  game.state.removeApp(displayApp);
                  displayApp.attr("entIndex", index);
                }
                var newEnt = getEnt(index);
                displayApp.attr("entIndex", index);
                displayApp.attr("ui-name", tabData.ui);
                newEnt.addApp(displayApp);
              }
            }
            else {
              tab.attr("tab", key)
              tab.attr("entIndex", index);
              tab.click(function(){
                function changeTab(newTab) {
                  displayApp.removeAttr("background");
                  displayApp.removeAttr("ignore");
                  displayApp.removeAttr("printing");

                  game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0] = {};
                  if (document.getElementById(app.attr("target"))) {
                    var attributes = document.getElementById(app.attr("target")).attributes;
                    for (var j=0; j<attributes.length; j++) {
                      var attrib = attributes[j];
                      if (attrib.specified == true && (attrib.name == "scrolltop" || attrib.name == "scrollleft" || attrib.name == "zoom" || attrib.name == "viewonly" || attrib.name == "layer")) {
                        game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0][attrib.name] = attrib.value;
                      }
                    }
                  }
                  displayApp.removeAttr("scrolLLeft");
                  displayApp.removeAttr("scrollTop");
                  displayApp.removeAttr("zoom");
                  app.attr("tab", newTab);
                  obj.update();
                  layout.coverlay($(".piece-quick-edit"));
                }

                var newTab = $(this).attr("tab");
                var oldEnt = getEnt(displayApp.attr("entIndex"));
                if (oldEnt) {
                  $("#board-layer-controls-"+oldEnt.id()).hide();
                }
                if (displayApp.attr("background") == "true") {
                  var content = $("<div>");
                  content.addClass("flexcolumn");

                  var optimizer = $("<button>").appendTo(content);
                  optimizer.addClass("highlight alttext hover2");
                  optimizer.attr("title", "Condenses the map size down to the smallest it can be, attempts to merge 'tiled' pieces for added performance and removes duplicate tiles.");
                  optimizer.append("With Optimizer");
                  optimizer.click(function(){
                    if (boardApi.saveChanges(oldEnt)) {
                      displayApp.removeAttr("background");
                      displayApp.removeAttr("ignore");
                      displayApp.removeAttr("local");

                      layout.coverlay("save-changes");
                      changeTab(newTab);
                    }
                  });

                  var noOptimizer = $("<button>").appendTo(content);
                  noOptimizer.addClass("background alttext hover2");
                  noOptimizer.append("Without Optimizer");
                  noOptimizer.click(function(){
                    if (boardApi.saveChanges(oldEnt, true)) {
                      displayApp.removeAttr("background");
                      displayApp.removeAttr("ignore");
                      displayApp.removeAttr("local");

                      layout.coverlay("save-changes");
                      changeTab(newTab);
                    }
                  });

                  var discard = $("<button>").appendTo(content);
                  discard.addClass("subtitle hover2");
                  discard.css("margin", "1em");
                  discard.append("Discard Changes");
                  discard.click(function(){
                    if (boardApi.saveChanges(oldEnt, "discard")) {
                      displayApp.removeAttr("background");
                      displayApp.removeAttr("ignore");
                      displayApp.removeAttr("local");

                      layout.coverlay("save-changes");
                      changeTab(newTab);
                    }
                  });

                  var pop = ui_popOut({
                    target : displayApp,
                    id : "save-changes",
                    title : "Save Changes...",
                  }, content);
                }
                else {
                  changeTab(newTab);
                }
              });
            }
          }
          else {
            tabWrapper.remove();
          }
        }
      }
      else {
        var tab = $("<b>").appendTo(tabWrapper);
        tab.addClass("flex flexmiddle");

        var name = sync.newApp("ui_tab");
        name.attr("tabName", tabData.name);
        name.attr("endTime", tabData.end);
        name.css("outline", "none");

        game.state.addApp(name);

        tab.append(name);
        if (app.attr("preview") != "true" && hasSecurity(getCookie("UserID"), "Assistant Master")) {
          var stop = genIcon("remove").appendTo(tabWrapper);
          stop.addClass("lrpadding");
          stop.attr("index", key);
          stop.click(function(){
            data.tabs = data.tabs || [];
            if (app.attr("tab") == key) {
              if (displayApp.attr("entIndex") && displayApp.attr("entIndex") != "config") {
                var oldEnt = getEnt(displayApp.attr("entIndex"));
                if (oldEnt) {
                  $("#board-layer-controls-"+oldEnt.id()).hide();
                  oldEnt.removeApp(displayApp);
                }
              }
              else {
                displayApp.removeAttr("tabKey");
                game.state.removeApp(displayApp);
              }
              displayApp.removeAttr("entIndex");
            }
            data.tabs.splice($(this).attr("index"), 1);
            obj.sync("updateState");
          });
        }
        tab.hover(function(){
          $(this).parent().addClass("hover2");
        },
        function(){
          $(this).parent().removeClass("hover2");
        });

        if (app.attr("tab") == key) {
          for (var attr in game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0]) {
            displayApp.attr(attr, game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0][attr]);
          }
          game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0] = {};
          tabWrapper.addClass("highlight alttext");
          tabWrapper.removeClass("button");
          if (displayApp.attr("entIndex") && displayApp.attr("entIndex") != "config") {
            var oldEnt = getEnt(displayApp.attr("entIndex"));
            if (oldEnt) {
              if (oldEnt.data && oldEnt.data._t == "b") {
                $("#board-layer-controls-"+oldEnt.id()).hide();
                runCommand("updateBoardCursor", {id : oldEnt.id(), data : {x : 0, y : 0, v : true}});
              }
              oldEnt.removeApp(displayApp);
            }
            displayApp.removeAttr("entIndex");
          }
          else if (displayApp.attr("entIndex") == "config") {
            game.config.removeApp(displayApp);
          }
          displayApp.removeAttr("entIndex");
          displayApp.attr("ui-name", tabData.ui || "ui_display");
          displayApp.attr("tabKey", app.attr("tab"));
          game.state.addApp(displayApp);

          tabWrapper.click(function(){$(this).contextmenu();});
        }
        else {
          tab.attr("tab", key)
          tab.attr("entIndex", index);
          tab.click(function(){
            function changeTab(newTab) {
              displayApp.removeAttr("background");
              displayApp.removeAttr("ignore");
              displayApp.removeAttr("printing");

              game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0] = {};
              if (document.getElementById(app.attr("target"))) {
                var attributes = document.getElementById(app.attr("target")).attributes;
                for (var j=0; j<attributes.length; j++) {
                  var attrib = attributes[j];
                  if (attrib.specified == true && (attrib.name == "scrolltop" || attrib.name == "scrollleft" || attrib.name == "zoom" || attrib.name == "viewonly" || attrib.name == "layer")) {
                    game.locals["tabAttrs-"+app.attr("id")].data[app.attr("tab") || 0][attrib.name] = attrib.value;
                  }
                }
              }
              displayApp.removeAttr("scrolLLeft");
              displayApp.removeAttr("scrollTop");
              displayApp.removeAttr("zoom");
              app.attr("tab", newTab);
              displayApp.attr("tabKey", newTab);
              obj.update();
              layout.coverlay($(".piece-quick-edit"));
            }

            var newTab = $(this).attr("tab");
            var oldEnt = getEnt(displayApp.attr("entIndex"));
            if (oldEnt) {
              $("#board-layer-controls-"+oldEnt.id()).hide();
            }
            if (displayApp.attr("background") == "true") {
              var content = $("<div>");
              content.addClass("flexcolumn");

              var optimizer = $("<button>").appendTo(content);
              optimizer.addClass("highlight alttext hover2");
              optimizer.attr("title", "Condenses the map size down to the smallest it can be, attempts to merge 'tiled' pieces for added performance and removes duplicate tiles.");
              optimizer.append("With Optimizer");
              optimizer.click(function(){
                if (boardApi.saveChanges(oldEnt)) {
                  displayApp.removeAttr("background");
                  displayApp.removeAttr("ignore");
                  displayApp.removeAttr("local");

                  layout.coverlay("save-changes");
                  changeTab(newTab);
                }
              });

              var noOptimizer = $("<button>").appendTo(content);
              noOptimizer.addClass("background alttext hover2");
              noOptimizer.append("Without Optimizer");
              noOptimizer.click(function(){
                if (boardApi.saveChanges(oldEnt, true)) {
                  displayApp.removeAttr("background");
                  displayApp.removeAttr("ignore");
                  displayApp.removeAttr("local");

                  layout.coverlay("save-changes");
                  changeTab(newTab);
                }
              });

              var discard = $("<button>").appendTo(content);
              discard.addClass("subtitle hover2");
              discard.css("margin", "1em");
              discard.append("Discard Changes");
              discard.click(function(){
                if (boardApi.saveChanges(oldEnt, "discard")) {
                  displayApp.removeAttr("background");
                  displayApp.removeAttr("ignore");
                  displayApp.removeAttr("local");

                  layout.coverlay("save-changes");
                  changeTab(newTab);
                }
              });

              var pop = ui_popOut({
                target : displayApp,
                id : "save-changes",
                title : "Save Changes...",
              }, content);
            }
            else {
              changeTab(newTab);
            }
          });
        }

        if (noTab != null && noTab == key) {
          tab.click();
        }
      }
    }
  }

  if (app.attr("preview") != "true" && hasSecurity(getCookie("UserID"), "Assistant Master")) {
    var tabWrap = $("<div>").appendTo(boardTabs);
    tabWrap.addClass("flexmiddle lrpadding alttext");

    var newTab = genIcon("plus").appendTo(tabWrap);
    newTab.attr("title", "Add a new tab");
    newTab.click(function(){
      var actionList = [];

      actionList.push({
        name : "Slideshow",
        icon : "picture",
        click : function(ev, ui) {
          game.state.data.tabs.push({name : "Slideshow", data : {}});
          game.state.sync("updateState");
        }
      });

      actionList.push({
        name : "Map",
        icon : "globe",
        click : function(ev, ui) {
          var ignore = {};
          for (var i in game.state.data.tabs) {
            ignore[game.state.data.tabs[i].index] = true;
          }
          var content = sync.render("ui_assetPicker")(obj, app, {
            ignore : ignore,
            filter : "b",
            select : function(ev, ui, ent, options, entities){
              game.state.data.tabs = game.state.data.tabs || [];
              game.state.data.tabs.push({ui : "ui_board", index : ent.id()});
              game.state.sync("updateState");
              options.data.ignore = options.data.ignore || {};
              options.data.ignore[ent.id()] = true;
              return true;
            }
          });
          var pop = ui_popOut({
            target : $("body"),
            id : "add-asset",
            title : "Add Asset",
            style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
          }, content);
          pop.resizable();
        }
      });

      actionList.push({
        name : "Resource Page",
        icon : "book",
        click : function(ev, ui) {
          game.state.data.tabs = game.state.data.tabs || [];
          game.config.data.resources = game.config.data.resources || [];
          game.config.sync("updateConfig");
          game.state.data.tabs.push({name : "Resource Page", ui : "ui_resourcePage", index : "config"});
          game.state.sync("updateState");
        }
      });

      actionList.push({
        name : "Asset",
        icon : "user",
        click : function(ev, ui) {
          var ignore = {};
          for (var i in game.state.data.tabs) {
            ignore[game.state.data.tabs[i].index] = true;
          }
          var content = sync.render("ui_assetPicker")(obj, app, {
            ignore : ignore,
            select : function(ev, ui, ent, options, entities){
              game.state.data.tabs = game.state.data.tabs || [];
              game.state.data.tabs.push({ui : assetTypes[ent.data._t].handout, index : ent.id()});
              game.state.sync("updateState");
              layout.coverlay("add-asset");
            }
          });
          var pop = ui_popOut({
            target : $("body"),
            prompt : true,
            id : "add-asset",
            title : "Add Asset",
            style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
          }, content);
          pop.resizable();
        }
      });

      ui_dropMenu($(this), actionList, {id : "new-tab", align : "bottom"});
    });
  }

  app.removeAttr("forced");

  return boardTabs;
});

sync.render("ui_primaryView", function(obj, app, scope) {
  app.addClass("flex flexcolumn displayApp white");
  app.attr("id", "primary-display");
  app.attr("ui-name", "ui_display");

  return $("<div>");
});


sync.render("ui_displayManager", function(obj, app, scope) {
  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");

  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("flexbetween foreground alttext");

  var tabAppWrap = $("<div>").appendTo(optionsBar);
  var tabApp = sync.newApp("ui_displayTabs");
  tabApp.appendTo(tabAppWrap);

  var displayApp = sync.newApp("ui_display").appendTo(div);
  displayApp.addClass("flex flexcolumn displayApp white");
  displayApp.attr("preview", app.attr("preview"));
  tabApp.attr("target", displayApp.attr("id"));
  tabApp.attr("preview", app.attr("preview"));
  tabApp.attr("tab", app.attr("tab"));
  game.state.addApp(tabApp);

  return div;
});

sync.render("ui_display", function(obj, app, scope){
  if (!obj) {
    obj = game.state;
    game.state.addApp(app);
    return $("<div>");
  }
  scope = scope || {viewOnly : app.attr("viewOnly"), local : app.attr("local") == "true", tabKey : app.attr("tabKey") || 0};
  var div = $("<div>");
  div.addClass("flex flexcolumn");
  div.css("pointer-events", "auto");
  div.css("position", "relative");

  if (obj.data.tabs[scope.tabKey]) {
    obj.data.tabs[scope.tabKey].data = obj.data.tabs[scope.tabKey].data || {};
    var data = obj.data.tabs[scope.tabKey].data;

    if (!layout.mobile && hasSecurity(getCookie("UserID"), "Assistant Master")) {
      div.on("dragover", function(ev) {
        ev.preventDefault();
        ev.stopPropagation();
        if (!$("#"+app.attr("id")+"-drag-overlay").length) {
          var olay = layout.overlay({
            target : app,
            id : app.attr("id")+"-drag-overlay",
            style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
          });
          olay.addClass("flexcolumn flexmiddle alttext");
          olay.css("font-size", "2em");
          olay.append("<b>Drop to Load</b>");
        }
      });
      div.on('drop', function(ev){
        ev.preventDefault();
        ev.stopPropagation();
        var dt = ev.originalEvent.dataTransfer;
        if (dt.getData("Text")) {
          var txt = dt.getData("Text");
          var actionList = [
            {
              name : "CONFIRM CHANGE",
              click : function(ev, ui) {
                ui_processLink(txt, function(link, newLink) {
                  obj.data.tabs[scope.tabKey].data = obj.data.tabs[scope.tabKey].data || {};
                  obj.data.tabs[scope.tabKey].data.media = txt;

                  game.locals["imgHistory"] = game.locals["imgHistory"] || sync.obj();
                  game.locals["imgHistory"].data = game.locals["imgHistory"].data || []
                  var imgHistory = game.locals["imgHistory"].data;

                  if (!util.contains(imgHistory, newLink)) {
                    imgHistory.push(txt);
                    game.locals["imgHistory"].update();
                  }

                  obj.sync("updateState");
                });
              }
            },
          ]
          var menu = ui_dropMenu($(this), actionList, {"id" : "confirm"});
          menu.css("left", ev.pageX - menu.width()/2);
          menu.css("top", ev.pageY - 10);
        }
        layout.coverlay(app.attr("id")+"-drag-overlay");
      });

      div.on("dragleave", function(ev) {
        ev.preventDefault();
        ev.stopPropagation();
        layout.coverlay(app.attr("id")+"-drag-overlay");
      });
      div.mouseout(function(){
        layout.coverlay(app.attr("id")+"-drag-overlay");
      });
    }
    if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
      var newOptionsBar = $("<div>");
      if (!app.attr("hidemenu")) {
        newOptionsBar.appendTo(div);
      }
      newOptionsBar.addClass("flexrow flexmiddle padding");
      newOptionsBar.css("position", "absolute");
      newOptionsBar.css("left", "100px");
      newOptionsBar.css("bottom", "100px");
      newOptionsBar.css("transition", "opacity 0.5s");
      newOptionsBar.css("opacity", "0.25");
      newOptionsBar.hover(function(){
        newOptionsBar.css("opacity", "1.0");
      },
      function(){
        newOptionsBar.css("opacity", "0.25");
      });
      newOptionsBar.mousedown(function(ev){
        ev.stopPropagation();
      });
      newOptionsBar.mouseup(function(ev){
        ev.stopPropagation();
      });
      newOptionsBar.click(function(ev){
        ev.stopPropagation();
      });

      var option = $("<div>").appendTo(newOptionsBar);
      option.addClass("alttext background hover2 spadding");
      option.css("font-size", "1.2em");
      option.text("Edit Display");
      option.click(function(){
        var div = $("<div>");
        var titleInput = genInput({
          //parent: div,
          placeholder: "Enter Title",
          style: {"display": "block"},
          value: data.title,
        });

        var media = genInput({
          //parent: div,
          placeholder: "Media URL",
          value: data.media,
          style: {"display": "block"},
          paste: true,
        });

        var filterWrap = genIcon("refresh", "Reset Filters");
        filterWrap.addClass("flex flexmiddle");
        filterWrap.click(function(){
          brightness.val(100);
          contrast.val(100);
          gray.val(0);
          hue.val(0);
          invert.val(0);
          sepia.val(0);
        });

        var brightness = genInput({
          type : "range",
          value : 100,
          min : 50,
          max : 150,
        });

        var contrast = genInput({
          type : "range",
          value : 100,
          min : 50,
          max : 100,
        });

        var gray = genInput({
          type : "range",
          value : 0,
          min : 0,
          max : 100,
        });

        var hue = genInput({
          type : "range",
          value : 0,
          min : 0,
          max : 360,
        });

        var invert = genInput({
          type : "range",
          value : 0,
          min : 0,
          max : 100,
        });

        var sepia = genInput({
          type : "range",
          value : 0,
          min : 0,
          max : 100,
        });

        brightness.val(100);
        contrast.val(100);
        gray.val(0);
        hue.val(0);
        invert.val(0);
        sepia.val(0);

        if (data && data.options && data.options.filter) {
          var filters = data.options.filter;
          brightness.val(parseInt(filters["brightness"]) || 100);
          contrast.val(parseInt(filters["contrast"]) || 100);
          gray.val(parseInt(filters["grayscale"]) || 0);
          hue.val(parseInt(filters["hue-rotate"]) || 0);
          invert.val(parseInt(filters["invert"]) || 0);
          sepia.val(parseInt(filters["sepia"]) || 0);
        }

        var controls = ui_controlForm({
          inputs : {
            "Filters" : filterWrap,
            "Brightness" : brightness,
            "Grayscale" : gray,
            "Hue Shift" : hue,
            "Inverted" : invert,
            "Sepia" : sepia,
          },
          click : function(ev, inputs) {
            data.options = data.options || {};
            data.options.filter = {};
            if (brightness.val() != 100) {
              data.options.filter["brightness"] = brightness.val();
            }
            if (contrast.val() != 100) {
              data.options.filter["contrast"] = contrast.val();
            }
            if (gray.val() != 0) {
              data.options.filter["grayscale"] = gray.val();
            }
            if (hue.val() != 0) {
              data.options.filter["hue-rotate"] = hue.val();
            }
            if (invert.val() != 0) {
              data.options.filter["invert"] = invert.val();
            }
            if (sepia.val() != 0) {
              data.options.filter["sepia"] = sepia.val();
            }
            if (!scope.local) {
              ui_processLink(media.val(),function(link, newLink) {
                obj.data.tabs[scope.tabKey].data = obj.data.tabs[scope.tabKey].data || {};
                obj.data.tabs[scope.tabKey].data.media = newLink;
                obj.data.tabs[scope.tabKey].data.options = data.options;
                obj.sync("updateState");
              });
            }
            else {
              obj.update();
            }
          }
        }).appendTo(div);

        var popout = ui_popOut({
          target : $(this),
          id : "displayControls",
          align : "top"
        }, div);
      });

      game.locals["imgHistory"] = game.locals["imgHistory"] || sync.obj();
      game.locals["imgHistory"].data = game.locals["imgHistory"].data || [];

      var content = sync.newApp("ui_imgHistory").appendTo(newOptionsBar);
      content.attr("count", 6);
      content.css("outline", "none");
      game.locals["imgHistory"].addApp(content);
    }

    if (!data || !data.media) {
      div.css("background-image", "url('/content/quickstart.png')");
      div.css("background-repeat", "no-repeat");
      div.css("background-position", "center");
      div.css("webkit-box-shadow", "inset 0em 0em 1em black");
    }

    var container = $("<div>").appendTo(div);
    container.addClass("flex flexcolumn flexmiddle dropContent");
    container.sortable({
      handle : ".tab",
      over : function(ev, ui){
        if ($(ui.item).attr("index")) {
          if (!$("#"+app.attr("id")+"-drag-overlay").length) {
            var olay = layout.overlay({
              target : app,
              id : app.attr("id")+"-drag-overlay",
              style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
            });
            olay.addClass("flexcolumn flexmiddle alttext");
            olay.css("font-size", "2em");
            olay.css("pointer-events", "none");
            olay.append("<b>Drop to Display</b>");
          }
        }
      },
      out : function(ev, ui) {
        layout.coverlay(app.attr("id")+"-drag-overlay");
      },
      update : function(ev, ui) {
        container.empty();
        if ($(ui.item).attr("src")) {
          if ($(ui.item).attr("src") == "state") {
            game.state.update(); // refresh the list
          }
          else if ($(ui.item).attr("src") == "players") {
            game.players.update(); // refresh the list
          }
          else {
            game.entities.data[$(ui.item).attr("src")].update(); // refresh the list
          }
        }
        else {
          game.entities.update(); // refresh the list
        }
        // create a piece if there is an entity reference
        var ent = game.entities.data[$(ui.item).attr("index")];
        if (ent && hasSecurity(getCookie("UserID"), "Visible", ent.data)) {
          if (ent.data._t == "p") {
            obj.data.tabs[scope.tabKey].data = obj.data.tabs[scope.tabKey].data || {};
            obj.data.tabs[scope.tabKey].data.media = ent.id();
            obj.sync("updateState");
          }
          else {
            ui_processLink((sync.val(ent.data.info.img) || "/content/icons/blankchar.png"), function(link, newLink) {
              obj.data.tabs[scope.tabKey].data = obj.data.tabs[scope.tabKey].data || {};
              obj.data.tabs[scope.tabKey].data.media = newLink;

              game.locals["imgHistory"] = game.locals["imgHistory"] || sync.obj();
              game.locals["imgHistory"].data = game.locals["imgHistory"].data || []
              var imgHistory = game.locals["imgHistory"].data;

              if (!util.contains(imgHistory, newLink)) {
                imgHistory.push(newLink);
                game.locals["imgHistory"].update();
              }

              obj.sync("updateState");
            });
          }
        }
        layout.coverlay(app.attr("id")+"-drag-overlay");
      }
    });
    if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
      container.css("cursor", "pointer");
      container.click(function(){
        if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
          var content = sync.render("ui_filePicker")(obj, app, {
            value : data.media,
            allowExternal : true,
            change : function(ev, ui, val){
            ui_processLink(val, function(link, newLink) {
              obj.data.tabs[scope.tabKey].data = obj.data.tabs[scope.tabKey].data || {};
              obj.data.tabs[scope.tabKey].data.media = newLink;

              game.locals["imgHistory"] = game.locals["imgHistory"] || sync.obj();
              game.locals["imgHistory"].data = game.locals["imgHistory"].data || []
              var imgHistory = game.locals["imgHistory"].data;

              if (!util.contains(imgHistory, newLink)) {
                imgHistory.push(newLink);
                game.locals["imgHistory"].update();
              }

              obj.sync("updateState");
              layout.coverlay("narrative-picker")
            });
          }});

          var pop = ui_popOut({
            id : "narrative-picker",
            prompt : true,
            target : $(this),
            style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
          }, content);
          pop.resizable();
        }
      });
      container.contextmenu(function(ev){
        var actionList = [];

        if (app.attr("hidemenu")) {
          actionList.push({
            name : "Show Menu",
            click : function(){
              app.removeAttr("hidemenu");
              obj.update();
            },
          });
        }
        else {
          actionList.push({
            name : "Hide Menu",
            click : function(){
              app.attr("hidemenu", true);
              obj.update();
            },
          });
        }

        actionList.push({
          name : "Recent Displays",
          click : function(){
            if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
              game.locals["imgHistory"] = game.locals["imgHistory"] || sync.obj();
              game.locals["imgHistory"].data = game.locals["imgHistory"].data || []
              var imgHistory = game.locals["imgHistory"].data;
              if (imgHistory.length) {
                var content = sync.newApp("ui_imgHistory");
                game.locals["imgHistory"].addApp(content);
                var pop = ui_popOut({
                  target : container,
                  title : "Recent",
                  id : "img-history",
                }, content);
                pop.resizable();
              }
              else {
                container.click();
              }
              ev.preventDefault();
              ev.stopPropagation();
            }
          }
        });

        actionList.push({
          name : "Force Players to Tab",
          click : function(){
            runCommand("forceTab", {index : scope.tabKey});
          }
        })

        ui_dropMenu($(this), actionList, {"id" : "display-context", align : "center"});
        return false;
      });
    }

    container.bind("paste", function(e) {
      // access the clipboard using the api
      // firefox won;t call this if ctrl shift + v
      if (!e.originalEvent.clipboardData.getData('text')) {
        sendAlert({text : "Image Link must be a URL"});
        return;
      }
      if (!_down["16"] && hasSecurity(getCookie("UserID"), "Assistant Master")) {
        ui_processLink(e.originalEvent.clipboardData.getData('text'),function(link, newLink) {
          obj.data.tabs[scope.tabKey].data = obj.data.tabs[scope.tabKey].data || {};
          obj.data.tabs[scope.tabKey].data.media = newLink;
          obj.sync("updateState");
        });
      }
      else if (hasSecurity(getCookie("UserID"), "Trusted Player")) {
        if (getCookie("disableReactions") != "true") {
          ui_processLink(e.originalEvent.clipboardData.getData('text'),function(link, newLink) {
            runCommand("reaction", newLink);
          });
        }
      }
    });

    if (data && data.media) {
      if (isNaN(data.media)) {
        var media = ui_processMedia(String(data.media || ""), {parent : container, disabled : true});
        if (!media.is("img")) {
          media.attr("loop", true);

          // media captures all keyboard inputs without permission
          function play(media, delay) { // firefox has to start on the next frame
            setTimeout(function() {
              media.play();
            }, delay);
          }
          play(media[0], 10);
        }
        else {
          div.css("background-image", "url('"+ media.attr("src") +"')");
          div.css("background-size", "contain");
          div.css("background-repeat", "no-repeat");
          div.css("background-position", "center");
          div.css("webkit-box-shadow", "inset 0em 0em 1em black");
          media.remove();
        }
      }
      else {
        var ent = game.entities.data[data.media];
        var newApp = sync.newApp("ui_renderPage");
        newApp.attr("viewOnly", true);
        newApp.addClass("fit-x");
        newApp.css("text-align", "left");
        container.append(newApp);
        ent.addApp(newApp);
      }
    }
    if (data && data.text && data.credits && data.preface) {
      setTimeout(function() {
        var img = false;
        if (!container.children().length) {
          img = true;
        }

        var finalWrapper = $("<div>").appendTo(container);
        finalWrapper.css("position", "absolute");
        finalWrapper.css("width", container.outerWidth());
        finalWrapper.css("height", container.outerHeight());

        var creditsWrapper = $("<div>").appendTo(finalWrapper);
        creditsWrapper.css("width", container.outerWidth());
        creditsWrapper.css("height", container.outerHeight());
        creditsWrapper.css("overflow", "hidden");
        creditsWrapper.css("position", "relative");
        creditsWrapper.css("background-color", "none");
        if (img) {
          creditsWrapper.css("background-image", "url('"+ data.media +"')");
        }
        creditsWrapper.css("background-size", "cover");
        creditsWrapper.css("background-repeat", "no-repeat");
        creditsWrapper.css("background-position", "center");

        var preface = $("<div>").appendTo(creditsWrapper);
        preface.addClass("flexcolumn flexmiddle");
        preface.css("position", "absolute");
        preface.css("width", "100%");
        preface.css("height", "100%");
        preface.css("font-family", "StarJedi");
        preface.css("font-weight", "bold");
        preface.css("color", "white");

        var title = $("<div>").appendTo(preface);
        title.css("color", "rgb(75, 213, 238)");
        title.css("font-size", "2em");
        var split = data.preface.split("\n");
        var str = "";
        for (var i=0; i<split.length; i++) {
          str = str + (split[i] || "").trim() + "<br>";
        }
        title.append(str);

        setTimeout(function() {
          title.animate({
            opacity : 0,
          }, 1000, function(){
            preface.empty();
            var title = $("<div>").appendTo(preface);
            title.css("font-family", "StarJedi");
            title.css("font-weight", "bold");
            title.css("text-align", "center");
            title.css("color", "rgba(99, 207, 99, 1.0)");
            title.css("transform", "scale(2)");
            title.css("font-size", "6em");
            title.css("transition", "transform 7s");
            var split = data.credits.split("\n");
            var str = "";
            for (var i=0; i<split.length; i++) {
              str = str + (split[i] || "").trim() + "<br>";
            }
            title.append(str);

            setTimeout(function(){title.css("transform", "scale(0)");},100);
            setTimeout(function(){
              title.animate({
                opacity : 0,
              }, 2000, "linear", function() {
                var creditsDiv = $("<div>").appendTo(creditsWrapper);
                creditsDiv.addClass("flexcolumn flexmiddle");
                creditsDiv.css("overflow", "hidden");
                creditsDiv.css("color", "white");
                creditsDiv.css("width", "100%");
                creditsDiv.css("height", creditsWrapper.outerHeight());
                creditsDiv.css("position", "relative");
                creditsDiv.css("-webkit-transform", "perspective(300px) rotateX(25deg)");
                creditsDiv.css("transform", "perspective(300px) rotateX(25deg)");

                var para = $("<div>").appendTo(creditsDiv);
                para.css("position", "absolute");
                para.css("width", "50%");
                para.css("overflow-y", "visible");
                para.css("font-weight", "bold");

                var split = data.text.split("\n");

                var text = $("<h3>").appendTo(para);
                text.addClass("flexmiddle");
                text.css("font-family", "StarJedi");
                text.text((split[0] || "").trim());

                var text = $("<h4>").appendTo(para);
                text.addClass("flexmiddle");
                text.css("font-family", "StarJedi");
                text.text((split[1] || "").trim());

                var text = $("<p>").appendTo(para);
                var str = "";
                for (var i=2; i<split.length; i++) {

                  str = str + (split[i] || "").trim() + "<br>";
                }
                text.append(str);
                para.css("top", "80%");
                para.animate({
                  top : "-"+para.outerHeight()+"px",
                }, Math.max(Math.max(para.outerHeight()-creditsDiv.outerHeight(), 0)/18 * 1000 + creditsDiv.outerHeight()/18 * 500, 20000), "linear", function() {
                  layout.coverlay(creditsWrapper, 2000);
                });
              });
            },4000);
          });
        },5000);
      },100);
    }

    if (data && data.options) {
      var filterStr = "";
      for (var key in data.options.filter) {
        if (key == "hue-rotate") {
          filterStr = filterStr + " " + key + "("+data.options.filter[key]+"deg)";
        }
        else {
          filterStr = filterStr + " " + key + "("+data.options.filter[key]+"%)";
        }
      }
      div.addClass("white effect-container effect-container-"+scope.tabKey);
      if (data.options.effects) {
        var filterStr = "";
        for (var key in data.options.effects) {
          if (key == "hue-rotate") {
            filterStr = filterStr + " " + key + "("+data.options.effects[key]+"deg)";
          }
          else {
            filterStr = filterStr + " " + key + "("+data.options.effects[key]+"%)";
          }
        }
      }

      div.css("background-color", "rgb(255,255,255)");
      div.css("-webkit-filter", filterStr);
      div.css("filter", filterStr);
    }

    if (data && data.title) {
      var title = $("<div>").appendTo(div);
      title.addClass("flexmiddle");
      title.addClass("outline");
      title.css("background-color", "white");
      title.css("font-size", "2em");
      title.append(data.title);
    }

    function check(timer, timeIndex) {
      if (timer) {
        var timeData = data.timers[timeIndex];
        if ((timeData.endTime - dateCorrected()) > 0) {
          timer.text(String(Math.floor((timeData.endTime-dateCorrected(-500))/1000)).formatTime());
          setTimeout(function() {check(timer, timeIndex);}, 50);
          return true;
        }
        else {
          if (timeData.endTime - dateCorrected() > -1500) {
            timer.text("0".formatTime());
            setTimeout(function() {check(timer, timeIndex);}, 1000);
            return true;
          }
          else {
            timer.parent().remove();
            return true;
          }
        }
      }
    }

    var timerDiv = $("<div>").appendTo(div);
    timerDiv.addClass("flexmiddle");
    if (data) {
      for (var index in data.timers) {
        var timerData = data.timers[index];
        if (timerData.endTime - dateCorrected() > -1500) {
          var timer = $("<div>").appendTo(timerDiv);
          timer.addClass("outline");
          timer.css("display", "inline");
          timer.css("background-color", "white");

          var optionsBar = $("<div>").appendTo(timer);
          optionsBar.addClass("flexmiddle");

          var deleteButton = genIcon("trash").appendTo(optionsBar);
          deleteButton.attr("index", index);
          deleteButton.click(function() {
            runCommand("destroyDisplayCountdown", {index : $(this).attr("index")})
          });

          if (timerData.label) {
            optionsBar.append("<b>"+ timerData.label +"</b>");
          }

          var label = $("<b>").appendTo(timer);
          label.css("font-size", "2em");
          if (!check(label, index)) {
            timer.remove();
          };
        }
      }
    }

    /*var paintOverlay = $("<canvas>");

    if (game.locals["drawing"] && game.locals["drawing"].data.target == app.attr("id")) {


      container.mousedown(function(ev){
        var x = (ev.offsetX);
        var y = (ev.offsetY);
        paintOverlay.attr("start-x", x);
        paintOverlay.attr("start-y", y);
      });
      container.mousemove(function(ev){
        var x = (ev.offsetX);
        var y = (ev.offsetY);
        updateCursorCheck({id : obj.id(), data : {x : x / zoom, y : y / zoom, v : (app.attr("hideCursor") == "true")}});

        var cX = Number(paintOverlay.attr("start-x"))
        var cY = Number(paintOverlay.attr("start-y"));
        paintOverlay.clearCanvas();
        paintOverlay.drawLine({
          strokeStyle: game.locals["drawing"].data.c,
          strokeWidth: 3,
          x1: cX, y1: cY,
          x2: x, y2: y,
        });
      });
      container.mouseup(function(ev){
        var cX = Number(paintOverlay.attr("start-x"));
        var cY = Number(paintOverlay.attr("start-y"));
        var x = (ev.offsetX);
        var y = (ev.offsetY);
        paintOverlay.removeAttr("start-x");
        paintOverlay.removeAttr("start-y");
        // save some shit i think

        if (!scope.local) {
          runCommand("boardAddStroke", {id : obj.id(), data : {
              c : game.locals["drawing"].data.c, w : 3,
              x1 : cX, y1 : cY,
              x2 : x, y2 : y,
            }
          });
        }
        else {
          data.strokes = data.strokes || [];
          data.strokes.push({
            c : game.locals["drawing"].data.c, w : 3,
            x1 : cX, y1 : cY,
            x2 : x, y2 : y,
            u : getCookie("UserID")
          });
          obj.update();
        }
      });
    }

    if (data.strokes && $("#board-"+obj.id()+"-stroke-limit").length) {
      $("#board-"+obj.id()+"-stroke-limit").text(data.strokes.length+"/"+game.config.data.decorLimit);

        paintOverlay.appendTo(container);
        paintOverlay.css("pointer-events", "none");
        paintOverlay.css("position", "absolute");
        paintOverlay.attr("width", container.w * zoom);
        paintOverlay.attr("height", container.h * zoom);

        for (var key in data.strokes) {
          var p = data.strokes[key];
          paintOverlay.drawLine({
            strokeStyle: p.c,
            strokeWidth: p.w  * zoom,
            x1 : p.x1 * zoom, y1 : p.y1 * zoom,
            x2 : p.x2 * zoom, y2 : p.y2 * zoom,
          });
        }
    }*/
  }

  return div;
});

sync.render("ui_imgHistory", function(obj, app, scope) {
  var div = $("<div>");
  div.addClass("flexrow flexwrap flexbetween");

  var imgHistory = obj.data;

  var count = app.attr("count") || imgHistory.length;

  for (var i=imgHistory.length-1; i>=Math.max((imgHistory.length)-count, 0); i--) {
    if (isNaN(imgHistory[i])) {
      var media = ui_processMedia(imgHistory[i]);
      media.addClass("hover2");
      media.appendTo(div);
      media.attr("srcMedia", imgHistory[i]);
      media.attr("height", "50px");
      media.click(function(){
        util.slideshow($(this).attr("srcMedia"));
      });
      media.bind("error", function(){
        media.remove();
      });
      if (media.is("img")) {
        media.contextmenu(function(ev){
          assetTypes["img"].contextmenu(ev, $(this), $(this).attr("srcMedia"));
          ev.stopPropagation();
          ev.preventDefault();
          return false;
        });
      }
    }
  }

  return div;
});

function buildShape(shape, col, size) {
  size = size || 20;

  var dummyCanvas = $("<canvas>");
  dummyCanvas.attr("width", (size || 20) + "px");
  dummyCanvas.attr("height", (size || 20) + "px");
  dummyCanvas.css("pointer-events", "none");
  if (shape == 0) {
    dummyCanvas.drawRect({
      width : size, height : size,
      fillStyle : col,
      strokeStyle: "rgba(0,0,0,0.4)",
      strokeWidth: 2,
      fromCenter : false,
    });
  }
  else if (shape == 1) {
    dummyCanvas.drawRect({
      width : size, height : size,
      fillStyle : col,
      strokeStyle: "rgba(0,0,0,0.4)",
      strokeWidth: 2,
      fromCenter : false,
      cornerRadius : 4
    });
  }
  else if (shape == 2) {
    dummyCanvas.drawRect({
      width : size, height : size,
      fillStyle : col,
      strokeStyle: "rgba(0,0,0,0.4)",
      strokeWidth: 2,
      fromCenter : false,
      cornerRadius : 30
    });
  }
  else if (shape == 3) {
    dummyCanvas.drawPolygon({
      radius : size/2,
      y : -2,
      fillStyle : col,
      strokeStyle: "rgba(0,0,0,0.4)",
      strokeWidth: 2,
      fromCenter : false,
      rotate : 180,
      sides : 3,
    });
  }
  else if (shape == 4) {
    dummyCanvas.drawPolygon({
      radius : size/2,
      fillStyle : col,
      strokeStyle: "rgba(0,0,0,0.4)",
      strokeWidth: 2,
      fromCenter : false,
      disableEvents : true,
      sides : 3
    });
  }
  else if (shape == 5) {
    dummyCanvas.drawPolygon({
      radius : size/2,
      fillStyle : col,
      strokeStyle: "rgba(0,0,0,0.4)",
      strokeWidth: 2,
      fromCenter : false,
      disableEvents : true,
      concavity : 0.5,
      sides : 5
    });
  }
  else if (shape) {
    dummyCanvas.drawPolygon({
      radius : size/2,
      fillStyle : col,
      strokeStyle: "rgba(0,0,0,0.4)",
      strokeWidth: 2,
      fromCenter : false,
      disableEvents : true,
      sides : shape-1
    });
  }
  return dummyCanvas;
}
sync.render("ui_shapePicker", function(obj, app, scope){
  var div = $("<div>");
  div.addClass("fit-x flexaround flexwrap subtitle");

  var shapes = [0,1,2,3,4,5,6,7,9];
  for (var i in shapes) {
    var shapeWrap = $("<div>").appendTo(div);
    shapeWrap.addClass("flexmiddle spadding smooth");
    if (scope.shapeChange){
      shapeWrap.addClass("hover2");
    }
    if (scope.selected == i) {
      shapeWrap.addClass(scope.selectedClass || "highlight");
    }

    var shape = buildShape(shapes[i], scope.color || "", scope.size);
    shape.appendTo(shapeWrap);
    shape.css("pointer-events", "auto");
    shape.css("cursor", "pointer");
    shape.attr("index", i);
    shape.click(function(ev){
      if (scope.shapeChange){
        scope.shapeChange(ev, $(this), shapes[$(this).attr("index")]);
      }
    });
  }

  return div;
});

sync.render("ui_colorPicker", function(obj, app, scope){
  var div = $("<div>");
  div.addClass("flexcolumn");

  var color = [255,255,255,1];
  if (scope.color && scope.color.length >= 4 && scope.color[0]=="r" && scope.color[1]=="g" && scope.color[2]=="b") {
    var tempCol = scope.color.replace("rgba(", "");
    tempCol = tempCol.replace("rgb(", "");
    tempCol = tempCol.substring(0, tempCol.length-1);
    color = tempCol.split(",");
  }
  function buildPreview(parent, colr, ev) {
    parent.empty();

    var breakdownR = $("<div>").appendTo(parent);
    breakdownR.addClass("flexrow flexmiddle");
    breakdownR.append("<text class='lrpadding'>R</text>")
    var r = genInput({
      parent : breakdownR,
      type : "number",
      value : color[0],
      max : 255,
      min : 0,
      style : {"width" : "50px", "color" : "#333", "text-shadow" : "none"}
    }).addClass("lrpadding subtitle");
    r.keyup(function(){
      color[0] = Math.min($(this).val(),255);
      colBlock.css("background-color", "rgba("+color[0]+","+color[1]+","+color[2]+","+((color.length==4)?(color[3]):(1.0))+")");
      if (scope.update && scope.colorChange) {
        scope.colorChange(ev, $(this), "rgba("+color[0]+","+color[1]+","+color[2]+","+((color.length==4)?(color[3]):(1.0))+")");
      }
    });

    var breakdownG = $("<div>").appendTo(parent);
    breakdownG.addClass("flexrow flexmiddle");
    breakdownG.append("<text class='lrpadding'>G</text>")
    var g = genInput({
      parent : breakdownG,
      type : "number",
      value : color[1],
      max : 255,
      min : 0,
      style : {"width" : "50px", "color" : "#333", "text-shadow" : "none"}
    }).addClass("lrpadding subtitle");
    g.keyup(function(){
      color[1] = Math.min($(this).val(), 255);
      colBlock.css("background-color", "rgba("+color[0]+","+color[1]+","+color[2]+","+((color.length==4)?(color[3]):(1.0))+")");
      if (scope.update && scope.colorChange) {
        scope.colorChange(ev, $(this), "rgba("+color[0]+","+color[1]+","+color[2]+","+((color.length==4)?(color[3]):(1.0))+")");
      }
    });

    var breakdownB = $("<div>").appendTo(parent);
    breakdownB.addClass("flexrow flexmiddle");
    breakdownB.append("<text class='lrpadding'>B</text>")
    var b = genInput({
      parent : breakdownB,
      type : "number",
      value : color[2],
      max : 255,
      min : 0,
      style : {"width" : "50px", "color" : "#333", "text-shadow" : "none"}
    }).addClass("lrpadding subtitle");
    b.keyup(function(){
      color[2] = Math.min($(this).val(), 255);
      colBlock.css("background-color", "rgba("+color[0]+","+color[1]+","+color[2]+","+((color.length==4)?(color[3]):(1.0))+")");
      if (scope.update && scope.colorChange) {
        scope.colorChange(ev, $(this), "rgba("+color[0]+","+color[1]+","+color[2]+","+((color.length==4)?(color[3]):(1.0))+")");
      }
    });

    var breakdownA = $("<div>").appendTo(parent);
    breakdownA.addClass("flexrow flexmiddle");
    breakdownA.append("<text class='lrpadding'>A</text>")
    var a = genInput({
      parent : breakdownA,
      type : "number",
      value : color[3],
      max : 1.0,
      min : 0,
      style : {"width" : "50px", "color" : "#333", "text-shadow" : "none"}
    }).addClass("lrpadding subtitle");
    a.keyup(function(){
      color[3] = Math.min(Math.ceil($(this).val()*100)/100, 1.0);
      colBlock.css("background-color", "rgba("+color[0]+","+color[1]+","+color[2]+","+((color.length==4)?(color[3]):(1.0))+")");
      if (scope.update && scope.colorChange) {
        scope.colorChange(ev, $(this), "rgba("+color[0]+","+color[1]+","+color[2]+","+((color.length==4)?(color[3]):(1.0))+")");
      }
    });

    var container = $("<div>").appendTo(parent);
    container.addClass("flexrow flexbetween");

    var previewColor = $("<div>").appendTo(container);
    previewColor.addClass("flexcolumn flexaround");
    previewColor.css("width", "25px");
    previewColor.css("height", "25px");
    previewColor.css("background-image", "url('/content/checkered.png')");
    previewColor.css("background-size", "100% 100%");

    var colBlock = $("<div>").appendTo(previewColor);
    colBlock.css("background-color", "rgba("+color[0]+","+color[1]+","+color[2]+","+((color.length==4)?(color[3]):(1.0))+")");
    colBlock.addClass("flex outline");
    if (!scope.update) {
      var confirm = $("<button>").appendTo(container);
      confirm.addClass("highlight alttext smooth");
      confirm.css("margin-left", "0.25em");
      confirm.append("Confirm");
      confirm.click(function(ev){
        if (scope.colorChange) {
          scope.colorChange(ev, $(this), "rgba("+color[0]+","+color[1]+","+color[2]+","+((color.length==4)?(color[3]):(1.0))+")");
        }
      });
    }
    else if (scope.update && scope.colorChange && ev) {
      scope.colorChange(ev, $(this), "rgba("+color[0]+","+color[1]+","+color[2]+","+((color.length==4)?(color[3]):(1.0))+")");
    }
  }

  var colorPicker = $("<div>").appendTo(div);
  colorPicker.addClass("flexcolumn flexbetween");

  var colSelect = $("<div>").appendTo(colorPicker);
  colSelect.addClass("flexcolumn");

  var colorCode = genInput({
    parent : colSelect,
    placeholder : "Color Code",
    value : scope.color,
  }).addClass("subtitle");
  colorCode.change(function(ev){
    if (scope.colorChange) {
      scope.colorChange(ev, $(this), $(this).val());
    }
  });
  if (scope.hideColor) {
    colorCode.hide();
  }
  var colDiv = $("<div>").appendTo(colSelect);
  colDiv.addClass("fit-x");
  if (!scope.vertical) {
    colDiv.addClass("flexrow flexwrap");
  }
  else {
    colDiv.addClass("flexcolumn flexmiddle");
  }
  var cols = scope.colors || [
    "rgba(34,34,34,1)",
    "rgba(187,0,0,1)",
    "rgba(255,153,0,1)",
    "rgba(255,240,0,1)",
    "rgba(0,187,0,1)",
    "rgba(0,115,230,1)",
    "rgba(176,0,187,1)",
    "rgba(255,115,255,1)",
    "rgba(255,255,255,1)",
    /*"rgb(230, 0, 0)",
    "rgb(230, 57, 0)",
    "rgb(230, 115, 0)",
    "rgb(230, 138, 0)",
    "rgb(230, 172, 0)",
    "rgb(230, 230, 0)",
    "rgb(172, 230, 0)",
    "rgb(115, 230, 0)",
    "rgb(57, 230, 0)",
    "rgb(0, 230, 0)",
    "rgb(0, 230, 57)",
    "rgb(0, 230, 115)",
    "rgb(0, 230, 172)",
    "rgb(0, 230, 230)",
    "rgb(0, 172, 230)",
    "rgb(0, 115, 230)",
    "rgb(0, 57, 230)",
    "rgb(0, 0, 230)",
    "rgb(57, 0, 230)",
    "rgb(115, 0, 230)",
    "rgb(172, 0, 230)",
    "rgb(230, 0, 230)",
    "rgb(230, 0, 172)",
    "rgb(230, 0, 115)",
    "rgb(230, 0, 57)",
    "rgb(230, 0, 0)",*/
    "rgba(0,0,0,0)"
  ];

  for (var c in cols) {
    var col = $("<div>").appendTo(colDiv);
    col.addClass("smooth smargin");
    col.css("cursor", "pointer");
    col.attr("index", c);

    var previewCol = $("<div>").appendTo(col);
    previewCol.addClass("smooth");
    previewCol.css("pointer-events", "none");
    previewCol.css("background-image", "url('/content/checkered.png')");
    previewCol.css("background-size", "100% 100%");


    var previewCol = $("<div>").appendTo(previewCol);
    previewCol.addClass("outline");
    previewCol.css("background", cols[c]);
    previewCol.css("pointer-events", "none");
    if (scope.small) {
      previewCol.addClass("padding");
    }
    else {
      previewCol.addClass("lpadding");
    }

    col.click(function(ev){
      colorCode.val(cols[$(this).attr("index")]);
      colorCode.change();
    });
  }

  var colorPickerWrap = $("<div>").appendTo(colorPicker);
  colorPickerWrap.addClass("flexrow flexaround");

  if (!scope.custom) {
    colorPickerWrap.hide();
    if (scope.custom !== false) {
      if (!scope.vertical) {
        var showCustomWrap = $("<div>").appendTo(colDiv);
        showCustomWrap.addClass("flexmiddle lrmargin");
        var showCustom = genIcon("tint", "Custom").appendTo(showCustomWrap);
        showCustom.click(function(){
          colorPickerWrap.show();
          showCustomWrap.remove();
          colDiv.remove();
        });
      }
    }
  }

  var body = $("<div>").appendTo(colorPickerWrap);
  body.addClass("outline smooth");
  body.css("background", "linear-gradient(to right, white, "+(scope.color || "white")+")");
  body.css("width", "100px");
  body.css("height", "100px");

  var darkness = $("<div>").appendTo(body);
  darkness.css("width", "100px");
  darkness.css("height", "100px");
  darkness.css("background", "linear-gradient(to top, black, transparent)");
  darkness.css("position", "relative");
  darkness.css("cursor", "pointer");

  var caret = $("<div>").appendTo(darkness);
  caret.css("pointer-events", "none");
  caret.css("left", "0");
  caret.css("top", "0");
  caret.css("position", "absolute");
  caret.css("background", "radial-gradient(transparent, transparent, transparent, black, white, black, transparent, transparent, transparent)");
  caret.css("width", "10px");
  caret.css("height", "10px");

  darkness.mousedown(function(ev){
    $(this).attr("moving", true);
    caret.css("top", Math.max(Math.min(ev.offsetY, $(this).height())-5, -5));
    caret.css("left", Math.max(Math.min(ev.offsetX, $(this).width())-5, -5));
    var pX = Math.max(Math.min((ev.offsetX/$(this).width()), 1), 0);
    var pXX = 0.5-0.5*pX;
    var pY = -0.5*Math.max(Math.min((ev.offsetY/$(this).height()), 1), 0);

    color = util.HSL_RGB(util.RGB_HSL(color[0], color[1], color[2])[0], pX, 0.5+pY+pXX, color[3]);
    buildPreview(previewDiv, color, ev);
    ev.preventDefault();
  });
  darkness.mousemove(function(ev){
    if ($(this).attr("moving")) {
      caret.css("top", Math.max(Math.min(ev.offsetY, $(this).height())-5, -5));
      caret.css("left", Math.max(Math.min(ev.offsetX, $(this).width())-5, -5));
      var pX = Math.max(Math.min((ev.offsetX/$(this).width()), 1), 0);
      var pXX = 0.5-0.5*pX;
      var pY = -0.5*Math.max(Math.min((ev.offsetY/$(this).height()), 1), 0);

      color = util.HSL_RGB(util.RGB_HSL(color[0], color[1], color[2])[0], pX, 0.5+pY+pXX, color[3]);
      buildPreview(previewDiv, color);
    }
    ev.preventDefault();
  });
  darkness.mouseup(function(ev){
    if ($(this).attr("moving")) {
      caret.css("top", Math.max(Math.min(ev.offsetY, $(this).height())-5, -5));
      caret.css("left", Math.max(Math.min(ev.offsetX, $(this).width())-5, -5));
      var pX = Math.max(Math.min((ev.offsetX/$(this).width()), 1), 0);
      var pXX = 0.5-0.5*pX;
      var pY = -0.5*Math.max(Math.min((ev.offsetY/$(this).height()), 1), 0);

      color = util.HSL_RGB(util.RGB_HSL(color[0], color[1], color[2])[0], pX, 0.5+pY+pXX, color[3]);
      buildPreview(previewDiv, color, ev);
    }

    $(this).removeAttr("moving");
    ev.preventDefault();
  });
  darkness.mouseout(function(ev){
    if ($(this).attr("moving")) {
      caret.css("top", Math.max(Math.min(ev.offsetY, $(this).height())-5, -5));
      caret.css("left", Math.max(Math.min(ev.offsetX, $(this).width())-5, -5));
      var pX = Math.max(Math.min((ev.offsetX/$(this).width()), 1), 0);
      var pXX = 0.5-0.5*pX;
      var pY = -0.5*Math.max(Math.min((ev.offsetY/$(this).height()), 1), 0);

      color = util.HSL_RGB(util.RGB_HSL(color[0], color[1], color[2])[0], pX, 0.5+pY+pXX, color[3]);
      buildPreview(previewDiv, color, ev);
    }
    $(this).removeAttr("moving");
    ev.preventDefault();
  });

  var hue = $("<div>").appendTo(colorPickerWrap);
  hue.addClass("outline smooth");
  hue.css("width", "20px");
  hue.css("height", "100px");
  hue.css("background", "linear-gradient(to top, hsl(0, 100%, 50%), hsl(45, 100%, 50%), hsl(90, 100%, 50%), hsl(135, 100%, 50%), hsl(180, 100%, 50%), hsl(225, 100%, 50%), hsl(270, 100%, 50%), hsl(315, 100%, 50%), hsl(360, 100%, 50%))");
  hue.css("margin-left", "0.5em");
  hue.css("margin-right", "0.5em");
  hue.css("position", "relative");
  hue.css("cursor", "pointer");

  var caretHue = $("<div>").appendTo(hue);
  caretHue.css("pointer-events", "none");
  caretHue.css("left", "0");
  caretHue.css("top", "0");
  caretHue.css("position", "absolute");
  caretHue.css("background", "white")
  caretHue.css("width", "100%");
  caretHue.css("height", "4px");
  caretHue.addClass("outline");

  hue.mousedown(function(ev){
    $(this).attr("moving", true);
    caretHue.css("top", Math.max(Math.min(ev.offsetY, $(this).height())-2, 0));
    var percentage = Math.max(Math.min((ev.offsetY/$(this).height()), 1), 0);
    ev.preventDefault();
  });
  hue.mousemove(function(ev){
    if ($(this).attr("moving")) {
      caretHue.css("top", Math.max(Math.min(ev.offsetY, $(this).height())-2, 0));
      var percentage = Math.max(Math.min((ev.offsetY/$(this).height()), 1), 0);
      body.css("background", "linear-gradient(to right, white, hsl("+(360-Math.floor(percentage * 360))+", 100%, 50%)");
      color = util.HSL_RGB((360-Math.floor(percentage * 360))/360, 1, 0.5, color[3]);
      buildPreview(previewDiv, color, ev);
    }
    ev.preventDefault();
  });
  hue.mouseup(function(ev){
    if ($(this).attr("moving")) {
      caretHue.css("top", Math.max(Math.min(ev.offsetY, $(this).height())-2, 0));
      var percentage = Math.max(Math.min((ev.offsetY/$(this).height()), 1), 0);
      body.css("background", "linear-gradient(to right, white, hsl("+(360-Math.floor(percentage * 360))+", 100%, 50%)");
      color = util.HSL_RGB((360-Math.floor(percentage * 360))/360, 1, 0.5, color[3]);
      buildPreview(previewDiv, color, ev);
    }
    $(this).removeAttr("moving");
    ev.preventDefault();
  });
  hue.mouseout(function(ev){
    if ($(this).attr("moving")) {
      caretHue.css("top", Math.max(Math.min(ev.offsetY, $(this).height())-2, 0));
      var percentage = Math.max(Math.min((ev.offsetY/$(this).height()), 1), 0);
      body.css("background", "linear-gradient(to right, white, hsl("+(360-Math.floor(percentage * 360))+", 100%, 50%)");
      color = util.HSL_RGB((360-Math.floor(percentage * 360))/360, 1, 0.5, color[3]);
      buildPreview(previewDiv, color, ev);
    }
    $(this).removeAttr("moving");
    ev.preventDefault();
  });

  var alpha = $("<div>").appendTo(colorPickerWrap);
  alpha.addClass("smooth");
  alpha.css("width", "20px");
  alpha.css("height", "100px");
  alpha.css("background-image", "url('/content/checkered.png')");
  alpha.css("margin-left", "0.5em");
  alpha.css("margin-right", "0.5em");

  var alpha = $("<div>").appendTo(alpha);
  alpha.addClass("outline smooth");
  alpha.css("width", "100%");
  alpha.css("height", "100px");
  alpha.css("background", "linear-gradient(to top, transparent, white)");
  alpha.css("position", "relative");
  alpha.css("cursor", "pointer");

  var caretAlpha = $("<div>").appendTo(alpha);
  caretAlpha.css("pointer-events", "none");
  caretAlpha.css("left", "0");
  caretAlpha.css("top", "0");
  caretAlpha.css("position", "absolute");
  caretAlpha.css("background", "white")
  caretAlpha.css("width", "100%");
  caretAlpha.css("height", "4px");
  caretAlpha.addClass("outline");

  alpha.mousedown(function(ev){
    $(this).attr("moving", true);
    caretAlpha.css("top", Math.max(Math.min(ev.offsetY, $(this).height())-2, 0));
    ev.preventDefault();
  });
  alpha.mousemove(function(ev){
    if ($(this).attr("moving")) {
      caretAlpha.css("top", Math.max(Math.min(ev.offsetY, $(this).height())-2, 0));
      var opacity = 1-Math.max(Math.min((ev.offsetY/$(this).height()), 1), 0);
      color[3] = Math.min(Math.ceil(opacity*100)/100, 1.0);
      buildPreview(previewDiv, color, ev);
    }
    ev.preventDefault();
  });
  alpha.mouseup(function(ev){
    if ($(this).attr("moving")) {
      caretAlpha.css("top", Math.max(Math.min(ev.offsetY, $(this).height())-2, 0));
      var opacity = 1-Math.max(Math.min((ev.offsetY/$(this).height()), 1), 0);
      color[3] = Math.min(Math.ceil(opacity*100)/100, 1.0);;
      buildPreview(previewDiv, color, ev);
    }
    $(this).removeAttr("moving");
    ev.preventDefault();
  });
  alpha.mouseout(function(ev){
    if ($(this).attr("moving")) {
      caretAlpha.css("top", Math.max(Math.min(ev.offsetY, $(this).height())-2, 0));
      var opacity = 1-Math.max(Math.min((ev.offsetY/$(this).height()), 1), 0);
      color[3] = Math.min(Math.ceil(opacity*100)/100, 1.0);;
      buildPreview(previewDiv, color, ev);
    }
    $(this).removeAttr("moving");
    ev.preventDefault();
  });

  var previewDiv = $("<div>").appendTo(colorPickerWrap);
  previewDiv.addClass("flexcolumn flexmiddle");

  buildPreview(previewDiv, color);

  return div;
});

sync.render("ui_drawingControls", function(obj, app, scope){
  var data = obj.data;

  var board = getEnt($("#"+app.attr("targetApp")).attr("index"));
  var row = $("<div>");
  row.addClass("flexrow flexbetween fit-xy padding");
  if (!data.fog) {
    var drawingWrap = $("<div>").appendTo(row);
    drawingWrap.addClass("flexcolumn middle");

    drawingWrap.append("<b class='underline' style='font-size:1.2em'>Tools</b>");

    var drawingMode = genIcon("pencil", "Free Hand");
    drawingMode.appendTo(drawingWrap);
    drawingMode.addClass("subtitle spadding");
    drawingMode.attr("title", "Free Hand");
    drawingMode.css("padding-left", "2px");
    drawingMode.css("padding-right", "2px");
    if (data.drawing == "free") {
      drawingMode.addClass("highlight alttext smooth");
    }
    drawingMode.click(function(){
      if (data.drawing != "free") {
        data.drawing = "free";
      }
      else {
        delete data.drawing;
      }
      obj.update();
      layout.coverlay("draw-shape");
      layout.coverlay("draw-color");
      obj.target = app.attr("targetApp");
    });

    var drawingMode = genIcon("unchecked", "Box");
    drawingMode.appendTo(drawingWrap);
    drawingMode.addClass("subtitle spadding");
    drawingMode.attr("title", "Box");
    drawingMode.css("padding-left", "2px");
    drawingMode.css("padding-right", "2px");
    if (data.drawing == "box") {
      drawingMode.addClass("highlight alttext smooth");
    }
    drawingMode.click(function(){
      if (data.drawing != "box") {
        data.drawing = "box";
      }
      else {
        delete data.drawing;
      }
      obj.update();
      layout.coverlay("draw-shape");
      layout.coverlay("draw-color");
      obj.target = app.attr("targetApp");
    });

    var drawingMode = genIcon("adjust", "Circle");
    drawingMode.appendTo(drawingWrap);
    drawingMode.addClass("subtitle spadding");
    drawingMode.attr("title", "Circle");
    drawingMode.css("padding-left", "2px");
    drawingMode.css("padding-right", "2px");
    if (data.drawing == "circle") {
      drawingMode.addClass("highlight alttext smooth");
    }
    drawingMode.click(function(){
      if (data.drawing != "circle") {
        data.drawing = "circle";
      }
      else {
        delete data.drawing;
      }
      obj.update();
      layout.coverlay("draw-shape");
      layout.coverlay("draw-color");
      obj.target = app.attr("targetApp");
    });

    var drawingMode = genIcon("minus", "Line");
    drawingMode.appendTo(drawingWrap);
    drawingMode.addClass("subtitle spadding");
    drawingMode.attr("title", "Line");
    drawingMode.css("padding-left", "2px");
    drawingMode.css("padding-right", "2px");
    if (data.drawing == "line") {
      drawingMode.addClass("highlight alttext smooth");
    }
    drawingMode.click(function(){
      if (data.drawing != "line") {
        data.drawing = "line";
      }
      else {
        delete data.drawing;
      }
      obj.update();
      layout.coverlay("draw-shape");
      layout.coverlay("draw-color");
      obj.target = app.attr("targetApp");
    });

    var drawingMode = genIcon("certificate", "Region");
    drawingMode.appendTo(drawingWrap);
    drawingMode.addClass("subtitle spadding");
    drawingMode.attr("title", "Region");
    drawingMode.css("padding-left", "2px");
    drawingMode.css("padding-right", "2px");
    if (data.drawing == "region") {
      drawingMode.addClass("highlight alttext smooth");
    }
    drawingMode.click(function(){
      if (data.drawing != "region") {
        data.drawing = "region";
      }
      else {
        delete data.drawing;
      }
      obj.update();
      layout.coverlay("draw-shape");
      layout.coverlay("draw-color");
      obj.target = app.attr("targetApp");
    });

    var drawingMode = genIcon("font", "Text");
    drawingMode.appendTo(drawingWrap);
    drawingMode.addClass("subtitle spadding");
    drawingMode.attr("title", "Text");
    drawingMode.css("padding-left", "2px");
    drawingMode.css("padding-right", "2px");
    if (data.drawing == "text") {
      drawingMode.addClass("highlight alttext smooth");
    }
    drawingMode.click(function(){
      if (data.drawing != "text") {
        data.drawing = "text";
      }
      else {
        delete data.drawing;
      }
      obj.update();
      layout.coverlay("draw-shape");
      layout.coverlay("draw-color");
      obj.target = app.attr("targetApp");
    });


    /*var drawingMode = genIcon("unchecked");
    drawingMode.appendTo(row);
    drawingMode.css("padding-left", "2px");
    drawingMode.css("padding-right", "2px");
    if (!isNaN(data.drawing)) {
      drawingMode.addClass("highlight");
    }
    drawingMode.click(function(){
      var content = $("<div>");

      var primaryCol = sync.render("ui_shapePicker")(obj, app, {
        color : "white",
        shapeChange : function(ev, ui, newShape) {
          if (isNaN(data.drawing)) {
            data.drawing = newShape;
          }
          else {
            delete data.drawing;
          }
          obj.update();
          layout.coverlay("draw-shape");
          layout.coverlay("draw-color");
          obj.target = app.attr("targetApp");
        }
      }).appendTo(content);

      ui_popOut({
        target : $(this),
        id : "draw-shape",
      }, content);
    });*/

    drawingWrap.append("<div class='flex'></div>");

    /*var drawingMode = genIcon("erase", "Erase");
    drawingMode.appendTo(drawingWrap);
    drawingMode.addClass("subtitle");
    drawingMode.attr("title", "Eraser");
    drawingMode.css("padding-left", "2px");
    drawingMode.css("padding-right", "2px");
    if (data.drawing == "erase") {
      drawingMode.addClass("highlight alttext smooth");
    }
    drawingMode.click(function(){
      if (data.drawing != "erase") {
        data.drawing = "erase";
      }
      else {
        delete data.drawing;
      }
      obj.update();
      layout.coverlay("draw-shape");
      layout.coverlay("draw-color");
      obj.target = app.attr("targetApp");
    });*/



    if (board && hasSecurity(getCookie("UserID"), "Rights", board.data)) {
      var drawingMode = genIcon("trash", "Reset");
      drawingMode.appendTo(drawingWrap);
      drawingMode.addClass("subtitle destroy");
      drawingMode.attr("title", "Clear drawings on this layer");
      drawingMode.css("padding-left", "2px");
      drawingMode.css("padding-right", "2px");
      drawingMode.click(function(){
        var layer = $("#"+app.attr("targetApp")).attr("layer");
        var button = $("<button>");
        button.addClass("highlight alttext");
        button.css("font-size", "1.6em");
        button.append("Clear Drawings");
        button.click(function(){
          board.data.layers[layer].d = [];
          board.sync("updateAsset");

          delete data.drawing;
          obj.update();
          layout.coverlay("clear-strokes");
        });

        var pop = ui_popOut({
          target : $(this),
          id : "clear-strokes",
          hideclose : true,
          noCss : true,
          prompt : true,
        }, button);
      });
    }
    if (obj.data.drawing == "text") {
      var drawingWrap = $("<div>").appendTo(row);
      drawingWrap.addClass("flexcolumn");
      drawingWrap.css("font-size", "0.6em");

      sync.render("ui_textEdit")(obj, app, scope).appendTo(drawingWrap);
    }
    else if (obj.data.drawing == "free") {
      var drawingWrap = $("<div>").appendTo(row);
      drawingWrap.addClass("flexcolumn");
      drawingWrap.css("font-size", "0.6em");

      var colorPicker = $("<div>").appendTo(drawingWrap);
      colorPicker.addClass("lpadding");


      colorPicker.append("<b class='alttext lrmargin'>Line Thickness</b>");
      var lineSize = genInput({
        parent : colorPicker,
        classes : "fit-x",
        style : {"color" : "#333"},
        select : {
          "Mini" : 6,
          "Small" : 8,
          "Medium" : 10,
          "Large" : 12,
          "Huge" : 14
        },
        value : obj.data.lineSize || 6,
      });
      lineSize.change(function(){
        obj.data.lineSize = $(this).val();
      });
      var primaryCol = sync.render("ui_colorPicker")(obj, app, {
        hideColor : true,
        custom : false,
        colors : [
          "rgb(180, 0, 0)",
          "rgb(180, 7, 0)",
          "rgb(180, 65, 0)",
          "rgb(180, 88, 0)",
          "rgb(180, 122, 0)",
          "rgb(180, 130, 0)",
          "rgb(172, 130, 0)",
          "rgb(115, 130, 0)",
          "rgb(57, 130, 0)",
          "rgb(0, 130, 0)",
          "rgb(0, 13, 7)",
          "rgb(0, 13, 65)",
          "rgb(0, 13, 122)",
          "rgb(0, 13, 130)",
          "rgb(0, 172, 130)",
          "rgb(0, 115, 130)",
          "rgb(0, 57, 130)",
          "rgb(0, 0, 130)",
          "rgb(7, 0, 130)",
          "rgb(65, 0, 130)",
          "rgb(122, 0, 130)",
          "rgb(180, 0, 130)",
          "rgb(180, 0, 122)",
          "rgb(180, 0, 65)",
          "rgb(180, 0, 7)",
          "rgb(230, 0, 0)",
          "rgb(230, 57, 0)",
          "rgb(230, 115, 0)",
          "rgb(230, 138, 0)",
          "rgb(230, 172, 0)",
          "rgb(230, 230, 0)",
          "rgb(172, 230, 0)",
          "rgb(115, 230, 0)",
          "rgb(57, 230, 0)",
          "rgb(0, 230, 0)",
          "rgb(0, 230, 57)",
          "rgb(0, 230, 115)",
          "rgb(0, 230, 172)",
          "rgb(0, 230, 230)",
          "rgb(0, 172, 230)",
          "rgb(0, 115, 230)",
          "rgb(0, 57, 230)",
          "rgb(0, 0, 230)",
          "rgb(57, 0, 230)",
          "rgb(115, 0, 230)",
          "rgb(172, 0, 230)",
          "rgb(230, 0, 230)",
          "rgb(230, 0, 172)",
          "rgb(230, 0, 115)",
          "rgb(230, 0, 57)",
          "rgba(230, 0, 0, 0.5)",
          "rgba(230, 57, 0, 0.5)",
          "rgba(230, 115, 0, 0.5)",
          "rgba(230, 138, 0, 0.5)",
          "rgba(230, 172, 0, 0.5)",
          "rgba(230, 230, 0, 0.5)",
          "rgba(172, 230, 0, 0.5)",
          "rgba(115, 230, 0, 0.5)",
          "rgba(57, 230, 0, 0.5)",
          "rgba(0, 230, 0, 0.5)",
          "rgba(0, 230, 57, 0.5)",
          "rgba(0, 230, 115, 0.5)",
          "rgba(0, 230, 172, 0.5)",
          "rgba(0, 230, 230, 0.5)",
          "rgba(0, 172, 230, 0.5)",
          "rgba(0, 115, 230, 0.5)",
          "rgba(0, 57, 230, 0.5)",
          "rgba(0, 0, 230, 0.5)",
          "rgba(57, 0, 230, 0.5)",
          "rgba(115, 0, 230, 0.5)",
          "rgba(172, 0, 230, 0.5)",
          "rgba(230, 0, 230, 0.5)",
          "rgba(230, 0, 172, 0.5)",
          "rgba(230, 0, 115, 0.5)",
          "rgba(230, 0, 57, 0.5)",
        ],
        colorChange : function(ev, ui, value){
          var col = value;
          obj.data.primary = col;
          obj.target = app.attr("targetApp");
        }
      }).addClass("subtitle").appendTo(colorPicker);

      var primaryCol = sync.render("ui_colorPicker")(obj, app, {
        hideColor : true,
        custom : false,
        colors : [
          "rgba(0,0,0,0)",
          "rgba(34,34,34,0.5)",
          "rgba(155,155,155,0.5)",
          "rgba(255,255,255,0.5)",
          "rgba(255,255,255,1)",
          "rgba(155,155,155,1)",
          "rgba(34,34,34,1)",
        ],
        colorChange : function(ev, ui, value){
          var col = value;
          obj.data.primary = col;
          obj.target = app.attr("targetApp");
        }
      }).addClass("subtitle").appendTo(colorPicker);
    }
    else if (obj.data.drawing == "line") {
      var drawingWrap = $("<div>").appendTo(row);
      drawingWrap.addClass("flexcolumn");
      drawingWrap.css("font-size", "0.6em");

      var colorPicker = $("<div>").appendTo(drawingWrap);
      colorPicker.addClass("lpadding");

      var primaryCol = sync.render("ui_colorPicker")(obj, app, {
        hideColor : true,
        custom : false,
        colors : [
          "rgb(180, 0, 0)",
          "rgb(180, 7, 0)",
          "rgb(180, 65, 0)",
          "rgb(180, 88, 0)",
          "rgb(180, 122, 0)",
          "rgb(180, 130, 0)",
          "rgb(172, 130, 0)",
          "rgb(115, 130, 0)",
          "rgb(57, 130, 0)",
          "rgb(0, 130, 0)",
          "rgb(0, 13, 7)",
          "rgb(0, 13, 65)",
          "rgb(0, 13, 122)",
          "rgb(0, 13, 130)",
          "rgb(0, 172, 130)",
          "rgb(0, 115, 130)",
          "rgb(0, 57, 130)",
          "rgb(0, 0, 130)",
          "rgb(7, 0, 130)",
          "rgb(65, 0, 130)",
          "rgb(122, 0, 130)",
          "rgb(180, 0, 130)",
          "rgb(180, 0, 122)",
          "rgb(180, 0, 65)",
          "rgb(180, 0, 7)",
          "rgb(230, 0, 0)",
          "rgb(230, 57, 0)",
          "rgb(230, 115, 0)",
          "rgb(230, 138, 0)",
          "rgb(230, 172, 0)",
          "rgb(230, 230, 0)",
          "rgb(172, 230, 0)",
          "rgb(115, 230, 0)",
          "rgb(57, 230, 0)",
          "rgb(0, 230, 0)",
          "rgb(0, 230, 57)",
          "rgb(0, 230, 115)",
          "rgb(0, 230, 172)",
          "rgb(0, 230, 230)",
          "rgb(0, 172, 230)",
          "rgb(0, 115, 230)",
          "rgb(0, 57, 230)",
          "rgb(0, 0, 230)",
          "rgb(57, 0, 230)",
          "rgb(115, 0, 230)",
          "rgb(172, 0, 230)",
          "rgb(230, 0, 230)",
          "rgb(230, 0, 172)",
          "rgb(230, 0, 115)",
          "rgb(230, 0, 57)",
          "rgba(230, 0, 0, 0.5)",
          "rgba(230, 57, 0, 0.5)",
          "rgba(230, 115, 0, 0.5)",
          "rgba(230, 138, 0, 0.5)",
          "rgba(230, 172, 0, 0.5)",
          "rgba(230, 230, 0, 0.5)",
          "rgba(172, 230, 0, 0.5)",
          "rgba(115, 230, 0, 0.5)",
          "rgba(57, 230, 0, 0.5)",
          "rgba(0, 230, 0, 0.5)",
          "rgba(0, 230, 57, 0.5)",
          "rgba(0, 230, 115, 0.5)",
          "rgba(0, 230, 172, 0.5)",
          "rgba(0, 230, 230, 0.5)",
          "rgba(0, 172, 230, 0.5)",
          "rgba(0, 115, 230, 0.5)",
          "rgba(0, 57, 230, 0.5)",
          "rgba(0, 0, 230, 0.5)",
          "rgba(57, 0, 230, 0.5)",
          "rgba(115, 0, 230, 0.5)",
          "rgba(172, 0, 230, 0.5)",
          "rgba(230, 0, 230, 0.5)",
          "rgba(230, 0, 172, 0.5)",
          "rgba(230, 0, 115, 0.5)",
          "rgba(230, 0, 57, 0.5)",
        ],
        colorChange : function(ev, ui, value){
          var col = value;
          obj.data.primary = col;
          obj.target = app.attr("targetApp");
          if (data.drawing == "line") {
            layout.coverlay("draw-color");
          }
        }
      }).addClass("subtitle").appendTo(colorPicker);

      var primaryCol = sync.render("ui_colorPicker")(obj, app, {
        hideColor : true,
        custom : false,
        colors : [
          "rgba(0,0,0,0)",
          "rgba(34,34,34,0.5)",
          "rgba(155,155,155,0.5)",
          "rgba(255,255,255,0.5)",
          "rgba(255,255,255,1)",
          "rgba(155,155,155,1)",
          "rgba(34,34,34,1)",
        ],
        colorChange : function(ev, ui, value){
          var col = value;
          obj.data.primary = col;
          obj.target = app.attr("targetApp");
          if (data.drawing == "line") {
            layout.coverlay("draw-color");
          }
        }
      }).addClass("subtitle").appendTo(colorPicker);
    }
    else {
      var drawingWrap = $("<div>").appendTo(row);
      drawingWrap.addClass("flexcolumn spadding");

      var colorRow = $("<div>").appendTo(drawingWrap);
      colorRow.addClass("flexrow");

      var drawColor = $("<div>");
      drawColor.appendTo(colorRow);
      drawColor.addClass("smargin lrpadding hover2 outline smooth bold flexmiddle");
      drawColor.attr("title", "Primary Color");
      drawColor.css("background-color", data.primary || "transparent");
      drawColor.text("Primary Color");
      drawColor.click(function(){
        colorPicker.empty();
        var primaryCol = sync.render("ui_colorPicker")(obj, app, {
          hideColor : true,
          custom : false,
          colors : [
            "rgb(180, 0, 0)",
            "rgb(180, 7, 0)",
            "rgb(180, 65, 0)",
            "rgb(180, 88, 0)",
            "rgb(180, 122, 0)",
            "rgb(180, 130, 0)",
            "rgb(172, 130, 0)",
            "rgb(115, 130, 0)",
            "rgb(57, 130, 0)",
            "rgb(0, 130, 0)",
            "rgb(0, 13, 7)",
            "rgb(0, 13, 65)",
            "rgb(0, 13, 122)",
            "rgb(0, 13, 130)",
            "rgb(0, 172, 130)",
            "rgb(0, 115, 130)",
            "rgb(0, 57, 130)",
            "rgb(0, 0, 130)",
            "rgb(7, 0, 130)",
            "rgb(65, 0, 130)",
            "rgb(122, 0, 130)",
            "rgb(180, 0, 130)",
            "rgb(180, 0, 122)",
            "rgb(180, 0, 65)",
            "rgb(180, 0, 7)",
            "rgb(230, 0, 0)",
            "rgb(230, 57, 0)",
            "rgb(230, 115, 0)",
            "rgb(230, 138, 0)",
            "rgb(230, 172, 0)",
            "rgb(230, 230, 0)",
            "rgb(172, 230, 0)",
            "rgb(115, 230, 0)",
            "rgb(57, 230, 0)",
            "rgb(0, 230, 0)",
            "rgb(0, 230, 57)",
            "rgb(0, 230, 115)",
            "rgb(0, 230, 172)",
            "rgb(0, 230, 230)",
            "rgb(0, 172, 230)",
            "rgb(0, 115, 230)",
            "rgb(0, 57, 230)",
            "rgb(0, 0, 230)",
            "rgb(57, 0, 230)",
            "rgb(115, 0, 230)",
            "rgb(172, 0, 230)",
            "rgb(230, 0, 230)",
            "rgb(230, 0, 172)",
            "rgb(230, 0, 115)",
            "rgb(230, 0, 57)",
            "rgba(230, 0, 0, 0.5)",
            "rgba(230, 57, 0, 0.5)",
            "rgba(230, 115, 0, 0.5)",
            "rgba(230, 138, 0, 0.5)",
            "rgba(230, 172, 0, 0.5)",
            "rgba(230, 230, 0, 0.5)",
            "rgba(172, 230, 0, 0.5)",
            "rgba(115, 230, 0, 0.5)",
            "rgba(57, 230, 0, 0.5)",
            "rgba(0, 230, 0, 0.5)",
            "rgba(0, 230, 57, 0.5)",
            "rgba(0, 230, 115, 0.5)",
            "rgba(0, 230, 172, 0.5)",
            "rgba(0, 230, 230, 0.5)",
            "rgba(0, 172, 230, 0.5)",
            "rgba(0, 115, 230, 0.5)",
            "rgba(0, 57, 230, 0.5)",
            "rgba(0, 0, 230, 0.5)",
            "rgba(57, 0, 230, 0.5)",
            "rgba(115, 0, 230, 0.5)",
            "rgba(172, 0, 230, 0.5)",
            "rgba(230, 0, 230, 0.5)",
            "rgba(230, 0, 172, 0.5)",
            "rgba(230, 0, 115, 0.5)",
            "rgba(230, 0, 57, 0.5)",
          ],
          colorChange : function(ev, ui, value){
            var col = value;
            drawColor.css("background-color", col);
            obj.data.primary = col;
            obj.target = app.attr("targetApp");
            if (data.drawing == "line") {
              layout.coverlay("draw-color");
            }
          }
        }).appendTo(colorPicker);

        var primaryCol = sync.render("ui_colorPicker")(obj, app, {
          hideColor : true,
          custom : false,
          colors : [
            "rgba(0,0,0,0)",
            "rgba(34,34,34,0.5)",
            "rgba(155,155,155,0.5)",
            "rgba(255,255,255,0.5)",
            "rgba(255,255,255,1)",
            "rgba(155,155,155,1)",
            "rgba(34,34,34,1)",
          ],
          colorChange : function(ev, ui, value){
            var col = value;
            drawColor.css("background-color", col);
            obj.data.primary = col;
            obj.target = app.attr("targetApp");
            if (data.drawing == "line") {
              layout.coverlay("draw-color");
            }
          }
        }).appendTo(colorPicker);
      });

      var colorPicker = $("<div>").appendTo(drawingWrap);
      colorPicker.css("font-size", "0.4em");
      colorPicker.addClass("lpadding");

      drawColor.click();

      var drawColorSec = $("<div>");
      drawColorSec.appendTo(colorRow);
      drawColorSec.addClass("smargin lrpadding hover2 outline smooth subtitle bold flexmiddle");
      drawColorSec.attr("title", "Secondary Color");
      drawColorSec.css("background-color", data.secondary || "transparent");
      drawColorSec.text("Secondary Color");
      drawColorSec.click(function(){
        colorPicker.empty();
        var primaryCol = sync.render("ui_colorPicker")(obj, app, {
          hideColor : true,
          custom : false,
          colors : [
            "rgb(180, 0, 0)",
            "rgb(180, 7, 0)",
            "rgb(180, 65, 0)",
            "rgb(180, 88, 0)",
            "rgb(180, 122, 0)",
            "rgb(180, 130, 0)",
            "rgb(172, 130, 0)",
            "rgb(115, 130, 0)",
            "rgb(57, 130, 0)",
            "rgb(0, 130, 0)",
            "rgb(0, 13, 7)",
            "rgb(0, 13, 65)",
            "rgb(0, 13, 122)",
            "rgb(0, 13, 130)",
            "rgb(0, 172, 130)",
            "rgb(0, 115, 130)",
            "rgb(0, 57, 130)",
            "rgb(0, 0, 130)",
            "rgb(7, 0, 130)",
            "rgb(65, 0, 130)",
            "rgb(122, 0, 130)",
            "rgb(180, 0, 130)",
            "rgb(180, 0, 122)",
            "rgb(180, 0, 65)",
            "rgb(180, 0, 7)",
            "rgb(230, 0, 0)",
            "rgb(230, 57, 0)",
            "rgb(230, 115, 0)",
            "rgb(230, 138, 0)",
            "rgb(230, 172, 0)",
            "rgb(230, 230, 0)",
            "rgb(172, 230, 0)",
            "rgb(115, 230, 0)",
            "rgb(57, 230, 0)",
            "rgb(0, 230, 0)",
            "rgb(0, 230, 57)",
            "rgb(0, 230, 115)",
            "rgb(0, 230, 172)",
            "rgb(0, 230, 230)",
            "rgb(0, 172, 230)",
            "rgb(0, 115, 230)",
            "rgb(0, 57, 230)",
            "rgb(0, 0, 230)",
            "rgb(57, 0, 230)",
            "rgb(115, 0, 230)",
            "rgb(172, 0, 230)",
            "rgb(230, 0, 230)",
            "rgb(230, 0, 172)",
            "rgb(230, 0, 115)",
            "rgb(230, 0, 57)",
            "rgba(230, 0, 0, 0.5)",
            "rgba(230, 57, 0, 0.5)",
            "rgba(230, 115, 0, 0.5)",
            "rgba(230, 138, 0, 0.5)",
            "rgba(230, 172, 0, 0.5)",
            "rgba(230, 230, 0, 0.5)",
            "rgba(172, 230, 0, 0.5)",
            "rgba(115, 230, 0, 0.5)",
            "rgba(57, 230, 0, 0.5)",
            "rgba(0, 230, 0, 0.5)",
            "rgba(0, 230, 57, 0.5)",
            "rgba(0, 230, 115, 0.5)",
            "rgba(0, 230, 172, 0.5)",
            "rgba(0, 230, 230, 0.5)",
            "rgba(0, 172, 230, 0.5)",
            "rgba(0, 115, 230, 0.5)",
            "rgba(0, 57, 230, 0.5)",
            "rgba(0, 0, 230, 0.5)",
            "rgba(57, 0, 230, 0.5)",
            "rgba(115, 0, 230, 0.5)",
            "rgba(172, 0, 230, 0.5)",
            "rgba(230, 0, 230, 0.5)",
            "rgba(230, 0, 172, 0.5)",
            "rgba(230, 0, 115, 0.5)",
            "rgba(230, 0, 57, 0.5)",
          ],
          colorChange : function(ev, ui, value){
            var col = value;
            drawColorSec.css("background-color", col);
            obj.data.secondary = col;
            obj.target = app.attr("targetApp");
            if (data.drawing == "line") {
              layout.coverlay("draw-color");
            }
          }
        }).appendTo(colorPicker);
      });
    }
  }
  else {
    if ((!board.data.options || !board.data.options.fog) && hasSecurity(getCookie("UserID"), "Rights", board.data)) {
      row.addClass("flexmiddle flex");

      var drawingMode = genIcon("cloud", "Enable Fog of War");
      drawingMode.appendTo(row);
      drawingMode.attr("title", "Enable Manual Fog of War");
      drawingMode.css("padding-left", "2px");
      drawingMode.css("padding-right", "2px");
      drawingMode.click(function(){
        obj.data.fog = true;
        delete obj.data.drawing;
        obj.update();

        board.data.options = board.data.options || {};
        board.data.options.fog = true;
        board.sync("updateAsset");
      });
    }
    else {
      row.addClass("flexmiddle flex");

      var drawingWrap = $("<div>").appendTo(row);
      drawingWrap.addClass("flexcolumn middle");

      drawingWrap.append("<b class='underline' style='font-size:1.2em;'>Fog of War</b>");

      if (board && hasSecurity(getCookie("UserID"), "Game Master")) {
        var drawingMode = genIcon("unchecked", "Reveal/Hide");
        drawingMode.appendTo(drawingWrap);
        drawingMode.addClass("subtitle spadding");
        drawingMode.attr("title", "Reveal Area");
        drawingMode.css("padding-left", "2px");
        drawingMode.css("padding-right", "2px");
        if (data.drawing == "box") {
          drawingMode.addClass("highlight alttext smooth");
          drawingWrap.append("<i class='spadding' style='font-size:0.6em;'>Hold alt to hide area</i>");
        }
        drawingMode.click(function(){
          if (data.drawing != "box") {
            data.drawing = "box";
          }
          else {
            delete data.drawing;
          }
          obj.data.fog = true;
          obj.update();
          layout.coverlay("draw-shape");
          layout.coverlay("draw-color");
          obj.target = app.attr("targetApp");
        });

        var drawingMode = genIcon("pencil", "Draw Wall");
        drawingMode.appendTo(drawingWrap);
        drawingMode.addClass("subtitle spadding");
        drawingMode.attr("title", "Draw a Solid Wall");
        drawingMode.css("padding-left", "2px");
        drawingMode.css("padding-right", "2px");
        if (data.drawing == "line") {
          drawingMode.addClass("highlight alttext smooth");
        }
        drawingMode.click(function(){
          if (data.drawing != "line") {
            data.drawing = "line";
            sendAlert({text : "Chain Walls by holding ctrl"});
          }
          else {
            delete data.drawing;
          }
          obj.update();
          layout.coverlay("draw-shape");
          layout.coverlay("draw-color");
          obj.target = app.attr("targetApp");
        });

        var drawingMode = genIcon("tint", "Fog Color");
        drawingMode.appendTo(drawingWrap);
        drawingMode.addClass("subtitle spadding");
        drawingMode.attr("title", "Select Fog Color");
        drawingMode.css("padding-left", "2px");
        drawingMode.css("padding-right", "2px");
        drawingMode.click(function(){
          var optionList = [];

          optionList.push({
            name : "White",
            style : {fogcolor : "rgba(255,255,255,1)"},
            click : function(ev, ui){
              board.data.c = "rgba(255,255,255,1)";
              board.sync("updateAsset");
            },
          });

          optionList.push({
            name : "White (Transparent)",
            style : {fogcolor : "rgba(255,255,255,0.5)"},
            click : function(ev, ui){
              board.data.c = "rgba(255,255,255,0.5)";
              board.sync("updateAsset");
            },
          });

          optionList.push({
            name : "Grey",
            style : {fogcolor : "rgba(155,155,155,1)"},
            click : function(ev, ui){
              board.data.c = "rgba(155,155,155,1)";
              board.sync("updateAsset");
            },
          });

          optionList.push({
            name : "Grey (Transparent)",
            style : {fogcolor : "rgba(155,155,155,0.5)"},
            click : function(ev, ui){
              board.data.c = "rgba(155,155,155,0.5)";
              board.sync("updateAsset");
            },
          });

          optionList.push({
            name : "Black",
            style : {fogcolor : "rgba(5,5,5,1)"},
            click : function(ev, ui){
              board.data.c = "rgba(5,5,5,1)";
              board.sync("updateAsset");
            },
          });

          optionList.push({
            name : "Black (Transparent)",
            style : {fogcolor : "rgba(5,5,5,0.5)"},
            click : function(ev, ui){
              board.data.c = "rgba(5,5,5,0.5)";
              board.sync("updateAsset");
            },
          });


          optionList.push({
            icon : "cog",
            name : "Custom",
            click : function(ev, ui){
              var primaryCol = sync.render("ui_colorPicker")(obj, app, {
                hideColor : true,
                custom : true,
                colorChange : function(ev, ui, value){
                  board.data.c = value;
                  board.sync("updateAsset");
                  layout.coverlay("grid-color");
                }
              });

              ui_popOut({
                target : ui,
                id : "grid-color",
              }, primaryCol);
            },
          });
          var menu = ui_dropMenu($(this), optionList, {"id" : "color-picker", hideClose : true});
          menu.removeClass("outline");
        });


        if (board && board.data.gridW && board.data.gridH) {
          drawingWrap.append("<div class='subtitle bold flexmiddle spadding'>Snap Increment</div>");
          var gridInc = $("<div>").appendTo(drawingWrap);
          gridInc.addClass("flexrow");

          var button = $("<div>").appendTo(gridInc);
          button.addClass("outline smooth alttext subtitle spadding flex hover2");
          button.text("1/4");
          button.click(function(){
            if (obj.data.gridInc == board.data.gridW/4) {
              delete obj.data.gridInc;
            }
            else {
              obj.data.gridInc = board.data.gridW/4;
            }
            obj.update();
          });
          if (obj.data.gridInc == board.data.gridW/4) {
            button.addClass("highlight");
          }
          else {
            button.addClass("background");
          }

          var button = $("<div>").appendTo(gridInc);
          button.addClass("outline smooth alttext subtitle spadding flex hover2");
          button.text("1/3");
          button.click(function(){
            if (obj.data.gridInc == board.data.gridW/3) {
              delete obj.data.gridInc;
            }
            else {
              obj.data.gridInc = board.data.gridW/3;
            }
            obj.update();
          });
          if (obj.data.gridInc == board.data.gridW/3) {
            button.addClass("highlight");
          }
          else {
            button.addClass("background");
          }

          var button = $("<div>").appendTo(gridInc);
          button.addClass("outline smooth alttext subtitle spadding flex hover2");
          button.text("1/2");
          button.click(function(){
            if (obj.data.gridInc == board.data.gridW/2) {
              delete obj.data.gridInc;
            }
            else {
              obj.data.gridInc = board.data.gridW/2;
            }
            obj.update();
          });
          if (obj.data.gridInc == board.data.gridW/2) {
            button.addClass("highlight");
          }
          else {
            button.addClass("background hover2");
          }

          var button = $("<div>").appendTo(drawingWrap);
          button.addClass("outline smooth alttext subtitle spadding");
          button.text("Normal Grid");
          button.click(function(){
            delete obj.data.gridInc;
            obj.update();
          });
          if (!obj.data.gridInc) {
            button.addClass("highlight");
          }
          else {
            button.addClass("background hover2");
          }
        }

        drawingWrap.append("<div class='spadding'></div>");
        var drawingMode = genIcon("trash", "Reset Layer");
        drawingMode.appendTo(drawingWrap);
        drawingMode.addClass("subtitle destroy");
        drawingMode.attr("title", "Clear all fog on layer");
        drawingMode.css("padding-left", "2px");
        drawingMode.css("padding-right", "2px");
        drawingMode.click(function(){
          var button = $("<button>");
          button.addClass("highlight alttext");
          button.css("font-size", "1.6em");
          button.append("Reset Layer");
          button.click(function(){
            var layer = $("#"+app.attr("targetApp")).attr("layer");
            if (board.data.layers[layer]) {
              board.data.layers[layer].r = [];
              board.data.layers[layer].w = [];
            };
            boardApi.updateLayer(layer, {r : true, w : 0}, board, "destroy");
            obj.sync("updateAsset");
            layout.coverlay("clear-strokes");
          });

          var pop = ui_popOut({
            target : $(this),
            id : "clear-strokes",
            hideclose : true,
            noCss : true,
            prompt : true,
          }, button);
        });

        var drawingMode = genIcon("remove", "Disable Fog");
        drawingMode.appendTo(drawingWrap);
        drawingMode.addClass("subtitle destroy");
        drawingMode.attr("title", "Disable Manual Fog");
        drawingMode.css("padding-left", "2px");
        drawingMode.css("padding-right", "2px");
        drawingMode.click(function(){
          var button = $("<button>");
          button.addClass("highlight alttext");
          button.css("font-size", "1.6em");
          button.append("Disable Fog");
          button.click(function(){
            obj.data.fog = false;
            delete obj.data.drawing;
            obj.update();

            board.data.options = board.data.options || {};
            delete board.data.options.fog;
            board.sync("updateAsset");
            layout.coverlay("clear-strokes");
          });

          var pop = ui_popOut({
            target : $(this),
            id : "clear-strokes",
            hideclose : true,
            noCss : true,
            prompt : true,
          }, button);
        });
      }
    }
  }

  return row;
});

sync.render("ui_easySheets", function(obj1, app, scope) {
  var div = $("<div>");
  div.addClass("flexcolumn flex padding");

  var obj = getEnt(app.attr("target"));

  var targetApp;
  if (app.attr("targetapp")) {
    targetApp = $("#"+app.attr("targetapp"));
  }
  else {
    targetApp = app;
  }

  var data = obj.data;

  var sheetData;
  if (obj.data.sheets) {
    sheetData = obj.data.sheets[Number(targetApp.attr("tileSheet") || 0)];
  }


  var currentCollection = $("<div>").appendTo(div);
  currentCollection.addClass("flexrow flexbetween");

  var createWrap = $("<div>").appendTo(currentCollection);
  createWrap.addClass("alttext flexmiddle");

  var select = $("<select>").appendTo(createWrap);
  select.addClass("subtitle bold");
  select.css("color", "#333");
  select.css("text-shadow", "none");
  select.append("<option value='"+(targetApp.attr("tileSheet") || 0)+"'>Sheet "+(targetApp.attr("tileSheet") || 0)+"</option>");
  for (var key in obj.data.sheets) {
    if (key != (targetApp.attr("tileSheet") || 0) && obj.data.sheets[key].objs && obj.data.sheets[key].objs.length) {
      select.append("<option value='"+key+"'>Sheet "+key+"</option>");
    }
  }
  select.change(function(){
    targetApp.attr("tileSheet", $(this).val());
    obj1.update();
  });
  select.click(function(ev){
    ev.stopPropagation();
  });


  var createWrap = $("<div>").appendTo(currentCollection);
  createWrap.addClass("alttext flexmiddle");

  var next = genIcon("", "Next").appendTo(createWrap);
  next.addClass("subtitle");
  next.click(function(){
    var newSheet = Number(targetApp.attr("tileSheet") || 0) + 1;
    if (obj.data.sheets && newSheet >= obj.data.sheets.length) {
      newSheet = 0;
    }
    targetApp.attr("tileSheet", newSheet);
    obj1.update();
  });


  var createWrap = $("<div>").appendTo(currentCollection);
  createWrap.addClass("alttext flexmiddle");

  var create = genIcon("cloud-download", "Load").appendTo(createWrap);
  create.addClass("subtitle")
  create.attr("title", "Load Tile Sheet");
  create.click(function(ev){
    var newApp = sync.newApp("ui_boardStamps", null, {tile : true, board : obj.id()});

    var pop = ui_popOut({
      target : $("body"),
      id : "load-tiles",
      style : {"width" : "400px", height : "600px"}
    }, newApp);
    pop.resizable();
    ev.stopPropagation();
    ev.preventDefault();
  });

  if (sheetData) {
    if (sheetData.legal) {
      var legalWrap = $("<a>").appendTo(currentCollection);
      legalWrap.addClass("flexrow flexmiddle subtitle");
      legalWrap.addClass("alttext");
      legalWrap.attr("href", sheetData.legal.href);
      legalWrap.attr("target", "_");

      if (sheetData.legal.img) {
        var icon = $("<div>").appendTo(legalWrap);
        icon.addClass("smooth");
        icon.attr("title", sheetData.legal.name);
        icon.css("background-repeat", "no-repeat");
        icon.css("background-position", "center");
        icon.css("width", "32px");
        icon.css("height", "32px");
        icon.css("background-size", "cover");
        icon.css("background-image", "url('"+sheetData.legal.img+"')");
        icon.tooltip({
          container: 'body',
          placement: 'right'
        });
      }
    }

    var columns = $("<div>").appendTo(div);
    columns.addClass("flexcolumn flex");

    var tileListWrap = $("<div>").appendTo(columns);
    tileListWrap.addClass("flexcolumn flex");
    tileListWrap.css("position", "relative");
    tileListWrap.css("overflow", "auto");
    tileListWrap.attr("_lastScrollTop", targetApp.attr("_lastTileScrollTop"));
    tileListWrap.scroll(function(){
      targetApp.attr("_lastTileScrollTop", $(this).scrollTop());
    });

    if (sheetData.objs) {
      var load = new Image();
      load.src = sheetData.i;
      load.onload = function(){
        var tileList = $("<div>").appendTo(tileListWrap);
        tileList.addClass("flexrow flexbetween flexwrap fit-x");
        tileList.css("min-width", "100%");
        tileList.css("position", "absolute");

        for (var i=0; i<sheetData.objs.length; i++) {
          var tileData = sheetData.objs[i];
          tileData.s = Number(targetApp.attr("tileSheet") || 0);
          var canvasWrap = $("<div>").appendTo(tileList);
          canvasWrap.addClass("hover2 smooth");
          canvasWrap.attr("index", i);
          canvasWrap.css("position", "relative");
          canvasWrap.css("overflow", "hidden");
          canvasWrap.css("width", 50);
          canvasWrap.css("height", 50);
          canvasWrap.css("margin", "0.25em");
          canvasWrap.click(function(){
            if (checkbox.prop("checked")) {
              randomRot = true;
            }
            tileList.children().removeClass("highlight");
            floatingTile = duplicate(sheetData.objs[$(this).attr("index")]);
            floatingTile.sheet = $(this).attr("index");
            $(this).addClass("highlight");
          });
          canvasWrap.contextmenu(function(){
            var index = $(this).attr("index");
            var actionsList = [
              {
                name : "Remove",
                click : function(){
                  sheetData.objs.splice(index, 1);
                  if (!scope.local) {
                    obj.sync("updateAsset");
                  }
                  else {
                    obj.update();
                  }
                }
              },
            ];

            ui_dropMenu($(this), actionsList, {id : "tile-option"});
            return false;
          });

          var img = $("<canvas>").appendTo(canvasWrap);
          img.attr("width", 50);
          img.attr("height", 50);
          img.css("position", "absolute");
          img.css("pointer-events", "none");

          var tileW = sheetData.gW + sheetData.p;
          var tileH = sheetData.gH + sheetData.p;
          var xGrid = Math.ceil(sheetData.w/(tileW));
          var yGrid = Math.ceil(sheetData.h/(tileH));

          var aspectW = 1;
          var aspectH = 1;
          if (sheetData.nW && sheetData.nH) {
            aspectW = sheetData.w/sheetData.nW;
            aspectH = sheetData.h/sheetData.nH;
          }

          var sX = (tileData.i % xGrid) * tileW;
          var sY = Math.floor(tileData.i / xGrid) * tileH;

          var w = (tileData.gW * (data.gridW || 64));
          var h = (tileData.gH * (data.gridH || 64));
          var sW = (tileData.gW || 1) * sheetData.gW + ((tileData.gW || 1)-1) * sheetData.p;
          var sH = (tileData.gH || 1) * sheetData.gH + ((tileData.gH || 1)-1) * sheetData.p;

          var isHex = obj.data.options && obj.data.options.hex;

          var dummyCanvas = $("<canvas>");
          dummyCanvas.attr("width", Math.max(w,h));
          dummyCanvas.attr("height", Math.max(w,h));

          if (tileData.t && (w >= (data.gridW || w) && h >= (data.gridH || h))) {
            var tileX = (tileData.gW || 1) * sheetData.gW + ((tileData.gW || 1)-1) * sheetData.p;
            var tileY = (tileData.gH || 1) * sheetData.gH + ((tileData.gH || 1)-1) * sheetData.p;
            var gridX = Math.floor((w || obj.data.gridW)/tileX);
            var gridY = Math.floor((h || obj.data.gridH)/tileY);
            var width = (tileX || w || obj.data.gridW);
            var height = (tileY || h || obj.data.gridH);
            for (var x=0; x<gridX; x++) {
              for (var y=0; y<gridY; y++) {
                dummyCanvas.drawImage({
                  source : sheetData.i,
                  x : (x * width),
                  y : (y * height),
                  width : width,
                  height : height,
                  sWidth: tileX,
                  sHeight: tileY,
                  sx: sX, sy: sY,
                  fromCenter : false,
                  rotate : tileData.r || 0,
                });
              }
            }
          }
          else {
            dummyCanvas.drawRect({
              fillStyle : (w==h)?("transparent"):("rgba(235,235,228,0.4)"),
              x : Math.max(h-w, 0)/2, y : Math.max(w-h, 0)/2,
              width : w,
              height : h,
              fromCenter : false,
            });
            dummyCanvas.drawImage({
              source : sheetData.i,
              x : Math.max(h-w, 0)/2, y : Math.max(w-h, 0)/2,
              width : w,
              height : h,
              sWidth: sW / aspectW,
              sHeight: sH / aspectH,
              sx: sX / aspectW, sy: sY / aspectH,
              fromCenter: false,
              rotate : tileData.r || 0,
            });
          }
          img.drawImage({
            source : dummyCanvas[0],
            layer : true,
            width : 50, height : 50,
            strokeStyle: "rgba(0,0,0,0)",
            strokeWidth: 4,
            fromCenter : false,
          });
        }
      }
    }

    var searchDiv = $("<div>").appendTo(columns);
    searchDiv.addClass("flexrow fit-x flexbetween");

    var tilemode = $("<button>");//.appendTo(searchDiv);
    tilemode.addClass("subtitle");
    if (targetApp.attr("background") == "true") {
      tilemode.text("Tile Mode");
    }
    else {
      tilemode.text("Stamp Mode");
    }
    tilemode.click(function(){
      if ($("#save-changes").length) {
        $("#save-changes").remove();
      }
      if (targetApp.attr("background") == "true") {
        boardApi.saveChanges(obj, true)
        targetApp.removeAttr("background");
        targetApp.removeAttr("ignore");
        targetApp.removeAttr("local");

        layout.coverlay("save-changes");
      }
      else {
        targetApp.attr("background", true);
        obj.update();
      }
    });

    if (targetApp.attr("background") == "true") {
      tilemode.addClass("highlight alttext");
    }

    var searchWrap = $("<div>")//.appendTo(searchDiv);
    searchWrap.addClass("flexrow flexmiddle alttext");

    genIcon("search").appendTo(searchWrap);

    var search = genInput({
      parent : searchWrap,
      classes : "line lrpadding lrmargin"
    });

    var checkWrap = $("<button>").appendTo(searchDiv);
    checkWrap.addClass("flexmiddle alttext background subtitle");
    checkWrap.click(function(){
      checkbox.click();
    });

    var checkbox = genInput({
      type : "checkbox",
      parent : checkWrap,
      style : {"margin" : "0"}
    }).addClass("random-rotation-check");
    if (randomRot) {
      checkbox.prop("checked", true);
      checkWrap.removeClass("background");
      checkWrap.addClass("highlight");
    }
    checkbox.change(function(){
      if ($(this).prop("checked") == true) {
        randomRot = true;
        if (boardApi.apps[targetApp.attr("id")].floatingImage && boardApi.apps[targetApp.attr("id")].floatingImage.tileData) {
          floatingTile.r = Math.floor(Math.random() * 4) * 90;
          boardApi.apps[app.attr("id")].floatingImage.children[0].rotation = (floatingTile.r || 0)/180 * (Math.PI);
        }
        $(this).parent().addClass("highlight");
        $(this).parent().removeClass("background");
      }
      else {
        randomRot = false;
        if (boardApi.apps[targetApp.attr("id")].floatingImage && boardApi.apps[targetApp.attr("id")].floatingImage.tileData) {
          floatingTile.r = 0;
          boardApi.apps[app.attr("id")].floatingImage.children[0].rotation = 0;
        }
        $(this).parent().removeClass("highlight");
        $(this).parent().addClass("background");
      }
    });
    checkbox.click(function(ev){
      ev.stopPropagation();
    });

    $("<b class'lrpadding subtitle'>Random Rotation</b>").appendTo(checkWrap);

    var showAtlas = $("<button>").appendTo(searchDiv);
    showAtlas.addClass("subtitle background alttext");
    showAtlas.text("Tile Sheet");
    showAtlas.click(function(){
      var newApp = sync.newApp("ui_sheet");
      newApp.attr("index", targetApp.attr("tileSheet") || 0);

      if (sheetData.i) {
        newApp.attr("hideOptions", true);
      }
      obj.addApp(newApp);
      var popout = ui_popOut({
        target : $(this),
        id : "sheet-"+(targetApp.attr("tileSheet") || 0)+"-display",
        dragThickness : "0.5em",
        align : "top",
        minimize : true,
        title : "sheet",
        style : {"width" : "60vw", "height" : "70vh"}
      }, newApp);
      popout.addClass("board-"+app.attr("board")+"-sheet-controls");
      popout.resizable();
    });
  }

  return div;
});

sync.render("ui_renderItemv2", function(obj, app, scope){
  if (!obj) {return $("<div>");}
  if (!game.templates.build) {
    return sync.render("ui_renderItem")(obj, app, scope);
  }

  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};
  scope.cref = scope.cref || app.attr("char-ref") || null;
  scope.mode = app.attr("mode") || "notes";
  scope.local = scope.local || (app.attr("local") == "true");
  scope.homebrew = scope.homebrew || (app.attr("homebrew") == "true");
  scope.path = app.attr("path");
  scope.index = app.attr("index");
  var templates = scope.templates || game.templates;

  var char;
  var ctx = sync.defaultContext();
  ctx[obj.data._t] = obj.data;
  if (scope.cref) {
    char = getEnt(scope.cref);
    ctx[char.data._t] = duplicate(char.data);
  }

  var itemData = scope.itemData || obj.data;

  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");

  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("flexrow fit-x background outline");

  if (app.attr("homebrew")) {
    var targetIcon = $("<button>").appendTo(optionsBar);
    targetIcon.addClass("background subtitle alttext");
    targetIcon.text("Default Data Model");
    targetIcon.click(function(){
      var select = sync.newApp("ui_JSON");
      select.attr("lookup", "templates.elements."+obj.data._type);
      select.attr("closeTarget", "json-editor");
      game.locals["homebrew"].addApp(select);

      var popout = ui_popOut({
        target : $("body"),
        id : "json-editor",
        title : "Default Data Model(JSON)"
      }, select);
      popout.resizable();
    });
  }
  else {
    var selectData = {};
    for (var k in game.templates.elements) {
      selectData[k] = k;
    }
    if (Object.keys(selectData)) {
      var select = genInput({
        select : selectData,
        parent : optionsBar,
        classes : "subtitle",
        value : obj.data._type,
        disabled : scope.viewOnly,
      });
      select.change(function(){
        var elementData = game.templates.elements[$(this).val()];
        obj.data._drop = elementData._drop;
        obj.data._t = elementData._t;
        obj.data._type = elementData._type;

        if (!scope.local) {
          obj.sync("updateAsset");
        }
        else {
          obj.update();
        }
      });
    }
  }

  var actions = $("<button>").appendTo(optionsBar);
  actions.addClass("background subtitle alttext");
  if (app.attr("mode") == "attributes") {
    actions.removeClass("background");
    actions.addClass("highlight");
  }
  actions.text("Attributes");
  actions.click(function(){
    if (app.attr("mode") == "attributes") {
      app.removeAttr("mode");
    }
    else {
      app.attr("mode", "attributes");
    }
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });

  var actions = $("<button>").appendTo(optionsBar);
  actions.addClass("background subtitle alttext");
  if (app.attr("mode") == "html") {
    actions.removeClass("background");
    actions.addClass("highlight");
  }
  actions.text("Sheet");
  actions.click(function(){
    var content = $("<div>");
    content.addClass("flexcolumn fit-xy");

    var select = genInput({
      parent : content,
      type : "textarea",
      classes : "flex subtitle",
      disabled : scope.viewOnly,
    });
    if (obj.data._d && obj.data._d.content) {
      select.text(obj.data._d.content);
    }
    else if (game.templates.display.elements[obj.data._type || Object.keys(game.templates.display.elements)[0]] && game.templates.display.elements[obj.data._type || Object.keys(game.templates.display.elements)[0]].content) {
      select.text(game.templates.display.elements[obj.data._type || Object.keys(game.templates.display.elements)[0]].content);
    }
    select.change(function(){
      if ($(this).val()) {
        obj.data._d = obj.data._d || {};
        obj.data._d.content = $(this).val();
      }
      else {
        delete obj.data._d;
      }
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });

    content.append("<button class='fit-x spadding'>Confirm</button>");

    var popout = ui_popOut({
      target : $("body"),
      id : "json-editor",
      style : {"width" : "600px", "height" : "600px"}
    }, content);
    popout.resizable();
  });

  var actions = $("<button>").appendTo(optionsBar);
  actions.addClass("background subtitle alttext");
  if (app.attr("mode") == "calc") {
    actions.removeClass("background");
    actions.addClass("highlight");
  }
  actions.text("Math");
  actions.click(function(){
    if (app.attr("mode") == "calc") {
      app.removeAttr("mode");
    }
    else {
      app.attr("mode", "calc");
    }
    obj.update();
  });

  var actions = $("<button>").appendTo(optionsBar);
  actions.addClass("background subtitle alttext");
  if (app.attr("mode") == "actions") {
    actions.removeClass("background");
    actions.addClass("highlight");
  }
  actions.text("Hobar");
  actions.click(function(){
    if (app.attr("mode") == "actions") {
      app.removeAttr("mode");
    }
    else {
      app.attr("mode", "actions");
    }
    obj.update();
  });

//game.templates.display.item

  if (app.attr("mode") == "attributes") {
    optionsBar.empty();
    optionsBar.addClass("flexbetween");

    var reset = $("<button>").appendTo(optionsBar);
    reset.addClass("highlight lrpadding alttext flexmiddle subtitle");
    reset.text("Back to Sheet");
    reset.click(function(){
      app.removeAttr("mode");
      obj.update();
    });

    var template = {info : "", equip : "", weapon : "", spell : ""};
    var sheet = scope.sheet;
    if (app.attr("homebrew")) {
      sheet = sheet || game.locals["homebrew"].data.templates.display.elements[obj.data._type];
    }
    else {
      sheet = sheet || game.templates.display.elements[obj.data._type] || game.templates.display.elements[Object.keys(game.templates.display.elements)[0]];
    }
    if (sheet.categories) {
      template = {};
      for (var k in sheet.categories) {
        template[k] = sheet.categories[k];
      }
    }

    var reset = $("<button>").appendTo(optionsBar);
    reset.addClass("background lrpadding alttext flexmiddle subtitle");
    reset.text("Load Attributes");
    reset.click(function(){
      var content = sync.render("ui_assetPicker")(obj, app, {
        category : "i",
        filter : "i",
        select : function(ev, ui, ent, options, entities){
          if (ent.data) {
            for (var key in template) {
              obj.data[key] = duplicate(ent.data[key]);
            }
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
          layout.coverlay("add-asset");
        }
      });
      var pop = ui_popOut({
        target : $("body"),
        prompt : true,
        id : "add-asset",
        title : "Pick Sheet",
        style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
      }, content);
      pop.resizable();
    });

    var scrollDiv = $("<div>").appendTo(div);
    scrollDiv.addClass("flex foreground scroll-xy");
    scrollDiv.css("position", "relative");
    scrollDiv.scroll(function(){
      app.attr("_lastScrollTop", scrollDiv.scrollTop());
      app.attr("_lastScrollLeft", scrollDiv.scrollLeft());
    });

    var list = $("<div>").appendTo(scrollDiv);
    list.addClass("lrpadding fit-x");
    list.css("position", "absolute");

    var keys = {};
    for (var key in template) {
      var path = key;
      var attrPlate = $("<div>").appendTo(list);
      attrPlate.addClass("lrpadding");
      attrPlate.css("font-size", "1.2em");
      attrPlate.append("<u class='bold lrpadding lrmargin alttext'>"+key+"</b>");

      var attrWrap = $("<div>").appendTo(attrPlate);
      attrWrap.addClass("flexcolumn subtitle white outline smooth lpadding");
      attrWrap.css("margin-bottom", "1em");
      if (template[key] == "") {
        var headerRow = $("<div>").appendTo(attrWrap);
        headerRow.addClass("flexrow padding");
        headerRow.append("<u class='subtitle flexmiddle lrmargin' style='width:100px'>Macro Key</u>");
        headerRow.append("<u class='flex subtitle flexmiddle lrmargin' style='width:100px'>Name</u>");
        headerRow.append("<u class='flex2 subtitle flexmiddle lrmargin' style='width:100px'>Value</u>");
        headerRow.append("<u class='subtitle flexmiddle lrmargin' style='width:40px'>Min</u>");
        headerRow.append("<u class='subtitle flexmiddle lrmargin' style='width:40px'>Max</u>");
        headerRow.append("<u class='subtitle flexmiddle lrmargin' style='width:70px'>Modifiers</u>");
        if (!scope.viewOnly) {
          headerRow.append(genIcon("remove").addClass("lrpadding lrmargin").css("color", "transparent"));
        }
        for (var subKey in obj.data[key]) {
          path = key + "." + subKey;
          if (path != "info.notes" && path != "info.img" && path != "info.name") {
            var attrOption = $("<div>").appendTo(attrWrap);
            attrOption.addClass("flexrow padding");
            if (!keys[subKey]) {
              attrOption.append("<text class='subtitle flexmiddle' style='width:100px'>@"+subKey+"</text>");
              keys[subKey] = true;
            }
            else {
              attrOption.append("<text class='subtitle flexmiddle' style='width:100px'>@c."+path+"</text>");
            }

            var name = genInput({
              parent : attrOption,
              classes : "line subtitle lrmargin middle",
              value : obj.data[key][subKey],
              cmd : "updateAsset",
              obj : obj,
              name : true,
              disabled : scope.viewOnly,
              style : {"width" : "150px"}
            });

            var value = genInput({
              parent : attrOption,
              classes : "line subtitle flex2 lrmargin middle",
              value : obj.data[key][subKey],
              cmd : "updateAsset",
              obj : obj,
              disabled : scope.viewOnly,
            });

            var min = genInput({
              parent : attrOption,
              classes : "line subtitle lrmargin middle",
              value : obj.data[key][subKey],
              style : {"width" : "40px"},
              cmd : "updateAsset",
              obj : obj,
              raw : "min",
              disabled : scope.viewOnly,
            });

            var max = genInput({
              parent : attrOption,
              classes : "line subtitle lrmargin middle",
              value : obj.data[key][subKey],
              style : {"width" : "40px"},
              cmd : "updateAsset",
              obj : obj,
              disabled : scope.viewOnly,
              raw : "max"
            });

            var remove = genIcon("list-alt", "Mods").appendTo(attrOption);
            remove.addClass("flexmiddle lrmargin lrpadding");
            remove.attr("path", path);
            remove.css("width", "70px");
            remove.click(function(){
              var path = $(this).attr("path");

              var content = sync.newApp("ui_modifiers");
              content.attr("viewOnly", scope.viewOnly);
              content.attr("lookup", path);
              content.attr("modsOnly", "true");
              obj.addApp(content);

              ui_popOut({
                target : $(this),
                align : "top",
                title : "Modifiers",
                id : "modify-exp",
                style : {"min-width" : "100px"},
              }, content);
            });
            if (!scope.viewOnly) {
              var remove = genIcon("remove").appendTo(attrOption);
              remove.addClass("destroy flexmiddle lrmargin lrpadding");
              remove.attr("path", path);
              remove.click(function(){
                var path = $(this).attr("path");

                ui_prompt({
                  target : $(this),
                  confirm : "Delete Attribute",
                  click : function(){
                    sync.traverse(obj.data, path, "");
                    if (!scope.local) {
                      obj.sync("updateAsset");
                    }
                    else {
                      obj.update();
                    }
                  }
                });
              });
            }
          }
        }
        if (!scope.viewOnly) {
          var headerRow = genIcon("plus", "New Attribute").appendTo(attrWrap);
          headerRow.addClass("flexmiddle fit-x create");
          headerRow.attr("category", key);
          headerRow.click(function(){
            var category = $(this).attr("category");

            var invalidKeys = {
              "length" : "system",
            }; // invalid keys

            for (var key in obj.data) {
              invalidKeys[key] = key;
            }
            for (var key in obj.data.info) {
              invalidKeys[key] = "info."+key;
            }
            for (var key in obj.data.counters) {
              invalidKeys[key] = "counters."+key;
            }
            for (var key in obj.data.stats) {
              invalidKeys[key] = "stats."+key;
            }


            for (var key in game.templates.item.info) {
              invalidKeys[key] = "item.info."+key;
            }
            for (var key in game.templates.item.equip) {
              invalidKeys[key] = "item.equip."+key;
            }
            for (var key in game.templates.item.weapon) {
              invalidKeys[key] = "item.weapon."+key;
            }
            for (var key in game.templates.item.spell) {
              invalidKeys[key] = "item.spell."+key;
            }

            ui_prompt({
              target : $(this),
              inputs : {
                "Macro Key" : "",
              },
              click : function(ev, inputs){
                var path = inputs["Macro Key"].val();
                if (path && path != "notes" && path != "img" && path != "name" && isNaN(path)) {
                  path = replaceAll(path, " ", "_");
                  path = replaceAll(path, "@", "");
                  path = replaceAll(path, "(", "_");
                  path = replaceAll(path, ")", "_");
                  path = replaceAll(path, "[", "_");
                  path = replaceAll(path, "]", "_");
                  path = replaceAll(path, "!", "_");
                  path = replaceAll(path, "#", "_");
                  path = replaceAll(path, "$", "_");
                  if (invalidKeys[path]) {
                    sendAlert({text : "This key is used somewhere else"});
                  }
                  else {
                    obj.data[category][path] = {};
                    obj.sync("updateAsset");
                  }
                }
              }
            });
          });
        }
      }
      else {
        sync.render("ui_processUI")(obj, app, {display : template[key], viewOnly : scope.viewOnly}).appendTo(attrWrap);
      }
    }
  }
  else if (app.attr("mode") == "calc") {
    obj.data._calc = obj.data._calc || [];
    var calcs = obj.data._calc;

    var warning = $("<i>").appendTo(div);
    warning.addClass("flexmiddle subtitle bold padding");
    warning.text("Calculations performed here are written to the parent character sheet, and change the values directly. Use with caution");

    var calcWrapper = $("<div>").appendTo(div);
    calcWrapper.addClass("flexcolumn flex smooth scroll-y");
    calcWrapper.css("position", "relative");

    var calcList = $("<div>").appendTo(calcWrapper);
    calcList.addClass("fit-x");
    calcList.css("position", "absolute");
    calcList.css("top", "0");
    calcList.css("left", "0");

    sync.render("ui_math")(obj, app, {calc : calcs, cref : scope.cref, viewOnly : scope.viewOnly}).appendTo(calcList);
  }
  else if (app.attr("mode") == "actions") {
    sync.render("ui_manageActionsv2")(obj, app, scope).appendTo(div);
  }
  else {
    var sheet = obj.data._d;
    if (app.attr("homebrew")) {
      sheet = sheet || game.locals["homebrew"].data.templates.display.elements[obj.data._type];
    }
    else {
      sheet = sheet || game.templates.display.elements[obj.data._type || Object.keys(game.templates.display.elements)[0]];
    }
    var displayPort = sync.render("ui_processUI")(obj, app, {display : sheet.content, viewOnly : scope.viewOnly}).appendTo(div);
    for (var i in sheet.style) {
      displayPort.css(i, sheet.style[i]);
    }
  }
  return div;
});


sync.render("ui_renderItem", function(obj, app, scope){
  if (!obj) {return $("<div>");}
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};
  scope.cref = scope.cref || app.attr("char-ref") || null;
  scope.mode = app.attr("mode") || "notes";
  scope.local = scope.local || (app.attr("local") == "true");
  scope.homebrew = scope.homebrew || (app.attr("homebrew") == "true");

  var templates = scope.templates || game.templates;
  var params = templates.display.item.params;

  var char;
  var ctx = sync.defaultContext();
  ctx[obj.data._t] = obj.data;
  if (scope.cref) {
    char = getEnt(scope.cref);
    ctx[char.data._t] = duplicate(char.data);
  }

  var itemData = scope.itemData || obj.data;

  if (!scope.itemData) {
    obj.data._flags = obj.data._flags || duplicate(obj.data.tags || {});
  }

  var div = $("<div>");
  div.addClass("fit-xy flexrow");
  if (!scope.viewOnly) {
    div.on("dragover", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      if (!$("#"+app.attr("id")+"-drag-overlay").length) {
        var olay = layout.overlay({
          target : app,
          id : app.attr("id")+"-drag-overlay",
          style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
        });
        olay.addClass("flexcolumn flexmiddle alttext");
        olay.css("font-size", "2em");
        olay.css("z-index", util.getMaxZ(".ui-popout")+1);
        olay.append("<b>Drop to Load</b>");
      }
    });
    div.droppable();
    div.on('drop', function(ev, ui){
      ev.preventDefault();
      ev.stopPropagation();
      var dt = ev.originalEvent.dataTransfer||$(ui.draggable).data("dt");
      if (hook.call("OnDropItem", obj, app, scope, dt)) {
        if (dt && dt.getData("OBJ")) {
          var ent = JSON.parse(dt.getData("OBJ"));
          if (ent._t == "i") {
            obj.data = ent;
          }
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        }
        else if (dt && dt.getData("Text")) {
          sync.rawVal(obj.data.info.img, dt.getData("Text"));
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        }
      }

      layout.coverlay(app.attr("id")+"-drag-overlay");
    });
    div.on("dragleave", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      layout.coverlay(app.attr("id")+"-drag-overlay");
    });
  }


  var overview = $("<div>").appendTo(div);
  overview.addClass("flexcolumn outline sheet1 padding");

  var info = itemData.info;

  var itemImage = $("<div>").appendTo(overview);
  itemImage.addClass("outline smooth flexmiddle white");
  itemImage.css("background-image", "url('"+ sync.rawVal(itemData.info.img) +"')");
  itemImage.css("background-size", "contain");
  itemImage.css("background-repeat", "no-repeat");
  itemImage.css("background-position", "center");
  itemImage.css("width", "150px");
  itemImage.css("height", "150px");
  if (!scope.viewOnly) {
    itemImage.addClass("hover2");
    itemImage.click(function(){
      var imgList = sync.render("ui_filePicker")(obj, app, {
        filter : "img",
        change : function(ev, ui, value){
          sync.rawVal(itemData.info.img, value);
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
          layout.coverlay("icons-picker");
        }
      });

      var pop = ui_popOut({
        target : $(this),
        id : "icons-picker",
        prompt : true,
        style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
      }, imgList);
      pop.resizable();
    });
  }
  itemImage.contextmenu(function(ev){
    if (sync.rawVal(itemData.info.img)) {
      assetTypes["img"].contextmenu(ev, $(this), sync.rawVal(itemData.info.img));
    }
    ev.stopPropagation();
    ev.preventDefault();
    return false;
  });

  var infoPane = $("<div>").appendTo(overview);
  infoPane.addClass("flexcolumn flexbetween fit-x padding");


  var wrap = $("<div>").appendTo(infoPane);
  wrap.addClass("flexrow flexbetween");

  wrap.append("<b>"+(info.weight.name || "Weight")+"</b>");


  var weight = genInput({
    classes : "subtitle line middle",
    parent: wrap,
    placeholder: info.weight.name || "Weight",
    value: sync.val(info.weight),
    disabled: scope.viewOnly,
    style : {width : "80px"},
    type: "number",
  })

  weight.change(function() {
    var newVal = $(this).val();
    if ($(this).val() == "") {
      newVal = null;
    }
    sync.val(info.weight, newVal);
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });


  var wrap = $("<div>").appendTo(infoPane);
  wrap.addClass("flexrow flexbetween");

  wrap.append("<b>"+(info.quantity.name || "Quantity")+"</b>");

  var quantity = genInput({
    classes : "subtitle line middle",
    parent : wrap,
    placeholder : info.quantity.name || "Quantity",
    value : info.quantity,
    disabled: scope.viewOnly,
    type : "number",
    style : {width : "80px"},
  });
  quantity.change(function() {
    sync.val(info.quantity, $(this).val());
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  }).addClass("subtitle");

  if (info.price) {
    var wrap = $("<div>").appendTo(infoPane);
    wrap.addClass("flexrow flexbetween");

    wrap.append("<b>"+(info.price.name || "Price")+"</b>");

    var price = genInput({
      classes : "subtitle line middle",
      parent : wrap,
      placeholder : info.price.name,
      title : info.price.name,
      value : info.price,
      disabled: scope.viewOnly,
      style : {width : "80px"},
    });
    price.change(function() {
      sync.val(info.price, $(this).val());
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });
  }

  overview.append("<div class='spadding'></div>");

  var tags = sync.render("ui_tags")(obj, app, {viewOnly : scope.viewOnly}).appendTo(overview);
  tags.addClass("fit-x");
  tags.removeClass("flexrow");
  tags.css("max-height", "100px");
  tags.css("overflow", "auto");


  var contentWrap = $("<div>").appendTo(div);
  contentWrap.addClass("flex2");
  contentWrap.css("position", "relative");
  contentWrap.css("overflow", "auto");

  var content = $("<div>").appendTo(contentWrap);
  content.addClass("fit-xy flexcolumn");
  content.css("position", "absolute");

  var wrap = $("<div>").appendTo(content);
  wrap.addClass("padding sheet1 outline");

  var name = genInput({
    classes : "line size4 bold fit-x",
    parent: wrap,
    placeholder: info.name.name,
    value: info.name,
    disabled: scope.viewOnly,
  });
  name.change(function() {
    sync.rawVal(info.name, $(this).val());
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });

  var optionsBar = $("<div>").appendTo(content);
  optionsBar.addClass("flexrow fit-x flexbetween background");

  var category = $("<div>").appendTo(optionsBar);
  category.addClass("flexrow subtitle");
  category.css("color", "#333");

  var notes = $("<button>").appendTo(category);
  notes.append("Notes");
  notes.click(function(){
    app.attr("mode", "notes");
    obj.update();
  });

  var armor = $("<button>").appendTo(category);
  armor.append("Armor");
  armor.click(function(){
    app.attr("mode", "armor");
    obj.update();
  });

  var weapon = $("<button>").appendTo(category);
  weapon.append("Weapon");
  weapon.click(function(){
    app.attr("mode", "weapon");
    obj.update();
  });

  var spell = $("<button>").appendTo(category);
  spell.append("Spell");
  spell.click(function(){
    app.attr("mode", "spell");
    obj.update();
  });

  var options = $("<div>").appendTo(optionsBar);
  options.addClass("flex");

  var options = $("<div>").appendTo(optionsBar);
  options.addClass("flexrow flexmiddle alttext");
  if (!scope.viewOnly) {
    var clear = genIcon("trash", "Clear").appendTo(options);
    clear.addClass("lrpadding subtitle");
    clear.click(function(){
      obj.data = duplicate(templates.item);
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });

    var load = genIcon("briefcase").appendTo(options);
    load.addClass("lrpadding subtitle");
    load.attr("title", "Load an Existing Item");
    load.click(function(){
      var content = sync.render("ui_existing")(obj, app, {lookup : (scope.mode=="spell")?("spellbook"):("inventory")});
      content.addClass("flex");

      if (content.children().length) {
        ui_popOut({
          target : $("body"),
          id : "item-picker",
          title : "Load Existing Item",
          style : {"width" : "80vw", "height" : "80vh"}
        }, content).resizable();
      }
    });
  }

  if (hasSecurity(getCookie("UserID"), "Rights")) {
    var security = genIcon("lock").appendTo(options);
    security.addClass("subtitle");
    security.attr("index", index);
    security.attr("title", "Configure who has access to this object");
    security.css("margin-right", "4px");
    security.click(function(ev){
      obj.data._s = obj.data._s || {default : 1};

      var content = sync.newApp("ui_rights");
      content.attr("viewOnly", scope.viewOnly);
      obj.addApp(content);

      var frame = ui_popOut({
        target : $(this),
        prompt : true,
        id : "ui-rights-dialog",
      }, content);
    });
  }

  if (!scope.viewOnly) {
    var stylePage = genIcon("tint").appendTo(options);
    stylePage.addClass("subtitle")
    stylePage.attr("title", "Change the style of how this page renders");
    stylePage.click(function(){
      var newApp = sync.newApp("ui_stylePage");
      obj.addApp(newApp);

      var pop = ui_popOut({
        target : app,
        align : "right",
        id : "page-styling",
        title : "Page Style",
        style : {width : assetTypes["p"].width, height : assetTypes["p"].height},
      }, newApp);
    });

    var actions = $("<div>").appendTo(optionsBar);
    actions.addClass("flex");

    var actions = $("<button>").appendTo(optionsBar);
    actions.addClass("background subtitle alttext");
    if (app.attr("mode") == "calc") {
      actions.removeClass("background");
      actions.addClass("highlight");
    }
    actions.text("Math");
    actions.click(function(){
      app.attr("mode", "calc");
      obj.update();
    });

    var actions = $("<button>").appendTo(optionsBar);
    actions.addClass("background subtitle alttext");
    if (app.attr("mode") == "actions") {
      actions.removeClass("background");
      actions.addClass("highlight");
    }
    actions.text("Actions");
    actions.click(function(){
      app.attr("mode", "actions");
      obj.update();
    });
  }

  var content = $("<div>").appendTo(content);
  content.addClass("padding flex flexcolumn");
  if (app.attr("mode") == "actions") {
    content.removeClass("padding");

    var charWrapper = $("<div>").appendTo(content);
    charWrapper.addClass("flexcolumn flex subtitle");
    charWrapper.css("overflow-y", "auto");
    charWrapper.attr("_lastScrollTop", app.attr("_lastScrollTop"));
    charWrapper.scroll(function(){
      app.attr("_lastScrollTop", charWrapper.scrollTop());
      app.attr("_lastScrollLeft", charWrapper.scrollLeft());
    });

    sync.render("ui_manageActions")(obj, app, scope).appendTo(charWrapper);
  }
  else if (scope.mode == "armor") {
    armor.addClass("highlight alttext");

    var armorDiv = $("<div>").appendTo(content);
    armorDiv.addClass("flexrow flex");

    if (templates.display.item.params && templates.display.item.params["equip"]) {
      for (var aKey in templates.display.item.params["equip"]) {
        var newScope = duplicate(scope);
        newScope.display = templates.display.item.params["equip"][aKey];
        newScope.char = char;
        if (scope.markup) {
          newScope.markup = scope.markup;
        }
        armorDiv.append(sync.render("ui_processUI")(obj, app, newScope));
      }
    }
    else {
      var armorRow = $("<div>").appendTo(armorDiv);
      armorRow.addClass("flex");

      var checkWrap = $("<div>").appendTo(armorRow);
      checkWrap.addClass("flexmiddle");

      var asEQ = genInput({
        parent : checkWrap,
        type : 'checkbox',
        style : {"margin-top" : "0"},
        disabled : scope.viewOnly
      });

      if (itemData.tags && itemData.tags["noEQ"]) {
        asEQ.prop("checked", true);
      }
      asEQ.change(function(){
        if ($(this).prop("checked")) {
          itemData.tags["noEQ"] = true;
        }
        else {
          delete itemData.tags["noEQ"];
        }
        if (!scope.local) {
          obj.sync("updateAsset");
        }
        else {
          obj.update()
        }
      });
      checkWrap.append("<text class='subtitle bold'>Do not display item as Gear</text>");

      var armorPlate = $("<div>").appendTo(armorRow);

      var newScope = duplicate(scope);
      newScope.target = obj.data.equip.armor;
      newScope.char = char;
      if (scope.markup) {
        newScope.markup = scope.markup;
      }
      sync.render("ui_armorValue")(obj, app, newScope).appendTo(armorPlate);

      //sync.render("ui_armorBonuses")(obj, app, newScope).appendTo(armorPlate);

      var mods = $("<div>").appendTo(armorDiv);
      mods.addClass("flex flexcolumn");

      sync.render("ui_modifiers")(obj, app, {text : "Modifiers", lookup : "equip.armor", total : "", modsOnly : true, viewOnly : scope.viewOnly}).appendTo(mods);
    }
  }
  else if (scope.mode == "weapon") {
    weapon.addClass("highlight alttext");

    for (var i in obj.data.weapon) {
      var modRow = $("<div>").appendTo(content);
      modRow.addClass("flexrow fit-x subtitle");

      var label = genInput({
        classes : "line lrmargin bold middle",
        parent : modRow,
        value : obj.data.weapon[i].name,
        index : i,
        title : "@i.weapon."+i,
        disabled : scope.viewOnly,
        style : {"width" : "100px"},
      });
      label.change(function(){
        obj.data.weapon[$(this).attr("index")].name = $(this).val();
        obj.update();
      });

      var val = genInput({
        classes : "line flex middle",
        parent : modRow,
        value : sync.rawVal(obj.data.weapon[i]),
        index : i,
        disabled : scope.viewOnly,
      });
      val.change(function(){
        sync.rawVal(obj.data.weapon[$(this).attr("index")], $(this).val());
        obj.update();
      });

      var min = genInput({
        parent : modRow,
        classes : "line lrmargin middle subtitle",
        value : obj.data.weapon[i].min,
        index : i,
        placeholder : "Min",
        disabled : scope.viewOnly,
        style : {"width" : "24px"},
      });
      min.change(function(){
        obj.data.weapon[$(this).attr("index")].min = $(this).val();
        obj.update();
      });

      var max = genInput({
        parent : modRow,
        classes : "line middle subtitle",
        value : obj.data.weapon[i].max,
        index : i,
        placeholder : "Max",
        disabled : scope.viewOnly,
        style : {"width" : "24px"},
      });
      max.change(function(){
        obj.data.weapon[$(this).attr("index")].max = $(this).val();
        obj.update();
      });

      var mods = genIcon("list-alt").appendTo(modRow);
      mods.addClass("flexmiddle lrmargin subtitle");
      mods.attr("path", "weapon."+i);
      mods.click(function(){
        var path = $(this).attr("path");

        var content = sync.newApp("ui_modifiers");
        content.attr("viewOnly", scope.viewOnly);
        content.attr("lookup", path);
        content.attr("modsOnly", "true");
        obj.addApp(content);

        ui_popOut({
          target : $(this),
          align : "top",
          title : "Modifiers",
          id : "modify-exp",
          style : {"min-width" : "100px"},
        }, content);
      });

      if (!game.templates.item.weapon[i] || scope.homebrew ) {
        if (!scope.viewOnly) {
          var remove = genIcon("remove").appendTo(modRow);
          remove.addClass("destroy");
          remove.attr("index", i);
          remove.click(function(){
            delete obj.data.weapon[$(this).attr("index")];
            obj.update();
          });
        }
      }
    }
    if (obj.data.info.skill) {
      var skillPlate = $("<div>").appendTo(content);
      skillPlate.addClass("flexrow subtitle");
      skillPlate.append("<b class='flexmiddle' style='min-width : 60px;'>"+obj.data.info.skill.name+"</b>");

      if ($("#item-skill-list").length) {
        $("#item-skill-list").remove();
      }
      var dataList = [];

      var skillRegex = /\(([^(]+[^)]+)\)/;

      if (char) {
        for (var index in char.data.skills) {
          var skill = char.data.skills[index];
          if (skillRegex.exec(skill.name)) {
            dataList.push(skill.name);
          }
        }
      }

      var skill = genInput({
        parent : skillPlate,
        list : dataList,
        placeholder : "Enter Related Skill",
        disabled: scope.viewOnly,
      });
      if (!scope.viewOnly) {
        skill.css("background-color", "rgb(235,235,228)");
      }
      skill.val(sync.val(obj.data.info.skill));
      skill.change(function(){
        sync.val(obj.data.info.skill, $(this).val());
        if (!scope.local) {
          obj.sync("updateAsset");
        }
        else {
          obj.update();
        }
      });

      var dicePlate = $("<div>").appendTo(skillPlate);

      var skillRef;
      if (sync.val(obj.data.info.skill) && char) {
        for (var index in char.data.skills) {
          if (char.data.skills[index] && char.data.skills[index].name.toLowerCase() == sync.val(obj.data.info.skill).toLowerCase()) {
            skillRef = index;
            break;
          }
        }
      }

      var diceWrap = $("<div>").appendTo(skillPlate);
      diceWrap.addClass("flexmiddle");
      diceWrap.css("min-width", "70px");
      if (skillRef) {
        var dice = sync.render("ui_skillDice")(char, app, {skill : skillRef}).appendTo(diceWrap);
      }
    }
    if (!scope.viewOnly) {
      var newField = genIcon("plus", "New Attribute").appendTo(content);
      newField.addClass("fit-x flexmiddle subtitle");
      newField.click(function(){
        var invalidKeys = {
          "length" : "system",
        }; // invalid keys

        for (var key in game.templates.character) {
          invalidKeys[key] = key;
        }
        for (var key in game.templates.character.info) {
          invalidKeys[key] = "info."+key;
        }
        for (var key in game.templates.character.counters) {
          invalidKeys[key] = "counters."+key;
        }
        for (var key in game.templates.character.stats) {
          invalidKeys[key] = "stats."+key;
        }


        for (var key in obj.info) {
          invalidKeys[key] = "item.info."+key;
        }
        for (var key in obj.equip) {
          invalidKeys[key] = "item.equip."+key;
        }
        for (var key in obj.weapon) {
          invalidKeys[key] = "item.weapon."+key;
        }
        for (var key in obj.spell) {
          invalidKeys[key] = "item.spell."+key;
        }


        ui_prompt({
          target : $(this),
          id : "add-field",
          inputs : {
            "Macro Key" : {},
          },
          click : function(ev, inputs) {
            var path = inputs["Macro Key"].val();
            if (path && path != "notes" && path != "img" && path != "name" && isNaN(path)) {
              path = replaceAll(path, " ", "_");
              path = replaceAll(path, "@", "");
              path = replaceAll(path, "(", "_");
              path = replaceAll(path, ")", "_");
              path = replaceAll(path, "[", "_");
              path = replaceAll(path, "]", "_");
              path = replaceAll(path, "!", "_");
              path = replaceAll(path, "#", "_");
              path = replaceAll(path, "$", "_");
              if (invalidKeys[path]) {
                sendAlert({text : "This key is used somewhere else"});
              }
              else {
                obj.data.weapon[path] = sync.newValue(path, null);
                obj.update();
              }
            }
            else {
              sendAlert({text : "Invalid Macro Key"});
            }
          }
        });
      });
    }
  }
  else if (scope.mode == "spell") {
    spell.addClass("highlight alttext");

    for (var i in obj.data.spell) {
      var modRow = $("<div>").appendTo(content);
      modRow.addClass("flexrow fit-x subtitle");

      var label = genInput({
        classes : "line lrmargin bold middle",
        parent : modRow,
        value : obj.data.spell[i].name,
        index : i,
        title : "@i.spell."+i,
        disabled : scope.viewOnly,
        style : {"width" : "100px"},
      });
      label.change(function(){
        obj.data.spell[$(this).attr("index")].name = $(this).val();
        obj.update();
      });

      var val = genInput({
        classes : "line flex middle",
        parent : modRow,
        value : sync.rawVal(obj.data.spell[i]),
        index : i,
        disabled : scope.viewOnly,
      });
      val.change(function(){
        sync.rawVal(obj.data.spell[$(this).attr("index")], $(this).val());
        obj.update();
      });

      var min = genInput({
        parent : modRow,
        classes : "line lrmargin middle subtitle",
        value : obj.data.spell[i].min,
        index : i,
        placeholder : "Min",
        disabled : scope.viewOnly,
        style : {"width" : "24px"},
      });
      min.change(function(){
        obj.data.spell[$(this).attr("index")].min = $(this).val();
        obj.update();
      });

      var max = genInput({
        parent : modRow,
        classes : "line middle subtitle",
        value : obj.data.spell[i].max,
        index : i,
        placeholder : "Max",
        disabled : scope.viewOnly,
        style : {"width" : "24px"},
      });
      max.change(function(){
        obj.data.spell[$(this).attr("index")].max = $(this).val();
        obj.update();
      });

      var mods = genIcon("list-alt").appendTo(modRow);
      mods.addClass("flexmiddle lrmargin subtitle");
      mods.attr("path", "spell."+i);
      mods.click(function(){
        var path = $(this).attr("path");

        var content = sync.newApp("ui_modifiers");
        content.attr("viewOnly", scope.viewOnly);
        content.attr("lookup", path);
        content.attr("modsOnly", "true");
        obj.addApp(content);

        ui_popOut({
          target : $(this),
          align : "top",
          title : "Modifiers",
          id : "modify-exp",
          style : {"min-width" : "100px"},
        }, content);
      });

      if (!game.templates.item.spell[i] || scope.homebrew) {
        if (!scope.viewOnly) {
          var remove = genIcon("remove").appendTo(modRow);
          remove.addClass("destroy");
          remove.attr("index", i);
          remove.click(function(){
            delete obj.data.spell[$(this).attr("index")];
            obj.update();
          });
        }
      }
    }
    if (!scope.viewOnly) {
      var newField = genIcon("plus", "New Attribute").appendTo(content);
      newField.addClass("fit-x flexmiddle subtitle");
      newField.click(function(){
        var invalidKeys = {
          "length" : "system",
        }; // invalid keys

        for (var key in game.templates.character) {
          invalidKeys[key] = key;
        }
        for (var key in game.templates.character.info) {
          invalidKeys[key] = "info."+key;
        }
        for (var key in game.templates.character.counters) {
          invalidKeys[key] = "counters."+key;
        }
        for (var key in game.templates.character.stats) {
          invalidKeys[key] = "stats."+key;
        }


        for (var key in obj.info) {
          invalidKeys[key] = "item.info."+key;
        }
        for (var key in obj.equip) {
          invalidKeys[key] = "item.equip."+key;
        }
        for (var key in obj.weapon) {
          invalidKeys[key] = "item.weapon."+key;
        }
        for (var key in obj.spell) {
          invalidKeys[key] = "item.spell."+key;
        }


        ui_prompt({
          target : $(this),
          id : "add-field",
          inputs : {
            "Macro Key" : {},
          },
          click : function(ev, inputs) {
            var path = inputs["Macro Key"].val();
            if (path && path != "notes" && path != "img" && path != "name" && isNaN(path)) {
              path = replaceAll(path, " ", "_");
              path = replaceAll(path, "@", "");
              path = replaceAll(path, "(", "_");
              path = replaceAll(path, ")", "_");
              path = replaceAll(path, "[", "_");
              path = replaceAll(path, "]", "_");
              path = replaceAll(path, "!", "_");
              path = replaceAll(path, "#", "_");
              path = replaceAll(path, "$", "_");
              if (invalidKeys[path]) {
                sendAlert({text : "This key is used somewhere else"});
              }
              else {
                obj.data.spell[path] = sync.newValue(path, null);
                obj.update();
              }
            }
            else {
              sendAlert({text : "Invalid Macro Key"});
            }
          }
        });
      });
    }
  }
  else if (scope.mode == "notes") {
    notes.addClass("highlight alttext");
    content.removeClass("padding");
    content.addClass("flexcolumn");

    var newApp = sync.newApp("ui_itemNotes").appendTo(content);
    newApp.attr("hideOptions", true);
    newApp.attr("autosave", true);
    newApp.attr("entry", true);
    obj.addApp(newApp);
  }
  else if (scope.mode == "calc") {
    obj.data._calc = obj.data._calc || [];
    var calcs = obj.data._calc;
    content.addClass("subtitle");
    content.removeClass("padding");

    var warning = $("<i>").appendTo(content);
    warning.addClass("flexmiddle subtitle bold padding")
    warning.text("Calculations performed here are written to the parent character sheet, and change the values directly. Use with caution");

    var calcWrapper = $("<div>").appendTo(content);
    calcWrapper.addClass("flexcolumn flex outlinebottom smooth");
    calcWrapper.css("position", "relative");
    calcWrapper.css("overflow-y", "auto");

    var calcList = $("<div>").appendTo(calcWrapper);
    calcList.addClass("fit-x");
    calcList.css("position", "absolute");
    calcList.css("top", "0");
    calcList.css("left", "0");

    sync.render("ui_math")(obj, app, {calc : calcs, cref : scope.cref}).appendTo(calcList);
  }

  return div;
});

sync.render("ui_inventory", function(obj, app, scope) {
  scope = scope || {viewOnly: (app.attr("viewOnly") == "true")};

  var data = obj.data;
  var inventory = $("<div>");
  if (!scope.hideTitle) {
    var title = $("<h1 style='text-align: center;'>Inventory </h1>").appendTo(inventory);
    if (!scope.viewOnly) {
      var icon = genIcon("plus").appendTo(title);
      icon.addClass("create");
      icon.click(function() {
        var frame = $("<div>");
        frame.addClass("flex flexcolumn");

        game.locals["createItem"] = game.locals["createItem"] || sync.obj("createItem");
        game.locals["createItem"].data = {};
        merge(game.locals["createItem"].data, duplicate(game.templates.item));

        var newApp = sync.newApp("ui_renderItem").appendTo(frame);
        newApp.attr("char-ref", obj.id());
        game.locals["createItem"].addApp(newApp);

        var buttonWrap = $("<div>").appendTo(frame);
        buttonWrap.addClass("flexrow");

        var confirm = $("<button>").appendTo(buttonWrap);
        confirm.addClass("flex");
        confirm.append("Create");
        confirm.click(function(){
          obj.data.inventory.push(duplicate(game.locals["createItem"].data));
          obj.sync("updateAsset");
        });

        var confirm = $("<button>").appendTo(buttonWrap);
        confirm.addClass("flex");
        confirm.append("Create and Close");
        confirm.click(function(){
          obj.data.inventory.push(duplicate(game.locals["createItem"].data));
          obj.sync("updateAsset");
          layout.coverlay("create-item");
        });
        var pop = ui_popOut({
          target : $(this),
          align : "top",
          id : "create-item",
          maximize : true,
          minimize : true,
          style : {"width" : assetTypes["i"].width, height : assetTypes["i"].height}
        }, frame);
        pop.resizable();
      });
    }
  }

  if (!scope.hideWeight) {
    var weight = $("<div>").appendTo(inventory);
    weight.addClass("fit-x flexcolumn");
    weight.css("margin-bottom", "8px");
  }
  var totalWeight = 0;

  var inventoryList = $("<div>").appendTo(inventory);
  inventoryList.addClass("flexwrap flexaround inventoryContent");
  if (!scope.viewOnly) {
    inventoryList.sortable({
      filter : ".inventoryContent",
      update : function(ev, ui) {
        var newIndex;
        var count = 0;
        $(ui.item).attr("ignore", true);
        inventoryList.children().each(function(){
          if ($(this).attr("ignore")){
            newIndex = count;
          }
          count += 1;
        });
        var old = data.inventory.splice($(ui.item).attr("index"), 1);
        util.insert(data.inventory, newIndex, old[0]);
        obj.sync("updateAsset");
      }
    });
  }

  for (var index in data.inventory) {
    var itemData = data.inventory[index];
    if (!itemData._s || hasSecurity(getCookie("UserID"), "Owner", obj.data) || hasSecurity(getCookie("UserID"), "Visible", itemData)) {
      if (!scope.mode) {
        var itemBackground = $("<div>").appendTo(inventoryList);
        itemBackground.addClass("outline flexcolumn smooth");
        itemBackground.css("padding", "4px");
        itemBackground.css("min-width", "100px");
        itemBackground.css("max-width", "200px");
        itemBackground.css("height", "100px");
        itemBackground.attr("index", index);
        itemBackground.css("background-color", "white");

        var item = $("<div>").appendTo(itemBackground);
        item.addClass("flexcolumn flex hover2");
        item.attr("index", index);

        item.click(function() {
          var frame = $("<div>");
          frame.addClass("flex flexcolumn");

          var iRef = $(this).attr("index");
          game.locals["editItem"] = game.locals["editItem"] || sync.obj("editItem");
          game.locals["editItem"].data = JSON.parse(JSON.stringify(data.inventory[iRef]));

          merge(game.locals["editItem"].data, duplicate(game.templates.item));

          var newApp = sync.newApp("ui_renderItem").appendTo(frame);
          newApp.attr("char-ref", obj.id());
          newApp.attr("viewOnly", scope.viewOnly);
          if (data.inventory[iRef]._s && !hasSecurity(getCookie("UserID"), "Owner", obj.data) && !hasSecurity(getCookie("UserID"), "Rights", data.inventory[iRef]))  {
            newApp.attr("viewOnly", true);
          }
          newApp.attr("local", "true");

          game.locals["editItem"].addApp(newApp);

          if (!scope.viewOnly) {
            var confirm = $("<button>").appendTo(frame);
            confirm.addClass("fit-x");
            confirm.attr("index", iRef);
            confirm.append("Confirm");
            confirm.click(function(){
              var iRef = $(this).attr("index");
              data.inventory[iRef] = duplicate(game.locals["editItem"].data);
              obj.sync("updateAsset");
              layout.coverlay("edit-item");
            });
          }
          var pop = ui_popOut({
            target : $(this),
            align : "top",
            id : "edit-item",
            maximize : true,
            minimize : true,
            style : {"width" : assetTypes["i"].width, "height" : assetTypes["i"].height}
          }, frame);
          pop.resizable();
        });

        var infoBar = $("<div>").appendTo(item);
        infoBar.addClass("fit-x outline flexmiddle");
        infoBar.css("background-color", "white");

        if (itemData instanceof Object) {
          totalWeight = totalWeight + (sync.val(itemData.info.weight) || 0) * (sync.val(itemData.info.quantity) || 1);

          var name = $("<b>").appendTo(infoBar);
          name.css("color", "#333");
          name.append(sync.val(itemData.info.name));
          if (sync.val(itemData.info.name) && sync.val(itemData.info.name).length > 15) {
            name.addClass("subtitle spadding");
          }
          else {
            name.addClass("lrpadding");
          }
          if (sync.val(itemData.info.quantity) > 1) {
            name.append("<b style='font-size : 0.8em;'> x"+sync.val(itemData.info.quantity)+"</b>");
          }

          var itemImage = $("<div>").appendTo(item);
          itemImage.addClass("fit-x flexmiddle flex");
          itemImage.css("background-image", "url('"+ sync.val(itemData.info.img) +"')");
          itemImage.css("background-size", "contain");
          itemImage.css("background-repeat", "no-repeat");
          itemImage.css("background-position", "center");

          if (!scope.viewOnly) {
            var optionsBar = $("<div>").appendTo(item);
            optionsBar.addClass("fit-x flexrow outline flexbetween subtitle spadding");
            optionsBar.css("background-color", "white");
            optionsBar.css("color", "#333");

            var security = genIcon("lock");
            security.addClass("lrmargin");
            security.attr("index", index);
            security.attr("title", "Configure who has access to this object");
            security.appendTo(optionsBar);
            security.click(function(ev){
              var index = $(this).attr("index");
              var securityContent = $("<div>");
              function buildSecurity() {
                var secTbl = {};
                secTbl[getCookie("UserID")] = 1;
                secTbl["default"] = 1;
                secTbl = obj.data.inventory[index]._s || secTbl;
                var sec = sync.render("ui_rights")(obj, app, {
                  security : secTbl,
                  viewOnly : scope.viewOnly,
                  change : function(ev, ui, userID, newSecurity){
                    obj.data.inventory[index]._s = obj.data.inventory[index]._s || secTbl;
                    if (userID == "default" && newSecurity === "") {
                      obj.data.inventory[index]._s[userID] = "1";
                    }
                    else {
                      obj.data.inventory[index]._s[userID] = newSecurity;
                    }
                    if (!scope.local) {
                      obj.sync("updateBoard");
                    }
                    else {
                      obj.update();
                    }
                    securityContent.empty();
                    buildSecurity().appendTo(securityContent);
                  }
                });
                return sec;
              }
              buildSecurity().appendTo(securityContent);

              var pop = ui_popOut({
                id : "item-security",
                prompt : true,
                target : $(this),
                align : "top"
              }, securityContent);
              ev.stopPropagation();
              ev.preventDefault();
            });


            itemData.tags = itemData.tags || {};

            var equipWrap = $("<a>").appendTo(optionsBar);
            equipWrap.addClass("hover2 flex flexmiddle");
            equipWrap.attr("index", index);
            equipWrap.click(function(ev) {
              var itemData = data.inventory[$(this).attr("index")];
              if (itemData.tags["equipped"]) {
                delete itemData.tags["equipped"];
              }
              else {
                itemData.tags["equipped"] = 1;
              }
              if (!scope.local) {
                obj.sync("updateAsset");
              }
              else {
                obj.update();
              }
              ev.stopPropagation();
              ev.preventDefault();
            });

            if (itemData.tags["equipped"]) {
              equipWrap.text("un-equip");
              item.addClass("focus");
            }
            else {
              equipWrap.text("equip");
            }
          }
        }
        else {
          var name = $("<b>").appendTo(infoBar);
          name.addClass("lrpadding");
          name.css("color", "#333");
          name.append(itemData);
        }

        var icon = genIcon("trash");
        icon.appendTo(optionsBar);
        icon.addClass("destroy");
        icon.attr("index", index);
        icon.click(function(ev) {
          var itemIndex = $(this).attr("index");
          ui_prompt({
            target : $(this),
            id : "delete-item-confirmation",
            confirm : "Delete Item",
            click : function(){
              data.inventory.splice(itemIndex, 1);
              obj.sync("updateAsset");
            }
          });
          ev.stopPropagation();
          ev.preventDefault();
          return false;
        });
      }
      else if (scope.mode == 'list') {
        var itemBackground = $("<div>").appendTo(inventoryList);
        itemBackground.addClass("outline flexcolumn smooth");
        itemBackground.css("padding", "4px");
        itemBackground.css("min-width", "100px");
        itemBackground.css("max-width", "200px");
        itemBackground.css("height", "100px");
        itemBackground.attr("index", index);
        itemBackground.css("background-color", "white");

        var item = $("<div>").appendTo(itemBackground);
        item.addClass("flexcolumn flex hover2");
        item.attr("index", index);

        item.click(function() {
          var frame = $("<div>");
          frame.addClass("flex flexcolumn");

          var iRef = $(this).attr("index");
          game.locals["editItem"] = game.locals["editItem"] || sync.obj("editItem");
          game.locals["editItem"].data = JSON.parse(JSON.stringify(data.inventory[iRef]));

          merge(game.locals["editItem"].data, duplicate(game.templates.item));

          var newApp = sync.newApp("ui_renderItem").appendTo(frame);
          newApp.attr("char-ref", obj.id());
          newApp.attr("viewOnly", scope.viewOnly);
          if (data.inventory[iRef]._s && !hasSecurity(getCookie("UserID"), "Owner", obj.data) && !hasSecurity(getCookie("UserID"), "Rights", data.inventory[iRef]))  {
            newApp.attr("viewOnly", true);
          }
          newApp.attr("local", "true");

          game.locals["editItem"].addApp(newApp);

          if (!scope.viewOnly) {
            var confirm = $("<button>").appendTo(frame);
            confirm.addClass("fit-x");
            confirm.attr("index", iRef);
            confirm.append("Confirm");
            confirm.click(function(){
              var iRef = $(this).attr("index");
              data.inventory[iRef] = duplicate(game.locals["editItem"].data);
              obj.sync("updateAsset");
              layout.coverlay("edit-item");
            });
          }
          var pop = ui_popOut({
            target : $(this),
            align : "top",
            id : "edit-item",
            maximize : true,
            minimize : true,
            style : {"width" : "500px", "height" : "350px"}
          }, frame);
          pop.resizable();
        });

        var infoBar = $("<div>").appendTo(item);
        infoBar.addClass("fit-x outline flexmiddle");
        infoBar.css("background-color", "white");

        if (itemData instanceof Object) {
          totalWeight = totalWeight + (sync.val(itemData.info.weight) || 0) * (sync.val(itemData.info.quantity) || 1);

          var name = $("<b>").appendTo(infoBar);
          name.css("color", "#333");
          name.append(sync.val(itemData.info.name));
          if (sync.val(itemData.info.quantity) > 1) {
            name.append("<b style='font-size : 0.8em;'> x"+sync.val(itemData.info.quantity)+"</b>");
          }

          var itemImage = $("<div>").appendTo(item);
          itemImage.addClass("fit-x flexmiddle flex");
          itemImage.css("background-image", "url('"+ sync.val(itemData.info.img) +"')");
          itemImage.css("background-size", "contain");
          itemImage.css("background-repeat", "no-repeat");
          itemImage.css("background-position", "center");

          if (!scope.viewOnly) {
            var optionsBar = $("<div>").appendTo(item);
            optionsBar.addClass("fit-x flexrow outline flexbetween subtitle spadding");
            optionsBar.css("background-color", "white");
            optionsBar.css("color", "#333");

            var security = genIcon("lock");
            security.attr("index", index);
            security.attr("title", "Configure who has access to this object");
            security.appendTo(optionsBar);
            security.click(function(ev){
              var index = $(this).attr("index");
              var securityContent = $("<div>");
              function buildSecurity() {
                var secTbl = {};
                secTbl[getCookie("UserID")] = 1;
                secTbl["default"] = 1;
                secTbl = obj.data.inventory[index]._s || secTbl;
                var sec = sync.render("ui_rights")(obj, app, {
                  security : secTbl,
                  viewOnly : scope.viewOnly,
                  change : function(ev, ui, userID, newSecurity){
                    obj.data.inventory[index]._s = obj.data.inventory[index]._s || secTbl;
                    if (userID == "default" && newSecurity === "") {
                      obj.data.inventory[index]._s[userID] = "1";
                    }
                    else {
                      obj.data.inventory[index]._s[userID] = newSecurity;
                    }
                    if (!scope.local) {
                      obj.sync("updateBoard");
                    }
                    else {
                      obj.update();
                    }
                    securityContent.empty();
                    buildSecurity().appendTo(securityContent);
                  }
                });
                return sec;
              }
              buildSecurity().appendTo(securityContent);

              var pop = ui_popOut({
                id : "item-security",
                prompt : true,
                target : $(this),
                align : "top"
              }, securityContent);
              ev.stopPropagation();
              ev.preventDefault();
            });


            itemData.tags = itemData.tags || {};

            var equipWrap = $("<a>").appendTo(optionsBar);
            equipWrap.addClass("hover2 flex flexmiddle");
            equipWrap.attr("index", index);
            equipWrap.click(function(ev) {
              var itemData = data.inventory[$(this).attr("index")];
              if (itemData.tags["equipped"]) {
                delete itemData.tags["equipped"];
              }
              else {
                itemData.tags["equipped"] = 1;
              }
              if (!scope.local) {
                obj.sync("updateAsset");
              }
              else {
                obj.update();
              }
              ev.stopPropagation();
              ev.preventDefault();
            });

            if (itemData.tags["equipped"]) {
              equipWrap.text("un-equip");
              item.addClass("focus");
            }
            else {
              equipWrap.text("equip");
            }
          }
        }
        else {
          var name = $("<b>").appendTo(infoBar);
          name.css("color", "#333");
          name.append(itemData);
        }

        var icon = genIcon("trash");
        icon.appendTo(optionsBar);
        icon.addClass("destroy");
        icon.attr("index", index);
        icon.click(function(ev) {
          var itemIndex = $(this).attr("index");
          ui_prompt({
            target : $(this),
            id : "delete-item-confirmation",
            confirm : "Delete Item",
            click : function(){
              data.inventory.splice(itemIndex, 1);
              obj.sync("updateAsset");
            }
          });
          ev.stopPropagation();
          ev.preventDefault();
          return false;
        });
      }
    }
  }

  if (scope.weight) {
    var ctx = sync.defaultContext();
    ctx["c"] = obj.data;

    var tWeight = sync.eval(scope.weight, ctx);

    var percentage = totalWeight/tWeight;

    weight.append("<div class='flexmiddle subtitle bold'>Total " + game.templates.item.info.weight.name + " - " + totalWeight + " / " + tWeight + "("+Math.floor(percentage*100)+"%)</div>");

    var barWrap = $("<div>").appendTo(weight);

    var progress = $("<div>").appendTo(barWrap);
    progress.addClass("outline flex");
    progress.css("position", "relative");
    progress.css("border-radius", "2px");
    progress.css("height", "8px");
    progress.css("min-width", "20px");

    var col = "rgb("+(Math.ceil(200 * percentage))+","+(Math.ceil(200-200 * percentage))+",0)";
    progress.css("background-color", col);

    var bar = $("<div>").appendTo(progress);
    bar.addClass("outline");
    bar.css("position", "absolute");
    bar.css("right", 0);
    bar.css("width", 100-Math.ceil(percentage * 105)+"%");
    bar.css("background-color", "grey");
    bar.css("height", "100%");
  }
  else {
    if (!scope.hideWeight) {
      weight.append("<div class='flexmiddle subtitle bold'>Total " + game.templates.item.info.weight.name + " - " + totalWeight+"</div>");
    }
  }
  return inventory;
});


sync.render("ui_itemNotes", function(obj, app, scope){
  scope = scope || {};
  scope.removePadding = true;
  scope.noOutline = true;
  return sync.render("ui_characterNotes")(obj, app, scope).removeClass("padding");
});

sync.render("ui_layerOptions", function(obj, app, scope){

  var div = $("<div>");
  div.addClass("flexrow flexbetween");

  var optionsDiv = $("<div>").appendTo(div);
  optionsDiv.addClass("flexcolumn subtitle");

  var layerNameWrap = $("<div>").appendTo(optionsDiv);
  layerNameWrap.addClass("flexcolumn flexmiddle");
  layerNameWrap.append("<b class='subtitle'>Layer Name</b>");

  var layerNameWrap = $("<div>").appendTo(optionsDiv);
  layerNameWrap.addClass("flexrow flexbetween");

  var layerName = genInput({
    parent : layerNameWrap,
    classes : "line lrmargin middle",
    value : obj.data.layers[scope.layer].n,
  });
  layerName.change(function(){
    obj.data.layers[scope.layer].n = $(this).val();
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });

  optionsDiv.append("<div class='flex'></div>");

  var layerNameWrap = $("<div>").appendTo(optionsDiv);
  layerNameWrap.addClass("flexcolumn flexmiddle");
  layerNameWrap.append("<b class='flex'>Revealed</b>");

  var revealed = $("<div>").appendTo(layerNameWrap);
  revealed.addClass("flexrow");

  var no = $("<button>").appendTo(revealed);
  no.addClass("bold alttext");
  no.text("No");
  if (obj.data.layers[scope.layer].h) {
    no.addClass("highlight");
  }
  else {
    no.addClass("background");
  }
  no.click(function(){
    obj.data.layers[scope.layer].h = 1;
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });

  var yes = $("<button>").appendTo(revealed);
  yes.addClass("bold alttext");
  yes.text("Yes");
  if (obj.data.layers[scope.layer].h) {
    yes.addClass("background");
  }
  else {
    yes.addClass("highlight");
  }
  yes.click(function(){
    delete obj.data.layers[scope.layer].h;
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });
  /*
  var layerNameWrap = $("<div>").appendTo(optionsDiv);
  layerNameWrap.addClass("flexrow flexbetween");
  layerNameWrap.append("<b class='flex'>Interactions</b>");

  var no = $("<button>").appendTo(layerNameWrap);
  no.addClass("bold alttext");
  no.text("No");
  if (obj.data.layers[scope.layer].h) {
    no.addClass("highlight");
  }
  else {
    no.addClass("background");
  }
  no.click(function(){
    obj.data.layers[scope.layer].h = 1;
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });

  var yes = $("<button>").appendTo(layerNameWrap);
  yes.addClass("bold alttext");
  yes.text("Yes");
  if (obj.data.layers[scope.layer].h) {
    yes.addClass("background");
  }
  else {
    yes.addClass("highlight");
  }
  yes.click(function(){
    delete obj.data.layers[scope.layer].h;
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });*/

  var securityContent = $("<div>").appendTo(div);
  securityContent.addClass("flexcolumn white outline smooth");
  securityContent.css("font-size", "0.6em");
  securityContent.css("color", "#333");
  securityContent.css("text-shadow", "none");
  securityContent.css("overflow", "auto");
  var secTbl = {};
  secTbl[getCookie("UserID")] = 1;
  secTbl = obj.data.layers[scope.layer]._s || secTbl;
  var sec = sync.render("ui_rights")(obj, app, {
    security : secTbl,
    displayDefault : true,
    change : function(ev, ui, userID, newSecurity){
      obj.data.layers[scope.layer]._s = obj.data.layers[scope.layer]._s || secTbl;
      if (userID == "default" && newSecurity === "") {
        obj.data.layers[scope.layer]._s[userID] = "1";
      }
      else {
        obj.data.layers[scope.layer]._s[userID] = newSecurity;
      }
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    }
  }).appendTo(securityContent);

  return div;
});

sync.render("ui_boardLayers", function(obj, app, scope) {
  var data = obj.data;
  scope = scope || {
    viewOnly : (app.attr("viewOnly") == "true"),
    local : (app.attr("local") == "true"),
    printing : (app.attr("printing") == "true"),
    layer : (app.attr("layer") || 0),
  };

  var targetApp = $("#"+app.attr("targetApp"));
  scope.layer = targetApp.attr("layer") || 0;

  var div = $("<div>");
  div.addClass("flexcolumn flex");

  if (game.config.data.offline) {
    scope.local = true;
  }
  if (scope.layer >= obj.data.layers.length - 1) {
    scope.layer = obj.data.layers.length - 1;
    scope.layer = Math.max(scope.layer, 0);
    targetApp.attr("layer", obj.data.layers.length - 1);
  }

  var layerWrapper = $("<div>").appendTo(div);
  layerWrapper.addClass("flex");
  layerWrapper.css("position", "relative");
  layerWrapper.css("overflow", "auto");

  var layerContainer = $("<div>").appendTo(layerWrapper);
  layerContainer.addClass("fit-x");
  layerContainer.css("position", "absolute");

  if (hasSecurity(getCookie("UserID"), "Rights", obj.data)) {
    layerContainer.sortable({
      update : function(ev, ui) {
        var newIndex;
        var count = 0;
        $(ui.item).attr("ignore", true);
        layerContainer.children().each(function(){
          if ($(this).attr("ignore")){
            newIndex = count;
          }
          count += 1;
        });
        var old = obj.data.layers.splice($(ui.item).attr("index"), 1);
        util.insert(obj.data.layers, newIndex, old[0]);
        app.attr("rebuildmenu", true);
        obj.sync("updateAsset");
      }
    });
  }

  for (var i in obj.data.layers) {
    var layerPlate = $("<div>").appendTo(layerContainer);
    layerPlate.addClass("flexrow");
    layerPlate.attr("index", i);

    var optionsBar = $("<div>").appendTo(layerPlate);
    optionsBar.addClass("flexrow flexmiddle foreground bold lrpadding");

    var options = genIcon("cog").appendTo(optionsBar);
    options.attr("index", i);
    options.attr("title", "options");
    options.css("color", "white");
    options.click(function(){
      var index = $(this).attr("index");
      var content = $("<div>");
      content.addClass("flexcolumn");

      var filter = genIcon("filter", "Filters");//.appendTo(content);
      filter.attr("title", "Change this layer's filter");
      filter.click(function(){
        var content = $("<div>");

        var filterWrap = genIcon("refresh", "Reset Filters");
        filterWrap.addClass("flex flexmiddle");
        filterWrap.click(function(){
          brightness.val(100);
          contrast.val(100);
          gray.val(0);
          hue.val(0);
          invert.val(0);
          sepia.val(0);
          opacity.val(100)
        });

        var brightness = genInput({
          type : "range",
          value : 100,
          min : 50,
          max : 150,
        });

        var contrast = genInput({
          type : "range",
          value : 100,
          min : 50,
          max : 100,
        });

        var gray = genInput({
          type : "range",
          value : 0,
          min : 0,
          max : 100,
        });

        var hue = genInput({
          type : "range",
          value : 0,
          min : 0,
          max : 360,
        });

        var invert = genInput({
          type : "range",
          value : 0,
          min : 0,
          max : 100,
        });

        var sepia = genInput({
          type : "range",
          value : 0,
          min : 0,
          max : 100,
        });

        var opacity = genInput({
          type : "range",
          value : 100,
          min : 0,
          max : 100,
        });

        brightness.val(100);
        contrast.val(100);
        gray.val(0);
        hue.val(0);
        invert.val(0);
        sepia.val(0);

        if (obj.data.layers[index].o && obj.data.layers[index].o.f) {
          var filters = obj.data.layers[index].o.f;
          brightness.val(parseInt(filters["brightness"]) || 100);
          contrast.val(parseInt(filters["contrast"]) || 100);
          gray.val(parseInt(filters["grayscale"]) || 0);
          hue.val(parseInt(filters["hue-rotate"]) || 0);
          invert.val(parseInt(filters["invert"]) || 0);
          sepia.val(parseInt(filters["sepia"]) || 0);
          opacity.val(parseInt(filters["opacity"]) || 100);
        }

        var controls = ui_controlForm({
          inputs : {
            "Filters" : filterWrap,
            "Brigtness" : brightness,
            "Contrast" : contrast,
            "Grayscale" : gray,
            "Hue Shift" : hue,
            "Inverted" : invert,
            "Sepia" : sepia,
            "Opacity" : opacity,
          },
          click : function(ev, inputs) {
            obj.data.layers[index].o = obj.data.layers[index].o || {};
            obj.data.layers[index].o.f = obj.data.layers[index].o.f || {};
            if (brightness.val() != 100) {
              obj.data.layers[index].o.f["brightness"] = brightness.val();
            }
            else {
              delete obj.data.layers[index].o.f["brightness"];
            }
            if (contrast.val() != 100) {
              obj.data.layers[index].o.f["contrast"] = contrast.val();
            }
            else {
              delete obj.data.layers[index].o.f["contrast"];
            }
            if (gray.val() != 0) {
              obj.data.layers[index].o.f["grayscale"] = gray.val();
            }
            else {
              delete obj.data.layers[index].o.f["grayscale"];
            }
            if (hue.val() != 0) {
              obj.data.layers[index].o.f["hue-rotate"] = hue.val();
            }
            else {
              delete obj.data.layers[index].o.f["hue-rotate"];
            }
            if (invert.val() != 0) {
              obj.data.layers[index].o.f["invert"] = invert.val();
            }
            else {
              delete obj.data.layers[index].o.f["invert"];
            }
            if (sepia.val() != 0) {
              obj.data.layers[index].o.f["sepia"] = sepia.val();
            }
            else {
              delete obj.data.layers[index].o.f["sepia"];
            }
            if (opacity.val() != 0) {
              obj.data.layers[index].o.f["opacity"] = opacity.val();
            }
            else {
              delete obj.data.layers[index].o.f["opacity"];
            }
            app.attr("rebuildmenu", true);
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        }).appendTo(content);

        ui_popOut({
          target : $(this),
          id : "layer-filter",
        }, content);
      });

      var securityContent = $("<div>").appendTo(content);
      function buildSecurity() {
        var secTbl = {};
        secTbl[getCookie("UserID")] = 1;
        secTbl = obj.data.layers[index]._s || secTbl;
        var sec = sync.render("ui_rights")(obj, app, {
          security : secTbl,
          change : function(ev, ui, userID, newSecurity){
            obj.data.layers[index]._s = obj.data.layers[index]._s || secTbl;
            if (userID == "default" && newSecurity === "") {
              obj.data.layers[index]._s[userID] = "1";
            }
            else {
              obj.data.layers[index]._s[userID] = newSecurity;
            }
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
            securityContent.empty();
            buildSecurity().appendTo(securityContent);
          }
        });
        return sec;
      }
      buildSecurity().appendTo(securityContent);

      var optionsBar = $("<div>").appendTo(content);
      optionsBar.addClass("flexrow flexaround");

      var height = genIcon("resize-vertical", "Altitude : " + (obj.data.layers[index].alt || 0))//.appendTo(optionsBar);
      height.attr("title", "Change layer name");
      height.click(function(){
        ui_prompt({
          target : $(this),
          id : "layer-height",
          inputs : {"Altitude" : obj.data.layers[index].alt},
          click : function(ev, inputs) {
            obj.data.layers[index].alt = inputs["Altitude"].val();
            app.attr("rebuildmenu", true);
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        });

        layout.coverlay("layer-options");
      });

      if (index != 0) {
        var del = genIcon("trash", "Delete Layer").appendTo(optionsBar);
        del.attr("title", "Delete Layer");
        del.addClass("destroy");
        del.click(function(){
          obj.data.layers.splice(index, 1);
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
          layout.coverlay("layer-options");
        });
      }
      else {
        var del = genIcon("trash", "Delete Layer").appendTo(optionsBar);
        del.attr("title", "Delete Layer");
        del.addClass("dull");
      }
      var popout = ui_popOut({
        target : $(this),
        id : "layer-options",
      }, content);
    });
    options.css("padding-right", "0");

    var ignore = genIcon("ok-circle");
    //ignore.appendTo(optionsBar);
    ignore.addClass("lrpadding");
    ignore.attr("index", i);
    ignore.attr("title", "Interactions enabled");
    ignore.css("color", "white");

    if (obj.data.layers[i].l) {
      ignore.changeIcon("ban-circle");
      ignore.attr("title", "Interactions disabled");
    }
    ignore.click(function(){
      var index = $(this).attr("index");

      obj.data.layers[index].l = !obj.data.layers[index].l;
      app.attr("rebuildmenu", true);
      obj.update();
    });

    var layerLabel = $("<div>").appendTo(layerPlate);
    layerLabel.addClass("outlinebottom flex white link flexrow spadding");
    layerLabel.attr("index", i);
    layerLabel.css("border-radius", "0px");

    var nameInput = genInput({
      parent : layerLabel,
      value : obj.data.layers[i].n,
      classes : "line fit-x bold",
      placeholder : "Layer Name",
      index : i,
      style : {"color" : "#333"}
    });
    nameInput.click(function(ev){
      ev.stopPropagation();
    });
    nameInput.change(function(){
      var index = $(this).attr("index");
      obj.data.layers[index].n = $(this).val();
      app.attr("rebuildmenu", true);
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });

    var optionsBar = $("<div>").appendTo(layerPlate);
    optionsBar.addClass("foreground outlinebottom bold flexmiddle");

    var hidden = genIcon("eye-open", "Visible");
    hidden.css("color", "white");
    if (obj.data.layers[i].h) {
      hidden.changeIcon("eye-close", "Hidden");
    }
    hidden.addClass("subtitle lrpadding flexmiddle");
    hidden.appendTo(optionsBar);
    hidden.attr("index", i);
    hidden.click(function(){
      if (!obj.data.layers[$(this).attr("index")].h) {
        obj.data.layers[$(this).attr("index")].h = true;
      }
      else {
        delete obj.data.layers[$(this).attr("index")].h;
      }
      app.attr("rebuildmenu", true);
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
      layout.coverlay("layer-options");
    });
  }

  if (hasSecurity(getCookie("UserID"), "Rights", obj.data)) {
    var optionsBar = $("<div>").appendTo(div);
    optionsBar.addClass("flexrow flexmiddle foreground bold subtitle");
    optionsBar.css("color", "white");

    var create = genIcon("plus", "New Layer").appendTo(optionsBar);
    create.attr("title", "Create a new layer");
    create.click(function(){
      app.attr("rebuildmenu", true);
      obj.data.layers.push({
        n : "New Layer",
        _s : {default : "1"},
        t : [], //tiles
        p : [], //pieces
        d : [], //drawing
      });
      obj.sync("updateAsset");
    });
  }

  return div;
});

sync.render("ui_mapOptions", function(obj, app, scope) {
  var targetApp = $("#"+app.attr("id"));
  var data = obj.data;

  var div = $("<div>");
  div.addClass("flexcolumn fit-x padding");

  if (app.attr("configuring") && app.attr("configuring") != "advanced") {
    var background = $("<div>").appendTo(div);
    background.addClass("flexcolumn flex subtitle middle");
    background.append("<b class='underline' style='font-size:1.4em;'>Background</b>");

    var bgCol = genIcon("tint", "Color (Fog)").appendTo(background);
    bgCol.css("font-size", "0.8em");
    bgCol.click(function(){
      var optionList = [];
      var submenu = [
        "rgba(34,34,34,1)",
        "rgba(187,0,0,1)",
        "rgba(255,153,0,1)",
        "rgba(255,240,0,1)",
        "rgba(0,187,0,1)",
        "rgba(0,115,230,1)",
        "rgba(176,0,187,1)",
        "rgba(255,115,255,1)",
        "rgba(255,255,255,1)",
      ];
      for (var i in submenu) {
        optionList.push({
          icon : "tint",
          style : {"background-color" : submenu[i], "color" : "transparent"},
          click : function(ev, ui){
            obj.data.c = ui.css("background-color");
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          },
        });
      }
      optionList.push({
        icon : "tint",
        style : {"background-image" : "url('/content/checkered.png')", "color" : "transparent"},
        click : function(ev, ui){
          obj.data.c = "rgba(0,0,0,0)";
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        },
      });
      optionList.push({
        icon : "cog",
        click : function(){
          var primaryCol = sync.render("ui_colorPicker")(obj, app, {
            hideColor : true,
            custom : true,
            colorChange : function(ev, ui, value){
              obj.data.c = value;
              if (!scope.local) {
                obj.sync("updateAsset");
              }
              else {
                obj.update();
              }
              layout.coverlay("grid-color");
            }
          });

          ui_popOut({
            target : gridColor,
            id : "grid-color",
          }, primaryCol);
        },
      });
      var menu = ui_dropMenu($(this), optionList, {"id" : "color-picker", hideClose : true});
      menu.removeClass("outline");
    });

    var bgImg = genIcon("picture", "Image").appendTo(background);
    bgImg.css("font-size", "0.8em");
    bgImg.click(function(){
      var imgList = sync.render("ui_filePicker")(obj, app, {
        filter : [
          "img",
          "video",
          "png",
          "jpg",
          "jpeg",
          "bmp",
          "ico",
          "apng",
          "gif",
          "mp4",
          "ogg",
          "webm"
        ],
        change : function(ev, ui, val){

          if (val.match(".mp4") || val.match(".webm") || val.match(".ogg")) {
            var vid = document.createElement("video");
            vid.src = val;
            vid.addEventListener('loadedmetadata', function(){
              var width = this.videoWidth;
              var height = this.videoHeight;
              var aspect = width/height;
              if (width > height) {
                width = Math.min(width, 3200);
                height = Math.ceil(width/aspect);
              }
              else {
                height = Math.min(height, 3200);
                width = Math.ceil(height*aspect);
              }
              data.w = Math.max(Math.min(width, 3200), 640);
              data.h = Math.max(Math.min(height, 3200), 480);
              data.map = val;
              if (!scope.local) {
                obj.sync("updateAsset");
              }
              else {
                obj.update();
              }
            });
          }
          else {
            var img = new Image();
            img.src = val;
            img.onload = function(){
              var width = this.naturalWidth;
              var height = this.naturalHeight;
              var aspect = width/height;
              if (width > height) {
                width = Math.min(width, 3200);
                height = Math.ceil(width/aspect);
              }
              else {
                height = Math.min(height, 3200);
                width = Math.ceil(height*aspect);
              }
              data.w = Math.min(width, 3200);
              data.h = Math.min(height, 3200);
              data.map = val;
              if (!scope.local) {
                obj.sync("updateAsset");
              }
              else {
                obj.update();
              }
            }
          }
          if (!val) {
            delete data.map;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
          layout.coverlay("icons-picker");
        }
      });

      var pop = ui_popOut({
        target : app,
        prompt : true,
        id : "icons-picker",
        style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
      }, imgList);
      pop.resizable();
    });

    background.append("<b class='flex'></b>");

    background.append("<b class='underline' style='font-size: 0.8em'>Visual Effects</b>");

    var time = genIcon("time", "Time of Day").appendTo(background);
    time.css("font-size", "0.8em");
    time.click(function(){
      var actionsList = [
        {
          name : "Day",
          click : function(){
            data.options.filter = obj.data.options.filter || {};
            delete obj.data.options.filter.brightness;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Night",
          click : function(){
            data.options.filter = obj.data.options.filter || {
              brightness : 45,
            };
            obj.data.options.filter.brightness = 45;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Dawn",
          click : function(){
            data.options.filter = obj.data.options.filter || {
              brightness : 85,
            };
            obj.data.options.filter.brightness = 85;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Dusk",
          click : function(){
            data.options.filter = obj.data.options.filter || {
              brightness : 75,
            };
            obj.data.options.filter.brightness = 75;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        }
      ];
      ui_dropMenu($(this), actionsList, {id : "time"});
    });

    var weather = genIcon("cloud", "Weather").appendTo(background);
    weather.css("font-size", "0.8em");
    weather.click(function(){
      var actionsList = [
        {
          name : "None",
          click : function(){
            data.options.weather = null;
            data.options.weatherStyle = null;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Light Rain",
          click : function(){
            data.options.weather = "rain";
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Normal Rain",
          click : function(){
            data.options.weather = "rain mix";
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Heavy Rain",
          click : function(){
            data.options.weather = "downpour";
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Snow",
          click : function(){
            data.options.weather = "snow";
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
      ];
      ui_dropMenu($(this), actionsList, {id : "time"});
    });

    var bgImg = genIcon("tint", "Filter").appendTo(background);
    bgImg.css("font-size", "0.8em");
    bgImg.click(function(){
      var actionsList = [
        {
          name : "Reset",
          click : function(){
            data.options.filter = data.options.filter || {}
            for (var i in data.options.filter) {
              if (i != "brightness") {
                delete data.options.filter[i];
              }
            }
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Old-timey",
          click : function(){
            data.options.filter = data.options.filter || {}
            for (var i in data.options.filter) {
              if (i != "brightness") {
                delete data.options.filter[i];
              }
            }
            data.options.filter["grayscale"] = 70;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Memory",
          click : function(){
            data.options.filter = data.options.filter || {}
            for (var i in data.options.filter) {
              if (i != "brightness") {
                delete data.options.filter[i];
              }
            }
            data.options.filter["sepia"] = 40;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Bent Reality",
          click : function(){
            data.options.filter = data.options.filter || {}
            for (var i in data.options.filter) {
              if (i != "brightness") {
                delete data.options.filter[i];
              }
            }
            data.options.filter["invert"] = 100;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
      ];
      ui_dropMenu($(this), actionsList, {id : "time"});
    });

    background.append("<b class='flex'></b>");

    var background = $("<div>").appendTo(div);
    background.addClass("flexcolumn flex subtitle middle");
    background.css("margin-left", "0.5em");
    background.css("margin-right", "0.5em");
    background.css("min-width", "120px");
    background.append("<b class='underline' style='font-size:1.4em'>Grid</b>");


    if (obj.data.gridW && obj.data.gridH) {
      var gridColor = genIcon("tint", "Configure Grid").appendTo(background);
      gridColor.addClass("subtitle");
      gridColor.click(function(){
        var content = sync.newApp("ui_boardControls");
        content.attr("local", scope.local);
        content.attr("viewOnly", scope.viewOnly);
        content.attr("target", app.attr("id"));
        content.css("font-size", "1.2em");
        obj.addApp(content);

        $(this).replaceWith(content);
      });
    }

    if (!data.options || !data.options.hex) {
      var drawGrid = genIcon("edit", "Draw Grid").appendTo(background);
      drawGrid.addClass("subtitle");
      drawGrid.click(function(){
        if (!game.locals["drawing"]) {
          game.locals["drawing"] = sync.obj();
          game.locals["drawing"].data = {};
        }
        game.locals["drawing"].data.drawing = "grid";
        game.locals["drawing"].data.target = app.attr("id");
        game.locals["drawing"].update();
        sendAlert({text : "Draw a square matching the grid on the map"});
      });

      var drawGrid = genIcon("move", "Shift Grid").appendTo(background);
      drawGrid.addClass("subtitle");
      drawGrid.click(function(){
        if (!game.locals["drawing"]) {
          game.locals["drawing"] = sync.obj();
          game.locals["drawing"].data = {};
        }
        game.locals["drawing"].data.drawing = "shiftg";
        game.locals["drawing"].data.target = app.attr("id");
        game.locals["drawing"].update();
        sendAlert({text : "Shift the grid by dragging it around"});
      });
    }

    if (obj.data.gridW && obj.data.gridH) {
      var gridColor = genIcon("tint", "Grid Color").appendTo(background);
      gridColor.addClass("subtitle");
      gridColor.click(function(){
        var optionList = [];
        var submenu = [
          "rgba(34,34,34,1)",
          "rgba(187,0,0,1)",
          "rgba(255,153,0,1)",
          "rgba(255,240,0,1)",
          "rgba(0,187,0,1)",
          "rgba(0,115,230,1)",
          "rgba(176,0,187,1)",
          "rgba(255,115,255,1)",
          "rgba(255,255,255,1)",
        ];
        for (var i in submenu) {
          optionList.push({
            icon : "tint",
            style : {"background-color" : submenu[i], "color" : "transparent"},
            attr : {colVal : submenu[i]},
            click : function(ev, ui){
              obj.data.gc = ui.attr("colVal").replace(",1)",",0.20)");
              if (!scope.local) {
                obj.sync("updateAsset");
              }
              else {
                obj.update();
              }
            },
          });
        }
        optionList.push({
          icon : "tint",
          style : {"background-image" : "url('/content/checkered.png')", "color" : "transparent"},
          click : function(ev, ui){
            obj.data.gc = "rgba(0,0,0,0)";
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          },
        });
        optionList.push({
          icon : "cog",
          click : function(){
            var primaryCol = sync.render("ui_colorPicker")(obj, app, {
              hideColor : true,
              custom : true,
              colorChange : function(ev, ui, value){
                obj.data.gc = value;
                if (!scope.local) {
                  obj.sync("updateAsset");
                }
                else {
                  obj.update();
                }
                layout.coverlay("grid-color");
              }
            });

            ui_popOut({
              target : gridColor,
              id : "grid-color",
            }, primaryCol);
          },
        });
        var menu = ui_dropMenu($(this), optionList, {"id" : "color-picker", hideClose : true});
        menu.removeClass("outline");
      });

      if (data.options && data.options.hex) {
        var gridType = genIcon("", "Switch to Squares").appendTo(background);
        gridType.addClass("subtitle");
        gridType.click(function(){
          data.options = data.options || {};
          delete data.options.hex;
          data.gridW = 64;
          data.gridH = 64;
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        });
      }
      else {
        var gridType = genIcon("", "Switch to Hex")//.appendTo(background);
        gridType.addClass("subtitle");
        gridType.click(function(){
          data.options = data.options || {};
          data.options.hex = true;
          data.gridW = 140;
          data.gridH = 120;
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        });
      }
    }

    background.append("<b class='flex'></b>");

    if (obj.data.gridW && obj.data.gridH) {
      var disableGrid = genIcon("remove", "Disable Grid").appendTo(background);
      disableGrid.addClass("subtitle destroy");
      disableGrid.click(function(){
        obj.data.gridW = 0;
        obj.data.gridH = 0;
        if (!scope.local) {
          obj.sync("updateAsset");
        }
        else {
          obj.update();
        }
      });
    }
    else {
      var enableGrid = genIcon("ok", "Enable Grid").appendTo(background);
      enableGrid.addClass("subtitle create");
      enableGrid.click(function(){
        obj.data.gridW = 64;
        obj.data.gridH = 64;
        if (!scope.local) {
          obj.sync("updateAsset");
        }
        else {
          obj.update();
        }
      });
    }

    var background = $("<div>").appendTo(div);
    background.addClass("flexcolumn flex subtitle middle");

    background.append("<b class='underline' style='font-size:1.4em'>Map</b>");

    var checkWrap = $("<div>")//.appendTo(background);
    checkWrap.addClass("flexrow");

    var healthbars = genIcon("", "Background").appendTo(checkWrap);
    healthbars.addClass("subtitle");

    var checkWrap = $("<div>").appendTo(checkWrap);
    checkWrap.addClass("flexrow flexmiddle");

    var repeatType = $("<select>").appendTo(checkWrap);
    repeatType.addClass("lrmargin");
    repeatType.css("font-size", "0.6em");
    repeatType.css("color", "#333");
    repeatType.css("text-shadow", "none");

    var optionList = ["No-Repeat", "Repeat-All", "Fit"];
    for (var i in optionList) {
      var option = $("<option>").appendTo(repeatType);
      option.attr("value", optionList[i]);
      option.text(optionList[i]);
      if ((data.options.bgRepeat=="repeat-all" && i == 1) || (data.options.bgRepeat=="fit" && i == 2)) {
        option.attr("selected", "selected");
      }
    }
    repeatType.attr("value", data.options.bgRepeat);
    repeatType.change(function(){
      obj.data.options = obj.data.options || {};
      obj.data.options.bgRepeat = $(this).val().toLowerCase();
      if (obj.data.options.bgRepeat == "no-repeat") {
        delete obj.data.options.bgRepeat;
      }
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });

    var checkWrap = $("<div>").appendTo(background);
    checkWrap.addClass("flexcolumn");
    var healthbars = genIcon("cog", "Boundries").appendTo(checkWrap);
    healthbars.addClass("subtitle");
    healthbars.click(function(){
      ui_prompt({
        target : $(this),
        inputs : {
          "Width" : {value : data.w, min : 320, max : 3200},
          "Height" : {value : data.h, min : 320, max : 3200}
        },
        click : function(ev, inputs){
          obj.data.w = Number(inputs["Width"].val() || data.w);
          obj.data.h = Number(inputs["Height"].val() || data.h);
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        }
      });
    });

    var showViewPort = genIcon("unchecked", "Piece Defaults").appendTo(background);
    showViewPort.addClass("subtitle");
    showViewPort.attr("title", "Change the default pieces");
    showViewPort.click(function(){
      var content = sync.newApp("ui_backgroundControls");
      content.attr("target", targetApp.attr("id"));
      obj.addApp(content);

      ui_popOut({
        target : app,
        title : "Default Piece Options",
        id : "board-background-editing-"+targetApp.attr("id"),
      }, content);
    });

    /*var rescaleMap = genIcon("resize-window", "Re-Scale Map").appendTo(checkWrap);
    rescaleMap.addClass("subtitle");
    rescaleMap.click(function(){
      ui_prompt({
        target : $(this),
        inputs : {
          "Width" : {value : data.w, min : 320, max : 3200},
          "Height" : {value : data.h, min : 320, max : 3200}
        },
        click : function(ev, inputs){
          obj.data.w = Number(inputs["Width"].val() || data.w);
          obj.data.h = Number(inputs["Height"].val() || data.h);
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        }
      });
    });*/

    var showViewPort = genIcon("facetime-video", "Save View").appendTo(background);
    showViewPort.addClass("subtitle");
    showViewPort.attr("title", "Assign the default ViewPort");
    showViewPort.click(function(){
      var zoom = parseInt(app.attr("zoom"))/100 || 1;

      obj.data.vX = boardApi.apps[app.attr("id")].stage.x - $("#"+app.attr("id")).width()/2/zoom;
      obj.data.vY = boardApi.apps[app.attr("id")].stage.y - $("#"+app.attr("id")).height()/2/zoom;
      obj.data.vZ = zoom * 100;
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
      sendAlert({text : "Default View Updated"});
    });

    background.append("<b class='flex'></b>");

    var draw = genIcon("cog", "Advanced").appendTo(background);
    draw.addClass("subtitle");
    draw.click(function(){
      app.attr("configuring", "advanced");
      var parent = $("#"+app.attr("id")+"-menu-"+obj.id());
      parent.replaceWith(boardApi.buildMenu(obj, app, scope, true));
    });
  }
  else {
    var background = $("<div>").appendTo(div);
    background.addClass("flexcolumn flex");

    var checkWrap = $("<div>").appendTo(background);
    checkWrap.addClass("flexrow");

    var checkCursors = genInput({
      classes : "lrmargin",
      parent : checkWrap,
      type : "checkbox",
      style : {"margin-top" : "0"},
    });
    if (data.options.cursorToggle) {
      checkCursors.prop("checked", true);
    }
    var cursors = genIcon("hands-up", "Hide Cursors").appendTo(checkWrap);
    cursors.addClass("subtitle lrmargin");
    checkWrap.click(function(){
      data.options = data.options || {};
      data.options.cursorToggle = !data.options.cursorToggle;
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });

    var checkWrap = $("<div>").appendTo(background);
    checkWrap.addClass("flexrow");

    var checkDraw = genInput({
      classes : "lrmargin",
      parent : checkWrap,
      type : "checkbox",
      style : {"margin-top" : "0"},
    });
    if (data.options.freeDraw) {
      checkDraw.prop("checked", true);
    }

    var draw = genIcon("", "Player Drawing").appendTo(checkWrap);
    draw.addClass("subtitle lrmargin");

    checkWrap.click(function(){
      data.options = data.options || {};
      data.options.freeDraw = !data.options.freeDraw;
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });

    var checkWrap = $("<div>").appendTo(background);
    checkWrap.addClass("flexrow");

    var checkDraw = genInput({
      classes : "lrmargin",
      parent : checkWrap,
      type : "checkbox",
      style : {"margin-top" : "0"},
    });
    if (!data.options.noCollide) {
      checkDraw.prop("checked", true);
    }

    var draw = genIcon("", "Wall Collision").appendTo(checkWrap);
    draw.addClass("subtitle lrmargin");

    checkWrap.click(function(){
      data.options = data.options || {};
      data.options.noCollide = !data.options.noCollide;
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });


    var checkWrap = $("<div>").appendTo(background);
    checkWrap.addClass("flexrow");

    var healthbars = genIcon("", "Default Layer").appendTo(checkWrap);
    healthbars.addClass("subtitle flex");

    var checkWrap = $("<div>").appendTo(checkWrap);
    checkWrap.addClass("flexrow flexmiddle");

    var hpType = $("<select>").appendTo(checkWrap);
    hpType.addClass("lrmargin");
    hpType.css("font-size", "0.6em");
    hpType.css("color", "#333");
    hpType.css("text-shadow", "none");

    for (var i in data.layers) {
      var option = $("<option>").appendTo(hpType);
      option.attr("value", i);
      option.text(data.layers[i].n);
      if ((data.options.pLayer || 0) == i) {
        option.attr("selected", "selected");
      }
    }
    hpType.attr("value", data.options.pLayer);
    hpType.change(function(){
      data.options = data.options || {};
      data.options.pLayer = $(this).val();
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });

    var checkWrap = $("<div>").appendTo(background);
    checkWrap.addClass("flexrow");

    var healthbars = genIcon("", "Grid Layer").appendTo(checkWrap);
    healthbars.addClass("subtitle flex");

    var checkWrap = $("<div>").appendTo(checkWrap);
    checkWrap.addClass("flexrow flexmiddle");

    var hpType = $("<select>").appendTo(checkWrap);
    hpType.addClass("lrmargin");
    hpType.css("font-size", "0.6em");
    hpType.css("color", "#333");
    hpType.css("text-shadow", "none");

    for (var i in data.layers) {
      var option = $("<option>").appendTo(hpType);
      option.attr("value", i);
      option.text(data.layers[i].n);
      if ((data.options.gLayer || 0) == i) {
        option.attr("selected", "selected");
      }
    }
    hpType.attr("value", data.options.gLayer);
    hpType.change(function(){
      data.options = data.options || {};
      data.options.gLayer = $(this).val();
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });

    var checkWrap = $("<div>").appendTo(background);
    checkWrap.addClass("flexrow");

    var healthbars = genIcon("", "Health Bars").appendTo(checkWrap);
    healthbars.addClass("subtitle flex");

    var checkWrap = $("<div>").appendTo(checkWrap);
    checkWrap.addClass("flexrow flexmiddle");

    var hpType = $("<select>").appendTo(checkWrap);
    hpType.addClass("lrmargin");
    hpType.css("font-size", "0.6em");
    hpType.css("color", "#333");
    hpType.css("text-shadow", "none");

    var optionList = ["Show All", "Has Access", "Never Show"];
    for (var i in optionList) {
      var option = $("<option>").appendTo(hpType);
      option.attr("value", i);
      option.text(optionList[i]);
      if ((data.options.hpMode || 0) == i) {
        option.attr("selected", "selected");
      }
    }
    hpType.attr("value", data.options.hpMode);
    hpType.change(function(){
      data.options = data.options || {};
      data.options.hpMode = $(this).val();
      if (data.options.hpMode == 0) {
        delete data.options.hpMode;
      }
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });


    var background = $("<div>").appendTo(div);
    background.addClass("flexcolumn flex");
    background.append("<b class='underline middle size2'>Tools</b>");

    var healthbars = genIcon("flash", "Map Optimizer")//.appendTo(background);
    healthbars.addClass("subtitle");
    healthbars.click(function(){
      boardApi.saveChanges(obj);
      sendAlert({text : "Optimized"});
    });

    var rights = genIcon("", "Access Controls").appendTo(background);
    rights.addClass("subtitle");
    rights.click(function(){
      var contentWrap = $("<div>");
      contentWrap.addClass("flexcolumn flex");

      var content = sync.newApp("ui_rights").appendTo(contentWrap);
      obj.addApp(content);

      contentWrap.append("<b class='subtitle lrpadding lrmargin flexmiddle'>Board Rights behave differently, and in most cases<br> shouldn't be changed. Proceed with caution</b>");

      var frame = ui_popOut({
        target : app,
        id : "ui-rights-dialog",
      }, contentWrap);
    });

    var scale = genIcon("", "Map Scale").appendTo(background);
    scale.addClass("subtitle");
    scale.click(function(){
      if (!game.locals["drawing"]) {
        game.locals["drawing"] = sync.obj();
        game.locals["drawing"].data = {};
      }
      game.locals["drawing"].data.target = app.attr("id");

      var mapScaleWrapper = $("<div>");
      mapScaleWrapper.addClass("flexcolumn");

      var mapScale = $("<div>").appendTo(mapScaleWrapper);
      mapScale.addClass("flexrow");

      var mapScaleWrap = $("<div>").appendTo(mapScale);
      mapScaleWrap.addClass("flexcolumn");
      mapScaleWrap.append("<b class='subtitle lrpadding'>Scale to this Distance</b>");

      var mapScaleInput = genInput({
        parent : mapScaleWrap,
        classes : "line",
        type : "number",
        placeholder : "New Distance",
        value : "",
        style : {"width" : "150px", "text-align" : "center"},
      });
      mapScaleInput.change(function(){
        game.locals["drawing"].data.scaleSize = $(this).val();
      });

      var mapScaleWrap = $("<div>").appendTo(mapScale);
      mapScaleWrap.addClass("flexcolumn");
      mapScaleWrap.append("<b class='subtitle'>Unit</b>");
      var scaleType = genInput({
        parent : mapScaleWrap,
        classes : "line",
        placeholder : "(m,ft,..)",
        value : obj.data.options.unit,
        style : {"width" : "50px"},
      });
      scaleType.change(function(){
        game.locals["drawing"].data.scaleUnit = $(this).val();
      });
      game.locals["drawing"].data.scaleUnit = game.locals["drawing"].data.scaleUnit || obj.data.options.unit;

      var confirm = $("<button>").appendTo(mapScaleWrapper);
      confirm.addClass("highlight alttext");
      confirm.append("Draw Scale to Divisor");
      confirm.click(function(){
        game.locals["drawing"].data.drawing = "scale";
        game.locals["drawing"].update();
        sendAlert({text : "Draw a line to specify the scale of the map"});
        layout.coverlay("grid-scale");
      });

      var pop = ui_popOut({
        target : app,
        id : "grid-scale",
        title : "Draw Map Scale"
      }, mapScaleWrapper);
    });

    var rights = genIcon("", "Set Parent Map").appendTo(background);
    rights.addClass("subtitle");
    rights.click(function(){
      var content = sync.render("ui_assetPicker")(obj, app, {
        filter : "b",
        select : function(ev, ui, ent, options, entities){
          obj.data.options.zoomAsset = ent.id();
          obj.sync("updateAsset");
          layout.coverlay("add-asset");
        }
      });
      var pop = ui_popOut({
        target : $("body"),
        prompt : true,
        id : "add-asset",
        title : "Parent Map",
        style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
      }, content);
      pop.resizable();
    });
    if (obj.data.options.zoomAsset) {
      var rights = genIcon("remove", "Clear Parent Map").appendTo(background);
      rights.addClass("subtitle");
      rights.click(function(){
        delete obj.data.options.zoomAsset;
        obj.sync("updateAsset");
        layout.coverlay("add-asset");
      });
    }

    var showViewPort = genIcon("unchecked", "Piece Defaults")//.appendTo(background);
    showViewPort.addClass("subtitle");
    showViewPort.attr("title", "Change the default pieces");
    showViewPort.click(function(){
      var content = sync.newApp("ui_backgroundControls");
      content.attr("target", targetApp.attr("id"));
      obj.addApp(content);

      ui_popOut({
        target : app,
        title : "Default Piece Options",
        id : "board-background-editing-"+targetApp.attr("id"),
      }, content);
    });

    var showViewPort = genIcon("facetime-video", "Save View").appendTo(background);
    showViewPort.addClass("subtitle");
    showViewPort.attr("title", "Assign the default ViewPort");
    showViewPort.click(function(){
      var zoom = parseInt(app.attr("zoom"))/100 || 1;

      obj.data.vX = boardApi.apps[app.attr("id")].stage.x - $("#"+app.attr("id")).width()/2/zoom;
      obj.data.vY = boardApi.apps[app.attr("id")].stage.y - $("#"+app.attr("id")).height()/2/zoom;
      obj.data.vZ = zoom * 100;
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
      sendAlert({text : "Default View Updated"});
    });

    var background = $("<div>").appendTo(div);
    background.addClass("flexcolumn flex");
    background.append("<b class='underline middle size2'>Visual Effects</b>");

    var time = genIcon("", "Time of Day").appendTo(background);
    time.css("font-size", "0.8em");
    time.click(function(){
      var actionsList = [
        {
          name : "Day",
          click : function(){
            data.options.filter = obj.data.options.filter || {};
            delete obj.data.options.filter.brightness;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Night",
          click : function(){
            data.options.filter = obj.data.options.filter || {
              brightness : 45,
            };
            obj.data.options.filter.brightness = 45;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Dawn",
          click : function(){
            data.options.filter = obj.data.options.filter || {
              brightness : 85,
            };
            obj.data.options.filter.brightness = 85;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Dusk",
          click : function(){
            data.options.filter = obj.data.options.filter || {
              brightness : 75,
            };
            obj.data.options.filter.brightness = 75;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        }
      ];
      ui_dropMenu($(this), actionsList, {id : "time"});
    });

    var weather = genIcon("", "Weather").appendTo(background);
    weather.css("font-size", "0.8em");
    weather.click(function(){
      var actionsList = [
        {
          name : "None",
          click : function(){
            data.options.weather = null;
            data.options.weatherStyle = null;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Light Rain",
          click : function(){
            data.options.weather = "rain";
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Normal Rain",
          click : function(){
            data.options.weather = "rain mix";
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Heavy Rain",
          click : function(){
            data.options.weather = "downpour";
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Snow",
          click : function(){
            data.options.weather = "snow";
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
      ];
      ui_dropMenu($(this), actionsList, {id : "time"});
    });

    var bgImg = genIcon("", "Filter").appendTo(background);
    bgImg.css("font-size", "0.8em");
    bgImg.click(function(){
      var actionsList = [
        {
          name : "Reset",
          click : function(){
            data.options.filter = data.options.filter || {}
            for (var i in data.options.filter) {
              if (i != "brightness") {
                delete data.options.filter[i];
              }
            }
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Old-timey",
          click : function(){
            data.options.filter = data.options.filter || {}
            for (var i in data.options.filter) {
              if (i != "brightness") {
                delete data.options.filter[i];
              }
            }
            data.options.filter["grayscale"] = 70;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Memory",
          click : function(){
            data.options.filter = data.options.filter || {}
            for (var i in data.options.filter) {
              if (i != "brightness") {
                delete data.options.filter[i];
              }
            }
            data.options.filter["sepia"] = 40;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Bent Reality",
          click : function(){
            data.options.filter = data.options.filter || {}
            for (var i in data.options.filter) {
              if (i != "brightness") {
                delete data.options.filter[i];
              }
            }
            data.options.filter["invert"] = 100;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
        },
      ];
      ui_dropMenu($(this), actionsList, {id : "time"});
    });


    var draw = genIcon("cog", "Normal Options")//.appendTo(background);
    draw.addClass("subtitle");
    draw.click(function(){
      app.attr("configuring", "true");
      var parent = $("#"+app.attr("id")+"-menu-"+obj.id());
      parent.replaceWith(boardApi.buildMenu(obj, app, scope, true));
    });

    var content = sync.newApp("ui_boardFilters").appendTo(background);
    content.attr("local", scope.local);
    content.attr("viewOnly", scope.viewOnly);
    content.attr("target", targetApp.attr("id"));
    obj.addApp(content);
  }

  return div;
});


sync.render("ui_mapBackground", function(obj, app, scope){
  var targetApp = $("#"+app.attr("id"));
  var data = obj.data;

  var div = $("<div>");
  div.addClass("flexcolumn fit-x padding");

  var background = $("<div>").appendTo(div);
  background.addClass("flexcolumn flex");

  var nameInput = genInput({
    parent : background,
    classes : "line smooth subtitle middle flex size3",
    value : sync.rawVal(data.info.name) || "[No Name]",
  });

  nameInput.change(function(){
    sync.rawVal(obj.data.info.name, $(this).val() || "[No Name]");
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });

  var bgImg = $("<div>").appendTo(background);
  bgImg.addClass("outline smooth flexmiddle white");
  if (data.map && (data.map.match(".mp4") || data.map.match(".webm") || data.map.match(".ogg"))) {
    genIcon("play").css("pointer-events", "none");
  }
  else {
    bgImg.css("background-image", "url('"+ (obj.data.map || "/content/quickstart.png") +"')");
    bgImg.css("background-size", "contain");
    bgImg.css("background-repeat", "no-repeat");
    bgImg.css("background-position", "center");
  }
  bgImg.css("height", "150px");
  bgImg.css("font-size", "1.4em");
  if (!scope.viewOnly) {
    bgImg.addClass("hover2");
    bgImg.click(function(){
      var imgList = sync.render("ui_filePicker")(obj, app, {
        filter :     "img",
        change : function(ev, ui, val){

          if (val.match(".mp4") || val.match(".webm") || val.match(".ogg")) {
            var vid = document.createElement("video");
            vid.src = val;
            vid.addEventListener('loadedmetadata', function(){
              var width = this.videoWidth;
              var height = this.videoHeight;
              var aspect = width/height;
              if (width > height) {
                width = Math.min(width, 3200);
                height = Math.ceil(width/aspect);
              }
              else {
                height = Math.min(height, 3200);
                width = Math.ceil(height*aspect);
              }
              data.w = Math.max(Math.min(width, 3200), 640);
              data.h = Math.max(Math.min(height, 3200), 480);
              data.map = val;
              if (!scope.local) {
                obj.sync("updateAsset");
              }
              else {
                obj.update();
              }
            });
          }
          else {
            var img = new Image();
            img.src = val;
            img.onload = function(){
              var width = this.naturalWidth;
              var height = this.naturalHeight;
              var aspect = width/height;
              if (width > height) {
                width = Math.min(width, 3200);
                height = Math.ceil(width/aspect);
              }
              else {
                height = Math.min(height, 3200);
                width = Math.ceil(height*aspect);
              }
              data.w = Math.min(width, 3200);
              data.h = Math.min(height, 3200);
              data.map = val;
              if (!scope.local) {
                obj.sync("updateAsset");
              }
              else {
                obj.update();
              }
            }
          }
          if (!val) {
            delete data.map;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
          }
          layout.coverlay("icons-picker");
        }
      });

      var pop = ui_popOut({
        target : app,
        prompt : true,
        id : "icons-picker",
        style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
      }, imgList);
      pop.resizable();
    });
  }

  var checkWrap = $("<div>").appendTo(background);
  checkWrap.addClass("flexrow");

  var checkWrap1 = $("<div>").appendTo(checkWrap);
  checkWrap1.addClass("flexrow flexmiddle flex link");

  var healthbars = genIcon("cog", "Size").appendTo(checkWrap1);
  healthbars.addClass("subtitle alttext");
  checkWrap1.click(function(){
    ui_prompt({
      target : $(this),
      inputs : {
        "Width" : {value : data.w, min : 320, max : 3200},
        "Height" : {value : data.h, min : 320, max : 3200}
      },
      click : function(ev, inputs){
        obj.data.w = Number(inputs["Width"].val() || data.w);
        obj.data.h = Number(inputs["Height"].val() || data.h);
        if (!scope.local) {
          obj.sync("updateAsset");
        }
        else {
          obj.update();
        }
      }
    });
  });

  var checkWrap2 = $("<div>").appendTo(checkWrap);
  checkWrap2.addClass("flexrow flex2 flexmiddle alttext subtitle");
  checkWrap2.append("<b class='lrmargin'>Background Color</b>");

  var bgCol = $("<div>").appendTo(checkWrap2);
  bgCol.addClass("outline smooth white dull lpadding");
  bgCol.css("background", obj.data.c);

  if (!scope.viewOnly) {
    checkWrap2.addClass("hover2");
    checkWrap2.click(function(){
      var optionList = [];
      var submenu = [
        "rgba(34,34,34,1)",
        "rgba(187,0,0,1)",
        "rgba(255,153,0,1)",
        "rgba(255,240,0,1)",
        "rgba(0,187,0,1)",
        "rgba(0,115,230,1)",
        "rgba(176,0,187,1)",
        "rgba(255,115,255,1)",
        "rgba(255,255,255,1)",
      ];
      var primaryCol = sync.render("ui_colorPicker")(obj, app, {
        hideColor : true,
        custom : true,
        colorChange : function(ev, ui, value){
          obj.data.c = value;
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
          layout.coverlay("grid-color");
        }
      });

      ui_popOut({
        target : bgCol,
        id : "grid-color",
      }, primaryCol);
    });
  }


  var background = $("<div>").appendTo(div);
  background.addClass("flexcolumn flex");

  background.append("<b class='underline flexmiddle fit-x' style='font-size:1.4em;'>Grid</b>");

  if (obj.data.gridW && obj.data.gridH) {
    var gridColor = genIcon("tint", "Configure Grid").appendTo(background);
    gridColor.addClass("subtitle");
    gridColor.click(function(){
      var content = sync.newApp("ui_boardControls");
      content.addClass("subtitle");
      content.attr("local", scope.local);
      content.attr("viewOnly", scope.viewOnly);
      content.attr("target", app.attr("id"));
      obj.addApp(content);

      $(this).replaceWith(content);
    });
  }

  if (!data.options || !data.options.hex) {
    var drawGrid = genIcon("edit", "Draw Grid").appendTo(background);
    drawGrid.addClass("subtitle");
    drawGrid.click(function(){
      if (!game.locals["drawing"]) {
        game.locals["drawing"] = sync.obj();
        game.locals["drawing"].data = {};
      }
      game.locals["drawing"].data.drawing = "grid";
      game.locals["drawing"].data.target = app.attr("id");
      game.locals["drawing"].update();
      sendAlert({text : "Draw a square matching the grid on the map"});
    });
  }

  if (obj.data.gridW && obj.data.gridH && !(data.options && data.options.hex)) {
    var drawGrid = genIcon("move", "Shift Grid").appendTo(background);
    drawGrid.addClass("subtitle");
    drawGrid.click(function(){
      if (!game.locals["drawing"]) {
        game.locals["drawing"] = sync.obj();
        game.locals["drawing"].data = {};
      }
      game.locals["drawing"].data.drawing = "shiftg";
      game.locals["drawing"].data.target = app.attr("id");
      game.locals["drawing"].update();
      sendAlert({text : "Shift the grid by dragging it around"});
    });
  }

  if (obj.data.gridW && obj.data.gridH) {
    var colWrap = $("<div>").appendTo(background);
    colWrap.addClass("flexrow flexbetween");
    colWrap.append("<b class='subtitle flexmiddle'>Grid Color</b>");

    var bgCol = $("<div>").appendTo(colWrap);
    bgCol.addClass("outline smooth flexmiddle dull padding");
    bgCol.css("background", obj.data.gc);
    if (!scope.viewOnly) {
      colWrap.addClass("hover2");
      colWrap.click(function(){
        var optionList = [];
        var submenu = [
          "rgba(34,34,34,0.2)",
          "rgba(187,0,0,0.2)",
          "rgba(255,153,0,0.2)",
          "rgba(255,240,0,0.2)",
          "rgba(0,187,0,0.2)",
          "rgba(0,115,230,0.2)",
          "rgba(176,0,187,0.2)",
          "rgba(255,115,255,0.2)",
          "rgba(255,255,255,0.2)",
        ];
        var primaryCol = sync.render("ui_colorPicker")(obj, app, {
          hideColor : true,
          custom : true,
          colors : submenu,
          colorChange : function(ev, ui, value){
            obj.data.gc = value;
            if (!scope.local) {
              obj.sync("updateAsset");
            }
            else {
              obj.update();
            }
            layout.coverlay("grid-color");
          }
        });

        ui_popOut({
          target : bgCol,
          id : "grid-color",
        }, primaryCol);
      });
    }

    var inputWrap = $("<div>").appendTo(background);
    inputWrap.addClass("flexrow flexbetween subtitle");
    inputWrap.append("<text>Grid Distance</text>");

    var inputWrap = $("<div>").appendTo(inputWrap);
    inputWrap.addClass("flexmiddle");

    var mapScaleInput = genInput({
      parent : inputWrap,
      classes : "middle",
      value : (obj.data.gridW || 0)/(obj.data.options.unitScale || 1),
      placeholder : "Distance",
      style : {"width" : "80px", color : "#333"},
    });
    mapScaleInput.change(function(){
      obj.data.options.unitScale = obj.data.gridW/$(this).val();
      obj.sync("updateAsset");
    });

    var scaleType = genInput({
      parent : inputWrap,
      classes : "middle",
      placeholder : "(m,ft,..)",
      value : obj.data.options.unit,
      style : {"width" : "30px", color : "#333"},
    });
    scaleType.change(function(){
      obj.data.options.unit = $(this).val();
      obj.sync("updateAsset");
    });

    if (data.options && data.options.hex) {
      var gridType = genIcon("", "Switch to Squares").appendTo(background);
      gridType.addClass("subtitle");
      gridType.click(function(){
        data.options = data.options || {};
        delete data.options.hex;
        data.gridW = 64;
        data.gridH = 64;
        if (!scope.local) {
          obj.sync("updateAsset");
        }
        else {
          obj.update();
        }
      });
    }
    else {
      var gridType = genIcon("", "Switch to Hex").appendTo(background);
      gridType.addClass("subtitle");
      gridType.click(function(){
        data.options = data.options || {};
        data.options.hex = true;
        data.gridW = 140;
        data.gridH = 120;
        if (!scope.local) {
          obj.sync("updateAsset");
        }
        else {
          obj.update();
        }
      });
    }

    var disableGrid = genIcon("remove", "Disable Grid").appendTo(background);
    disableGrid.addClass("subtitle destroy");
    disableGrid.click(function(){
      obj.data.gridW = 0;
      obj.data.gridH = 0;
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });
  }
  else {
    var enableGrid = genIcon("ok", "Enable Grid").appendTo(background);
    enableGrid.addClass("subtitle create");
    enableGrid.click(function(){
      obj.data.gridW = 64;
      obj.data.gridH = 64;
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });
  }

  return div;
});

sync.render("ui_mapGrid", function(obj, app, scope){
  var targetApp = $("#"+app.attr("id"));
  var data = obj.data;

  var div = $("<div>");
  div.addClass("flexrow fit-x lrpadding");

  var background = $("<div>").appendTo(div);
  background.addClass("flexcolumn flex subtitle middle");
  background.css("margin-left", "0.5em");
  background.css("margin-right", "0.5em");
  background.css("min-width", "120px");
  background.append("<b class='underline' style='font-size:1.4em'>Tools</b>");

  if (obj.data.gridW && obj.data.gridH) {
    var gridColor = genIcon("tint", "Configure Grid").appendTo(background);
    gridColor.addClass("subtitle");
    gridColor.click(function(){
      var content = sync.newApp("ui_boardControls");
      content.attr("local", scope.local);
      content.attr("viewOnly", scope.viewOnly);
      content.attr("target", app.attr("id"));
      content.css("font-size", "1.2em");
      obj.addApp(content);

      $(this).replaceWith(content);
    });
  }

  if (!data.options || !data.options.hex) {
    var drawGrid = genIcon("edit", "Draw Grid").appendTo(background);
    drawGrid.addClass("subtitle");
    drawGrid.click(function(){
      if (!game.locals["drawing"]) {
        game.locals["drawing"] = sync.obj();
        game.locals["drawing"].data = {};
      }
      game.locals["drawing"].data.drawing = "grid";
      game.locals["drawing"].data.target = app.attr("id");
      game.locals["drawing"].update();
      sendAlert({text : "Draw a square matching the grid on the map"});
    });

    var drawGrid = genIcon("move", "Shift Grid").appendTo(background);
    drawGrid.addClass("subtitle");
    drawGrid.click(function(){
      if (!game.locals["drawing"]) {
        game.locals["drawing"] = sync.obj();
        game.locals["drawing"].data = {};
      }
      game.locals["drawing"].data.drawing = "shiftg";
      game.locals["drawing"].data.target = app.attr("id");
      game.locals["drawing"].update();
      sendAlert({text : "Shift the grid by dragging it around"});
    });
  }

  if (obj.data.gridW && obj.data.gridH) {
    if (data.options && data.options.hex) {
      var gridType = genIcon("", "Switch to Squares").appendTo(background);
      gridType.addClass("subtitle");
      gridType.click(function(){
        data.options = data.options || {};
        delete data.options.hex;
        data.gridW = 64;
        data.gridH = 64;
        if (!scope.local) {
          obj.sync("updateAsset");
        }
        else {
          obj.update();
        }
      });
    }
    else {
      var gridType = genIcon("", "Switch to Hex").appendTo(background);
      gridType.addClass("subtitle");
      gridType.click(function(){
        data.options = data.options || {};
        data.options.hex = true;
        data.gridW = 140;
        data.gridH = 120;
        if (!scope.local) {
          obj.sync("updateAsset");
        }
        else {
          obj.update();
        }
      });
    }
  }

  background.append("<b class='flex'></b>");

  if (obj.data.gridW && obj.data.gridH) {
    var disableGrid = genIcon("remove", "Disable Grid").appendTo(background);
    disableGrid.addClass("subtitle destroy");
    disableGrid.click(function(){
      obj.data.gridW = 0;
      obj.data.gridH = 0;
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });
  }
  else {
    var enableGrid = genIcon("ok", "Enable Grid").appendTo(background);
    enableGrid.addClass("subtitle create");
    enableGrid.click(function(){
      obj.data.gridW = 64;
      obj.data.gridH = 64;
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });
  }


  var background = $("<div>").appendTo(div);
  background.addClass("flexcolumn flex subtitle middle");
  background.css("margin-left", "0.5em");
  background.css("margin-right", "0.5em");
  background.css("min-width", "120px");
  background.append("<b class='underline' style='font-size:1.4em'>Color</b>");

  var bgCol = $("<div>").appendTo(background);
  bgCol.addClass("outline smooth flexmiddle white");
  bgCol.css("background", obj.data.gc);
  bgCol.css("width", "150px");
  bgCol.css("height", "150px");
  if (!scope.viewOnly) {
    bgCol.addClass("hover2");
    bgCol.click(function(){
      var optionList = [];
      var submenu = [
        "rgba(34,34,34,0.2)",
        "rgba(187,0,0,0.2)",
        "rgba(255,153,0,0.2)",
        "rgba(255,240,0,0.2)",
        "rgba(0,187,0,0.2)",
        "rgba(0,115,230,0.2)",
        "rgba(176,0,187,0.2)",
        "rgba(255,115,255,0.2)",
        "rgba(255,255,255,0.2)",
      ];
      var primaryCol = sync.render("ui_colorPicker")(obj, app, {
        hideColor : true,
        custom : true,
        colors : submenu,
        colorChange : function(ev, ui, value){
          obj.data.gc = value;
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
          layout.coverlay("grid-color");
        }
      });

      ui_popOut({
        target : bgCol,
        id : "grid-color",
      }, primaryCol);
    });
  }

  return div;
});

var titleUpdate = 0;

sync.render("ui_pieceBuilder", function(obj, app, scope){
  app.parent().parent().css("opacity", "1.0");

  var div = $("<div>");
  div.addClass("flexcolumn fit-xy padding");

  var existingPiece;
  var board = getEnt(app.attr("target"));
  var hasRights = hasSecurity(getCookie("UserID"), "Rights", board.data) || hasSecurity(getCookie("UserID"), "Game Master");

  var layer = obj.data.layer;
  var piece = obj.data.piece;

  var pieceData = obj.data.pieceData;

  if (layer  != null && piece != null) {
    if (board && board.data && board.data.layers[layer] && board.data.layers[layer].p[piece]) {
      existingPiece = board.data.layers[layer].p[piece];
    }
    else {
      delete obj.data.layer;
      delete obj.data.piece;
      layer = null;
      piece = null;
    }
  }

  var navBar = $("<div>").appendTo(div);
  navBar.addClass("flexrow middle size2");

  var health = $("<div>").appendTo(navBar);
  health.addClass("spadding flex alttext subtitle outline smooth");
  health.text("Auras & HP");
  health.click(function(){
    obj.data.advanced = "health";
    obj.update();
  });

  var assets = $("<div>").appendTo(navBar);
  assets.addClass("spadding alttext subtitle outline smooth");
  assets.text("Assets");
  assets.click(function(){
    obj.data.advanced = "assets";
    obj.update();
  });

  var apperance = $("<div>").appendTo(navBar);
  apperance.addClass("spadding alttext subtitle outline smooth");
  apperance.text("Basic");
  apperance.click(function(){
    delete obj.data.advanced;
    obj.update();
  });

  var logic = $("<div>").appendTo(navBar);
  logic.addClass("spadding alttext subtitle outline smooth");
  logic.text("Logic");
  logic.click(function(){
    obj.data.advanced = "logic";
    obj.update();
  });

  if (!obj.data.advanced) {
    apperance.addClass("highlight");
    assets.addClass("background hover2");
    logic.addClass("background hover2");
    health.addClass("background hover2");
  }
  else if (obj.data.advanced == "assets") {
    apperance.addClass("background hover2");
    assets.addClass("highlight");
    logic.addClass("background hover2");
    health.addClass("background hover2");
  }
  else if (obj.data.advanced == "logic") {
    apperance.addClass("background hover2");
    assets.addClass("background hover2");
    health.addClass("background hover2");
    logic.addClass("highlight");
  }
  else if (obj.data.advanced == "health") {
    apperance.addClass("background hover2");
    assets.addClass("background hover2");
    logic.addClass("background hover2");
    health.addClass("highlight");
  }

  div.append("<div class='spadding'></div>")

  if (existingPiece) {
    if (!obj.data.advanced) {
      var inWrap = $("<div>").appendTo(div);
      inWrap.addClass("flexrow flexbetween outlinebottom");

      inWrap.append("<b class='subtitle dull' style='white-space:nowrap;'>Token Title</b>");

      var title = genInput({
        parent : inWrap,
        value : existingPiece.t,
        classes : "line alttext flex middle subtitle size2",
        placeholder : "Token Title",
      });
      title.click(function(ev){
        ev.stopPropagation();
      });
      title.bind("input", function(){
        board.data.layers[layer].p[piece].t = $(this).val();
        boardApi.lookup(layer, "p", piece, $("#"+app.attr("targetApp"))).update();
      });
      title.change(function(){
        board.data.layers[layer].p[piece].t = $(this).val();
        boardApi.updateObject(layer, "p", piece, board);
        runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
      });

      var coords = $("<div>").appendTo(div);
      coords.addClass("flexrow flexaround");

      var inputWrap = $("<div>").appendTo(coords);
      inputWrap.addClass("flexcolumn dull");
      inputWrap.click(function(ev){
        ev.stopPropagation();
      });

      var inWrap = $("<div>").appendTo(inputWrap);
      inWrap.addClass("flexrow flexbetween");

      inWrap.append("<b class='subtitle'>X</b>");
      inWrap.append("<text class='flex'></text>");

      var title = genInput({
        parent : inWrap,
        value : boardApi.scale(existingPiece.x, board),
        classes : "line alttext middle subtitle",
        placeholder : "X",
        style : {"width" : "45px"},
      });
      title.bind("input", function(){
        board.data.layers[layer].p[piece].x = boardApi.scale(Number($(this).val() || 0), board, true);
        boardApi.updateObject(layer, "p", piece, board);
      });
      title.change(function(){
        board.data.layers[layer].p[piece].x = boardApi.scale(Number($(this).val() || 0), board, true);
        boardApi.updateObject(layer, "p", piece, board);
        runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
      });

      inWrap.append("<b class='subtitle'>"+(board.data.options.unit || "")+"</b>");

      var inWrap = $("<div>").appendTo(inputWrap);
      inWrap.addClass("flexrow flexbetween");

      inWrap.append("<b class='subtitle'>Y</b>");
      inWrap.append("<text class='flex'></text>");

      var title = genInput({
        parent : inWrap,
        value : boardApi.scale(existingPiece.y, board),
        classes : "line alttext middle subtitle",
        placeholder : "Y",
        style : {"width" : "45px"},
      });
      title.bind("input", function(){
        board.data.layers[layer].p[piece].y = boardApi.scale(Number($(this).val() || 0), board, true);
        boardApi.updateObject(layer, "p", piece, board);
      });
      title.change(function(){
        board.data.layers[layer].p[piece].y = boardApi.scale(Number($(this).val() || 0), board, true);
        boardApi.updateObject(layer, "p", piece, board);
        runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
      });

      inWrap.append("<b class='subtitle'>"+(board.data.options.unit || "")+"</b>");

      var inWrap = $("<div>").appendTo(inputWrap);
      inWrap.addClass("flexrow flexbetween");

      inWrap.append("<b class='subtitle'>Width</b>");
      inWrap.append("<text class='flex'></text>");

      var title = genInput({
        parent : inWrap,
        value : boardApi.scale(existingPiece.w, board),
        classes : "line alttext middle subtitle",
        placeholder : "Width",
        style : {"width" : "45px"},
      });
      title.bind("input", function(){
        board.data.layers[layer].p[piece].w = boardApi.scale(Number($(this).val() || 10), board, true);
        boardApi.updateObject(layer, "p", piece, board);
      });
      title.change(function(){
        board.data.layers[layer].p[piece].w = boardApi.scale(Number($(this).val() || 10), board, true);
        boardApi.updateObject(layer, "p", piece, board);
        runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
      });

      inWrap.append("<b class='subtitle'>"+(board.data.options.unit || "")+"</b>");

      var inWrap = $("<div>").appendTo(inputWrap);
      inWrap.addClass("flexrow flexbetween");

      inWrap.append("<b class='subtitle'>Height</b>");
      inWrap.append("<text class='flex'></text>");

      var title = genInput({
        parent : inWrap,
        value : boardApi.scale(existingPiece.h, board),
        classes : "line alttext middle subtitle",
        placeholder : "Height",
        style : {"width" : "45px"},
      });
      title.bind("input", function(){
        board.data.layers[layer].p[piece].h = boardApi.scale(Number($(this).val() || 10), board, true);
        boardApi.updateObject(layer, "p", piece, board);
      });
      title.change(function(){
        board.data.layers[layer].p[piece].h = boardApi.scale(Number($(this).val() || 10), board, true);
        boardApi.updateObject(layer, "p", piece, board);
        runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
      });

      inWrap.append("<b class='subtitle'>"+(board.data.options.unit || "")+"</b>");

      var inWrap = $("<div>").appendTo(inputWrap);
      inWrap.addClass("flexrow flexbetween");

      inWrap.append("<b class='subtitle'>Move</b>");
      inWrap.append("<text class='flex'></text>");

      var title = genInput({
        parent : inWrap,
        value : (existingPiece.o != null && existingPiece.o.Move)?(existingPiece.o.Move.d):(null),
        classes : "line alttext subtitle middle",
        placeholder : "",
        style : {"width" : "45px"},
      });
      title.bind("input", function(){
        board.data.layers[layer].p[piece].o = board.data.layers[layer].p[piece].o || {};
        board.data.layers[layer].p[piece].o["Move"] = {d : $(this).val(), s : 1};
        boardApi.updateObject(layer, "p", piece, board);
      });
      title.change(function(){
        board.data.layers[layer].p[piece].o = board.data.layers[layer].p[piece].o || {};
        board.data.layers[layer].p[piece].o["Move"] = {d : $(this).val(), s : 1};
        boardApi.updateObject(layer, "p", piece, board);
        runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
      });

      inWrap.append("<b class='subtitle'>"+(board.data.options.unit || "")+"</b>");


      var inWrap = $("<div>").appendTo(inputWrap);
      inWrap.addClass("flexrow flexbetween");

      inWrap.append("<b class='subtitle'>Sight</b>");
      inWrap.append("<text class='flex'></text>");

      var title = genInput({
        parent : inWrap,
        value : (existingPiece.o != null && existingPiece.o.Sight)?(existingPiece.o.Sight.d):(null),
        classes : "line alttext subtitle middle",
        placeholder : "",
        style : {"width" : "45px"},
      });
      title.bind("input", function(){
        board.data.layers[layer].p[piece].o = board.data.layers[layer].p[piece].o || {};
        if ($(this).val() == "") {
          delete board.data.layers[layer].p[piece].o["Sight"];
        }
        else {
          board.data.layers[layer].p[piece].o["Sight"] = {d : $(this).val()};
        }
        boardApi.updateObject(layer, "p", piece, board);
      });
      title.change(function(){
        board.data.layers[layer].p[piece].o = board.data.layers[layer].p[piece].o || {};
        if ($(this).val() == "") {
          delete board.data.layers[layer].p[piece].o["Sight"];
        }
        else {
          board.data.layers[layer].p[piece].o["Sight"] = {d : $(this).val()};
        }
        boardApi.updateObject(layer, "p", piece, board);
        runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
      });

      inWrap.append("<b class='subtitle'>"+(board.data.options.unit || "")+"</b>");

      var image = existingPiece.i;
      if (!image && existingPiece.eID && getEnt(existingPiece.eID) && getEnt(existingPiece.eID).data) {
        image = sync.rawVal(getEnt(existingPiece.eID).data.info.img) || "/content/icons/blankchar.png";
      }

      var imgWrap = $("<div>").appendTo(coords);
      imgWrap.addClass("flexmiddle");

      var imgPreview = $("<div>").appendTo(imgWrap);
      imgPreview.addClass("flexcolumn link smooth flexmiddle outline smooth");
      imgPreview.css("background", existingPiece.c || "white");
      imgPreview.css("background-image", "url('"+image+"')");
      imgPreview.css("background-size", "contain");
      imgPreview.css("background-position", "center");
      imgPreview.css("background-repeat", "no-repeat");
      imgPreview.css("position", "relative");
      imgPreview.css("width", "100px");
      imgPreview.css("height", "100px");


      if (!image) {
        var inputWrap = $("<div>").appendTo(imgPreview);
        inputWrap.addClass("flexrow flexmiddle subtitle fit-x");
        inputWrap.css("color", "#333");
        inputWrap.css("text-shadow", "none");
        inputWrap.text('Token Image');
      }

      imgPreview.click(function(){
        var imgList = sync.render("ui_filePicker")(obj, app, {
          filter : "img",
          value : existingPiece.i,
          change : function(ev, ui, value){
            layout.coverlay("icons-picker");
            board.data.layers[layer].p[piece].i = value;
            runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
            boardApi.updateObject(layer, "p", piece, board);
            obj.update();
          }
        });

        var pop = ui_popOut({
          target : $(this),
          prompt : true,
          id : "icons-picker",
          align : "top",
          style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
        }, imgList);
        pop.resizable();
      });

      var pieceColor = $("<div>").appendTo(div);
      pieceColor.addClass("flexcolumn flexmiddle");
      pieceColor.css("font-size", "7.2px");

      pieceColor.append("<div class='padding'></div>");

      var primaryCol = sync.render("ui_colorPicker")(obj, app, {
        hideColor : true,
        custom : false,
        colors : [
          "rgba(187,0,0,1)",
          "rgba(187,0,0,0.5)",
          "rgba(255,153,0,1)",
          "rgba(255,153,0,0.5)",
          "rgba(255,240,0,1)",
          "rgba(255,240,0,0.5)",
          "rgba(0,187,0,1)",
          "rgba(0,187,0,0.5)",
          "rgba(0,115,230,1)",
          "rgba(0,115,230,0.5)",
          "rgba(176,0,187,1)",
          "rgba(176,0,187,0.5)",
          "rgba(255,255,255,1)",
          "rgba(255,255,255,0.5)",
        ],
        colorChange : function(ev, ui, value){
          if (existingPiece) {
            board.data.layers[layer].p[piece].c = value;
            boardApi.updateObject(layer, "p", piece, board);
            runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
          }
          else {
            pieceData.c = value;
            obj.update();
          }
        }
      }).addClass("subtitle").appendTo(pieceColor);
      var primaryCol = sync.render("ui_colorPicker")(obj, app, {
        hideColor : true,
        custom : false,
        colors : [
          "rgba(137,0,0,1)",
          "rgba(137,0,0,0.5)",
          "rgba(205,103,0,1)",
          "rgba(205,103,0,0.5)",
          "rgba(205,190,0,1)",
          "rgba(205,190,0,0.5)",
          "rgba(0,137,0,1)",
          "rgba(0,137,0,0.5)",
          "rgba(0,65,180,1)",
          "rgba(0,65,180,0.5)",
          "rgba(126,0,137,1)",
          "rgba(126,0,137,0.5)",
          "rgba(155,155,155,1)",
          "rgba(155,155,155,0.5)",
        ],
        colorChange : function(ev, ui, value){
          if (existingPiece) {
            board.data.layers[layer].p[piece].c = value;
            boardApi.updateObject(layer, "p", piece, board);
            runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
          }
          else {
            pieceData.c = value;
            obj.update();
          }
        }
      }).addClass("subtitle").appendTo(pieceColor);
      var primaryCol = sync.render("ui_colorPicker")(obj, app, {
        hideColor : true,
        custom : false,
        colors : [
          "rgba(77,0,0,1)",
          "rgba(77,0,0,0.5)",
          "rgba(145,43,0,1)",
          "rgba(145,43,0,0.5)",
          "rgba(145,130,0,1)",
          "rgba(145,130,0,0.5)",
          "rgba(0,77,0,1)",
          "rgba(0,77,0,0.5)",
          "rgba(0,5,120,1)",
          "rgba(0,5,120,0.5)",
          "rgba(66,0,77,1)",
          "rgba(66,0,77,0.5)",
          "rgba(55,55,55,1)",
          "rgba(55,55,55,0.5)",
        ],
        colorChange : function(ev, ui, value){
          if (existingPiece) {
            board.data.layers[layer].p[piece].c = value;
            boardApi.updateObject(layer, "p", piece, board);
            runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
          }
          else {
            pieceData.c = value;
            obj.update();
          }
        }
      }).addClass("subtitle").appendTo(pieceColor);

      pieceColor.append("<div class='padding'></div>");

      var primaryCol = sync.render("ui_shapePicker")(obj, app, {
        size : 20,
        color : pieceData.c || "transparent",
        selected : pieceData.d,
        selectedClass : "white outline smooth",
        shapeChange : function(ev, ui, newShape){
          if (existingPiece) {
            board.data.layers[layer].p[piece].d = newShape;
            boardApi.updateObject(layer, "p", piece, board);
            runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
          }
          else {
            pieceData.d = newShape;
          }
          obj.update();
        }
      }).addClass("inactive outline smooth").appendTo(pieceColor);

      var previewOptions = $("<div>").appendTo(div);
      previewOptions.addClass("flexbetween fit-x");

      var tScaleWrap = $("<div>").appendTo(previewOptions);
      tScaleWrap.addClass("flexcolumn flexmiddle padding");
      tScaleWrap.append("<b class='subtitle'>Token Scale</b>");

      var tScale = genInput({
        parent : tScaleWrap,
        type : "range",
        step : 25,
        min : 50,
        value : Number(existingPiece.ts || 1) * 100,
        max : 200,
      });
      tScale.bind("input", function(){
        board.data.layers[layer].p[piece].ts = Number($(this).val())/100;
        boardApi.updateObject(layer, "p", piece, board);
      });
      tScale.change(function(){
        board.data.layers[layer].p[piece].ts = Number($(this).val())/100;
        boardApi.updateObject(layer, "p", piece, board);
        runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
      });
      tScale.contextmenu(function(){
        $(this).val(100);
        $(this).change();
        return false;
      });

      var tScaleWrap = $("<div>").appendTo(previewOptions);
      tScaleWrap.addClass("flexcolumn flexmiddle padding");
      tScaleWrap.append("<b class='subtitle'>Rotation</b>");

      var tScale = genInput({
        parent : tScaleWrap,
        type : "range",
        step : 15,
        min : 0,
        value : existingPiece.r || 0,
        max : 360,
      });
      tScale.bind("input", function(){
        board.data.layers[layer].p[piece].r = $(this).val() % 360;
        boardApi.updateObject(layer, "p", piece, board);
      });
      tScale.change(function(){
        board.data.layers[layer].p[piece].r = $(this).val() % 360;
        boardApi.updateObject(layer, "p", piece, board);
        runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
      });
      tScale.contextmenu(function(){
        $(this).val(0);
        $(this).change();
        return false;
      });
    }
    else if (obj.data.advanced == "assets") {
      var assetLinkWrap = $("<div>").appendTo(div);
      assetLinkWrap.addClass("flexcolumn flex");
      assetLinkWrap.append("<b class='fit-x flexmiddle'>Attached Assets</b>");
      assetLinkWrap.css("height", "200px");

      var assetLinksScroll = $("<div>").appendTo(assetLinkWrap);
      assetLinksScroll.addClass("smooth outline flex");
      assetLinksScroll.css("position", "relative");
      assetLinksScroll.css("overflow-y", "auto");
      assetLinksScroll.css("background", "rgba(0,0,0,0.4)");

      var assetLinks = $("<div>").appendTo(assetLinksScroll);
      assetLinks.addClass("fit-x flexcolumn");
      assetLinks.css("position", "absolute");
      assetLinks.css("padding-bottom", "1em");

      if (existingPiece.eID) {
        if (existingPiece.eID instanceof Object) {
          for (var idx=0; idx<existingPiece.eID.length; idx++) {
            var char = getEnt(existingPiece.eID[idx]);
            var entDiv = $("<div>").appendTo(assetLinks);
            entDiv.addClass("flexcolumn");
            entDiv.css("color", "#333");
            entDiv.css("text-shadow", "none");
            if (idx > 0) {
              entDiv.addClass("subtitle");
            }
            else {
              entDiv.addClass("outlinebottom smooth");
              entDiv.css("font-size", "1.2em");
            }
            entDiv.css("position", "relative");
            entDiv.css("overflow", "visible");
            entDiv.css("background-repeat", "no-repeat");
            entDiv.css("background-position", "center");
            entDiv.css("background-size", "contain");
            var ent = sync.render("ui_ent")(char, entDiv, {
              click : function(ev, plate, char){
                plate.contextmenu();
                ev.stopPropagation();
                ev.preventDefault();
              },
              draw : function(ui, char) {
                ui.removeClass("outline");
              }
            }).appendTo(entDiv);
            ent.addClass("white");
          }
        }
        else {
          var char = getEnt(existingPiece.eID);
          var entDiv = $("<div>").appendTo(assetLinks);
          entDiv.addClass("flexcolumn");
          entDiv.css("color", "#333");
          entDiv.css("text-shadow", "none");

          if (idx > 0) {
            entDiv.addClass("subtitle");
          }
          else {
            entDiv.addClass("outlinebottom smooth");
            entDiv.css("font-size", "1.2em");
          }
          entDiv.css("position", "relative");
          entDiv.css("overflow", "visible");
          entDiv.css("background-repeat", "no-repeat");
          entDiv.css("background-position", "center");
          entDiv.css("background-size", "contain");
          var ent = sync.render("ui_ent")(char, entDiv, {
            click : function(ev, plate, char){
              plate.contextmenu();
              ev.stopPropagation();
              ev.preventDefault();
            }
          }).appendTo(entDiv);
          ent.addClass("white");
        }
        var removeLinks = genIcon("remove").appendTo(assetLinksScroll);
        removeLinks.addClass("destroy spadding flexmiddle");
        removeLinks.css("position", "absolute");
        removeLinks.css("bottom", "0");
        removeLinks.css("right", "0");
        removeLinks.click(function(){
          if (board.data.layers[layer].p[piece].eID instanceof Object) {
            board.data.layers[layer].p[piece].eID = board.data.layers[layer].p[piece].eID[0];
          }
          else {
            delete board.data.layers[layer].p[piece].eID;
          }
          runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
          obj.update();
        });
      }

      var createAssetLink = genIcon("plus", "Attach Asset").appendTo(assetLinksScroll);
      createAssetLink.addClass("create spadding subtitle lrmargin");
      createAssetLink.css("position", "absolute");
      createAssetLink.css("bottom", "0");
      createAssetLink.css("left", "0");
      createAssetLink.click(function(){
        var ignore = {};
        if (existingPiece.eID instanceof Object) {
          for (var key in existingPiece.eID) {
            ignore[existingPiece.eID[key]] = true;
          }
        }
        else {
          ignore[existingPiece.eID] = true;
        }

        var content = sync.render("ui_assetPicker")(obj, app, {
          rights : "Visible",
          category : (Object.keys(ignore).length)?("b"):("c"),
          ignore : ignore,
          select : function(ev, ui, ent, options){
            var indx = board.data.layers[layer].p[piece].eID;
            if (!(indx instanceof Object)) {
              board.data.layers[layer].p[piece].eID = [];
              if (indx != null) {
                board.data.layers[layer].p[piece].eID.push(indx);
              }
            }
            if ((board.data.layers[layer].p[piece].eID instanceof Object) && board.data.layers[layer].p[piece].eID.length == 0 && ent.data._t == "c") {
              board.data.layers[layer].p[piece].eID = ent.id();
            }
            else {
              board.data.layers[layer].p[piece].eID.push(ent.id());
            }
            boardApi.updateObject(layer, "p", piece, board);
            runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
            obj.update();

            ignore = ignore || {};
            ignore[ent.id()] = true;
            return true;
          }
        });

        var popOut = ui_popOut({
          target : $("body"),
          prompt : true,
          id : "add-asset",
          title : "Attach Link",
          style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
        }, content);
        popOut.resizable();
      });
    }
    else if (obj.data.advanced == "health") {
      var auraWrap = $("<div>").appendTo(div);
      auraWrap.addClass("flexcolumn");
      auraWrap.append("<b class='fit-x flexmiddle'>Auras</b>");
      auraWrap.css("height", "200px");

      var aurasScroll = $("<div>").appendTo(auraWrap);
      aurasScroll.addClass("smooth outline flex");
      aurasScroll.css("position", "relative");
      aurasScroll.css("overflow-y", "auto");
      aurasScroll.css("background", "rgba(0,0,0,0.4)");

      var auras = $("<div>").appendTo(aurasScroll);
      auras.addClass("fit-x flexcolumn");
      auras.css("position", "absolute");
      auras.css("padding-bottom", "1em");

      for (var key in existingPiece.o) {
        var threatWrap = $("<div>").appendTo(auras);
        threatWrap.addClass("flexcolumn flexbetween");

        var titleThreat = $("<div>").appendTo(threatWrap);
        titleThreat.addClass("flexrow flexbetween");

        var newThreat = $("<div>").appendTo(threatWrap);
        newThreat.addClass("flexrow flexbetween");

        var col = $("<div>").appendTo(titleThreat);
        col.addClass("hover2 flex flexmiddle subtitle underline");
        col.attr("index", key);
        col.text(key);
        col.click(function(){
          var aura = $(this);
          var key = $(this).attr("index");
          var actionsList = [];
          var submenu = [
            "rgba(34,34,34,1)",
            "rgba(187,0,0,1)",
            "rgba(255,153,0,1)",
            "rgba(255,240,0,1)",
            "rgba(0,187,0,1)",
            "rgba(0,115,230,1)",
            "rgba(176,0,187,1)",
            "rgba(255,115,255,1)",
            "rgba(255,255,255,1)",
          ];
          for (var i in submenu) {
            actionsList.push({
              icon : "tint",
              style : {"background-color" : submenu[i], "color" : "transparent"},
              attr : {"bgcol" : submenu[i]},
              click : function(ev, ui){
                var value = ui.attr("bgcol");
                if (existingPiece) {
                  board.data.layers[layer].p[piece].o[key].c = value.replace(",1)", ",0.35)");
                  boardApi.updateObject(layer, "p", piece, board);
                  runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
                }
                else {
                  pieceData.o[key].c = value.replace(",1)", ",0.35)");
                }
                obj.update();
              },
            });
          }
          actionsList.push({
            icon : "cog",
            click : function(){
              var primaryCol = sync.render("ui_colorPicker")(obj, app, {
                hideColor : true,
                custom : true,
                colorChange : function(ev, ui, col){
                  var value =  col;
                  if (existingPiece) {
                    board.data.layers[layer].p[piece].o[key].c = value;
                    boardApi.updateObject(layer, "p", piece, board);
                    runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
                  }
                  else {
                    pieceData.o[key].c = value;
                  }
                  obj.update();
                  layout.coverlay("aura-color");
                }
              });

              ui_popOut({
                target : aura,
                id : "aura-color",
              }, primaryCol);
            },
          });
          ui_dropMenu($(this), actionsList, {id : "change-aura-color", hideClose : true});
        });

        var showSquares = genInput({
          parent : newThreat,
          key : key,
          type : "checkbox"
        });
        showSquares.prop("checked", board.data.layers[layer].p[piece].o[key].s);

        showSquares.change(function(){
          var key = $(this).attr("key");
          if ($(this).prop("checked") == "true" || $(this).prop("checked") == true) {
            board.data.layers[layer].p[piece].o[key].s = 1;
          }
          else {
            delete board.data.layers[layer].p[piece].o[key].s;
          }
          boardApi.updateObject(layer, "p", piece, board);
          runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
        });

        var box = $("<b>").appendTo(newThreat);
        box.addClass("subtitle flexmiddle lrmargin");
        box.text("Squares");

        var newThreatRange = genInput({
          parent : newThreat,
          value : existingPiece.o[key].d,
          classes : "line subtitle flex2 middle",
          key : key,
          style : {"border-color" : existingPiece.o[key].c}
        });
        newThreatRange.change(function(){
          var key = $(this).attr("key");
          board.data.layers[layer].p[piece].o[key].d = $(this).val();
          boardApi.updateObject(layer, "p", piece, board);
          runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
        });

        var removeAura = genIcon("remove").appendTo(titleThreat);
        removeAura.addClass("destroy");
        removeAura.attr("key", key);
        removeAura.click(function(){
          var key = $(this).attr("key");
          delete board.data.layers[layer].p[piece].o[key];
          boardApi.updateObject(layer, "p", piece, board);
          runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
          obj.update();
        });
      }

      var createAuraLink = genIcon("plus", "New Aura").appendTo(aurasScroll);
      createAuraLink.addClass("create spadding subtitle lrmargin");
      createAuraLink.css("position", "absolute");
      createAuraLink.css("bottom", "0");
      createAuraLink.css("left", "0");
      createAuraLink.click(function(){
        ui_prompt({
          target : $(this),
          inputs : {
            "Aura Name" : ""
          },
          click : function(ev, inputs) {
            board.data.layers[layer].p[piece].o = board.data.layers[layer].p[piece].o || {};
            board.data.layers[layer].p[piece].o[inputs["Aura Name"].val()] = {d : 6};
            boardApi.updateObject(layer, "p", piece, board);
            runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
            obj.update();
          }
        });
      });

      if (existingPiece.eID) {

        div.append("<div class='padding'></div>");

        var healthBars = $("<div>").appendTo(div);
        healthBars.addClass("flexcolumn flex alttext");
        healthBars.append("<b class='fit-x flexmiddle'>Health Bars</b>");
        healthBars.css("height", "200px");

        var healthBarsScroll = $("<div>").appendTo(healthBars);
        healthBarsScroll.addClass("smooth outline flex");
        healthBarsScroll.css("position", "relative");
        healthBarsScroll.css("overflow-y", "auto");
        healthBarsScroll.css("background", "rgba(0,0,0,0.4)");

        function rebuildHP(){
          healthBarsScroll.empty();

          for (var i in existingPiece.hpb) {
            var hpWrap = $("<div>").appendTo(healthBarsScroll);
            hpWrap.addClass("flexrow flexbetween");

            var ent = getEnt(existingPiece.eID);
            var title = $("<b>").appendTo(hpWrap);
            title.addClass("lrpadding hover2 flex");
            title.attr("index", i);
            title.text(ent.data.counters[i].name);

            title.click(function(){
              var aura = $(this);
              var key = $(this).attr("index");
              var actionsList = [];
              var submenu = [
                "rgba(34,34,34,1)",
                "rgba(187,0,0,1)",
                "rgba(255,153,0,1)",
                "rgba(255,240,0,1)",
                "rgba(0,187,0,1)",
                "rgba(0,115,230,1)",
                "rgba(176,0,187,1)",
                "rgba(255,115,255,1)",
                "rgba(255,255,255,1)",
              ];
              for (var i in submenu) {
                actionsList.push({
                  icon : "tint",
                  style : {"background-color" : submenu[i], "color" : "transparent"},
                  attr : {"bgcol" : submenu[i]},
                  click : function(ev, ui){
                    var value = ui.attr("bgcol");
                    if (existingPiece) {
                      board.data.layers[layer].p[piece].hpb[key].c = value.replace(",1)", ",0.35)");
                      boardApi.updateObject(layer, "p", piece, board);
                      runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
                    }
                    else {
                      pieceData.hpb[key].c = value.replace(",1)", ",0.35)");
                    }
                    obj.update();
                  },
                });
              }
              actionsList.push({
                icon : "cog",
                click : function(){
                  var primaryCol = sync.render("ui_colorPicker")(obj, app, {
                    hideColor : true,
                    custom : true,
                    colorChange : function(ev, ui, col){
                      var value = col;
                      if (existingPiece) {
                        board.data.layers[layer].p[piece].hpb[key].c = value;
                        boardApi.updateObject(layer, "p", piece, board);
                        runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
                      }
                      else {
                        pieceData.hpb[key].c = value;
                      }
                      obj.update();
                      layout.coverlay("aura-color");
                    }
                  });

                  ui_popOut({
                    target : aura,
                    id : "aura-color",
                  }, primaryCol);
                },
              });
              ui_dropMenu($(this), actionsList, {id : "change-aura-color", hideClose : true});
            });

            var checkWrap = $("<div>").appendTo(hpWrap);
            checkWrap.addClass("flexmiddle hover2 subtitle lrmargin");
            checkWrap.attr("key", i);

            var segmented = genInput({
              parent : checkWrap,
              type : "checkbox",
            });
            segmented.prop("checked", existingPiece.hpb[i].b);
            checkWrap.append("<b>Boxed</b>");
            checkWrap.click(function(){
              var key = $(this).attr("key");
              if (!board.data.layers[layer].p[piece].hpb[key].b) {
                board.data.layers[layer].p[piece].hpb[key].b = true;
              }
              else {
                delete board.data.layers[layer].p[piece].hpb[key].b;
              }
              boardApi.updateObject(layer, "p", piece, board);
              runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
              rebuildHP();
            });

            var removeAura = genIcon("remove").appendTo(hpWrap);
            removeAura.addClass("destroy");
            removeAura.attr("key", i);
            removeAura.click(function(){
              var key = $(this).attr("key");
              delete board.data.layers[layer].p[piece].hpb[key];
              if (!Object.keys(board.data.layers[layer].p[piece].hpb).length) {
                delete board.data.layers[layer].p[piece].hpb;
              }
              boardApi.updateObject(layer, "p", piece, board);
              runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
              $(this).parent().remove();
            });
          }
        }
        rebuildHP();

        var hpWrap = $("<div>").appendTo(healthBars);
        hpWrap.addClass("flexrow flexbetween fit-x bold");

        var addBar = genIcon("plus", "New Health Bar").appendTo(hpWrap);
        addBar.addClass("create");
        addBar.click(function(){
          var ent = getEnt(existingPiece.eID);
          var select = {};
          for (var k in ent.data.counters) {
            select[ent.data.counters[k].name] = k;
          }

          ui_prompt({
            target : $(this),
            inputs : {
              "Health Data" : {select : select},
            },
            click : function(ev, inputs){
              if (inputs["Health Data"].val()) {
                existingPiece.hpb = existingPiece.hpb || {};
                existingPiece.hpb[inputs["Health Data"].val()] = {c : "rgb(155,155,155)"};
                boardApi.updateObject(layer, "p", piece, board);
                runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
                rebuildHP();
              }
            }
          });
        });

        if (existingPiece && existingPiece.eID) {
          var tScaleWrap = $("<div>").appendTo(hpWrap);
          tScaleWrap.addClass("flexcolumn flexmiddle");
          if (getEnt(existingPiece.eID) && getEnt(existingPiece.eID).data._t == "c") {
            if (!existingPiece.hp) {
              var token = genIcon("heart", "Hide Bars").appendTo(tScaleWrap);
              token.click(function(){
                board.data.layers[layer].p[piece].hp = true;
                boardApi.updateObject(layer, "p", piece, board);
                runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
                obj.update();
              });
            }
            else {
              var token = genIcon("heart-empty", "Show Bars").appendTo(tScaleWrap);
              token.addClass("dull");
              token.click(function(){
                delete board.data.layers[layer].p[piece].hp;
                boardApi.updateObject(layer, "p", piece, board);
                runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
                obj.update();
              });
            }
          }
        }
      }
    }
    else if (obj.data.advanced == "logic") {
      div.append("<b>Events and Triggers</b>");

      var triggerControls = $("<select>").appendTo(div);
      triggerControls.addClass("flexmiddle");
      triggerControls.css("color", "#333");
      triggerControls.css("text-shadow", "none");
      triggerControls.append("<option value=0>None</option>");
      triggerControls.append("<option value=1>Manual</option>");
      triggerControls.append("<option value=2>Pressure Plate</option>");
      triggerControls.append("<option value=3>Trip Wire</option>");
      if (board.data.layers[layer].p[piece].e && board.data.layers[layer].p[piece].e.t) {
        triggerControls.children().each(function(){
          if ($(this).attr("value") == board.data.layers[layer].p[piece].e.t) {
            $(this).attr("selected", true);
          }
        });
      }
      triggerControls.change(function(){
        if ($(this).val() && $(this).val() != "0") {
          board.data.layers[layer].p[piece].e = board.data.layers[layer].p[piece].e || {t : $(this).val(), calc : []};
          board.data.layers[layer].p[piece].e.t = Number($(this).val());
          rebuildTriggers();
        }
        else {
          delete board.data.layers[layer].p[piece].e;
          rebuildTriggers();
        }
        boardApi.updateObject(layer, "p", piece, board);
        runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
      });

      var triggerList = $("<div>").appendTo(div);
      triggerList.addClass("flexcolumn fit-x");
      triggerList.css("color", "#333");
      triggerList.css("text-shadow", "none");

      function rebuildTriggers(){
        triggerList.empty();
        if (board.data.layers[layer].p[piece].e && board.data.layers[layer].p[piece].e.t) {
          for (var i in board.data.layers[layer].p[piece].e.calc) {
            var triggerPlate = $("<div>").appendTo(triggerList);
            triggerPlate.addClass("flexrow flexmiddle white outlinebottom smooth hover2");
            triggerPlate.attr("index", i);

            triggerPlate.click(function(){
              var index = $(this).attr("index");

              var newTrigger = sync.dummyObj();
              newTrigger.data = board.data.layers[layer].p[piece].e.calc[index];

              var content = $("<div>");
              content.addClass("flexcolumn flex lrpadding");

              var newApp = sync.newApp("ui_triggerBuilder").appendTo(content);
              newApp.attr("board", app.attr("target"));
              newApp.attr("piece", piece);
              newApp.attr("layer", layer);

              newTrigger.addApp(newApp);

              var confirm = $("<button>").appendTo(content);
              confirm.append("Confirm");
              confirm.click(function(){
                board.data.layers[layer].p[piece].e =  board.data.layers[layer].p[piece].e || {t : 1, calc : []};
                board.data.layers[layer].p[piece].e.calc[index] = newTrigger.data;
                boardApi.updateObject(layer, "p", piece, board);
                runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
                rebuildTriggers();
                layout.coverlay("create-trigger");
              });

              var pop = ui_popOut({
                id : "create-trigger",
                target : $(this),
                title : "New Trigger",
                style : {"width" : "400px"}
              }, content);
            });

            if (util.events[board.data.layers[layer].p[piece].e.calc[i].e]) {
              triggerPlate.append("<b class='flex flexmiddle'>"+util.events[board.data.layers[layer].p[piece].e.calc[i].e].name+"</b>");
            }

            var remove = genIcon("remove").appendTo(triggerPlate);
            remove.addClass("destroy");
            remove.attr("index", i);
            remove.click(function(){
              board.data.layers[layer].p[piece].e.calc.splice($(this).attr("index"), 1);
              boardApi.updateObject(layer, "p", piece, board);
              runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
              rebuildTriggers();
            });
          }
          var addTrigger = genIcon("plus", "Add Event").appendTo(triggerList);
          addTrigger.addClass("spadding alttext subtitle");
          addTrigger.css("color", "white");
          addTrigger.click(function(){
            var newTrigger = sync.dummyObj();
            newTrigger.data = {data : "d20", e : 4};

            var content = $("<div>");
            content.addClass("flexcolumn flex");

            var newApp = sync.newApp("ui_triggerBuilder").appendTo(content);
            newApp.attr("board", app.attr("target"));
            newApp.attr("piece", piece);
            newApp.attr("layer", layer);

            newTrigger.addApp(newApp);

            var confirm = $("<button>").appendTo(content);
            confirm.append("Confirm");
            confirm.click(function(){
              board.data.layers[layer].p[piece].e = board.data.layers[layer].p[piece].e || {t : 1, calc : []};
              board.data.layers[layer].p[piece].e.calc.push(newTrigger.data);
              boardApi.updateObject(layer, "p", piece, board);
              runCommand("boardMove", {id : app.attr("target"), layer : layer, type : "p", index : piece, data : board.data.layers[layer].p[piece]});
              rebuildTriggers();
              layout.coverlay("create-trigger");
            });

            var pop = ui_popOut({
              id : "create-trigger",
              target : $(this),
              title : "New Event",
              style : {"width" : "400px"}
            }, content);
          });
        }
      }
      rebuildTriggers();
    }
  }
  return div;
});

var _quickEditCache;
sync.render("ui_pieceQuickEdit", function(obj, app, scope){
  scope = scope || {
    board : app.attr("board"),
    layer : app.attr("layer"),
    piece : app.attr("piece"),
    zoom : parseInt(app.attr("zoom"))/100,
  };

  var div = $("<div>");
  div.addClass("flexcolumn flexmiddle");

  var misc = $("<div>"); // reserved for actions
  misc.addClass("fit-x");

  var miscWrap = $("<div>").appendTo(misc);
  miscWrap.addClass("flexrow flex");
  miscWrap.css("font-size", "1.2em");

  if (app.attr("lastLength") && obj.data.layers[scope.layer].p.length != app.attr("lastLength")) {
    // change detected
    var changeFound = false;
    for (var i in obj.data.layers[scope.layer].p) {
      if (JSON.stringify(obj.data.layers[scope.layer].p[i]) == JSON.stringify(_quickEditCache)) {
        scope.piece = i;
        app.attr("piece", i);
        changeFound = true;
        break;
      }
    }
    if (!changeFound) {
      layout.coverlay($(".piece-quick-edit"));
    }
  }
  var pieceData = obj.data.layers[scope.layer].p[scope.piece];
  _quickEditCache = duplicate(pieceData);
  app.attr("lastLength", obj.data.layers[scope.layer].p.length);
  if (pieceData) {
    var charIndex = pieceData.eID;
    var noteIndex = pieceData.nID;
    var char;
    if (charIndex instanceof Object) {
      char = getEnt(charIndex[0]);
    }
    else {
      char = getEnt(charIndex);
    }

    var hasBoardRights = hasSecurity(getCookie("UserID"), "Rights", obj.data);
    var hasRights = hasBoardRights || hasSecurity(getCookie("UserID"), "Game Master");
    if (!hasRights && char) {
      hasRights = hasSecurity(getCookie("UserID"), "Rights", char.data);
    }

    var title = genInput({
      //parent : div,
      value : pieceData.t,
      classes : "outline alttext middle subtitle",
      style : {"background-color" : "rgb(0,0,0,0.8)", "box-shadow" : "none"}
    });
    title.change(function(){
      obj.data.layers[scope.layer].p[scope.piece].t = $(this).val();
      if (hasSecurity(getCookie("UserID"), "Rights", obj.data)) {
        runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
        boardApi.updateObject(scope.layer, "p", scope.piece, obj);
        sync.updateApp(app, obj);
      }
    });

    if (!(charIndex instanceof Object)) {
      if (char && char.data._t == "c" && (hasRights || hasSecurity(getCookie("UserID"), "Visible", char.data))) {
        var newApp = sync.newApp("ui_hotActions").appendTo(misc);
        setTimeout(function(){
          newApp.css("max-width", div.width());
          char.addApp(newApp);

          if (newApp.attr("actionsTrue")) {
            newApp.addClass("alttext smooth spadding");
            newApp.css("background-color", "rgba(0,0,0,0.8)");
            newApp.css("pointer-events", "auto");
            newApp.css("border-width", "0");
          }
          else {
            newApp.remove();
          }
        });
      }
    }
    if ((!pieceData.eID || hasRights) && (pieceData.e && (pieceData.e.t == 1 || hasBoardRights))) {
      var button = $("<button>").appendTo(div);
      button.addClass("highlight subtitle alttext");
      button.css("pointer-events", "auto");
      button.text("Fire Trigger!");
      button.click(function(){
        var ctx = sync.defaultContext();
        ctx[obj.data._t] = {layers : {}};
        for (var lid in obj.data.layers) {
          ctx[obj.data._t].layers[lid] = {h : obj.data.layers[lid].h};
        }

        for (var cID in pieceData.e.calc) {
          var calcData = pieceData.e.calc[cID];
          if (calcData) {
            if (!calcData.cond || sync.eval(calcData.cond, ctx)) {
              if (util.events[calcData.e] && util.events[calcData.e].fire) { // equation
                util.events[calcData.e].fire(obj, app, calcData, pieceData, ctx);
              }
              else {
                var val = sync.eval(calcData.eq, ctx);
                var target = sync.traverse(obj.data, calcData.target);
                if (target instanceof Object) {
                  sync.rawVal(target, val);
                }
                else {
                  sync.traverse(obj.data, calcData.target, val);
                }
                if (calcData.target.match("layers\.")) {
                  boardApi.updateLayer(calcData.target.split(".")[1], {r : true}, obj);
                }
              }
            }
          }
        }
      });
    }

    var parent = $("<div>").appendTo(div);
    parent.addClass("flexrow flexbetween fit-x");
    parent.css("position", "relative");

    var leftPad = $("<div>").appendTo(parent);
    leftPad.addClass("flex flexcolumn alttext");
    leftPad.css("pointer-events", "auto");

    var leftPadWrap = $("<div>").appendTo(leftPad);
    leftPadWrap.css("background", "rgba(0,0,0,0.8)");
    if (hasRights) {
      leftPadWrap.addClass("outline smooth");
      var invisible = pieceData.v;
      var reveal = genIcon("eye-open");
      reveal.appendTo(leftPadWrap);
      reveal.addClass("flexmiddle spadding");
      reveal.attr("title", "Piece's visibility to players");
      reveal.click(function(){
        obj.data.layers[scope.layer].p[scope.piece].v = !pieceData.v;
        runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
        boardApi.updateObject(scope.layer, "p", scope.piece, obj);
        sync.updateApp(app, obj);
      });
      if (invisible) {
        reveal.changeIcon("eye-close");
      }
    }
    if (hasBoardRights) {
      leftPadWrap.addClass("outline smooth");
      var locked = pieceData.l;
      var pin = genIcon("pushpin").appendTo(leftPadWrap);
      pin.addClass("flexmiddle spadding");
      pin.attr("title", "Pin token to layer. Interactive only on this layer");
      pin.click(function(){
        obj.data.layers[scope.layer].p[scope.piece].l = !pieceData.l;
        runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
        boardApi.updateObject(scope.layer, "p", scope.piece, obj);
        sync.updateApp(app, obj);
      });
      if (locked) {
        pin.addClass("highlight2 alttext");
      }

      var del = genIcon("trash").appendTo(leftPadWrap);
      del.addClass("flexmiddle spadding");
      del.attr("title", "Delete this Token");
      del.click(function(){
        ui_prompt({
          target : $(this),
          confirm : "Delete Token",
          click : function(ev, inputs){
            var delEnt = getEnt(obj.data.layers[scope.layer].p[scope.piece].eID);
            if (delEnt && delEnt.data && delEnt.data._flags && delEnt.data._flags["temp"]) {
              if (hasSecurity(getCookie("UserID"), "Owner", delEnt.data)) {
                delEnt.sync("deleteAsset");
              }
            }
            layout.coverlay($(".piece-quick-edit"));
            boardApi.destroyObject(scope.layer, "p", scope.piece, obj);
          }
        });
      });
    }

    if (hasBoardRights || hasRights) {
      var statusEffects = genIcon("exclamation-sign").appendTo(leftPadWrap);
      statusEffects.addClass("flexmiddle spadding");
      statusEffects.attr("title", "Effects");
      statusEffects.click(function(){
        var optionList = [];
        var content = $("<div>");
        content.addClass("flexcolumn");

        for (var key in util.art.Effects) {
          var img = $("<img>").appendTo(content);
          img.addClass("hover2");
          img.attr("src", util.art.Effects[key].src);
          img.attr("width", "30px");
          img.attr("height", "30px");
          if (obj.data.layers[scope.layer].p[scope.piece].rpg && util.contains(obj.data.layers[scope.layer].p[scope.piece].rpg, util.art.Effects[key].src)) {
            img.addClass("highlight outline smooth");
          }
          img.click(function(){
            obj.data.layers[scope.layer].p[scope.piece].rpg = obj.data.layers[scope.layer].p[scope.piece].rpg || [];
            var rpg = obj.data.layers[scope.layer].p[scope.piece].rpg;
            if (rpg && util.contains(rpg, $(this).attr("src"))) {
              for (var key=0; key<rpg.length; key++) {
                if (rpg[key] == $(this).attr("src")) {
                  rpg.splice(key, 1);
                  break;
                }
              }
            }
            else {
              rpg.push($(this).attr("src"));
            }
            runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
            boardApi.updateObject(scope.layer, "p", scope.piece, obj);
            statusEffects.click();
          });
        }

        optionList.push({
          name : content,
          style : {"color" : "transparent"},
        });
        var menu = ui_dropMenu($(this), optionList, {"id" : "color-picker", hideClose : true, align : "center"});
        menu.removeClass("outline");
      });
      statusEffects.contextmenu(function(ev){
        delete obj.data.layers[scope.layer].p[scope.piece].rpg;
        runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
        boardApi.updateObject(scope.layer, "p", scope.piece, obj);
        sync.updateApp(app, obj);
        layout.coverlay("icons-picker");
        ev.preventDefault();
        ev.stopPropagation();
        return false;
      });
    }

    var padding = $("<div>").appendTo(leftPad);
    padding.addClass("flex");

    var leftPadWrap = $("<div>").appendTo(leftPad);
    leftPadWrap.css("background", "rgba(0,0,0,0.8)");

    var entDiv;
    if (charIndex && char) {
      entDiv = $("<div>").appendTo(parent);
      entDiv.addClass("outline white round flexmiddle subtitle fit-x");
      entDiv.css("width", pieceData.w * scope.zoom+ 30);
      entDiv.css("height", pieceData.h * scope.zoom + 30);
      entDiv.css("max-height", "400px");
      entDiv.css("max-width", "400px");
      if (charIndex instanceof Object) {
        entDiv.css("min-width", "150px");
      }
      entDiv.css("position", "relative");
      entDiv.css("overflow", "visible");
      entDiv.css("opacity", "0");
      entDiv.css("pointer-events", "none");
      if (char.data._t == "c") {
        entDiv.css("background-image", "url('"+(sync.rawVal(char.data.info.img) || "/content/icons/blankchar.png")+"')");
      }
      else {
        entDiv.css("background-image", "url('"+(sync.rawVal(char.data.info.img) || "/content/icons/Scroll1000p.png")+"')");
      }
      entDiv.css("background-repeat", "no-repeat");
      entDiv.css("background-position", "center");
      entDiv.css("background-size", "contain");
      if (hasSecurity(getCookie("UserID"), "Visible", char.data)) {
        entDiv.append("<text class='alttext fit-x outline lrpadding' style='background-color : rgba(0,0,0,0.7);'>"+(sync.rawVal(char.data.info.name) || "No Name")+"</text>");
        leftPadWrap.addClass("outline smooth");
        var summary = genIcon("link");
        summary.appendTo(leftPadWrap);
        summary.addClass("flexmiddle spadding");
        summary.attr("title", "Change Asset Link");
        summary.css("pointer-events", "auto");
        if (obj.data.layers[scope.layer].p[scope.piece].eID) {
          summary.addClass("destroy");
        }
        summary.click(function(ev){
          if (layout.mobile) {
            $(".piece-quick-edit").remove();
          }
          if (obj.data.layers[scope.layer].p[scope.piece].eID) {
            var content = sync.render("ui_assetPicker")(obj, app, {
              rights : "Visible",
              select : function(ev, ui, ent, options){
                obj.data.layers[scope.layer].p[scope.piece].eID = ent.id();
                if (ent.data.info && ent.data.info.img) {
                  if (ent.data.info.img.min) {
                    obj.data.layers[scope.layer].p[scope.piece].i = ent.data.info.img.min;
                  }
                }
                layout.coverlay("add-asset");
                runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
                boardApi.updateObject(scope.layer, "p", scope.piece, obj);
                sync.updateApp(app, obj);
                ev.stopPropagation();
                ev.preventDefault();
              }
            });
            var popOut = ui_popOut({
              target : $("body"),
              prompt : true,
              id : "add-asset",
              title : "Change Link",
              style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
            }, content);
            popOut.resizable();
          }
          else {
            delete obj.data.layers[scope.layer].p[scope.piece].eID;
            runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
            boardApi.updateObject(scope.layer, "p", scope.piece, obj);
            sync.updateApp(app, obj);
          }
        });
        summary.contextmenu(function(ev){
          delete obj.data.layers[scope.layer].p[scope.piece].eID;
          runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
          boardApi.updateObject(scope.layer, "p", scope.piece, obj);
          sync.updateApp(app, obj);
          ev.preventDefault();
          ev.stopPropagation();
          return false;
        });
      }
      if (char.data._t == "b" && !(charIndex instanceof Object)) {
        var content = sync.newApp("ui_boardActions").appendTo(misc);
        content.attr("targetApp", app.attr("targetApp"));
        content.css("pointer-events", "auto");
        char.addApp(content);
      }

      if (hasRights) {
        entDiv.addClass("hover2");
        entDiv.click(function(){
          if (layout.mobile) {
            $(".piece-quick-edit").remove();
          }
          assetTypes[char.data._t].preview(char, $(this));
        });
        entDiv.contextmenu(function(ev){
          assetTypes.contextmenu(ev, $(this), char, entDiv, []);
          ev.preventDefault();
          ev.stopPropagation();
        });
      }
    }
    else {
      entDiv = $("<div>").appendTo(parent);
      entDiv.addClass("outline white round flexmiddle subtitle hover2 fit-x");
      entDiv.css("width", pieceData.w * scope.zoom+ 30);
      entDiv.css("height", pieceData.h * scope.zoom + 30);

      if ((pieceData.w * scope.zoom+ 30) > 400 || (pieceData.h * scope.zoom + 30) > 400) {
        entDiv.css("max-height", "0");
        entDiv.css("max-width", "0");
      }

      entDiv.css("position", "relative");
      entDiv.css("overflow", "visible");
      entDiv.css("opacity", "0");
      entDiv.css("pointer-events", "none");
      entDiv.append("<text class='alttext outline lrpadding fit-x' style='background-color : rgba(0,0,0,0.8);'>No Link</text>");

      if (hasRights) {
        leftPadWrap.addClass("outline smooth");

        var summary = genIcon("link");
        summary.appendTo(leftPadWrap);
        summary.addClass("flexmiddle spadding");
        summary.attr("title", "Change Asset Link");
        summary.css("pointer-events", "auto");
        summary.click(function(ev){
          if (layout.mobile) {
            $(".piece-quick-edit").remove();
          }
          var content = sync.render("ui_assetPicker")(obj, app, {
            rights : "Visible",
            select : function(ev, ui, ent, options){
              obj.data.layers[scope.layer].p[scope.piece].eID = ent.id();
              if (ent.data.info && ent.data.info.img) {
                if (ent.data.info.img.min) {
                  obj.data.layers[scope.layer].p[scope.piece].i = ent.data.info.img.min;
                }
              }
              layout.coverlay("add-asset");
              runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
              boardApi.updateObject(scope.layer, "p", scope.piece, obj);
              sync.updateApp(app, obj);
              ev.stopPropagation();
              ev.preventDefault();
            }
          });

          var popOut = ui_popOut({
            target : $("body"),
            prompt : true,
            id : "add-asset",
            title : "Change Link",
            style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
          }, content);
          popOut.resizable();
        });

        entDiv.click(function(){
          var content = sync.render("ui_assetPicker")(obj, app, {
            rights : "Visible",
            select : function(ev, ui, ent, options){
              obj.data.layers[scope.layer].p[scope.piece].eID = ent.id();
              if (ent.data.info && ent.data.info.img) {
                if (ent.data.info.img.min) {
                  obj.data.layers[scope.layer].p[scope.piece].i = ent.data.info.img.min;
                }
              }
              layout.coverlay("add-asset");
              runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
              boardApi.updateObject(scope.layer, "p", scope.piece, obj);
              sync.updateApp(app, obj);
              ev.stopPropagation();
              ev.preventDefault();
            }
          });

          var popOut = ui_popOut({
            target : $("body"),
            prompt : true,
            id : "add-asset",
            title : "Attach Link",
            style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
          }, content);
          popOut.resizable();
        });
      }
    }

    if ((pieceData.a || obj.data.layers[scope.layer].a || 0) && !(pieceData.eID instanceof Object)) {
      var altText = $("<div>").appendTo(entDiv);
      altText.addClass("alttext");
      altText.css("position", "absolute");
      altText.css("left", "0");
      altText.css("bottom", "0");
      altText.text("Alt.");

      var alt = genIcon("", (pieceData.a || obj.data.layers[scope.layer].a || 0) + " " + (obj.data.options.unit || "un")).appendTo(entDiv);
      alt.addClass("alttext");
      alt.css("position", "absolute");
      alt.css("right", "0");
      alt.css("bottom", "0");
      alt.css("pointer-events", "auto");
      if (hasRights) {
        alt.click(function(ev){
          ui_prompt({
            target : $(this),
            inputs : {"Altitude" : {type : "number", value : pieceData.a, placeholder : "Altitude"}},
            click : function(ev, inputs) {
              obj.data.layers[scope.layer].p[scope.piece].a = Number(inputs["Altitude"].val());
              runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
              boardApi.updateObject(scope.layer, "p", scope.piece, obj);
              sync.updateApp(app, obj);
            }
          });
          ev.preventDefault();
          ev.stopPropagation();
        });
      }
    }

    var rightPad = $("<div>").appendTo(parent);
    rightPad.addClass("flex flexcolumn");
    rightPad.css("font-size", "1.2em");
    rightPad.css("pointer-events", "auto");
    if (hasRights) {
      var tokenPreview = $("<div>").appendTo(rightPad);
      tokenPreview.addClass("outline white smooth hover2");
      tokenPreview.attr("title", "Token Art");
      tokenPreview.css("width", "25px");
      tokenPreview.css("height", "25px");
      tokenPreview.css("background-image", "url('"+(pieceData.i || "")+"')");
      tokenPreview.css("background-repeat", "no-repeat");
      tokenPreview.css("background-position", "center");
      tokenPreview.css("background-size", "cover");
      tokenPreview.click(function(){
        var imgList = sync.render("ui_filePicker")(obj, app, {
          filter : "img",
          value : pieceData.i,
          change : function(ev, ui, value){
            obj.data.layers[scope.layer].p[scope.piece].i = value;
            layout.coverlay("icons-picker");
            runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
            boardApi.updateObject(scope.layer, "p", scope.piece, obj);
            sync.updateApp(app, obj);
          }
        });

        var pop = ui_popOut({
          target : $(this),
          prompt : true,
          id : "icons-picker",
          align : "top",
          style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
        }, imgList);
        pop.resizable();
      });
      tokenPreview.contextmenu(function(ev){
        delete obj.data.layers[scope.layer].p[scope.piece].i;
        layout.coverlay("icons-picker");
        runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
        boardApi.updateObject(scope.layer, "p", scope.piece, obj);
        sync.updateApp(app, obj);
        ev.preventDefault();
        ev.stopPropagation();
      });

      var colPreview = $("<div>").appendTo(rightPad);
      colPreview.addClass("smooth white hover2 flexcolumn");
      colPreview.attr("title", "Color");
      colPreview.css("width", "25px");
      colPreview.css("height", "25px");
      colPreview.css("background-image", "url('/content/checkered.png')");
      colPreview.append($("<div>").css("background", pieceData.c).addClass("flex outline"));
      colPreview.click(function(){
        var optionList = [];
        var submenu = [
          "rgba(34,34,34,1)",
          "rgba(187,0,0,1)",
          "rgba(255,153,0,1)",
          "rgba(255,240,0,1)",
          "rgba(0,187,0,1)",
          "rgba(0,115,230,1)",
          "rgba(176,0,187,1)",
          "rgba(255,115,255,1)",
          "rgba(255,255,255,1)",
        ];
        for (var i in submenu) {
          optionList.push({
            icon : "tint",
            style : {"background-color" : submenu[i], "color" : "transparent"},
            click : function(ev, ui){
              obj.data.layers[scope.layer].p[scope.piece].c = ui.css("background-color");
              runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
              boardApi.updateObject(scope.layer, "p", scope.piece, obj);
              sync.updateApp(app, obj);
            },
          });
        }
        optionList.push({
          icon : "cog",
          click : function(){
            var primaryCol = sync.render("ui_colorPicker")(obj, app, {
              hideColor : true,
              custom : true,
              colorChange : function(ev, ui, value){
                obj.data.layers[scope.layer].p[scope.piece].c = value;
                runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
                boardApi.updateObject(scope.layer, "p", scope.piece, obj);
                sync.updateApp(app, obj);
                layout.coverlay("piece-color");
              }
            });

            ui_popOut({
              target : colPreview,
              id : "piece-color",
            }, primaryCol);
          },
        });
        var menu = ui_dropMenu($(this), optionList, {"id" : "color-picker", hideClose : true, align : "center"});
        menu.removeClass("outline");
      });
      colPreview.contextmenu(function(ev){
        obj.data.layers[scope.layer].p[scope.piece].c = "rgba(0,0,0,0)";
        layout.coverlay("icons-picker");
        runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
        boardApi.updateObject(scope.layer, "p", scope.piece, obj);
        sync.updateApp(app, obj);
        ev.preventDefault();
        ev.stopPropagation();
      });

      if (hasBoardRights) {
        var shapePreview = $("<div>").appendTo(rightPad);
        shapePreview.attr("title", "Shape");
        shapePreview.css("width", "25px");
        shapePreview.css("height", "25px");
        shapePreview.addClass("hover2 flexmiddle");
        shapePreview.append(buildShape(pieceData.d || 0, pieceData.c || "rgba(0,0,0,0.8)", 20));
        shapePreview.click(function(){
          var optionList = [];
          var imgList = sync.render("ui_shapePicker")(obj, app, {
            vertical : true,
            color : pieceData.c || "rgba(0,0,0,0.8)",
            size : 30,
            shapeChange : function(ev, ui, value){
              console.log(scope.piece, value);
              obj.data.layers[scope.layer].p[scope.piece].d = value;
              runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
              boardApi.updateObject(scope.layer, "p", scope.piece, obj);
              sync.updateApp(app, obj);
              layout.coverlay("icons-picker");
            }
          }).addClass("flexcolumn");

          optionList.push({
            name : imgList,
            style : {"color" : "transparent"},
          });
          var menu = ui_dropMenu($(this), optionList, {"id" : "color-picker", hideClose : true, align : "center"});
          menu.removeClass("outline");
        });
        shapePreview.contextmenu(function(ev){
          delete obj.data.layers[scope.layer].p[scope.piece].d;
          runCommand("boardMove", {id : obj.id(), layer : scope.layer, type : "p", index : scope.piece, data : obj.data.layers[scope.layer].p[scope.piece]});
          boardApi.updateObject(scope.layer, "p", scope.piece, obj);
          sync.updateApp(app, obj);
          layout.coverlay("icons-picker");
          ev.preventDefault();
          ev.stopPropagation();
        });
      }

      var padding = $("<div>").appendTo(rightPad);
      padding.addClass("flex");

      if (hasBoardRights) {
        var edit = genIcon("cog").appendTo(rightPad);
        edit.addClass("alttext outline subtitle smooth");
        edit.css("background", "rgba(0,0,0,0.8)");
        edit.css("color", "white");
        edit.click(function(){
          if (hasSecurity(getCookie("UserID"), "Rights", obj.data)) {
            var temp;
            if (!app.attr("creating")) {
              $("#"+app.attr("targetApp")).attr("menuOption", "Build");
              $("#"+app.attr("targetApp")).removeAttr("drawing");
              $("#"+app.attr("targetApp")).removeAttr("configuring");
              temp = true;
            }
            if (!$("#"+app.attr("id")+"-menu-"+obj.id()).length) {
              util.dockReveal($("#main-nav"));
              $("#left-content").empty();
              var menu = sync.render("ui_boardMenuLeft")(obj, $("#"+app.attr("targetApp")), scope).appendTo("#left-content");
              util.dockReveal($("#left-menu"));
            }

            var parent = $("#"+app.attr("targetApp")+"-menu-"+obj.id());
            parent.replaceWith(sync.render("ui_boardMenuLeft")(obj, $("#"+app.attr("targetApp")), scope));

            game.locals["pieceBuilding"].data.layer = scope.layer;
            game.locals["pieceBuilding"].data.piece = scope.piece;
            game.locals["pieceBuilding"].update();

            parent.replaceWith(sync.render("ui_boardMenuLeft")(obj, $("#"+app.attr("targetApp")), scope));
            if (temp) {
              $("#"+app.attr("targetApp")).removeAttr("creating");
              $("#"+app.attr("targetApp")).removeAttr("drawing");
              $("#"+app.attr("targetApp")).removeAttr("configuring");
              $("#"+app.attr("targetApp")).attr("rebuildmenu", true);
            }

            layout.coverlay($(".piece-quick-edit"));
          }
          else if (char && char.data && hasSecurity(getCookie("UserID"), "Rights", char.data)) {
            assetTypes[char.data._t].preview(ent, $(".piece-quick-edit"));
            layout.coverlay($(".piece-quick-edit"));
          }
        });
      }
    }

    misc.appendTo(div);
    if (charIndex instanceof Object) {
      var centerPad = $("<div>").appendTo(div);
      centerPad.addClass("outline smooth spadding");
      centerPad.css("background-color", "rgba(0,0,0,0.8)");
      //centerPad.css("width", pieceData.w * scope.zoom + 20);
      //centerPad.css("height", pieceData.h * scope.zoom + 20);
      centerPad.css("min-width", "150px");
      centerPad.css("pointer-events", "auto");

      for (var idx=0; idx<charIndex.length; idx++) {
        var char = getEnt(charIndex[idx]);
        var hasBoardRights = hasSecurity(getCookie("UserID"), "Rights", obj.data);
        var hasRights = hasBoardRights || hasSecurity(getCookie("UserID"), "Game Master");
        if (!hasRights && char) {
          hasRights = hasSecurity(getCookie("UserID"), "Rights", char.data);
        }

        var entDiv = $("<div>").appendTo(centerPad);
        entDiv.addClass("flexcolumn");
        if (idx > 0) {
          entDiv.addClass("subtitle");
        }
        else {
          entDiv.addClass("outlinebottom smooth");
          entDiv.css("font-size", "1.2em");
        }
        entDiv.css("position", "relative");
        entDiv.css("overflow", "visible");
        entDiv.css("background-repeat", "no-repeat");
        entDiv.css("background-position", "center");
        entDiv.css("background-size", "contain");
        if (hasSecurity(getCookie("UserID"), "Visible", char.data) || char.data._t == "b") {
          var ent = sync.render("ui_ent")(char, entDiv, {
            click : function(ev, plate, char){
              plate.contextmenu();
              ev.stopPropagation();
              ev.preventDefault();
            },
            draw : function(plate, char) {
              plate.removeClass("outline");

              if (idx > 0) {
                plate.addClass("lrmargin smooth outlinebottom");
              }
              else {
                plate.css("height", "40px");
              }
              if (char.data._t == "b" && !plate.hasClass("inactive")) {
                var button = $("<button>").appendTo(plate);
                button.addClass("flexrow highlight alttext");
                button.attr("title", "Enter Map");
                button.append(genIcon("log-in"));

                button.click(function(ev) {
                  var tabs = game.state.data.tabs;
                  var active;
                  for (var i in tabs) {
                    if (char.id() == tabs[i].index) {
                      active = i;
                      break;
                    }
                  }
                  var submenu;
                  if (active) {
                    if (app.attr("targetApp") && $("#"+app.attr("targetApp")).length) {
                      $("#"+app.attr("targetApp")).removeAttr("scrollLeft");
                      $("#"+app.attr("targetApp")).removeAttr("scrollTop");
                      $("#"+app.attr("targetApp")).removeAttr("zoom");
                    }
                    for (var i in game.state._apps) {
                      if ($("#"+game.state._apps[i]).length) {
                        $("#"+game.state._apps[i]).attr("tab", active);
                      }
                    }
                    game.state.update();
                  }
                  else if (hasSecurity(getCookie("UserID"), "Assistant Master")) {
                    game.state.data.tabs.push({index : char.id(), ui : "ui_board"});
                    if (app.attr("targetApp") && $("#"+app.attr("targetApp")).length) {
                      $("#"+app.attr("targetApp")).removeAttr("scrollLeft");
                      $("#"+app.attr("targetApp")).removeAttr("scrollTop");
                      $("#"+app.attr("targetApp")).removeAttr("zoom");
                    }
                    for (var i in game.state._apps) {
                      if ($("#"+game.state._apps[i]).length) {
                        $("#"+game.state._apps[i]).attr("tab", game.state.data.tabs.length-1);
                      }
                    }
                    game.state.sync("updateState");
                  }
                  layout.coverlay($(".piece-quick-edit"));
                });
              }
            }
          }).appendTo(entDiv);
          ent.addClass("white");
        }
      }
    }
  }
  else {
    div.append("<b>Piece not Found</b>");
  }


  return div;
});

var floatingTile;
var randomRot;
var lastvideo;
sync.render("ui_board", function(obj, app, scope) {
  scope = scope || {
    viewOnly : (app.attr("viewOnly") == "true"),
    local : (app.attr("local") == "true"),
    layer : app.attr("layer"),
    noOptions : (app.attr("noOptions") == "true")
  };
  var lastSelections = boardApi.selections[app.attr("id")] || {};
  boardApi.triggers[obj.id()] = [];
  if (floatingTile && floatingTile.board != obj.id() || !app.attr("background")) {
    (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
    floatingImage = null;
    floatingTile = null;
  }

  if (game.locals["newAssetList"] && util.contains(game.locals["newAssetList"], obj.id()) && !obj.data.map) {
    app.attr("configuring", "background");
  }

  var data = obj.data;
  data.options = data.options || {};

  if (!app.attr("layer") && data.options && data.options.pLayer && !hasRights) {
    app.attr("layer", data.options.pLayer);
    scope.layer = data.options.pLayer;
  }
  if (scope.layer >= data.layers.length - 1) {
    // fuck fireffox
    scope.layer = data.layers.length - 1;
    app.attr("layer", data.layers.length - 1);
  }
  scope.layer = Math.max(scope.layer || 0, 0);

  var userID = app.attr("UserID") || getCookie("UserID");
  var hasRights = hasSecurity(userID, "Rights", data) || hasSecurity(userID, "Game Master");
  if (data.options.pLayer != null && !hasRights) {
    scope.layer = data.options.pLayer;
  }
  // set some important app variables
  app.attr("index", obj.id());
  app.attr("layer", scope.layer);

  if (game.config.data.offline) {
    scope.local = true;
  }
  if (app.attr("zoom") == null && data.vZ) {
    app.attr("zoom", data.vZ);
  }
  else if (app.attr("zoom") == null) {
    app.attr("zoom", "100");
  }

  var portWidth = Number(app.attr("divWidth") || 0);
  var portHeight = Number(app.attr("divHeight") || 0);

  var gridWidth = data.gridW;
  var gridHeight = data.gridH;
  var isHex = data.options && data.options.hex;
  var hasGrid = data.gridW && data.gridW;
  var zoom = Number(app.attr("zoom")) / 100 || 1;

  var div = $("<div>");
  div.addClass("fit-xy flexcolumn");

  var divRow = $("<div>").appendTo(div);
  divRow.addClass("flex noSelect");
  divRow.css("position", "relative");
  divRow.css("overflow", "hidden");

  var fullLoaded = true;
  for (var i in data.sheets) {
    if (data.sheets[i].i && !PIXI.loader.resources[data.sheets[i].i]) {
      fullLoaded = false;
      break;
    }
  }

  if (data.map && data.map.match(".gif") && !PIXI.loader.resources[data.map] && false) {
    fullLoaded = false;
  }
  for (var k in data.layers) {
    for (var p in data.layers[k].p) {
      if (data.layers[k].p[p].i && data.layers[k].p[p].i.match(".gif") && !PIXI.loader.resources[data.layers[k].p[p].i] && false) {
        fullLoaded = false;
        break;
      }
    }
  }

  if (app.attr("divWidth") && app.attr("divHeight") && fullLoaded) {
    if (app.attr("scrollLeft") == null && data.vX != null) {
      app.attr("scrollLeft", data.vX + (portWidth)/2/zoom);
    }
    if (app.attr("scrollTop") == null && data.vY != null) {
      app.attr("scrollTop", data.vY + (portHeight)/2/zoom);
    }
    var scrollLeft = Number(app.attr("scrollLeft")) || 0;
    var scrollTop = Number(app.attr("scrollTop")) || 0;

    divRow.css("max-width", app.width() || 0);
    divRow.css("max-height", app.height() || 0);

    var divRowWrapper = $("<div>").appendTo(divRow);
    divRowWrapper.addClass("fit-xy");
    divRowWrapper.css("overflow", "hidden");
    divRowWrapper.css("position", "absolute");

    if (data.c) {
      divRowWrapper.css("background-color", data.c);
    }
    if (boardApi.apps[app.attr("id")]) {
      boardApi.apps[app.attr("id")].destroy(true);
      boardApi.apps[app.attr("id")] = null;
    }
    boardApi.apps[app.attr("id")] = new PIXI.Application({
      width: portWidth,         // default: 800
      height: portHeight,        // default: 600
      antialias: true,    // default: false
      transparent: true, // default: false
      resolution: 1,       // default: 1
    });
    boardApi.apps[app.attr("id")].floatingImage = null;
    var floatingImage = boardApi.apps[app.attr("id")].floatingImage;
    boardApi.apps[app.attr("id")].views = {};


    boardApi.apps[app.attr("id")].opaqueBase = new PIXI.BaseRenderTexture(obj.data.w, obj.data.h, PIXI.SCALE_MODES.LINEAR);
    boardApi.apps[app.attr("id")].opaqueRender = new PIXI.RenderTexture(boardApi.apps[app.attr("id")].opaqueBase);

    boardApi.apps[app.attr("id")].fogBase = new PIXI.BaseRenderTexture(obj.data.w, obj.data.h, PIXI.SCALE_MODES.LINEAR);
    boardApi.apps[app.attr("id")].fogRender = new PIXI.RenderTexture(boardApi.apps[app.attr("id")].fogBase);

    boardApi.apps[app.attr("id")].expBase = new PIXI.BaseRenderTexture(obj.data.w, obj.data.h, PIXI.SCALE_MODES.LINEAR);
    boardApi.apps[app.attr("id")].expRender = new PIXI.RenderTexture(boardApi.apps[app.attr("id")].expBase);

    boardApi.apps[app.attr("id")].board = obj.id();

    boardApi.rebuildFogData(obj, app); // this is here for a reason, don't remove

    var emitter;
    var elapsed = Date.now();

    boardApi.triggers.cache[obj.id()] = boardApi.triggers.cache[obj.id()] || {};
    boardApi.triggers.flush[obj.id()] = boardApi.triggers.flush[obj.id()] || {};
    var boardCanvas = boardApi.apps[app.attr("id")];
    boardCanvas.stage.cZoom = Number(app.attr("zoom")) / 100 || 1;
    boardCanvas.ticker.add(function(delta){
      // Threat ticker
      if (emitter) { // weather stuff
        var now = Date.now();

      	emitter.update((now - elapsed) * 0.001);
      	elapsed = now;
      }

      zoom = Number(app.attr("zoom")) / 100 || 1;
      var startZoom = boardCanvas.stage.scale.x;

      var startX = boardCanvas.stage.x;
      var startY = boardCanvas.stage.y;
      if (boardCanvas.stage.dX && boardCanvas.stage.dY && (Math.abs(boardCanvas.stage.dX-startX) > 3 || Math.abs(boardCanvas.stage.dY-startY) > 3)) {
        boardCanvas.stage.x = util.lerp(startX, boardCanvas.stage.dX, 0.2);
        boardCanvas.stage.y = util.lerp(startY, boardCanvas.stage.dY, 0.2);
        app.attr("scrollLeft", boardCanvas.stage.x);
        app.attr("scrollTop", boardCanvas.stage.y);
      }
      else {
        delete boardCanvas.stage.dX;
        delete boardCanvas.stage.dY;
      }

      if (boardCanvas.stage.dZoom && boardCanvas.stage.dZoom != startZoom && !boardCanvas.stage.dX && !boardCanvas.stage.dY) {
        var focal = boardCanvas.stage.toLocal({x : portWidth/2, y : portHeight/2});
        boardCanvas.stage.x -= focal.x * (util.lerp(startZoom, boardCanvas.stage.dZoom, 0.2)-startZoom);
        boardCanvas.stage.y -= focal.y * (util.lerp(startZoom, boardCanvas.stage.dZoom, 0.2)-startZoom);
        boardCanvas.stage.scale.set(util.lerp(startZoom, boardCanvas.stage.dZoom, 0.2));
        app.attr("scrollLeft", boardCanvas.stage.x);
        app.attr("scrollTop", boardCanvas.stage.y);
      }

      for (var key in boardApi.triggers.flush[obj.id()]) {
        boardApi.triggers.flush[obj.id()][key](key);
        delete boardApi.triggers.flush[obj.id()][key];
      }
      if (app.attr("background") != "true") {
        cursorLayer.clear();
        if (data.beacons) {
          for (var i=data.beacons.length-1; i>=0; i--) {
            var beaconData = data.beacons[i];
            beaconData.size = beaconData.size || 0;
            if (!beaconData.gfx) {
              var beacon = new PIXI.Graphics();
              beaconLayer.addChild(beacon);
              beaconData.gfx = beacon;
            }
            if (beaconData.gfx && beaconData.size < 128) {
              beaconData.gfx.clear();
              beaconData.gfx.lineStyle(4, util.RGB_HEX(beaconData.col), 1-(beaconData.size/128));
              beaconData.gfx.drawCircle(beaconData.x, beaconData.y, beaconData.size);
              beaconData.gfx.endFill();
              beaconData.size += 1 * delta;
            }
            else {
              data.beacons.splice(i, 1);
              beaconLayer.removeChild(beaconData.gfx);
            }
          }
        }
        if (data.cursors) {
          var i = 0;
          if (cursorTextLayer.children && cursorTextLayer.children.length) {
            for (var j=0; j<cursorTextLayer.children.length; j++) {
              cursorTextLayer.children[j].visible = false;
              cursorMeasureLayer.children[j].visible = false;
            }
          }

          var delay = 1000;
          var now = Date.now();
          for (var userID in game.players.data) {
            // draw cursors of all players in the game
            if (data.cursors[userID] && userID != getCookie("UserID") && !data.cursors[userID].v) {
              if (data.options.cursorToggle) {
                cursorLayer.clear();
                if (cursorTextLayer.children && cursorTextLayer.children.length) {
                  cursorTextLayer.removeChildren(true);
                }
                if (cursorMeasureLayer.children && cursorMeasureLayer.children.length) {
                  cursorMeasureLayer.removeChildren(true);
                }
              }
              else {
                var cursorData = data.cursors[userID];
                var name = game.players.data[userID].displayName || "[No Name]";
                var drawX = data.cursors[userID].x;
                var drawY = data.cursors[userID].y;
                var col = util.RGB_HEX(game.players.data[userID].color || "rgba(0,0,0,0.5)");


                var namePlate;
                if (!cursorTextLayer.children || !cursorTextLayer.children[i]) {
                  namePlate = new PIXI.Text(game.players.data[userID].displayName, new PIXI.TextStyle(boardApi.fonts.default));
                  cursorTextLayer.addChild(namePlate);
                }
                else {
                  namePlate = cursorTextLayer.children[i];
                }
                namePlate.visible = true;
                namePlate.lastX = drawX + 8;
                namePlate.lastY = drawY;
                if (namePlate.lastX != namePlate.x || namePlate.lastY != namePlate.y) {
                  if (!namePlate.force) {
                    namePlate.force = now;
                  }
                  var percentage = Math.min((namePlate.force-now)/delay, 0);
                  namePlate.x = drawX + 8 + (((drawX + 8) - namePlate.x) * percentage);
                  namePlate.y = drawY + ((drawY - namePlate.y) * percentage);
                }

                if (namePlate.force && (now-namePlate.force) > delay) {
                  namePlate.x = drawX + 8;
                  namePlate.y = drawY;
                  delete namePlate.force;
                }

                cursorLayer.lineStyle(2, col);
                cursorLayer.drawCircle(namePlate.x-8, namePlate.y, 4/zoom);
                namePlate.style.fontSize = Math.max(10, 10/zoom);
                namePlate.text = game.players.data[userID].displayName;
                var measurePlate;
                if (!cursorMeasureLayer.children || !cursorMeasureLayer.children[i]) {
                  measurePlate = new PIXI.Text(null, new PIXI.TextStyle(boardApi.fonts.default));
                  cursorMeasureLayer.addChild(measurePlate);
                }
                else {
                  measurePlate = cursorMeasureLayer.children[i];
                }
                measurePlate.visible = false;

                if (cursorData.mX && cursorData.mY) {
                  var finalX = drawX;
                  var finalY = drawY;
                  var cX = cursorData.mX;
                  var cY = cursorData.mY;

                  cursorLayer.lineStyle(2, col);
                  cursorLayer.moveTo(cX, cY);
                  cursorLayer.lineTo(finalX, finalY);

                  var a = finalX - cX;
                  var b = finalY - cY;
                  var dist = Math.sqrt(a*a + b*b);

                  var text;
                  if (cursorData.mL) {
                    var length = Math.round(Math.abs(Math.floor(dist * 10)/10) / (data.options.unitScale || 1) * 10)/10;
                    var height = Math.abs(data.layers[cursorData.l].alt || 0);
                    if (cursorData.mL != cursorData.l) {
                      height = (data.layers[cursorData.mL].alt || 0) - (data.layers[cursorData.l].alt || 0);
                      if (height > 0) {
                        height = "+" + height;
                      }
                      var hyp = Math.round(Math.sqrt(length*length+height*height)*10)/10;
                      text = (data.options.unit || "un") + " : " + hyp + " (ALT. "+height+")";
                    }
                    else {
                      var hyp = Math.round(Math.sqrt(length*length+height*height)*10)/10;
                      text = (data.options.unit || "un") + " : " + hyp;
                    }
                  }
                  else {
                    text = Math.round(Math.abs(Math.floor(dist * 10)/10) / (data.options.unitScale || 1) * 10)/10 + " " + (data.options.unit || "un");
                  }

                  var dirX = (Math.abs(finalX-cX)/(cX-finalX)) || 0;
                  var dirY = (Math.abs(finalY-cY)/(cY-finalY)) || 0;

                  measurePlate.visible = true;
                  measurePlate.x = finalX - (finalX - cX)/2;
                  measurePlate.y = finalY - (finalY - cY)/2 + 20;
                  measurePlate.text = text;
                  measurePlate.style.fontSize = Math.max(10, 10/zoom);
                }
                i++;
              }
            }
          }
        }

        if (boardCanvas.stage.showThreats || Object.keys(boardApi.selections).length == 1) {
          threatCont.clear();
          var max = 0;
          for (var selection in boardApi.selections) {
            var selection = boardApi.selections[selection];
            if (selection.board == obj.id()) {
              var pieceData = data.layers[selection.layer][selection.type][selection.index];
              if (pieceData) {
                var context = sync.defaultContext();
                if (pieceData.eID != null) {
                  var ent = getEnt(pieceData.eID);
                  if (ent && ent.data) {
                    context[ent.data._t] = duplicate(ent.data);
                  }
                }
                var range;
                if (pieceData.o) {
                  var sortedO = Object.keys(pieceData.o).sort(function(a,b){
                    return sync.eval(pieceData.o[b].dist, context)-sync.eval(pieceData.o[b].dist, context);
                  });
                  var gridSlots = {};
                  for (var idx in sortedO) {
                    var key = sortedO[idx];
                    var auraData = pieceData.o[sortedO[idx]];
                    var range = Math.min(boardApi.scale(sync.eval(auraData.d, context), obj, true), obj.data.w);

                    var color = util.RGB_HEX(auraData.c || pieceData.c);
                    var alpha = util.RGB_ALPHA(auraData.c || pieceData.c);
                    if (!auraData.c) {
                      alpha = 0.5;
                    }

                    if (auraData.s) {
                      if (hasGrid && !isHex && range >= data.gridW && pieceData.w == data.gridW && pieceData.h == data.gridH) {
                        var midX = Math.floor((pieceData.x + pieceData.w/2)/data.gridW)*data.gridW + data.gridX || 0;
                        var midY = Math.floor((pieceData.y + pieceData.h/2)/data.gridW)*data.gridW + data.gridY || 0;

                        // count down squares from the top, expanding out
                        var countRight = Math.ceil(range/data.gridW);
                        for (var x=countRight; x>=countRight*-1; x--) {
                          var countUp = Math.max(countRight-Math.abs(x));
                          for (var y=countUp; y>=countUp*-1; y--) {
                            var xPos = pieceData.x-x*(data.gridW);
                            var yPos = pieceData.y-y*(data.gridW);


                            var overlapX = false;
                            var overlapY = false;
                            if ((xPos + data.gridW) > pieceData.x && (xPos + data.gridW) <= (pieceData.x + pieceData.w)) {
                              overlapX = true
                            }
                            if ((yPos + data.gridH) > pieceData.y && (yPos + data.gridH) <= (pieceData.y + pieceData.h)) {
                              overlapY = true;
                            }
                            if (!overlapX || !overlapY) {
                              if (!gridSlots[x+","+y]) {
                                threatCont.lineStyle(0, color, alpha);
                                threatCont.beginFill(color, alpha);
                                threatCont.drawRect(xPos, yPos, data.gridW, data.gridH);
                                threatCont.endFill();
                              }
                              else {
                                threatCont.beginFill(color, alpha);
                                threatCont.drawRect(xPos + data.gridW/4, yPos + data.gridH/4, data.gridW/2, data.gridH/2);
                                threatCont.endFill();
                              }
                              gridSlots[x+","+y] = true;
                            }
                          }
                        }
                      }
                    }
                    else {
                      threatCont.lineStyle(3, color, 0.35);
                      threatCont.drawCircle(pieceData.x + pieceData.w/2, pieceData.y + pieceData.h/2, range);
                    }
                  }
                }
              }
            }
          }
        }
        else {
          threatCont.clear();
        }
      }
      else {
        threatCont.clear();
      }
      lastTick = Date.now();
    });

    var board = $(boardCanvas.view).appendTo(divRowWrapper);
    board.addClass("board-"+obj.id() + " board dropContent");
    board.attr("index", obj.id());
    board.attr("uid", app.attr("id"));
    board.attr("background", app.attr("background"));
    board.attr("layer", scope.layer);
    board.attr("local", scope.local);
    board.attr("hpMode", (obj.data.options && obj.data.options.hpMode)?(obj.data.options.hpMode):("0"));
    board.css("position", "absolute");
    board.css("left", "0");
    board.css("top", "0");
    if (hasRights) {
      board.on("dragover", function(ev) {
        ev.preventDefault();
        ev.stopPropagation();
        if (!$("#"+app.attr("id")+"-drag-overlay").length) {
          var olay = layout.overlay({
            target : app,
            id : app.attr("id")+"-drag-overlay",
            style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
          });
          olay.addClass("flexcolumn flexmiddle alttext");
          olay.css("font-size", "2em");
          olay.append("<b>Drop to Create</b>");
        }
      });
      board.on('drop', function(ev, ui){
        ev.preventDefault();
        ev.stopPropagation();
        var dt = ev.originalEvent.dataTransfer||$(ui.draggable).data("dt");
        var files = dt.files;
        var focal = boardCanvas.stage.toLocal({x : ev.originalEvent.pageX, y : ev.originalEvent.pageY});
        var xPos = focal.x;
        var yPos = focal.y;
        if (board.attr("draw-start-x") || board.attr("draw-start-y")) {return;}
        if (false) {//files.length) {
          for (var i=0; i<files.length; i++) {
            var file = files[i];
            var reader = new FileReader();
            reader.onload = function(e){
              // Should look like data:,<jibberish_data> based on which method you called
              var img = new Image();
              img.src = e.target.result;
              img.onload = function(){
                if (hasGrid) {
                  if (isHex) {
                    var xGrid = Math.floor((xPos - (data.gridX || 0))/(data.gridW * 0.75));
                    var yGrid;
                    xPos = (xGrid * data.gridW + (data.gridX || 0) - (xGrid * data.gridW + (data.gridX || 0))/4);
                    if (xGrid % 2) {
                      yGrid = Math.floor((yPos - (data.gridY || 0) - data.gridH/2)/data.gridH);
                      yPos = (yGrid * data.gridH + (data.gridY || 0) + data.gridH/2);
                    }
                    else {
                      yGrid = Math.floor((yPos - (data.gridY || 0))/data.gridH);
                      yPos = (yGrid * data.gridH + (data.gridY || 0));
                    }
                  }
                  else {
                    var xGrid = Math.floor((xPos - (data.gridX || 0))/data.gridW);
                    var yGrid = Math.floor((yPos - (data.gridY || 0))/data.gridH);
                    xPos = (xGrid * data.gridW + (data.gridX || 0));
                    yPos = (yGrid * data.gridH + (data.gridY || 0));
                  }
                }

                if (app.attr("background") == "true") {
                  data.sheets = data.sheets || [];
                  var push = -1;
                  for (var i in data.sheets) {
                    if (data.sheets[i].i == dt.getData("Text")) {
                      push = i;
                      break;
                    }
                  }
                  if (push == -1) {
                    push = data.sheets.length;
                    data.sheets.push({gW : this.naturalWidth, gH : this.naturalHeight, i : e.target.result, w : this.naturalWidth, h : this.naturalHeight, nW : this.naturalWidth, nH : this.naturalHeight, p : 0});
                  }
                  else {
                    data.sheets[push] = {gW : this.naturalWidth, gH : this.naturalHeight, i : e.target.result, w : this.naturalWidth, h : this.naturalHeight, nW : this.naturalWidth, nH : this.naturalHeight, p : 0};
                  }
                  data.layers[scope.layer].t.push({
                    x : xPos, y : yPos,
                    w : this.naturalWidth, h : this.naturalHeight,
                    s : push,
                    i : 0
                  });
                  sendAlert({text : "Tile Sheet Added"});
                }
                else {
                   data.layers[scope.layer].p.push({
                    x : xPos, y : yPos,
                    w : (data.pW || data.gridW || 64),
                    h : (data.pH || data.gridH || 64),
                    i : e.target.result
                  });
                  sendAlert({text : "Token Added"});
                }
                if (!scope.local) {
                  obj.sync("updateAsset");
                }
                else {
                  obj.update();
                }
                layout.coverlay(app.attr("id")+"-drag-overlay");
              }
              img.onerror = function(){
                sendAlert({text : "Error Occured"});
                layout.coverlay(app.attr("id")+"-drag-overlay");
              }
            };
            reader.onerror = function(){
              sendAlert({text : "Error Occured"});
              layout.coverlay(app.attr("id")+"-drag-overlay");
            }
            reader.readAsDataURL(files[i]);
          }
        }
        else if (_dragTransfer && _dragTransfer.type == "label") {
          var labelData = _dragTransfer.data;
          if (hasRights) {
            data.layers[scope.layer].d.push({
              x : xPos, y : yPos,
              c : labelData.pri, c2 : labelData.sec, c3 : labelData.box, p : labelData.padding, fontFamily : labelData.fontFamily, fontSize : labelData.fontSize, text : labelData.text,
              w : labelData.bold, t : "t", s : labelData.shadowBlur, sc : labelData.shadowColor, align : labelData.align
            });
            obj.sync("updateAsset");
          }
          else {
            runCommand("textPreviewAddDrawing", {id : obj.id(), layer : scope.layer, data : {
                x : xPos, y : yPos,
                c : labelData.pri, c2 : labelData.sec, c3 : labelData.box, p : labelData.padding, fontFamily : labelData.fontFamily, fontSize : labelData.fontSize, text : labelData.text,
                w : labelData.bold, t : "t", s : labelData.shadowBlur, sc : labelData.shadowColor
              },
            });
          }
          _dragTransfer = null;
        }
        else if (dt.getData("Text")) {
          var img = new Image();
          var url = dt.getData("Text");
          url = url.replace("http://localhost"+(getCookie("privatePort") || 30000), "");
          url = url.replace("http://127.0.0.1:"+(getCookie("privatePort") || 30000), "");
          img.src = url;
          img.onload = function(){
            if (hasGrid) {
              if (isHex) {
                var xGrid = Math.floor((xPos - (data.gridX || 0))/(data.gridW * 0.75));
                var yGrid;
                xPos = (xGrid * data.gridW + (data.gridX || 0) - (xGrid * data.gridW + (data.gridX || 0))/4);
                if (xGrid % 2) {
                  yGrid = Math.floor((yPos - (data.gridY || 0) - data.gridH/2)/data.gridH);
                  yPos = (yGrid * data.gridH + (data.gridY || 0) + data.gridH/2);
                }
                else {
                  yGrid = Math.floor((yPos - (data.gridY || 0))/data.gridH);
                  yPos = (yGrid * data.gridH + (data.gridY || 0));
                }
              }
              else {
                var xGrid = Math.floor((xPos - (data.gridX || 0))/data.gridW);
                var yGrid = Math.floor((yPos - (data.gridY || 0))/data.gridH);
                xPos = (xGrid * data.gridW + (data.gridX || 0));
                yPos = (yGrid * data.gridH + (data.gridY || 0));
              }
            }

            if (app.attr("background") == "true") {
              data.sheets = data.sheets || [];
              var push = -1;
              for (var i in data.sheets) {
                if (data.sheets[i].i == dt.getData("Text")) {
                  push = i;
                  break;
                }
              }
              if (push == -1) {
                push = data.sheets.length;
                data.sheets.push({gW : this.naturalWidth, gH : this.naturalHeight, i : img.src, w : this.naturalWidth, h : this.naturalHeight, nW : this.naturalWidth, nH : this.naturalHeight, p : 0});
              }
              else {
                data.sheets[push] = {gW : this.naturalWidth, gH : this.naturalHeight, i : img.src, w : this.naturalWidth, h : this.naturalHeight, nW : this.naturalWidth, nH : this.naturalHeight, p : 0};
              }
              data.layers[scope.layer].t.push({
                x : xPos, y : yPos,
                w : this.naturalWidth, h : this.naturalHeight,
                s : push,
                i : 0
              });
              sendAlert({text : "Tile Sheet Added"});
              if (!scope.local) {
                obj.sync("updateAsset");
              }
              else {
                obj.update();
              }
            }
            else {
              var newP = {
                 x : xPos, y : yPos,
                 w : (data.pW || data.gridW || 64),
                 h : (data.pH || data.gridH || 64),
                 i : url
               };
              boardApi.addObject(newP, scope.layer, "p", obj);
              sendAlert({text : "Token Added"});
            }
          }
        }
        else if (dt && dt.getData("OBJ")) {
          var ent = JSON.parse(dt.getData("OBJ"));
          if (ent._t != "i") {
            ent.tags = ent.tags || {};
            ent._flags = ent._flags || {};
            if (_down["17"]) {
              delete ent._flags["temp"];
            }
            else {
              ent._flags["temp"] = true;
            }

            if (ent._t == "b") {
              if (!game.config.data.offline) {
                runCommand("createBoard", ent);
              }
              else {
                game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
                game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
                game.entities.data["tempObj"+game.config.data.offline++].data = ent;
                game.entities.update();
              }
            }
            else if (ent._t == "c") {
              createCharacter(ent, true);
              game.entities.update();
            }
            else if (ent._t == "p") {
              if (!game.config.data.offline) {
                runCommand("createPage", ent);
              }
              else {
                game.entities.data["tempObj"+game.config.data.offline] = sync.obj("");
                game.entities.data["tempObj"+game.config.data.offline]._lid = "tempObj"+game.config.data.offline;
                game.entities.data["tempObj"+game.config.data.offline++].data = ent;
                game.entities.update();
              }
            }


            game.locals["newAssetList"] = game.locals["newAssetList"] || [];
            var lastKeys = Object.keys(game.entities.data);
            game.entities.listen["newAsset"] = function(rObj, newObj, target) {
              var change = true;
              var keyIndex;
              for (var key in game.entities.data) {
                if (!util.contains(lastKeys, key)) {
                  game.locals["newAssetList"].push(key);
                  keyIndex = key;
                  change = false;
                }
              }
              var ent = getEnt(keyIndex);
              if (ent && hasSecurity(userID, "Rights", ent.data)) {
                if (!_down["16"] && hasGrid) {
                  if (isHex) {
                    var xGrid = Math.floor((xPos - (data.gridX || 0))/(data.gridW * 0.75));
                    var yGrid;
                    xPos = (xGrid * data.gridW + (data.gridX || 0) - (xGrid * data.gridW + (data.gridX || 0))/4);
                    if (xGrid % 2) {
                      yGrid = Math.floor((yPos - (data.gridY || 0) - data.gridH/2)/data.gridH);
                      yPos = (yGrid * data.gridH + (data.gridY || 0) + data.gridH/2);
                    }
                    else {
                      yGrid = Math.floor((yPos - (data.gridY || 0))/data.gridH);
                      yPos = (yGrid * data.gridH + (data.gridY || 0));
                    }
                  }
                  else {
                    xPos = (data.gridX || 0) + (Math.floor((xPos-(data.gridX || 0))/data.gridW)) * data.gridW;
                    yPos = (data.gridY || 0) + (Math.floor((yPos-(data.gridY || 0))/data.gridH)) * data.gridH;
                  }
                }

                if (!_down["16"]) {
                  for (var index in data.layers[scope.layer].p) {
                    if (data.layers[scope.layer].p[index] && data.layers[scope.layer].p[index].eID == keyIndex) {
                      data.layers[scope.layer].p[index].x = xPos;
                      data.layers[scope.layer].p[index].y = yPos;
                      if (!scope.local) {
                        runCommand("boardMove", {id : obj.id(), index : index, layer : scope.layer, type : "p", data : data.layers[scope.layer].p[index]});
                        boardApi.moveObject(scope.layer, "p", index, obj);
                      }
                      else {
                        obj.update();
                      }
                      return;
                    }
                  }
                }
                var newP = {
                  x : xPos,
                  y : yPos,
                  w : (data.pW || data.gridW || 64),
                  h : (data.pH || data.gridH || 64),
                  d : (data.pD || null),
                  c : (data.pC || null),
                  eID : keyIndex,
                  i : (ent.data.info.img != null)?(ent.data.info.img.min):(null)
                };
                if (newP.eID) {
                  var ent = getEnt(newP.eID);
                  if (ent.data._t == "c") {
                    ent = duplicate(ent);
                    var context = sync.defaultContext();
                    context[ent.data._t] = ent.data;
                    for (var i in ent.data.info.img.modifiers) {
                      var val = ent.data.info.img.modifiers[i];
                      if (val) {
                        newP[i] = val;
                      }
                    }
                    if (ent.data.info.img.modifiers) {
                      if (ent.data.info.img.modifiers.w) {
                        newP.w = Math.max(newP.w/(data.options.unitScale || 1), data.gridW || 10);
                      }
                      if (ent.data.info.img.modifiers.h) {
                        newP.h = Math.max(newP.h/(data.options.unitScale || 1), data.gridH || 10);
                      }
                    }
                  }
                }
                if (hasSecurity(userID, "Rights", data)) {
                  boardApi.addObject(newP, scope.layer, "p", obj);
                }
                else {
                  //boardApi.addObject(newP, scope.layer, "p", obj);
                }
              }
              return change;
            }
          }
        }
        layout.coverlay(app.attr("id")+"-drag-overlay");
      });
      board.on("dragleave", function(ev) {
        ev.preventDefault();
        ev.stopPropagation();
        layout.coverlay(app.attr("id")+"-drag-overlay");
      });
    }
    board.sortable({
      over : function(ev, ui){
        if ($(ui.item).attr("index")) {
          if (!$("#"+app.attr("id")+"-drag-overlay").length) {
            var olay = layout.overlay({
              target : app,
              id : app.attr("id")+"-drag-overlay",
              style : {"pointer-events" : "none"}
            });
            olay.addClass("flexcolumn flexmiddle alttext focus");
            olay.css("font-size", "2em");
            olay.append("<b>Drop to Create</b>");
          }
        }
      },
      out : function(ev, ui) {
        layout.coverlay(app.attr("id")+"-drag-overlay");
      },
      update : function(ev, ui) {
        board.empty();
        if ($(ui.item).attr("src")) {
          if ($(ui.item).attr("src") == "state") {
            game.state.update(); // refresh the list
          }
          else if ($(ui.item).attr("src") == "players") {
            game.players.update(); // refresh the list
          }
          else {
            game.entities.data[$(ui.item).attr("src")].update(); // refresh the list
          }
        }
        else {
          game.entities.update(); // refresh the list
        }
        // create a piece if there is an entity reference
        var focal = boardCanvas.stage.toLocal({x : ev.pageX, y : ev.pageY});
        var xPos = focal.x;
        var yPos = focal.y;

        if ($(ui.item).hasClass("tile-drop-board-"+obj.id())) {
          if (!_down["16"] && hasGrid) {
            if (isHex) {
              var xGrid = Math.floor((xPos - (data.gridX || 0))/(data.gridW * 0.75));
              var yGrid = Math.floor((yPos - (data.gridY || 0))/data.gridH);
              xPos = (xGrid * data.gridW + (data.gridX || 0) - (xGrid * data.gridW + (data.gridX || 0))/4);
              if (xGrid % 2) {
                yPos = (yGrid * data.gridH + (data.gridY || 0) + data.gridH/2);
              }
              else {
                yPos = (yGrid * data.gridH + (data.gridY || 0));
              }
            }
            else {
              xPos = (data.gridX || 0) + (Math.floor((xPos-(data.gridX || 0))/data.gridW)) * data.gridW;
              yPos = (data.gridY || 0) + (Math.floor((yPos-(data.gridY || 0))/data.gridH)) * data.gridH;
            }
          }
          data.layers[scope.layer].t.push({
            x : xPos,
            y : yPos,
            w : (($(ui.item).attr("gridW") || 1) * (data.gridW || 64)),
            h : (($(ui.item).attr("gridH") || 1) * (data.gridH || 64)),
            gW : $(ui.item).attr("gridW"),
            gH : $(ui.item).attr("gridH"),
            i : $(ui.item).attr("tile"),
            s : $(ui.item).attr("sIndex"),
          });
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        }
        else if ($(ui.item).attr("index")) {
          var ent = getEnt($(ui.item).attr("index"));
          if (ent.data._t != "i") {
            if (ent && hasSecurity(userID, "Rights", ent.data)) {
              if (!_down["16"] && hasGrid) {
                if (isHex) {
                  var xGrid = Math.floor((xPos - (data.gridX || 0))/(data.gridW * 0.75));
                  var yGrid = Math.floor((yPos - (data.gridY || 0))/data.gridH);
                  xPos = (xGrid * data.gridW + (data.gridX || 0) - (xGrid * data.gridW + (data.gridX || 0))/4);
                  if (xGrid % 2) {
                    yPos = (yGrid * data.gridH + (data.gridY || 0) + data.gridH/2);
                  }
                  else {
                    yPos = (yGrid * data.gridH + (data.gridY || 0));
                  }
                }
                else {
                  xPos = (data.gridX || 0) + (Math.floor((xPos-(data.gridX || 0))/data.gridW)) * data.gridW;
                  yPos = (data.gridY || 0) + (Math.floor((yPos-(data.gridY || 0))/data.gridH)) * data.gridH;
                }
              }

              if (!_down["16"]) {
                for (var index in data.layers[scope.layer].p) {
                  if (data.layers[scope.layer].p[index] && data.layers[scope.layer].p[index].eID == $(ui.item).attr("index")) {
                    var oldData = data.layers[scope.layer].p[index];
                    data.layers[scope.layer].p[index].x = xPos;
                    data.layers[scope.layer].p[index].y = yPos;
                    if (!scope.local) {
                      runCommand("boardMove", {id : obj.id(), index : index, layer : scope.layer, type : "p", data : data.layers[scope.layer].p[index]});
                      boardApi.moveObject(scope.layer, "p", index, obj);
                    }
                    else {
                      obj.update();
                    }
                    return;
                  }
                }
              }
              var newP = {
                x : xPos,
                y : yPos,
                w : (data.pW || data.gridW || 64),
                h : (data.pH || data.gridH || 64),
                d : (data.pD || null),
                c : (data.pC || null),
                eID : $(ui.item).attr("index"),
                i : (ent.data.info.img != null)?(ent.data.info.img.min):(null)
              };
              if (newP.eID) {
                var ent = getEnt(newP.eID);
                if (ent.data._t == "c") {
                  ent = duplicate(ent);
                  var context = sync.defaultContext();
                  context[ent.data._t] = ent.data;

                  for (var i in ent.data.info.img.modifiers) {
                    var val = ent.data.info.img.modifiers[i];
                    if (val) {
                      newP[i] = val;
                    }
                  }
                  if (ent.data.info.img.modifiers) {
                    if (ent.data.info.img.modifiers.w) {
                      newP.w = Math.max(newP.w/(data.options.unitScale || 1), 10);
                    }
                    if (ent.data.info.img.modifiers.h) {
                      newP.h = Math.max(newP.h/(data.options.unitScale || 1), 10);
                    }
                  }
                }
              }
              if (hasSecurity(userID, "Rights", data)) {
                boardApi.addObject(newP, scope.layer, "p", obj);
              }
            }
          }
        }
        else if ($(ui.item).attr("cardSrc")) {
          if (!_down["16"] && hasGrid) {
            if (isHex) {
              var xGrid = Math.floor((xPos - (data.gridX || 0))/(data.gridW * 0.75));
              var yGrid = Math.floor((yPos - (data.gridY || 0))/data.gridH);
              xPos = (xGrid * data.gridW + (data.gridX || 0) - (xGrid * data.gridW + (data.gridX || 0))/4);
              if (xGrid % 2) {
                yPos = (yGrid * data.gridH + (data.gridY || 0) + data.gridH/2);
              }
              else {
                yPos = (yGrid * data.gridH + (data.gridY || 0));
              }
            }
            else {
              xPos = (data.gridX || 0) + (Math.floor((xPos-(data.gridX || 0))/data.gridW)) * data.gridW;
              yPos = (data.gridY || 0) + (Math.floor((yPos-(data.gridY || 0))/data.gridH)) * data.gridH;
            }
          }

          var value = $(ui.item).attr("cardSrc");
          var img = new Image();
          img.src = value;
          img.onload = function(){
            var aspect = this.naturalWidth/this.naturalHeight;

            var imageWidth = this.naturalWidth;
            var imageHeight = this.naturalHeight;
            var areaHeight = (data.pH || data.gridH || 64);
            var areaWidth = (data.pW || data.gridW || 64);

            if (aspect >= 1) { // landscape
              imageWidth = areaWidth;
              imageHeight = imageWidth / aspect;
              if (imageHeight > areaHeight) {
                imageHeight = areaHeight;
                imageWidth = areaHeight * aspect;
              }
            }
            else { // portrait
              imageHeight = areaHeight;
              imageWidth = imageHeight * aspect;
              if (imageWidth > areaWidth) {
                imageWidth = areaWidth;
                imageHeight = areaWidth / aspect;
              }
            }

            var newP = {
              x : xPos, y : yPos,
              w : imageWidth, h : imageHeight,
              i : value
            };
            boardApi.addObject(newP, scope.layer, "p", obj);
          }
        }
        ev.stopPropagation(); //don't go through boards
      }
    });
    if (!isChrome()) {
      board.bind('wheel', function(ev) {
        ev.preventDefault();
        layout.coverlay($(".piece-quick-edit"));
        if (ev.originalEvent.deltaY < 0) {
          if (_down[16]) {
            var selected = boardApi.selections;
            if (Object.keys(boardApi.selections) && Object.keys(boardApi.selections).length == 1) {
              var index = Object.keys(selected)[0];
              if (selected[index].type == "p" && selected[index].index != null) {
                var pieceData = obj.data.layers[selected[index].layer][selected[index].type][selected[index].index];
                var ent = getEnt(pieceData.eID);
                pieceData.r = (pieceData.r || 0) + 45;
                if (!scope.local) {
                  runCommand("boardMove", {id : obj.id(), layer : selected[index].layer, type : selected[index].type, index : selected[index].index, data : pieceData});
                  boardApi.moveObject(scope.layer, "p", index, obj);
                }
                selected[index].image.rotation = (pieceData.r || 0)/180 * (Math.PI);
                selected[index].selected.rotation = (pieceData.r || 0)/180 * (Math.PI);
              }
              else if (selected[index].type == "t" && selected[index].index != null) {
                var tileData = obj.data.layers[selected[index].layer][selected[index].type][selected[index].index];
                tileData.r = (tileData.r || 0) + 45;
                selected[index].image.rotation = (tileData.r || 0)/180 * (Math.PI);
                selected[index].selected.rotation = (tileData.r || 0)/180 * (Math.PI);
              }
            }
            else if (floatingTile) {
              floatingTile.r = (floatingTile.r || 0) + 45;
              if (floatingImage) {
                floatingImage.children[0].rotation = (floatingTile.r || 0)/180 * (Math.PI);
              }
            }
            else {
              boardCanvas.stage.x += (data.gridW || 50) * zoom;
            }
          }
          else {
            if (_down[17]) {
              boardCanvas.stage.y += (data.gridH || 50) * zoom;
            }
            else {
              if (!(board.attr("measure-x") || board.attr("measure-y"))) {
                var zoomRange = $("#"+app.attr("id")+"-zoom-range-"+obj.id());
                zoomRange.val(Number(zoomRange.val())+10);
                zoomRange.change();
              }
              else {
                for (var i=Number(board.attr("measure-layer") || 0); i<obj.data.layers.length; i++) {
                  if (board.attr("measure-layer") == null || obj.data.layers[board.attr("measure-layer")].alt != obj.data.layers[i].alt) {
                    if (hasRights || hasSecurity(userID, "Visible", obj.data.layers[i])) {
                      board.attr("measure-layer", i);
                      boardApi.measureMove(board, ev, obj, app, scope);
                      board.drawLayers();
                      break;
                    }
                  }
                }
              }
            }
          }
          return false;
        }
        else if (ev.originalEvent.deltaY > 0) {
          if (_down[16]) {
            var selected = boardApi.selections;
            if (Object.keys(selected) && Object.keys(selected).length == 1) {
              var index = Object.keys(selected)[0];
              if (selected[index].type == "p" && selected[index].index != null) {
                var pieceData = obj.data.layers[selected[index].layer][selected[index].type][selected[index].index];
                var ent = getEnt(pieceData.eID);
                pieceData.r = (pieceData.r || 0) - 45;
                if (!scope.local) {
                  runCommand("boardMove", {id : obj.id(), layer : selected[index].layer, type : selected[index].type, index : selected[index].index, data : pieceData});
                  boardApi.moveObject(scope.layer, "p", index, obj);
                }
                selected[index].image.rotation = (pieceData.r || 0)/180 * (Math.PI);
                selected[index].selected.rotation = (pieceData.r || 0)/180 * (Math.PI);
              }
              else if (selected[index].type == "t" && selected[index].index != null) {
                var tileData = obj.data.layers[selected[index].layer][selected[index].type][selected[index].index];
                tileData.r = (tileData.r || 0) - 45;
                selected[index].image.rotation = (tileData.r || 0)/180 * (Math.PI);
                selected[index].selected.rotation = (tileData.r || 0)/180 * (Math.PI);
              }
            }
            else if (floatingTile) {
              floatingTile.r = (floatingTile.r || 0) - 45;
              if (floatingImage) {
                floatingImage.children[0].rotation = (floatingTile.r || 0)/180 * (Math.PI);
              }
            }
            else {
              boardCanvas.stage.x -= (data.gridW || 50) * zoom;
            }
          }
          else {
            if (_down[17]) {
              boardCanvas.stage.y -= (data.gridH || 50) * zoom;
            }
            else {
              if (!(board.attr("measure-x") || board.attr("measure-y"))) {
                var zoomRange = $("#"+app.attr("id")+"-zoom-range-"+obj.id());
                zoomRange.val(Number(zoomRange.val())-10);
                zoomRange.change();
              }
              else {
                for (var i=Number(board.attr("measure-layer") || 0); i>=0; i--) {
                  if (board.attr("measure-layer") == null || obj.data.layers[board.attr("measure-layer")].alt != obj.data.layers[i].alt) {
                    if (hasRights || hasSecurity(userID, "Visible", obj.data.layers[i])) {
                      board.attr("measure-layer", i);
                      boardApi.measureMove(board, ev, obj, app, scope);
                      board.drawLayers();
                      break;
                    }
                  }
                }
              }
            }
          }
          return false;
        }
      });
    }
    board.bind('mousewheel', function(ev) {
      ev.preventDefault();
      layout.coverlay($(".piece-quick-edit"));
      if (ev.originalEvent.wheelDelta/120 > 0) {
        if (_down[16]) {
          var selected = boardApi.selections;
          if (Object.keys(boardApi.selections) && Object.keys(boardApi.selections).length == 1) {
            var index = Object.keys(selected)[0];
            if (selected[index].type == "p" && selected[index].index != null) {
              var pieceData = obj.data.layers[selected[index].layer][selected[index].type][selected[index].index];
              var ent = getEnt(pieceData.eID);
              pieceData.r = (pieceData.r || 0) + 45;
              if (!scope.local) {
                runCommand("boardMove", {id : obj.id(), layer : selected[index].layer, type : selected[index].type, index : selected[index].index, data : pieceData});
                boardApi.moveObject(scope.layer, "p", index, obj);
              }
              selected[index].image.rotation = (pieceData.r || 0)/180 * (Math.PI);
              selected[index].selected.rotation = (pieceData.r || 0)/180 * (Math.PI);
            }
            else if (selected[index].type == "t" && selected[index].index != null) {
              var tileData = obj.data.layers[selected[index].layer][selected[index].type][selected[index].index];
              tileData.r = (tileData.r || 0) + 45;
              selected[index].image.rotation = (tileData.r || 0)/180 * (Math.PI);
              selected[index].selected.rotation = (tileData.r || 0)/180 * (Math.PI);
            }
          }
          else if (floatingTile) {
            floatingTile.r = (floatingTile.r || 0) + 45;
            if (floatingImage) {
              floatingImage.children[0].rotation = (floatingTile.r || 0)/180 * (Math.PI);
            }
          }
          else {
            boardCanvas.stage.x += (data.gridW || 50) * zoom;
          }
        }
        else {
          if (_down[17]) {
            boardCanvas.stage.y += (data.gridH || 50) * zoom;
          }
          else {
            if (!(board.attr("measure-x") || board.attr("measure-y"))) {
              var zoomRange = $("#"+app.attr("id")+"-zoom-range-"+obj.id());
              zoomRange.val(Number(zoomRange.val())+10);
              zoomRange.change();
            }
            else {
              for (var i=Number(board.attr("measure-layer") || 0); i<obj.data.layers.length; i++) {
                if (board.attr("measure-layer") == null || obj.data.layers[board.attr("measure-layer")].alt != obj.data.layers[i].alt) {
                  if (hasRights || hasSecurity(userID, "Visible", obj.data.layers[i])) {
                    board.attr("measure-layer", i);
                    boardApi.measureMove(board, ev, obj, app, scope);
                    board.drawLayers();
                    break;
                  }
                }
              }
            }
          }
        }
        return false;
      }
      else if (ev.originalEvent.wheelDelta/120 < 0) {
        if (_down[16]) {
          var selected = boardApi.selections;
          if (Object.keys(selected) && Object.keys(selected).length == 1) {
            var index = Object.keys(selected)[0];
            if (selected[index].type == "p" && selected[index].index != null) {
              var pieceData = obj.data.layers[selected[index].layer][selected[index].type][selected[index].index];
              var ent = getEnt(pieceData.eID);
              pieceData.r = (pieceData.r || 0) - 45;
              if (!scope.local) {
                runCommand("boardMove", {id : obj.id(), layer : selected[index].layer, type : selected[index].type, index : selected[index].index, data : pieceData});
                boardApi.moveObject(scope.layer, "p", index, obj);
              }
              selected[index].image.rotation = (pieceData.r || 0)/180 * (Math.PI);
              selected[index].selected.rotation = (pieceData.r || 0)/180 * (Math.PI);
            }
            else if (selected[index].type == "t" && selected[index].index != null) {
              var tileData = obj.data.layers[selected[index].layer][selected[index].type][selected[index].index];
              tileData.r = (tileData.r || 0) - 45;
              selected[index].image.rotation = (tileData.r || 0)/180 * (Math.PI);
              selected[index].selected.rotation = (tileData.r || 0)/180 * (Math.PI);
            }
          }
          else if (floatingTile) {
            floatingTile.r = (floatingTile.r || 0) - 45;
            if (floatingImage) {
              floatingImage.children[0].rotation = (floatingTile.r || 0)/180 * (Math.PI);
            }
          }
          else {
            boardCanvas.stage.x -= (data.gridW || 50) * zoom;
          }
        }
        else {
          if (_down[17]) {
            boardCanvas.stage.y -= (data.gridH || 50) * zoom;
          }
          else {
            if (!(board.attr("measure-x") || board.attr("measure-y"))) {
              var zoomRange = $("#"+app.attr("id")+"-zoom-range-"+obj.id());
              zoomRange.val(Number(zoomRange.val())-10);
              zoomRange.change();
            }
            else {
              for (var i=Number(board.attr("measure-layer") || 0); i>=0; i--) {
                if (board.attr("measure-layer") == null || obj.data.layers[board.attr("measure-layer")].alt != obj.data.layers[i].alt) {
                  if (hasRights || hasSecurity(userID, "Visible", obj.data.layers[i])) {
                    board.attr("measure-layer", i);
                    boardApi.measureMove(board, ev, obj, app, scope);
                    board.drawLayers();
                    break;
                  }
                }
              }
            }
          }
        }
        return false;
      }
    });

    boardCanvas.stage.interactive = true;
    if (!layout.mobile) {
      board.mousedown(function(ev){
        window.getSelection().removeAllRanges();

        var localCoord = boardCanvas.stage.toLocal({x : ev.pageX, y : ev.pageY});
        var finalX = localCoord.x;
        var finalY = localCoord.y;
        var key = ev.keyCode || ev.which;
        $(".main-dock").css("pointer-events", "none");
        $(".boardMenu").css("pointer-events", "none");
        if (!boardApi.objectClick && key == 1) {
          if (!boardApi.dragging) {
            if (_down[17] && !(game.locals["drawing"] && game.locals["drawing"].data && game.locals["drawing"].data.drawing)) {
              boardApi.newDragEvent({
                startX : finalX,
                startY : finalY,
                measuring : true,
                move : function(ev){
                  var stage = boardApi.apps[app.attr("id")].stage;
                  var focal = stage.toLocal({x : ev.pageX, y : ev.pageY});

                  if (floatingImage) {
                    if (floatingImage._mode != "measure") {
                      (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                      floatingImage = new PIXI.Container();
                      floatingImage._mode = "measure";
                      floatingImage.addChild(new PIXI.Graphics());
                      floatingImage.addChild(new PIXI.Text());
                    }
                  }
                  else {
                    floatingImage = new PIXI.Container();
                    floatingImage._mode = "measure";

                    var textStyle = new PIXI.TextStyle({
                      fontFamily: "Arial",
                      fontWeight: "bold",
                      fill: "white",
                      stroke: 'black',
                      strokeThickness: 3,
                      dropShadow: true,
                      dropShadowColor: "rgba(0,0,0,0.2)",
                      dropShadowBlur: 2,
                      dropShadowAngle: 0,
                    });

                    floatingImage.addChild(new PIXI.Graphics());
                    floatingImage.addChild(new PIXI.Text("", textStyle));
                  }

                  var visual = floatingImage.children[0];
                  var textCanvas = floatingImage.children[1];

                  var sX = boardApi.dragging.startX;
                  var sY = boardApi.dragging.startY;

                  var eX = focal.x;
                  var eY = focal.y;

                  if (!_down[16] && hasGrid) {
                    if (isHex) {
                      var xGrid = Math.floor((sX - (data.gridX || 0))/(data.gridW * 0.75));
                      var yGrid;
                      sX = (xGrid * data.gridW + (data.gridX || 0) - (xGrid * data.gridW + (data.gridX || 0))/4) + data.gridW/2;
                      if (xGrid % 2) {
                        yGrid = Math.floor((sY - (data.gridY || 0) - data.gridH/2)/data.gridH);
                        sY = (yGrid * data.gridH + (data.gridY || 0) + data.gridH/2);
                      }
                      else {
                        yGrid = Math.floor((sY - (data.gridY || 0))/data.gridH);
                        sY = (yGrid * data.gridH + (data.gridY || 0));
                      }
                      sY += data.gridH/2;

                      var xGrid = Math.floor((eX - (data.gridX || 0))/(data.gridW * 0.75));
                      var yGrid;
                      eX = (xGrid * data.gridW + (data.gridX || 0) - (xGrid * data.gridW + (data.gridX || 0))/4) + data.gridW/2;
                      if (xGrid % 2) {
                        yGrid = Math.floor((eY - (data.gridY || 0) - data.gridH/2)/data.gridH);
                        eY = (yGrid * data.gridH + (data.gridY || 0) + data.gridH/2);
                      }
                      else {
                        yGrid = Math.floor((eY - (data.gridY || 0))/data.gridH);
                        eY = (yGrid * data.gridH + (data.gridY || 0));
                      }
                      eY += data.gridH/2;
                    }
                    else {
                      sX = Math.floor((sX-(data.gridX || 0))/data.gridW) * data.gridW + (data.gridX || 0) + data.gridW/2;
                      sY = Math.floor((sY-(data.gridY || 0))/data.gridH) * data.gridH + (data.gridY || 0) + data.gridH/2;
                      eX = Math.floor((eX-(data.gridX || 0))/data.gridW) * data.gridW + (data.gridX || 0) + data.gridW/2;
                      eY = Math.floor((eY-(data.gridY || 0))/data.gridH) * data.gridH + (data.gridY || 0) + data.gridH/2;
                    }
                  }

                  visual.clear();
                  visual.lineStyle(4, 0x000000, 1);
                  visual.drawCircle(sX, sY, 2, 2);
                  visual.moveTo(sX, sY);
                  visual.lineTo(eX, eY);

                  var a = sX-eX;
                  var b = sY-eY;

                  var startX = Math.floor((sX - (data.gridX || 0))/data.gridW);
                  var startY = Math.floor((sY - (data.gridY || 0))/data.gridH);

                  var endX = Math.floor((eX - (data.gridX || 0))/data.gridW);
                  var endY = Math.floor((eY - (data.gridY || 0))/data.gridH);

                  var slope = (startY - endY)/(startX - endX);
                  //trace the path
                  var mW = (Math.abs(eX-sX))*data.gridW;
                  var mH = (Math.abs(eY-sY))*data.gridH;
                  var measureSize = Math.max(mW, mH);

                  var offsetX = Math.min(startX, endX);
                  var offsetY = Math.min(startY, endY);

                  if (hasGrid && !isHex) {
                    var squares = 0;

                    // draw Squares
                    visual.beginFill(util.RGB_HEX("rgba(0,255,0,0.3)"), util.RGB_ALPHA("rgba(0,255,0,0.3)"));
                    visual.lineStyle(1, 0x000000, 1);
                    if (Math.abs(slope) < 1) {
                      var squares = 0;
                      var loopStart = startX;
                      var loopEnd = endX+1;
                      if (startX > endX) {
                        loopStart = endX;
                        loopEnd = startX+1;
                      }

                      for (var x=loopStart; x<loopEnd; x++) {
                        var y = startY + Math.floor((x - startX) * slope);

                        visual.drawRect((Math.min(startX,endX) + (x - offsetX)) * data.gridW + (data.gridX || 0), (Math.min(startY,endY) + (y - offsetY)) * data.gridH + (data.gridY || 0), data.gridW, data.gridH);

                        squares++;
                      }
                    }
                    else {
                      var squares = 0;
                      var loopStart = startY;
                      var loopEnd = endY+1;
                      if (startY > endY) {
                        loopStart = endY;
                        loopEnd = startY+1;
                      }
                      for (var y=loopStart; y<loopEnd; y++) {
                        var x = startX + Math.floor((y - startY) / slope);

                        visual.drawRect((Math.min(startX,endX) + (x - offsetX)) * data.gridW + (data.gridX || 0), (Math.min(startY,endY) + (y - offsetY)) * data.gridH + (data.gridY || 0), data.gridW, data.gridH);

                        squares++;
                      }
                      visual.endFill();
                    }

                    floatingImage.squares = squares-1;
                  }
                  var dist = Math.sqrt(a*a + b*b);
                  var text;
                  var location = {sq : floatingImage.squares, flat : Math.abs(dist)};
                  if (board.attr("measure-layer") || board.attr("alt-override")) {
                    var length = location.flat;
                    var height = Math.abs(obj.data.layers[scope.layer].alt || 0);
                    if (canvas.attr("measure-layer") != scope.layer || (canvas.attr("alt-override") && height != canvas.attr("alt-override"))) {
                      if (canvas.attr("alt-override")) {
                        height = Number(canvas.attr("alt-override"));
                      }
                      else {
                        height = (obj.data.layers[canvas.attr("measure-layer")].alt || 0);
                      }
                      height = height - (obj.data.layers[scope.layer].alt || 0);
                      var hyp = Math.sqrt(length*length+height*height);
                      location.dist = Math.round(hyp / (data.options.unitScale || 1) * 10) / 10;
                      location.alt = Math.round(height / (data.options.unitScale || 1) * 10) / 10;
                      location.flat = Math.round(location.flat / (data.options.unitScale || 1) * 10) / 10;
                      height = location.alt;
                      if (height > 0) {
                        height = "+" + height;
                      }
                      text = (data.options.unit || "un") + "" + location.dist + " (ALT. "+height+")";
                    }
                    else {
                      var hyp = Math.sqrt(length*length+height*height);
                      location.flat = Math.round(location.flat / (data.options.unitScale || 1) * 10) / 10;
                      location.dist = Math.round(hyp / (data.options.unitScale || 1) * 10) / 10;
                      text = (data.options.unit || "un") +" : " + location.dist;
                    }
                  }
                  else {
                    location.flat = Math.round(location.flat / (data.options.unitScale || 1) * 10) / 10;
                    location.dist = location.flat;
                    text = location.dist + "" + (data.options.unit || "un");
                  }

                  if (game.locals["actions"]) {
                    for (var i in game.locals["actions"]) {
                      var actObj = game.locals["actions"][i];
                      if (actObj.data && !actObj.data.manual) {
                        actObj.data.loc = location;
                        actObj.update();
                      }
                    }
                  }
                  if (game.locals["actionsList"]) {
                    for (var i in game.locals["actionsList"]) {
                      var actObj = game.locals["actionsList"][i];
                      if (actObj.data && !actObj.data.manual) {
                        actObj.data.loc = location;
                        actObj.update();
                      }
                    }
                  }
                  svd.location = location;
                  var textSquares = parseInt(boardApi.scale(floatingImage.squares * data.gridW, obj)) + "" + (data.options.unit || "un");
                  if (floatingImage.squares == null) {
                    textSquares = "";
                  }
                  else if (textSquares != text) {
                    text = textSquares + "\n(" + (text || "") + ")";
                  }
                  var dirX = (Math.abs(eX-sX)/(sX-eX)) || 0;
                  var dirY = (Math.abs(eY-sY)/(sY-eY)) || 0;

                  textCanvas.text = text;
                  textCanvas.pivot.x = textCanvas.width/2;
                  textCanvas.pivot.y = textCanvas.height/2;
                  textCanvas.x = eX + dirX * 20 + (textCanvas.width || 0) * (dirX/Math.abs(dirX) || 0);
                  textCanvas.y = eY + dirY * 20 + (textCanvas.height || 0) * (dirY/Math.abs(dirY) || 0);

                  stage.cursor = "none";
                  stage.addChild(floatingImage);
                  if (!scope.local) {
                    var update = {id : obj.id(), data : {
                      x : eX, y : eY, l : scope.layer, mX : sX, mY : sY,
                      v : (app.attr("hideCursor") == "true")}
                    };
                    if (time <= Date.now()) {
                      runCommand("updateBoardCursor", update);
                      time = Date.now() + 100;
                    }
                  }
                },
                end : function(ev) {
                  var stage = boardApi.apps[app.attr("id")].stage;
                  var focal = stage.toLocal({x : ev.pageX, y : ev.pageY});
                  (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                  floatingImage = null;
                  delete stage.cursor;
                  delete boardApi.dragging;
                }
              });
            }
            else {
              if (game.locals["drawing"] && game.locals["drawing"].data && game.locals["drawing"].data.drawing) {
                if (game.locals["drawing"].data.drawing == "free") {
                  var xPos = localCoord.x;
                  var yPos = localCoord.y;

                  var tempCanvas = $("<canvas>").appendTo(divRow);
                  tempCanvas.attr("width", divRow.width());
                  tempCanvas.attr("height", divRow.height());
                  tempCanvas.css("position", "absolute");
                  tempCanvas.css("left", 0);
                  tempCanvas.css("top", 0);
                  tempCanvas.css("pointer-events", "none");
                  var ctx = tempCanvas[0].getContext('2d');
                  ctx.beginPath();
                  ctx.lineWidth = game.locals["drawing"].data.lineSize || 12;
                  ctx.strokeStyle = game.locals["drawing"].data.primary;
                  ctx.lineCap = 'round';

                  var ppts = [];
                  ppts.push({x : ev.pageX, y : ev.pageY});
                  var minX = xPos;
                  var minY = yPos;
                  var maxX = xPos;
                  var maxY = yPos;

                  boardApi.newDragEvent({
                    startX : xPos,
                    startY : yPos,
                    lastX : ev.pageX,
                    lastY : ev.pageY,
                    move : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});
                      ctx.lineWidth = game.locals["drawing"].data.lineSize || 6;
                      ctx.strokeStyle = game.locals["drawing"].data.primary;
                      ctx.lineCap = 'round';
                      if (Math.floor(boardApi.dragging.lastX) != Math.floor(ev.pageX) || Math.floor(boardApi.dragging.lastY) != Math.floor(ev.pageY)) {
                        ppts.push({x : ev.pageX, y : ev.pageY});

                        ctx.clearRect(0, 0, tempCanvas.width(), tempCanvas.height());

                        ctx.beginPath();
                    		ctx.moveTo(ppts[0].x, ppts[0].y);

                    		for (var i = 1; i < ppts.length - 2; i++) {
                    			var c = (ppts[i].x + ppts[i + 1].x) / 2;
                    			var d = (ppts[i].y + ppts[i + 1].y) / 2;

                    			ctx.quadraticCurveTo(ppts[i].x, ppts[i].y, c, d);
                    		}

                        ctx.quadraticCurveTo(
                    			ppts[i].x,
                    			ppts[i].y,
                    			ppts[i + 1].x,
                    			ppts[i + 1].y
                    		);
                    		ctx.stroke();
                        boardApi.dragging.lastX = ev.pageX;
                        boardApi.dragging.lastY = ev.pageY;

                        minX = Math.min(end.x, minX);
                        minY = Math.min(end.y, minY);
                        maxX = Math.max(end.x, maxX);
                        maxY = Math.max(end.y, maxY);
                      }
                    },
                    end : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});
                      var key = ev.keyCode || ev.which;

                      util.trimCanvas(ctx);

                      var x1 = boardApi.dragging.startX;
                      var y1 = boardApi.dragging.startY;
                      var x2 = end.x;
                      var y2 = end.y;

                      boardApi.addObject({
                        x : minX,
                        y : minY,
                        w : Math.max(maxX-minX, 5),
                        h : Math.max(maxY-minY, 5),
                        i : tempCanvas[0].toDataURL(),
                        c1 : game.locals["drawing"].data.primary || "rgba(50,50,50,1)",
                        c2 : game.locals["drawing"].data.secondary || "rgba(255,255,255,0)",
                        drawing : "free",
                        uID : getCookie("UserID")
                      }, scope.layer, "d", obj);

                      delete boardApi.dragging;
                      tempCanvas.remove();
                    }
                  }, ev);
                }
                if (game.locals["drawing"].data.drawing == "line") {
                  var xPos = localCoord.x;
                  var yPos = localCoord.y;

                  if (!_down[16] && hasGrid) {
                    if (game.locals["drawing"].data.fog && game.locals["drawing"].data.gridInc) {
                      var gridInc = game.locals["drawing"].data.gridInc;
                      xPos = Math.round((localCoord.x-(data.gridX || 0)) / gridInc) * gridInc + (data.gridX || 0);
                      yPos = Math.round((localCoord.y-(data.gridY || 0)) / gridInc) * gridInc + (data.gridY || 0);
                    }
                    else {
                      xPos = Math.round((localCoord.x-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0);
                      yPos = Math.round((localCoord.y-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0);
                    }
                  }
                  if (boardApi.startX) {
                    xPos = boardApi.startX;
                    delete boardApi.startX;
                  }
                  if (boardApi.startY) {
                    yPos = boardApi.startY;
                    delete boardApi.startY;
                  }
                  boardApi.newDragEvent({
                    startX : xPos,
                    startY : yPos,
                    move : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});

                      if (floatingImage) {
                        if (floatingImage._mode != "line") {
                          (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                          floatingImage = new PIXI.Graphics();
                          floatingImage._mode = "line";

                          stage.addChild(floatingImage);
                        }
                      }
                      else {
                        floatingImage = new PIXI.Graphics();
                        floatingImage._mode = "line";
                        stage.addChild(floatingImage);
                      }
                      floatingImage.clear();
                      floatingImage.lineStyle(3, util.RGB_HEX(game.locals["drawing"].data.primary || "rgba(50,50,50,1)"), util.RGB_ALPHA(game.locals["drawing"].data.primary || "rgba(50,50,50,1)"));
                      if (game.locals["drawing"].data.fog) {
                        floatingImage.lineStyle(3, 0x000000);
                      }
                      else {
                        floatingImage.lineStyle(3, util.RGB_HEX(game.locals["drawing"].data.primary || "rgba(50,50,50,1)"), util.RGB_ALPHA(game.locals["drawing"].data.primary || "rgba(50,50,50,1)"));
                      }
                      floatingImage.moveTo(boardApi.dragging.startX, boardApi.dragging.startY);
                      if (!_down[16] && hasGrid) {
                        var xPos;
                        var yPos;
                        if (game.locals["drawing"].data.fog && game.locals["drawing"].data.gridInc) {
                          var gridInc = game.locals["drawing"].data.gridInc;
                          xPos = Math.round((end.x-(data.gridX || 0)) / gridInc) * gridInc + (data.gridX || 0);
                          yPos = Math.round((end.y-(data.gridY || 0)) / gridInc) * gridInc + (data.gridY || 0);
                        }
                        else {
                          xPos = Math.round((end.x-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0);
                          yPos = Math.round((end.y-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0);
                        }

                        floatingImage.lineTo(xPos, yPos);
                      }
                      else {
                        floatingImage.lineTo(end.x, end.y);
                      }
                      floatingImage.alpha = 1;
                    },
                    end : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});
                      var key = ev.keyCode || ev.which;
                      if (key != 1) {
                        (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                        floatingImage = null;
                        delete boardApi.dragging;
                        return;
                      }

                      var x1 = boardApi.dragging.startX;
                      var y1 = boardApi.dragging.startY;
                      var x2 = end.x;
                      var y2 = end.y;

                      if (!_down[16] && hasGrid) {
                        if (game.locals["drawing"].data.fog && game.locals["drawing"].data.gridInc) {
                          var gridInc = game.locals["drawing"].data.gridInc;
                          x1 = Math.round((x1-(data.gridX || 0)) / gridInc) * gridInc + (data.gridX || 0);
                          y1 = Math.round((y1-(data.gridY || 0)) / gridInc) * gridInc + (data.gridY || 0);
                          x2 = Math.round((x2-(data.gridX || 0)) / gridInc) * gridInc + (data.gridX || 0);
                          y2 = Math.round((y2-(data.gridY || 0)) / gridInc) * gridInc + (data.gridY || 0);
                        }
                        else {
                          x1 = Math.round((x1-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0);
                          y1 = Math.round((y1-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0);
                          x2 = Math.round((x2-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0);
                          y2 = Math.round((y2-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0);
                        }
                      }

                      var minX = Math.min(x1, x2);
                      var minY = Math.min(y1, y2);
                      var maxX = Math.max(x1, x2);
                      var maxY = Math.max(y1, y2);
                      var key = ev.keyCode || ev.which;
                      if (game.locals["drawing"].data.fog) {
                        if (x1 != x2 || y1 != y2) {
                          boardApi.addObject({
                            x1 : x1,
                            y1 : y1,
                            x2 : x2,
                            y2 : y2,
                          }, scope.layer, "w", obj);
                        }
                      }
                      else {
                        boardApi.addObject({
                          x : minX,
                          y : minY,
                          w : Math.max(maxX-minX, 1),
                          h : Math.max(maxY-minY, 1),
                          x1 : x1-minX,
                          y1 : y1-minY,
                          x2 : x2-minX,
                          y2 : y2-minY,
                          c1 : game.locals["drawing"].data.primary || "rgba(50,50,50,1)",
                          c2 : game.locals["drawing"].data.secondary || "rgba(255,255,255,0)",
                          drawing : "line",
                          uID : getCookie("UserID")
                        }, scope.layer, "d", obj);
                      }

                      if (!_down[17]) {
                        (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                        floatingImage = null;
                        delete boardApi.dragging;
                      }
                      else {
                        boardApi.dragging.startX = end.x;
                        boardApi.dragging.startY = end.y;
                      }
                    }
                  }, ev);
                }
                else if (game.locals["drawing"].data.drawing == "scale") {
                  var xPos = localCoord.x;
                  var yPos = localCoord.y;
                  if (!_down[16] && hasGrid) {
                    xPos = Math.round((localCoord.x-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0);
                    yPos = Math.round((localCoord.y-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0);
                  }

                  boardApi.newDragEvent({
                    startX : xPos,
                    startY : yPos,
                    move : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});

                      if (floatingImage) {
                        if (floatingImage._mode != "scale") {
                          (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                          floatingImage = new PIXI.Graphics();
                          floatingImage._mode = "scale";

                          stage.addChild(floatingImage);
                        }
                      }
                      else {
                        floatingImage = new PIXI.Graphics();
                        floatingImage._mode = "scale";
                        stage.addChild(floatingImage);
                      }
                      floatingImage.clear();
                      floatingImage.lineStyle(2, 0xFF8a42);

                      if (!_down[16] && hasGrid) {
                        var xPos = Math.round((end.x-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0);
                        var yPos = Math.round((end.y-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0);
                        floatingImage.moveTo(boardApi.dragging.startX, boardApi.dragging.startY-6);
                        floatingImage.lineTo(boardApi.dragging.startX, boardApi.dragging.startY+6);
                        floatingImage.moveTo(boardApi.dragging.startX, boardApi.dragging.startY);
                        floatingImage.lineTo(xPos, yPos);
                        floatingImage.moveTo(xPos, yPos-6);
                        floatingImage.lineTo(xPos, yPos+6);
                      }
                      else {
                        floatingImage.moveTo(boardApi.dragging.startX, boardApi.dragging.startY-6);
                        floatingImage.lineTo(boardApi.dragging.startX, boardApi.dragging.startY+6);

                        floatingImage.moveTo(boardApi.dragging.startX, boardApi.dragging.startY);
                        floatingImage.lineTo(end.x, end.y);

                        floatingImage.moveTo(end.x, end.y-6);
                        floatingImage.lineTo(end.x, end.y+6);
                      }
                      floatingImage.alpha = 1;
                    },
                    end : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});
                      var key = ev.keyCode || ev.which;
                      if (key != 1) {
                        (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                        floatingImage = null;
                        delete boardApi.dragging;
                        return;
                      }

                      var x1 = boardApi.dragging.startX;
                      var y1 = boardApi.dragging.startY;
                      var x2 = end.x;
                      var y2 = end.y;

                      if (!_down[16] && hasGrid) {
                        x1 = Math.round((x1-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0);
                        y1 = Math.round((y1-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0);
                        x2 = Math.round((x2-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0);
                        y2 = Math.round((y2-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0);
                      }

                      var minX = Math.min(x1, x2);
                      var minY = Math.min(y1, y2);
                      var maxX = Math.max(x1, x2);
                      var maxY = Math.max(y1, y2);

                      /*boardApi.addObject({
                        x : minX,
                        y : minY,
                        w : maxX-minX,
                        h : maxY-minY,
                        x1 : x1-minX,
                        y1 : y1-minY,
                        x2 : x2-minX,
                        y2 : y2-minY,
                        c1 : game.locals["drawing"].data.primary || "rgba(255,255,255,0)",
                        c2 : game.locals["drawing"].data.secondary || "rgba(255,255,255,0)",
                        drawing : "line",
                        uID : getCookie("UserID")
                      }, scope.layer, "d", obj);*/

                      var dist = util.dist(minX, maxX, minY, maxY);
                      obj.data.options.unit = game.locals["drawing"].data.scaleUnit || obj.data.options.unit;
                      obj.data.options.unitScale = Math.round(dist/game.locals["drawing"].data.scaleSize*100)/100

                      delete game.locals["drawing"].data.drawing;
                      delete game.locals["drawing"].data.scaleSize;
                      delete game.locals["drawing"].data.scaleUnit;
                      game.locals["drawing"].data.target = app.attr("id");
                      game.locals["drawing"].update();

                      sendAlert({text : "Map has been scaled!"})
                      obj.sync("updateAsset");

                      (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                      floatingImage = null;
                      delete boardApi.dragging;
                    }
                  }, ev);
                }
                else if (game.locals["drawing"].data.drawing == "circle") {
                  var xPos = localCoord.x;
                  var yPos = localCoord.y;
                  if (!_down[16] && hasGrid) {
                    xPos = Math.floor((localCoord.x-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0);
                    yPos = Math.floor((localCoord.y-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0);
                  }

                  boardApi.newDragEvent({
                    startX : xPos,
                    startY : yPos,
                    move : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});

                      if (floatingImage) {
                        if (floatingImage._mode != "circle") {
                          (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                          floatingImage = new PIXI.Graphics();
                          floatingImage._mode = "circle";

                          stage.addChild(floatingImage);
                        }
                      }
                      else {
                        floatingImage = new PIXI.Graphics();
                        floatingImage._mode = "circle";
                        stage.addChild(floatingImage);
                      }

                      var x1 = boardApi.dragging.startX;
                      var y1 = boardApi.dragging.startY;
                      var x2 = end.x;
                      var y2 = end.y;
                      var radius = Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
                      if (!_down[16] && hasGrid) {
                        x1 = Math.floor((x1-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0) + data.gridW/2;
                        y1 = Math.floor((y1-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0) + data.gridH/2;
                        radius = Math.floor(Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)) / data.gridW) * data.gridW + data.gridW/2;
                      }

                      floatingImage.clear();
                      floatingImage.beginFill(util.RGB_HEX(game.locals["drawing"].data.primary), util.RGB_ALPHA(game.locals["drawing"].data.primary));
                      floatingImage.lineStyle(3, util.RGB_HEX(game.locals["drawing"].data.secondary || "rgba(0,0,0,0.4)"), util.RGB_ALPHA(game.locals["drawing"].data.secondary || "rgba(0,0,0,0.4)"));
                      floatingImage.drawCircle(x1,y1,radius);
                      floatingImage.endFill();
                      floatingImage.alpha = 0.5;
                    },
                    end : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});
                      var key = ev.keyCode || ev.which;
                      if (key != 1) {
                        (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                        floatingImage = null;
                        delete boardApi.dragging;
                        return;
                      }

                      var x1 = boardApi.dragging.startX;
                      var y1 = boardApi.dragging.startY;
                      var x2 = end.x;
                      var y2 = end.y;

                      var radius = Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));

                      if (!_down[16] && hasGrid) {
                        x1 = Math.floor((x1-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0) + data.gridW/2;
                        y1 = Math.floor((y1-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0) + data.gridH/2;
                        radius = Math.floor(Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)) / data.gridW) * data.gridW + data.gridW/2;
                      }

                      boardApi.addObject({
                        x : x1 - radius,
                        y : y1 - radius,
                        w : radius * 2,
                        h : radius * 2,
                        radius : radius,
                        c1 : game.locals["drawing"].data.primary || "rgba(255,255,255,0)",
                        c2 : game.locals["drawing"].data.secondary || "rgba(0,0,0,0.4)",
                        drawing : "circle",
                        uID : getCookie("UserID")
                      }, scope.layer, "d", obj);

                      if (!_down[17]) {
                        (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                        floatingImage = null;
                        delete boardApi.dragging;
                      }
                      else {
                        boardApi.dragging.startX = end.x;
                        boardApi.dragging.startY = end.y;
                      }
                    }
                  }, ev);
                }
                else if (game.locals["drawing"].data.drawing == "region") {
                  var regions = [];
                  var xPos = localCoord.x;
                  var yPos = localCoord.y;
                  if (!_down[16] && hasGrid) {
                    xPos = Math.round((localCoord.x-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0);
                    yPos = Math.round((localCoord.y-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0);
                  }
                  regions.push({x : xPos, y : yPos});

                  boardApi.newDragEvent({
                    startX : xPos,
                    startY : yPos,
                    regions : regions,
                    move : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});
                      var regions = boardApi.dragging.regions;
                      if (floatingImage) {
                        if (floatingImage._mode != "region") {
                          (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                          floatingImage = new PIXI.Graphics();
                          floatingImage._mode = "region";

                          stage.addChild(floatingImage);
                        }
                      }
                      else {
                        floatingImage = new PIXI.Graphics();
                        floatingImage._mode = "region";
                        stage.addChild(floatingImage);
                      }
                      floatingImage.clear();
                      floatingImage.lineStyle(3, util.RGB_HEX(game.locals["drawing"].data.primary), util.RGB_ALPHA(game.locals["drawing"].data.primary));
                      floatingImage.moveTo(regions[0].x, regions[0].y);
                      for (var i=1; i<regions.length; i++) {
                        floatingImage.lineTo(regions[i].x, regions[i].y);
                      }
                      floatingImage.lineStyle(3, util.RGB_HEX(game.locals["drawing"].data.primary), util.RGB_ALPHA(game.locals["drawing"].data.primary) * 0.5);
                      if (!_down[16] && hasGrid) {
                        var xPos = Math.round((end.x-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0);
                        var yPos = Math.round((end.y-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0);
                        floatingImage.lineTo(xPos, yPos);
                      }
                      else {
                        floatingImage.lineTo(end.x, end.y);
                      }
                      floatingImage.alpha = 1;
                    },
                    end : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});
                      var startX = boardApi.dragging.startX;
                      var startY = boardApi.dragging.startY;
                      var key = ev.keyCode || ev.which;
                      if (key != 1) {
                        (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                        floatingImage = null;
                        delete boardApi.dragging;
                        return;
                      }

                      if (!_down[16] && hasGrid) {
                        end.x = Math.round((end.x-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0);
                        end.y = Math.round((end.y-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0);
                      }

                      var dist = Math.sqrt((end.x-startX)*(end.x-startX)+(end.y-startY)*(end.y-startY));
                      if (dist < 5) {
                        // add drawing
                        var minX = Number.POSITIVE_INFINITY;
                        var minY = Number.POSITIVE_INFINITY;
                        var maxX = Number.NEGATIVE_INFINITY;
                        var maxY = Number.NEGATIVE_INFINITY;

                        for (var i in boardApi.dragging.regions) {
                          var regionData = boardApi.dragging.regions[i];
                          if (regionData.x < minX) {
                            minX = regionData.x;
                          }
                          if (regionData.x > maxX) {
                            maxX = regionData.x;
                          }
                          if (regionData.y < minY) {
                            minY = regionData.y;
                          }
                          if (regionData.y > maxY) {
                            maxY = regionData.y;
                          }
                        }
                        boardApi.addObject({
                          regions : boardApi.dragging.regions,
                          x : minX, y : minY,
                          w : maxX-minX, h : maxY-minY,
                          c1 : game.locals["drawing"].data.primary || "rgba(255,255,255,0)",
                          c2 : game.locals["drawing"].data.secondary || "rgba(255,255,255,0)",
                          drawing : "region",
                          uID : getCookie("UserID")
                        }, scope.layer, "d", obj);
                        (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                        floatingImage = null;
                        delete boardApi.dragging;
                      }
                      else {
                        if (!_down[16] && hasGrid) {
                          end.x = Math.round((end.x-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0);
                          end.y = Math.round((end.y-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0);
                          boardApi.dragging.regions.push({x : end.x, y : end.y});
                        }
                        else {
                          boardApi.dragging.regions.push({x : end.x, y : end.y});
                        }
                      }
                    }
                  }, ev);
                }
                else if (game.locals["drawing"].data.drawing == "grid") {
                  boardApi.newDragEvent({
                    startX : localCoord.x,
                    startY : localCoord.y,
                    move : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});

                      if (floatingImage) {
                        if (floatingImage._mode != "grid") {
                          (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                          floatingImage = new PIXI.Graphics();
                          floatingImage._mode = "grid";

                          stage.addChild(floatingImage);
                        }
                      }
                      else {
                        floatingImage = new PIXI.Graphics();
                        floatingImage._mode = "box";
                        stage.addChild(floatingImage);
                      }

                      var xPos = Math.min(boardApi.dragging.startX, end.x);
                      var yPos = Math.min(boardApi.dragging.startY, end.y);
                      var width = Math.abs(end.x-boardApi.dragging.startX);
                      var height = Math.abs(end.y-boardApi.dragging.startY);

                      floatingImage.clear();
                      floatingImage.x = xPos;
                      floatingImage.y = yPos;
                      floatingImage.lineStyle(1/zoom, 0xFF8a42);
                      floatingImage.drawRect(0, 0, width, height);
                    },
                    end : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});
                      var key = ev.keyCode || ev.which;
                      if (key != 1) {
                        (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                        floatingImage = null;
                        delete boardApi.dragging;
                        return;
                      }

                      var lastGrid = data.gridW;

                      var xPos = Math.min(boardApi.dragging.startX, end.x);
                      var yPos = Math.min(boardApi.dragging.startY, end.y);
                      var width = Math.abs(end.x-boardApi.dragging.startX);
                      var height = Math.abs(end.y-boardApi.dragging.startY);

                      var gridd = Math.min(width, height);

                      if (data.gridW && Math.abs(data.gridW-width) < 2) {
                        data.gridW = Math.min(width, height);
                        data.gridH = Math.min(width, height);
                      }
                      else {
                        width = Math.ceil(width, 10);
                        height = Math.ceil(height, 10);
                        data.gridW = Math.min(width, height);
                        data.gridH = Math.min(width, height);
                      }

                      data.gridX = xPos % data.gridW;
                      data.gridY = yPos % data.gridH;

                      var gridScale = lastGrid/data.gridW;
                      if (lastGrid && obj.data.gridW && obj.data.options && obj.data.options.unitScale) {
                        obj.data.options.unitScale = obj.data.options.unitScale * gridScale;
                      }

                      if (!scope.local) {
                        obj.sync("updateAsset");
                      }
                      else {
                        obj.update();
                      }

                      (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                      floatingImage = null;
                      delete boardApi.dragging;
                    }
                  }, ev);
                }
                else if (game.locals["drawing"].data.drawing == "shiftg") { // grid shift
                  var offset = drawnGrid.toLocal({x : ev.pageX, y : ev.pageY});
                  boardApi.newDragEvent({
                    offsetX : offset.x,
                    offsetY : offset.y,
                    move : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});

                      if (floatingImage) {
                        (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                        floatingImage = null;
                      }

                      var xPos = Math.round((end.x-boardApi.dragging.offsetX)*10)/10;
                      var yPos = Math.round((end.y-boardApi.dragging.offsetY)*10)/10;

                      drawnGrid.x = xPos;
                      drawnGrid.y = yPos;
                    },
                    end : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});
                      var key = ev.keyCode || ev.which;
                      if (key != 1) {
                        (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                        floatingImage = null;
                        delete boardApi.dragging;
                        return;
                      }

                      var xPos = Math.round((end.x-boardApi.dragging.offsetX)*10)/10 + data.gridX;
                      var yPos = Math.round((end.y-boardApi.dragging.offsetY)*10)/10 + data.gridY;

                      data.gridX = Math.min(xPos, data.gridW-xPos) % data.gridW;
                      data.gridY = Math.min(yPos, data.gridH-yPos) % data.gridH;

                      if (!scope.local) {
                        obj.sync("updateAsset");
                      }
                      else {
                        obj.update();
                      }

                      (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                      floatingImage = null;
                      delete boardApi.dragging;
                    }
                  }, ev);
                }
                else if (game.locals["drawing"].data.drawing == "box") {
                  boardApi.newDragEvent({
                    startX : localCoord.x,
                    startY : localCoord.y,
                    move : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});

                      if (floatingImage) {
                        if (floatingImage._mode != "box") {
                          (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                          floatingImage = new PIXI.Graphics();
                          floatingImage._mode = "box";

                          stage.addChild(floatingImage);
                        }
                      }
                      else {
                        floatingImage = new PIXI.Graphics();
                        floatingImage._mode = "box";
                        stage.addChild(floatingImage);
                      }

                      var xPos = Math.min(boardApi.dragging.startX, end.x);
                      var yPos = Math.min(boardApi.dragging.startY, end.y);
                      var width = Math.abs(end.x-boardApi.dragging.startX);
                      var height = Math.abs(end.y-boardApi.dragging.startY);

                      if (!_down[16]) {
                        xPos = Math.floor((xPos-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0);
                        yPos = Math.floor((yPos-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0);
                        width = (Math.ceil(((Math.max(boardApi.dragging.startX, end.x)-xPos)-(data.gridX || 0)) / data.gridW)) * data.gridW;
                        height = (Math.ceil(((Math.max(boardApi.dragging.startY, end.y)-yPos)-(data.gridY || 0)) / data.gridH)) * data.gridH;
                      }

                      floatingImage.clear();
                      floatingImage.x = xPos;
                      floatingImage.y = yPos;
                      if (!game.locals["drawing"].data.fog) {
                        floatingImage.beginFill(util.RGB_HEX(game.locals["drawing"].data.primary), util.RGB_ALPHA(game.locals["drawing"].data.primary));
                        if (game.locals["drawing"].data.secondary) {
                          floatingImage.lineStyle(1, util.RGB_HEX(game.locals["drawing"].data.secondary), util.RGB_ALPHA(game.locals["drawing"].data.secondary));
                        }
                        floatingImage.drawRect(0, 0, width, height);
                        floatingImage.endFill();
                      }
                      else {
                        floatingImage.beginFill(util.RGB_HEX("rgba(255,255,255,0.5)"), util.RGB_ALPHA("rgba(255,255,255,0.5)"));
                        floatingImage.lineStyle(1, util.RGB_HEX("rgba(255,255,255,0.5)"), util.RGB_ALPHA("rgba(255,255,255,0.5)"));
                        floatingImage.drawRect(0, 0, width, height);
                        floatingImage.endFill();
                      }
                      floatingImage.alpha = 0.5;
                    },
                    end : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});
                      var key = ev.keyCode || ev.which;
                      if (key != 1) {
                        (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                        floatingImage = null;
                        delete boardApi.dragging;
                        return;
                      }

                      var xPos = Math.min(boardApi.dragging.startX, end.x);
                      var yPos = Math.min(boardApi.dragging.startY, end.y);
                      var width = Math.abs(end.x-boardApi.dragging.startX);
                      var height = Math.abs(end.y-boardApi.dragging.startY);

                      if (!_down[16] && hasGrid) {
                        xPos = Math.floor((xPos-(data.gridX || 0)) / data.gridW) * data.gridW + (data.gridX || 0);
                        yPos = Math.floor((yPos-(data.gridY || 0)) / data.gridH) * data.gridH + (data.gridY || 0);
                        width = (Math.ceil(((Math.max(boardApi.dragging.startX, end.x)-xPos)-(data.gridX || 0)) / data.gridW)) * data.gridW;
                        height = (Math.ceil(((Math.max(boardApi.dragging.startY, end.y)-yPos)-(data.gridY || 0)) / data.gridH)) * data.gridH;
                      }

                      if (!_down[17]) {
                        if (!game.locals["drawing"].data.fog) {
                          boardApi.addObject({
                            x : xPos,
                            y : yPos,
                            w : width,
                            h : height,
                            c1 : game.locals["drawing"].data.primary || "rgba(255,255,255,1)",
                            c2 : game.locals["drawing"].data.secondary || "rgba(255,255,255,0)",
                            drawing : "box",
                            uID : getCookie("UserID")
                          }, scope.layer, "d", obj);
                        }
                        else {
                          boardApi.addObject({
                            x : xPos,
                            y : yPos,
                            w : width,
                            h : height,
                            f : _down[18] || game.locals["drawing"].data.hiding
                          }, scope.layer, "r", obj);
                        }
                        (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                        floatingImage = null;
                        delete boardApi.dragging;
                      }
                      else {
                        boardApi.dragging.startX = end.x;
                        boardApi.dragging.startY = end.y;
                      }
                    }
                  }, ev);
                }
                else if (game.locals["drawing"].data.drawing == "text") {
                  boardApi.newDragEvent({
                    startX : localCoord.x,
                    startY : localCoord.y,
                    move : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      stage.cursor = "none";
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});

                      if (floatingImage) {
                        if (floatingImage._mode != "text") {
                          (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                          floatingImage = new PIXI.Text("Sample Text", game.locals["drawing"].data.label.style || boardApi.fonts.default);
                          floatingImage._mode = "text";

                          stage.addChild(floatingImage);
                        }
                      }
                      else {
                        floatingImage = new PIXI.Text("Sample Text", game.locals["drawing"].data.label.style || boardApi.fonts.default);
                        floatingImage._mode = "text";
                        stage.addChild(floatingImage);
                      }
                      floatingImage.x = end.x;
                      floatingImage.y = end.y;
                      floatingImage.text = game.locals["drawing"].data.label.text;
                      floatingImage.style = game.locals["drawing"].data.label.style || {
                        fontFamily: "Arial",
                        fontWeight: "bold",
                        fontSize : 16,
                        fill: "black",
                        stroke: 'white',
                        strokeThickness: 0,
                        dropShadow: true,
                        dropShadowColor: "rgba(0,0,0,1)",
                        dropShadowBlur: 3,
                        dropShadowDistance : 0,
                      };
                      floatingImage.dirty = true;
                      floatingImage.alpha = 1;
                    },
                    end : function(ev){
                      var stage = boardApi.apps[app.attr("id")].stage;
                      stage.cursor = "";
                      var end = stage.toLocal({x : ev.pageX, y : ev.pageY});
                      var key = ev.keyCode || ev.which;
                      if (key != 1) {
                        (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                        floatingImage = null;
                        delete boardApi.dragging;
                        return;
                      }

                      if (!_down[17]) {
                        boardApi.addObject({
                          x : end.x,
                          y : end.y,
                          w : floatingImage.width,
                          h : floatingImage.height,
                          style : duplicate(game.locals["drawing"].data.label.style),
                          text : duplicate(game.locals["drawing"].data.label.text),
                          drawing : "text",
                          uID : getCookie("UserID")
                        }, scope.layer, "d", obj);

                        (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                        floatingImage = null;

                        delete boardApi.dragging;
                      }
                      else {
                        boardApi.dragging.startX = end.x;
                        boardApi.dragging.startY = end.y;
                      }
                    }
                  }, ev);
                }
              }
              else {
                boardApi.newDragEvent({
                  selectX : finalX,
                  selectY : finalY,
                  move : function(ev){
                    var stage = boardApi.apps[app.attr("id")].stage;
                    var localCoord = stage.toLocal({x : ev.pageX, y : ev.pageY});
                    var finalX = localCoord.x;
                    var finalY = localCoord.y;

                    selectionLayer.clear();
                    selectionLayer.x = Math.min(boardApi.dragging.selectX, finalX);
                    selectionLayer.y = Math.min(boardApi.dragging.selectY, finalY);
                    selectionLayer.beginFill(0x000000, 0);
                    selectionLayer.lineStyle(4, 0xFF8a42, 1);
                    selectionLayer.drawRect(0, 0, Math.abs(boardApi.dragging.selectX-finalX), Math.abs(boardApi.dragging.selectY-finalY));
                    selectionLayer.endFill();
                  },
                  end : function(ev){
                    var stage = boardApi.apps[app.attr("id")].stage;
                    var localCoord = stage.toLocal({x : ev.pageX, y : ev.pageY});
                    var finalX = localCoord.x;
                    var finalY = localCoord.y;
                    var key = ev.keyCode || ev.which;
                    if (key != 1) {
                      (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                      floatingImage = null;
                      delete boardApi.dragging;
                      return;
                    }

                    if (!_down[16] && !boardApi.objectClick) {
                      if ($(".piece-quick-edit").length) {
                        layout.coverlay($(".piece-quick-edit"));
                      }
                      else {
                        for (var id in boardApi.selections) {
                          boardApi.selections[id].wrap.unselect();
                          delete boardApi.selections[id];
                        }

                        if (Number(app.attr("_lastClick")) + 300 >= Date.now() && util.dist(finalX, Number(app.attr("_lastClickX")), finalY, Number(app.attr("_lastClickY"))) < 5) { // double clicked
                          app.removeAttr("_lastClick");
                          app.removeAttr("_lastClickX");
                          app.removeAttr("_lastClickY");
                          runCommand("updateBoardCursor", {id : obj.id(), data : {x : finalX, y : finalY, l : scope.layer, b : true}});
                          delete boardApi.dragging;
                          return;
                        }
                        app.attr("_lastClickX", finalX);
                        app.attr("_lastClickY", finalY);
                        app.attr("_lastClick", Date.now());
                      }
                    }

                    var sX = boardApi.dragging.selectX;
                    var sY = boardApi.dragging.selectY;
                    var eX = finalX;
                    var eY = finalY;
                    if (eX < sX) {
                      sX = eX;
                      eX = boardApi.dragging.selectX;
                    }
                    if (eY < sY) {
                      sY = eY
                      eY = boardApi.dragging.selectY;
                    }

                    if (hasSecurity(userID, "Rights", data) && floatingTile) {
                      var layerData = obj.data.layers[scope.layer];
                      if (!_down[16] && hasGrid) {
                        if (isHex) {
                          var xGrid = Math.floor((sX - (data.gridX || 0))/(data.gridW * 0.75));
                          var yGrid;

                          sX = (xGrid * data.gridW + (data.gridX || 0) - (xGrid * data.gridW + (data.gridX || 0))/4);
                          if (xGrid % 2) {
                            yGrid = Math.floor((sY - (data.gridY || 0) - data.gridH/2)/data.gridH);
                            sY = (yGrid * data.gridH + (data.gridY || 0) + data.gridH/2);
                          }
                          else {
                            yGrid = Math.floor((sY - (data.gridY || 0))/data.gridH);
                            sY = (yGrid * data.gridH + (data.gridY || 0));
                          }

                          var xGrid = Math.floor((eX - (data.gridX || 0))/(data.gridW * 0.75));
                          var yGrid;
                          eX = (xGrid * data.gridW + (data.gridX || 0) - (xGrid * data.gridW + (data.gridX || 0))/4);
                          if (xGrid % 2) {
                            yGrid = Math.floor((eY - (data.gridY || 0) - data.gridH/2)/data.gridH);
                            eY = (yGrid * data.gridH + (data.gridY || 0) + data.gridH/2);
                          }
                          else {
                            yGrid = Math.floor((eY - (data.gridY || 0))/data.gridH);
                            eY = (yGrid * data.gridH + (data.gridY || 0));
                          }
                        }
                        else {
                          var xGrid = Math.floor((sX - (data.gridX || 0))/data.gridW);
                          var yGrid = Math.floor((sY - (data.gridY || 0))/data.gridH);
                          sX = (xGrid * data.gridW + (data.gridX || 0));
                          sY = (yGrid * data.gridH + (data.gridY || 0));

                          var xGrid = Math.floor((eX - (data.gridX || 0))/data.gridW);
                          var yGrid = Math.floor((eY - (data.gridY || 0))/data.gridH);
                          eX = (xGrid * data.gridW + (data.gridX || 0));
                          eY = (yGrid * data.gridH + (data.gridY || 0));
                        }
                      }
                      var gridX = Math.floor((eX-sX)/(data.gridW || 64));
                      var gridY = Math.floor((eY-sY)/(data.gridH || 64));
                      var tiled = ((gridX+1) > floatingTile.gW || (gridY+1) > floatingTile.gH);
                      if (isHex) {
                        tiled = false;
                      }
                      var rotation = floatingTile.r;
                      if (randomRot && floatingTile.r == null) {
                        rotation = Math.floor(Math.random() * 4) * 90;
                      }

                      var newTile = {
                        x : sX,
                        y : sY,
                        w : Math.max(Math.ceil((gridX+1)/(floatingTile.gW || 1)),1) * (data.gridW || 64) * (floatingTile.gW || 1),
                        h : Math.max(Math.ceil((gridY+1)/(floatingTile.gH || 1)),1) * (data.gridH || 64) * (floatingTile.gH || 1),
                        gW : floatingTile.gW,
                        gH : floatingTile.gH,
                        i : floatingTile.i,
                        s : floatingTile.s,
                        t : tiled,
                        r : rotation,
                      };
                      data.layers[scope.layer].t.push(newTile);
                      var newCont = boardApi.createTile({data : newTile, layer : scope.layer, index : data.layers[scope.layer].t.length-1}, obj, app, scope);
                      stage.children[1].children[scope.layer].children[1].addChild(newCont);
                      if (randomRot) {
                        floatingTile.r = Math.floor(Math.random() * 4) * 90;
                        floatingImage.children[0].rotation = (floatingTile.r || 0)/180 * (Math.PI);
                      }
                      //boardApi.tileLayer(stage, scope.layer).addChild(newCont);
                      if (app.attr("background") != "true") {
                        (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                        floatingImage = null;
                        floatingTile = null;
                        if (!scope.local) {
                          obj.sync("updateAsset");
                        }
                        else {
                          obj.update();
                        }
                      }
                    }
                    else {
                      if (!app.attr("background")) {
                        if (game.locals["drawing"] && game.locals["drawing"].data && !game.locals["drawing"].data.drawing && game.locals["drawing"].data.fog && app.attr("menuOption") == "Fog of War") {
                          for (var lid in stage.children[1].children) {
                            var layerData = stage.children[1].children[lid];
                            var walls = layerData.children[4];
                            if (walls && walls.children) {
                              for (var index in walls.children) {
                                var wallData = obj.data.layers[lid].w[index];
                                if (eX-sX > 3 && eY-sY > 3) {
                                  if ((wallData.x1 >= sX && wallData.x2 >= sX) && wallData.x1 < eX && wallData.x2 < eX) {
                                    if ((wallData.y1 >= sY && wallData.y2 >= sY) && wallData.y1 < eY && wallData.y2 < eY) {
                                      var wallWrap = walls.children[index];
                                      wallWrap.select();
                                    }
                                  }
                                }
                              }
                            }
                          }
                          sendAlert({text : "Selecting Fog of War Walls", id : "selecting-walls", duration : 1000});
                        }
                        else {
                          for (var lid in stage.children[1].children) {
                            var layerData = stage.children[1].children[lid];
                            var pieces = layerData.children[2];
                            if (pieces && pieces.children) {
                              for (var index in pieces.children) {
                                var pieceData = obj.data.layers[lid].p[index];
                                if (eX-sX > 3 && eY-sY > 3) {
                                  if ((pieceData.x >= sX || pieceData.x + pieceData.w >= sX) && pieceData.x < eX) {
                                    if ((pieceData.y >= sY || pieceData.y + pieceData.h >= sY) && pieceData.y < eY) {
                                      if (!pieceData.l || (pieceData.l && (app.attr("layer") || 0) == lid)) {
                                        if (hasRights || (pieceData.eID && getEnt(pieceData.eID) && hasSecurity(userID, "Rights", getEnt(pieceData.eID).data))) {
                                          // select Pieces
                                          var pieceWrap = pieces.children[index];
                                          var selection = pieceWrap.children[1];
                                          selection.visible = true;

                                          boardApi.selections[obj.id()+"-"+lid+"-p-"+index] = {
                                            layer : lid,
                                            index : index,
                                            type : "p",
                                            board : obj.id(),
                                            app : app.attr("id"),
                                            wrap : pieceWrap,
                                            image : pieceWrap.children[0],
                                            selected : selection
                                          };
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      else {
                        for (var lid in stage.children[1].children) {
                          var layerData = stage.children[1].children[lid];
                          var tiles = layerData.children[1];
                          if (tiles && tiles.children) {
                            for (var index in tiles.children) {
                              var pieceData = obj.data.layers[lid].t[index];
                              if (eX-sX > 3 && eY-sY > 3) {
                                if ((pieceData.x >= sX || pieceData.x + pieceData.w >= sX) && pieceData.x < eX) {
                                  if ((pieceData.y >= sY || pieceData.y + pieceData.h >= sY) && pieceData.y < eY) {
                                    if (!pieceData.l || (pieceData.l && (app.attr("layer") || 0) == lid)) {
                                      if (hasRights) {
                                        // select Pieces
                                        var pieceWrap = tiles.children[index];
                                        var selection = pieceWrap.children[1];
                                        selection.visible = true;

                                        boardApi.selections[obj.id()+"-"+lid+"-t-"+index] = {
                                          layer : lid,
                                          index : index,
                                          type : "t",
                                          board : obj.id(),
                                          app : app.attr("id"),
                                          wrap : pieceWrap,
                                          image : pieceWrap.children[0],
                                          selected : selection
                                        };
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      // 1:layers -  0:BG 1:tile 2:piece 3:draw 4:fog
                    }
                    selectionLayer.clear();
                    delete boardApi.dragging;
                  }
                }, ev);
              }
            }
          }
        }
        if (key == 2 || key == 3) {
          // dragscroll
          layout.coverlay($(".piece-quick-edit"));
          if (!boardApi.dragging) {
            var stage = boardApi.apps[app.attr("id")].stage;
            stage.cursor = "move";
            boardApi.newDragEvent({
              selectX : ev.pageX,
              selectY : ev.pageY,
              move : function(ev){
                var deltaX = ev.pageX-boardApi.dragging.selectX;
                var deltaY = ev.pageY-boardApi.dragging.selectY;

                var limitX = 100;
                var limitY = 100;

                if (Math.abs(deltaX) >= 1 || Math.abs(deltaY) >= 1) {
                  boardApi.dragging.dragged = true;
                  layout.coverlay($(".piece-quick-edit"));
                }

                stage.x = stage.x + deltaX * 1;
                //stage.x = Math.max(Math.min(stage.x, limitX), (((data.x || 0)+data.w+limitX)*-1 + Number(portWidth)/zoom)*zoom);
                stage.y = stage.y + deltaY * 1;
                //stage.y = Math.max(Math.min(stage.y, limitY), (((data.y || 0)+data.h+limitY)*-1 + Number(portHeight)/zoom)*zoom);
                boardApi.dragging.selectX = ev.pageX;
                boardApi.dragging.selectY = ev.pageY;
              },
              end : function(ev){
                var stage = boardApi.apps[app.attr("id")].stage;
                delete stage.cursor;

                var deltaX = ev.pageX-boardApi.dragging.selectX;
                var deltaY = ev.pageY-boardApi.dragging.selectY;

                var limitX = 100;
                var limitY = 100;

                stage.x = stage.x + deltaX * 1;
                //stage.x = Math.max(Math.min(stage.x, limitX), (((data.x || 0)+data.w+limitX)*-1 + Number(portWidth)/zoom)*zoom);
                stage.y = stage.y + deltaY * 1;
                //stage.y = Math.max(Math.min(stage.y, limitY), (((data.y || 0)+data.h+limitY)*-1 + Number(portHeight)/zoom)*zoom);

                app.attr("scrollLeft", stage.x);
                app.attr("scrollTop", stage.y);
                if (!boardApi.dragging.dragged && !(game.locals["drawing"] && game.locals["drawing"].data && game.locals["drawing"].data.drawing)) {
                  if (floatingTile) {
                    floatingTile = null;
                    (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                    floatingImage = null;
                  }
                  else {
                    var actions = boardApi.context(obj, app, scope, ev);

                    $(".ui-dropmenu-class").remove();
                    setTimeout(function(){
                      var pop = ui_dropMenu(board, actions, {});
                    }, 10);
                    ev.preventDefault();
                  }
                }

                delete boardApi.dragging;
              }
            }, ev);
          }
        }
      });
      board.mousemove(function(ev){
        var stage = boardApi.apps[app.attr("id")].stage;
        var localCoord = boardCanvas.stage.toLocal({x : ev.pageX, y : ev.pageY});
        var finalX = localCoord.x;
        var finalY = localCoord.y;
        if (!scope.local && !boardApi.dragging) {
          var focal = boardCanvas.stage.toLocal({x : ev.pageX, y : ev.pageY});
          var update = {id : obj.id(), data : {
            x : focal.x, y : focal.y, l : scope.layer,
            v : (app.attr("hideCursor") == "true")}
          };
          if (time <= Date.now()) {
            runCommand("updateBoardCursor", update);
            time = Date.now() + 100;
          }
        }
        if (app.attr("background") == "true" || floatingTile) {
          if (hasSecurity(userID, "Rights", data)) {
            var layerData = obj.data.layers[scope.layer];
            if (floatingTile) {
              if (!floatingImage || JSON.stringify(floatingImage.tileData) != JSON.stringify(floatingTile)) {
                if (floatingImage) {
                  (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
                }

                floatingImage = boardApi.createTile({data : floatingTile}, obj, app, scope);
                floatingImage.alpha = 0.5;
                stage.addChild(floatingImage);
                // scale floatinTile
                floatingTile.w = Math.max(floatingTile.w, data.gridW);
                floatingTile.h = Math.max(floatingTile.h, data.gridH); // Temporary filler, not correct
                floatingImage.rebuild(floatingTile, true);
              }
              if (!_down[16] && hasGrid) {

                if (isHex) {
                  var xGridd = Math.floor((finalX - (data.gridX || 0))/(data.gridW * 0.75));
                  var yGridd;
                  finalX = (xGridd * data.gridW + (data.gridX || 0) - (xGridd * data.gridW + (data.gridX || 0))/4);
                  if (xGridd % 2) {
                    yGridd = Math.floor((finalY - (data.gridY || 0) - data.gridH/2)/data.gridH);
                    finalY = (yGridd * data.gridH + (data.gridY || 0) + data.gridH/2);
                  }
                  else {
                    yGridd = Math.floor((finalY - (data.gridY || 0))/data.gridH);
                    finalY = (yGridd * data.gridH + (data.gridY || 0));
                  }
                }
                else {
                  var xGridd = Math.floor((finalX - (data.gridX || 0))/data.gridW);
                  var yGridd = Math.floor((finalY - (data.gridY || 0))/data.gridH);
                  finalX = ((xGridd * data.gridW + (data.gridX || 0)));
                  finalY = ((yGridd * data.gridH + (data.gridY || 0)));
                }
              }
              floatingImage.x = finalX;
              floatingImage.y = finalY;
            }
            else if (floatingImage) {
              (floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
              floatingImage = null;
            }
          }
        }
      });
      board.mouseup(function(ev){
        var key = ev.keyCode || ev.which;
        if (!boardApi.objectClick && app.attr("rebuildmenu") && key != 2) {
          app.removeAttr("menuOption");

          if ($("#"+app.attr("id")+"-menu-"+obj.id()).length) {
            $("#left-content").empty();
            var menu = sync.render("ui_boardMenuLeft")(obj, app, scope).appendTo("#left-content");
          }

          app.removeAttr("rebuildmenu");
        }
      });

      board.click(function(ev){
        if (boardApi.objectClick) {
          boardApi.objectClick = false;
        }
        var key = ev.keyCode || ev.which;
        if (key == 2 || key == 3) {

        }
      });
      board.contextmenu(function(ev){
        if (floatingTile) {
          floatingTile = null;
          //(floatingImage!=null&&floatingImage.parent!=null)?(floatingImage.parent.removeChild(floatingImage)):(null);
          //floatingImage = null;
        }
        if (game.locals["drawing"] && game.locals["drawing"].data && game.locals["drawing"].data.drawing) {
          if (game.locals["drawing"].data.drawing == "scale") {
            delete game.locals["drawing"].data.drawing;
            delete game.locals["drawing"].data.scaleSize;
            delete game.locals["drawing"].data.scaleUnit;
            game.locals["drawing"].data.target = app.attr("id");
            sendAlert({text : "Stopped drawing scale"});
          }
          else {
            sendAlert({text : "Paint Tool Cleared"});
          }
          delete game.locals["drawing"].data.drawing;
          game.locals["drawing"].update();
        }
        return false;
      });
    }
    else {
      board.on("touchstart", function(ev){
        var stage = boardApi.apps[app.attr("id")].stage;
        var localCoord = boardCanvas.stage.toLocal({x : ev.touches[0].pageX, y : ev.touches[0].pageY});
        var finalX = localCoord.x;
        var finalY = localCoord.y;
        boardApi.newDragEvent({
          selectX : ev.touches[0].pageX,
          selectY : ev.touches[0].pageY,
        });
        sendAlert({text : "Start" + boardApi.dragging.selectX});
        if (!scope.local) {
          var update = {id : obj.id(), data : {
            x : finalY, y : finalY, l : scope.layer,
            v : (app.attr("hideCursor") == "true")}
          };
          if (time <= Date.now()) {
            runCommand("updateBoardCursor", update);
            time = Date.now() + 100;
          }
        }
      });
      board.on("touchmove", function(ev){
        var stage = boardApi.apps[app.attr("id")].stage;
        var localCoord = boardCanvas.stage.toLocal({x : ev.touches[0].pageX, y : ev.touches[0].pageY});
        var finalX = localCoord.x;
        var finalY = localCoord.y;
        if (!scope.local) {
          var update = {id : obj.id(), data : {
            x : finalY, y : finalY, l : scope.layer,
            v : (app.attr("hideCursor") == "true")}
          };
          if (time <= Date.now()) {
            runCommand("updateBoardCursor", update);
            time = Date.now() + 100;
          }
        }
        if (boardApi.dragging) {
          var deltaX = ev.touches[0].pageX-boardApi.dragging.selectX;
          var deltaY = ev.touches[0].pageY-boardApi.dragging.selectY;

          var limitX = 100;
          var limitY = 100;
          sendAlert({text : ev.touches[0].pageX + " " + boardApi.dragging.selectX + "-" + ev.touches.length});
          if (Math.abs(deltaX) >= 1 || Math.abs(deltaY) >= 1) {
            boardApi.dragging.dragged = true;
            layout.coverlay($(".piece-quick-edit"));
            stage.x = stage.x + deltaX * 1;
            //stage.x = Math.max(Math.min(stage.x, limitX), (((data.x || 0)+data.w+limitX)*-1 + Number(portWidth)/zoom)*zoom);
            stage.y = stage.y + deltaY * 1;
            //stage.y = Math.max(Math.min(stage.y, limitY), (((data.y || 0)+data.h+limitY)*-1 + Number(portHeight)/zoom)*zoom);
            boardApi.dragging.selectX = ev.touches[0].pageX;
            boardApi.dragging.selectY = ev.touches[0].pageY;
          }
        }
      });
      board.on("touchend", function(ev){
        var stage = boardApi.apps[app.attr("id")].stage;
        var localCoord = boardCanvas.stage.toLocal({x : ev.touches[0].pageX, y : ev.touches[0].pageY});
        var finalX = localCoord.x;
        var finalY = localCoord.y;
        if (!scope.local) {
          var update = {id : obj.id(), data : {
            x : finalY, y : finalY, l : scope.layer,
            v : (app.attr("hideCursor") == "true")}
          };
          if (time <= Date.now()) {
            runCommand("updateBoardCursor", update);
            time = Date.now() + 100;
          }
        }
        app.attr("scrollLeft", stage.x);
        app.attr("scrollTop", stage.y);
        delete boardApi.dragging;
        sendAlert({text : "End"});
      });
    }


    if ($("#"+app.attr("id")+"-menu-"+obj.id()).length) {
      $("#left-content").empty();
      var menu = sync.render("ui_boardMenuLeft")(obj, app, scope).appendTo("#left-content");
    }

    if (data.options) {
      var filterStr = "";
      for (var key in data.options.filter) {
        if (key == "hue-rotate") {
          filterStr = filterStr + " " + key + "("+data.options.filter[key]+"deg)";
        }
        else {
          filterStr = filterStr + " " + key + "("+data.options.filter[key]+"%)";
        }
      }
      board.css("webkit-filter", filterStr);
      board.css("filter", filterStr);
    }

    if (data.options && data.options.weather && data.options.weather != "none") {
      var filter = $("<div>").appendTo(divRowWrapper);
      filter.css("width", portWidth);
      filter.css("height", portHeight);
      filter.css("position", "absolute");
      filter.css("overflow", "hidden");
      filter.css("pointer-events", "none");
      filter.css("left", "0");
      filter.css("top", "0");
      if (data.options.isometric) {
        filter.css("transform", "rotateX(0deg) rotateY(0deg) rotateZ(-45deg)");
      }
      /*var count = 60;
      if (data.options.weather == "rain mix") {
        count = 90;
      }
      else if (data.options.weather == "downpour") {
        count = 120;
      }
      else if (data.options.weather == "blizzard") {
        count = 90;
      }
      for (var i=0; i<count; i++) {
        var drop = $("<div>").appendTo(filter);
        drop.css("pointer-events", "none");
        drop.css("left", Math.random() * 100 + "%");
        if (data.options.weather == "rain") {
          drop.addClass("rain");
          drop.css("animation", "drop "+(Math.random()+1.2)+"s linear infinite");
          drop.css("animation-delay", "-"+(Math.random()+1.2)+"s");
        }
        else if (data.options.weather == "rain mix") {
          if (Math.round(Math.random() * 2) == 0) {
            drop.addClass("rain");
            drop.css("animation", "drop "+(Math.random()+1.2)+"s linear infinite");
            drop.css("animation-delay", "-"+(Math.random()+1.2)+"s");
          }
          else {
            drop.addClass("downpour");
            drop.css("animation", "downpour "+(Math.random()+0.8)+"s linear infinite");
            drop.css("animation-delay", "-"+(Math.random()+1.2)+"s");
          }
        }
        else if (data.options.weather == "downpour") {
          drop.addClass("downpour");
          drop.css("animation", "downpour "+(Math.random()+0.8)+"s linear infinite");
          drop.css("animation-delay", "-"+(Math.random()+1.2)+"s");
        }
        else if (data.options.weather == "snow") {
          drop.addClass("snow");
          var size = Math.random() * 5;
          drop.css("width", (15 + size)+"px");
          drop.css("height", (15 + size)+"px");

          var animSpeed = (Math.random()*8.4+4.8);
          drop.css("transition", "left "+animSpeed+"s");
          var variation = Math.round(Math.random() * 5);
          if (variation == 0) {
            drop.css("animation", "snowdrop-right "+animSpeed+"s linear infinite");
          }
          if (variation == 1) {
            drop.css("animation", "snowdrop-right-hard "+animSpeed+"s linear infinite");
          }
          else if (variation == 2) {
            drop.css("animation", "snowdrop-left-hard "+animSpeed+"s linear infinite");
          }
          else if (variation == 3) {
            drop.css("animation", "drop "+animSpeed+"s linear infinite");
          }
          else {
            drop.css("animation", "snowdrop-left "+animSpeed+"s linear infinite");
          }
          drop.css("animation-delay", "-"+(Math.random()*4.8+1.2)+"s");
        }
        if (data.options.weatherStyle) {
          drop.css("background", data.options.weatherStyle);
        }
      }
      */
    }

    // constuct a container for each layer

    var conts = {};

    if (lastvideo) {
      lastvideo.destroy(true);
    }
    var fogBackground = new PIXI.Container();
    var bgMask;
    if (data.map && data.map.match(".gif") && PIXI.loader.resources[data.map] && PIXI.loader.resources[data.map].gifFrames && PIXI.loader.resources[data.map].gifFrames.length  && false) {
      bgMask = new PIXI.extras.AnimatedSprite(PIXI.loader.resources[data.map].gifFrames);
      bgMask.width = data.w;
      bgMask.height = data.h;
      bgMask.animationSpeed = 0.2;
      bgMask.gotoAndPlay(Math.round(Math.random() * PIXI.loader.resources[data.map].gifFrames.length - 1));
      boardCanvas.stage.addChild(bgMask);
    }
    else if (data.map && (data.map.match(".mp4") || data.map.match(".webm") || data.map.match(".ogg"))) {
      var videoText = PIXI.Texture.fromVideoUrl(data.map);
      videoText.baseTexture.source.loop = 1;
      $(videoText.baseTexture.source).addClass(app.attr("id")+"-videoSource");

      lastvideo = videoText;

      bgMask = new PIXI.Sprite(videoText);
      bgMask.width = data.w;
      bgMask.height = data.h;

      boardCanvas.stage.addChild(bgMask);
    }
    else if (data.map) {
      bgMask = new PIXI.Sprite.fromImage(data.map);
      bgMask.width = data.w;
      bgMask.height = data.h;

      boardCanvas.stage.addChild(bgMask);
    }
    else {
      bgMask = new PIXI.Container(); // background filler
      boardCanvas.stage.addChild(bgMask);
    }

    // 1:layers -  0:BG 1:tile 2:piece 3:draw 4:fog

    var layers = new PIXI.Container();
    boardCanvas.stage.addChild(layers);

    var threatCont = new PIXI.Graphics();
    boardCanvas.stage.addChild(threatCont);

    var fogFill = new PIXI.Graphics();
    if (data.options && data.options.fog) {
      fogFill.beginFill(0xFFFFFF, 1);
      if (hasGrid) {
        fogFill.drawRect(0, 0, Math.ceil(obj.data.w/data.gridW)*data.gridW + (data.gridX || 0), Math.ceil(obj.data.h/data.gridH)*data.gridH + (data.gridY || 0));
      }
      else {
        fogFill.drawRect(0, 0, obj.data.w, obj.data.h);
      }
      fogFill.endFill();
    }

    var drawnGrid = false;
    var plyChar = getPlayerCharacter(getCookie("UserID"));
    for (var lid in data.layers) {
      var layerData = data.layers[lid];
      var playerVision = app.attr("UserID") && !layerData.h && (!layerData._s || layerData._s.default == 1);
      var layerVisible = !layerData.h && (hasRights || hasSecurity(userID, "Visible", layerData));
      layerVisible = layerVisible || (lid == scope.layer);

      var layerCont = new PIXI.Container();
      layers.addChild(layerCont);

      var tiles = layerData.t;
      var pieces = layerData.p;
      var strokes = layerData.d;
      layerData.r = layerData.r || [];
      layerData.w = layerData.w || [];
      var reveal = layerData.r; // fog of war
      var walls = layerData.w;

      var bgCont = new PIXI.Container();
      layerCont.addChild(bgCont);

      var tileCont = new PIXI.Container();
      tileCont.name = "layer";
      layerCont.addChild(tileCont);

      var pieceCont = new PIXI.Container();
      layerCont.addChild(pieceCont);

      var drawCont = new PIXI.Container();
      layerCont.addChild(drawCont);

      var wallCont = new PIXI.Container();
      layerCont.addChild(wallCont);

      var gridImage;

      for (var index in tiles) {
        var tileData = tiles[index];
        var tile = boardApi.createTile({data : duplicate(tileData), layer : lid, index : index}, obj, app, scope);
        tileCont.addChild(tile);

        fogBackground.addChild(boardApi.createTile({data : duplicate(tileData)}, obj, app, scope));
      }

      if (!drawnGrid && (!data.options || (data.options.gLayer == null || data.options.gLayer == -1 || data.options.gLayer == lid))) {
        drawnGrid = boardApi.drawGrid(obj, app, scope);
        layerCont.addChild(drawnGrid);
      }
      for (var index in pieces) {
        var pieceData = pieces[index];
        var piece = boardApi.createPiece({data : duplicate(pieceData), layer : lid, index : index}, obj, app, scope);
        if (pieceData.eID) {
          var ent = getEnt(pieceData.eID);
          if (ent && ent.data && ent.data._t == "c" && hasSecurity(userID, "Visible", ent.data)) {
            var range = null;
            if (pieceData.o && pieceData.o.Sight) {
              var context = sync.defaultContext();
              if (ent && ent.data) {
                context[ent.data._t] = duplicate(ent.data);
              }
              var auraData = pieceData.o.Sight;
              range = boardApi.scale(sync.eval(auraData.d, context), obj, true);
            }
            boardApi.apps[app.attr("id")].views[lid+"-p-"+index] = boardApi.buildDynamicFog(obj, app, pieceData.x + pieceData.w/2, pieceData.y + pieceData.h/2, range);
          }
        }
        if (app.attr("background")) {
          piece.children[0].interactive = false;
          piece.alpha = 0.05;
        }
        pieceCont.addChild(piece);
        if (pieceData.l && !pieceData.e) {
          var dupe = duplicate(pieceData);
          delete dupe.v;
          fogBackground.addChild(boardApi.createPiece({data : dupe}, obj, app, scope));
        }
      }

      for (var index in strokes) {
        var drawData = strokes[index];
        var draw = boardApi.createDrawing({data : duplicate(drawData), layer : lid, index : index}, obj, app, scope);
        drawCont.addChild(draw);

        fogBackground.addChild(boardApi.createDrawing({data : duplicate(drawData)}, obj, app, scope));
      }
      if (hasRights) {
        for (var index in walls) {
          var wallData = walls[index];
          var wall = boardApi.createWall({data : duplicate(wallData), layer : lid, index : index}, obj, app, scope);
          wallCont.addChild(wall);
        }
      }

      if (playerVision || (!app.attr("UserID") && layerVisible)) {
        if (data.options && data.options.fog) {
          for (var rID in reveal) {
            if (reveal[rID].f) {
              fogFill.beginFill(0xFFFFFF, 1);
            }
            else {
              fogFill.beginFill(0, 1);
            }
            fogFill.drawRect(reveal[rID].x,reveal[rID].y,reveal[rID].w || reveal[rID].width,reveal[rID].h || reveal[rID].height);
            fogFill.endFill();
          }
        }
      }
      else {
        layerCont.visible = false;
      }
    }

    var fogContainer = new PIXI.Container();
    var fogCont = new PIXI.Graphics();

    var fogMask = new PIXI.Container();

    boardApi.apps[app.attr("id")].fogCache = {fogContainer : fogContainer, fogCont : fogCont, fog : fogFill, background : bgMask, map : fogBackground};

    if (bgMask.texture && bgMask.texture.baseTexture && !bgMask.texture.baseTexture.hasLoaded) {
      var bgMaskFill = new PIXI.Graphics();
      if (data.options && data.options.fog) {
        bgMaskFill.beginFill(util.RGB_HEX(obj.data.c), 1);
        if (hasGrid) {
          bgMaskFill.drawRect(0, 0, Math.ceil(obj.data.w/data.gridW)*data.gridW + (data.gridX || 0), Math.ceil(obj.data.h/data.gridH)*data.gridH + (data.gridY || 0));
        }
        else {
          bgMaskFill.drawRect(0, 0, obj.data.w, obj.data.h);
        }
        bgMaskFill.endFill();
        boardApi.apps[app.attr("id")].renderer.render(bgMaskFill, boardApi.apps[app.attr("id")].opaqueRender, false, null, false);
        function check(){
          if (bgMask.texture && bgMask.texture.baseTexture && bgMask.texture.baseTexture.hasLoaded) {
            bgMaskFill.destroy(true);
            boardApi.rebuildFog(obj, app);
          }
          else {
            setTimeout(function(){check();}, 100);
          }
        }
        check();
      }
    }
    boardApi.apps[app.attr("id")].renderer.render(bgMask, boardApi.apps[app.attr("id")].opaqueRender, false, null, false);
    boardApi.apps[app.attr("id")].renderer.render(fogBackground, boardApi.apps[app.attr("id")].opaqueRender, false, null, false);

    boardApi.apps[app.attr("id")].renderer.render(fogFill, boardApi.apps[app.attr("id")].fogRender, false, null, false);
    boardApi.apps[app.attr("id")].renderer.render(fogFill, boardApi.apps[app.attr("id")].expRender, false, null, false);

    if (data.options && data.options.fog) {
      var opaqueRender = new PIXI.Sprite(boardApi.apps[app.attr("id")].opaqueRender);
      fogContainer.addChild(opaqueRender);
      fogContainer.addChild(fogCont);

      fogContainer.mask = new PIXI.Sprite(boardApi.apps[app.attr("id")].fogRender);
      fogContainer.addChild(fogContainer.mask);
      fogCont.beginFill(util.RGB_HEX(obj.data.c), 1);
      if (hasGrid) {
        fogCont.drawRect(0, 0, Math.ceil(obj.data.w/data.gridW)*data.gridW + (data.gridX || 0), Math.ceil(obj.data.h/data.gridH)*data.gridH + (data.gridY || 0));
      }
      else {
        fogCont.drawRect(0, 0, obj.data.w, obj.data.h);
      }
      fogCont.endFill();
      fogCont.mask = new PIXI.Sprite(boardApi.apps[app.attr("id")].expRender);
      fogContainer.addChild(fogCont.mask);

      if (!app.attr("UserID") && hasRights) {
        fogCont.alpha = Math.min(0.8, util.RGB_ALPHA(data.c));
        opaqueRender.alpha = 0;
      }
      else {
        fogCont.alpha = Math.min(1, util.RGB_ALPHA(data.c));
        opaqueRender.alpha = 1;
      }
    }
    else {
      fogCont.alpha = 0;
    }
    boardCanvas.stage.addChild(fogContainer);

    var beaconLayer = new PIXI.Container();
    boardCanvas.stage.addChild(beaconLayer);

    var weatherLayer = new PIXI.Container();
    boardCanvas.stage.addChild(weatherLayer);

    if (data.options && data.options.weather && data.options.weather != "none") {
      if (data.options.weather == "rain") {
        var lifetime = obj.data.w / 2000 + 0.05;
        emitter = new PIXI.particles.Emitter(
          weatherLayer,
          [PIXI.Texture.fromImage('/content/lightrain.png')],
          {
            "alpha": {
              "start": 0.08,
              "end": 0.08
            },
            "scale": {
              "start": 1,
              "end": 1
            },
            "color": {
              "start": "ffffff",
              "end": "ffffff"
            },
            "speed": {
              "start": 2000,
              "end": 2000
            },
            "startRotation": {
              "min": 90,
              "max": 90
            },
            "rotationSpeed": {
              "min": 0,
              "max": 0
            },
            "lifetime": {
              "min": lifetime,
              "max": lifetime
            },
            "blendMode": "normal",
            "frequency": 0.09,
            "emitterLifetime": 0,
            "maxParticles": 1000,
            "pos": {
              "x": 0,
              "y": 0
            },
            "addAtBack": false,
            "spawnType": "rect",
            "spawnRect": {
              "x": 0,
              "y": -100,
              "w": obj.data.w + 50,
              "h": 20
            }
          }
        );
      }
      else if (data.options.weather == "rain mix") {
        var lifetime = obj.data.w / 2000 + 0.05;
        emitter = new PIXI.particles.Emitter(
          weatherLayer,
          [PIXI.Texture.fromImage('/content/rain.png')],
          {
            "alpha": {
              "start": 0.08,
              "end": 0.08
            },
            "scale": {
              "start": 1,
              "end": 1
            },
            "color": {
              "start": "ffffff",
              "end": "ffffff"
            },
            "speed": {
              "start": 2000,
              "end": 2000
            },
            "startRotation": {
              "min": 90,
              "max": 90
            },
            "rotationSpeed": {
              "min": 0,
              "max": 0
            },
            "lifetime": {
              "min": lifetime,
              "max": lifetime
            },
            "blendMode": "normal",
            "frequency": 0.02,
            "emitterLifetime": 0,
            "maxParticles": 1000,
            "pos": {
              "x": 0,
              "y": 0
            },
            "addAtBack": false,
            "spawnType": "rect",
            "spawnRect": {
              "x": 0,
              "y": -100,
              "w": obj.data.w + 50,
              "h": 20
            }
          }
        );
      }
      else if (data.options.weather == "downpour") {
        var lifetime = obj.data.w / 3000 + 0.02;
        emitter = new PIXI.particles.Emitter(
          weatherLayer,
          [PIXI.Texture.fromImage('/content/hardrain.png')],
          {
            "alpha": {
              "start": 0.08,
              "end": 0.08
            },
            "scale": {
              "start": 1,
              "end": 1
            },
            "color": {
              "start": "ffffff",
              "end": "ffffff"
            },
            "speed": {
              "start": 3000,
              "end": 3000
            },
            "startRotation": {
              "min": 85,
              "max": 85
            },
            "rotationSpeed": {
              "min": 0,
              "max": 0
            },
            "lifetime": {
              "min": lifetime,
              "max": lifetime
            },
            "blendMode": "normal",
            "frequency": 0.004,
            "emitterLifetime": 0,
            "maxParticles": 2000,
            "pos": {
              "x": 0,
              "y": 0
            },
            "addAtBack": false,
            "spawnType": "rect",
            "spawnRect": {
              "x": -100,
              "y": -100,
              "w": obj.data.w + 50,
              "h": 20
            }
          }
        );
      }
      else if (data.options.weather == "snow") {
        var lifetime = obj.data.w / 200 + 1;
        emitter = new PIXI.particles.Emitter(
          weatherLayer,
          [PIXI.Texture.fromImage('/content/snowflake.png'), PIXI.Texture.fromImage('/content/snowflake1.png'), PIXI.Texture.fromImage('/content/snowflake2.png')],
          {
            "alpha": {
              "start": 0.73,
              "end": 0.46
            },
            "scale": {
              "start": 0.15,
              "end": 0.2,
              "minimumScaleMultiplier":0.5
            },
            "color": {
              "start": "ffffff",
              "end": "ffffff"
            },
            "speed": {
              "start": 200,
              "end": 200
            },
            "startRotation": {
              "min": 80,
              "max": 90
            },
            "rotationSpeed": {
              "min": 0,
              "max": 200
            },
            "lifetime": {
              "min": lifetime,
              "max": lifetime
            },
            "blendMode": "normal",
            "ease": [
              {
                "s": 0,
                "cp": 0.379,
                "e": 0.548
              },
              {
                "s": 0.548,
                "cp": 0.717,
                "e": 0.676
              },
              {
                "s": 0.676,
                "cp": 0.635,
                "e": 1
              }
            ],
            "frequency": 0.02,
            "emitterLifetime": 0,
            "maxParticles": 2000,
            "pos": {
              "x": 0,
              "y": 0
            },
            "addAtBack": false,
            "spawnType": "rect",
            "spawnRect": {
              "x": 0,
              "y": -100,
              "w": obj.data.w,
              "h": 20
            }
          }
        );
      }
    }

    var cursorLayer = new PIXI.Graphics();
    boardCanvas.stage.addChild(cursorLayer);

    var cursorTextLayer = new PIXI.Container();
    boardCanvas.stage.addChild(cursorTextLayer);

    var cursorMeasureLayer = new PIXI.Container();
    boardCanvas.stage.addChild(cursorMeasureLayer);

    var selectionLayer = new PIXI.Graphics();
    boardCanvas.stage.addChild(selectionLayer);


    if (!drawnGrid) {
      drawnGrid = boardApi.drawGrid(obj, app, scope);
      boardCanvas.stage.addChild(drawnGrid);
    }

    boardApi.rebuildFog(obj, app);


    // negative because backwards compatible
    boardCanvas.stage.x = scrollLeft;
    boardCanvas.stage.y = scrollTop;
    boardCanvas.stage.scale.set(zoom);

    var newMenu = boardApi.buildMenu(obj, app, scope);
    newMenu.appendTo(divRowWrapper);
    if (app.attr("hidemenu")) {
      newMenu.hide();
    }
  }
  else {
    divRow.addClass("flexcolumn");
    divRow.append("<div class='flexcolumn flex flexmiddle'><div class='loader lpadding'></div></div>");
    //if (obj.data._t == "b"){

    //}
    setTimeout(function(){
      var loaded = {};

      if (!divRow.width() && !divRow.height()) {
        obj.update();
      }
      else {
        app.attr("divWidth", divRow.width());
        app.attr("divHeight", divRow.height());
      }

      var resourceList = [];
      for (var i=0; i<data.sheets.length; i++) {
        if (!PIXI.loader.resources[data.sheets[i].i]) {
          resourceList.push(data.sheets[i].i);
        }
      }
      PIXI.loaders.Resource.setExtensionLoadType('gif', PIXI.loaders.Resource.LOAD_TYPE.XHR);
      PIXI.loaders.Resource.setExtensionXhrType('gif', PIXI.loaders.Resource.XHR_RESPONSE_TYPE.BUFFER);

      if (data.map && data.map.match(".gif") && !util.contains(resourceList, data.map)  && false) {
        resourceList.push(data.map);
      }
      for (var k in data.layers) {
        for (var p in data.layers[k].p) {
          if (data.layers[k].p[p].i && data.layers[k].p[p].i.match(".gif") && !util.contains(resourceList, data.layers[k].p[p].i) && false) {
            resourceList.push(data.layers[k].p[p].i);
          }
        }
      }
      var getFrames = function(r){
        var frames           = [];
        var gif              = new GIF(new Uint8Array(r.data));
        var gifFrames        = gif.decompressFrames(true);
        var gifWidth         = gifFrames[0].dims.width;
        var gifHeight        = gifFrames[0].dims.height;
        var gifCanvas        = document.createElement('canvas');
        var gifCtx           = gifCanvas.getContext('2d');
        var gifImageData     = gifCtx.createImageData(gifWidth, gifHeight);
        gifCanvas.width  = gifWidth * gifFrames.length;
        gifCanvas.height = gifHeight;
        var gifSpriteSheet = new PIXI.BaseTexture.fromCanvas(gifCanvas);
        gifFrames.map(function(f, i){
          gifImageData.data.set(f.patch);
          gifCtx.putImageData(gifImageData, i * gifWidth, 0);
        }).map(function(f, i){
          frames.push(new PIXI.Texture(gifSpriteSheet, new PIXI.Rectangle(i * gifWidth, 0, gifWidth, gifHeight)));
        });
        if (Math.floor(Math.log2(gifWidth)) != Math.ceil(Math.log2(gifWidth)) || Math.floor(Math.log2(gifHeight)) != Math.ceil(Math.log2(gifHeight))) {
          sendAlert({text : ".gif size must be a power of 2"});
          return [];
        }
        else {
          return frames;
        }
      };
      function onLoad(loader, res){
        Object.keys(res).forEach(function(k){
          if (res[k].extension == "gif" && res[k].data && !res[k].gifFrames && false) {
            res[k].gifFrames = getFrames(res[k]);
          }
        });
        if (hasRights) {
          app.attr("hideCursor", "true");
        }
        setTimeout(function(){obj.update();}, 100);
      };

      PIXI.loader.add(resourceList).load(onLoad);

      /*function checkLoaded(sheet) {
        var fullLoaded = true;
        for (var i=0; i<data.sheets.length; i++) {
          if (!loaded[i]) {
            fullLoaded = false;
          }
        }
        if (!data.sheets.length || fullLoaded)  {
          if (hasRights) {
            app.attr("hideCursor", "true");
          }
          setTimeout(function(){obj.update();}, 100);
        }
      }
      function loadWrap(sheet) {
        if (!data.sheets[sheet].i || PIXI.loader.resources[data.sheets[sheet].i]) {
          loaded[sheet] = true;
          checkLoaded(sheet);
          if (data.sheets[Number(sheet)+1]) {
            loadWrap(Number(sheet)+1);
          }
        }
        else {
          PIXI.loader.add(data.sheets[sheet].i).load(setup);
          function setup() {
            loaded[sheet] = true;
            if (data.sheets[Number(sheet)+1]) {
              loadWrap(Number(sheet)+1);
            }
            checkLoaded(sheet);
          }
        }
      }
      for (var i=0; i<data.sheets.length; i++) {
        loadWrap(i);
        break;
      }
      if (!data.sheets.length)  {
        if (hasRights) {
          app.attr("hideCursor", "true");
        }
        setTimeout(function(){obj.update();}, 100);
      }*/
    }, 200);
  }

  return div;
});

sync.render("ui_boardStamps", function(obj, app, scope) {
  scope = scope || {
    viewOnly : app.attr("viewOnly"),
    local : app.attr("local") == "true",
    selected : app.attr("set") || 0,
    board : app.attr("board"),
    tile : app.attr("tile") == "true",
    custom : app.attr("custom") == "true",
  };
  if (game.config.data.offline) {
    scope.local = true;
  }
  if (!obj) {
    game.locals["stamps"] = game.locals["stamps"] || sync.obj();
    game.locals["stamps"].data = game.locals["stamps"].data || {
      _t : "st",
      sets : [],
      defaults : []
    };
    if (game.locals["stamps"].data.defaults.length == 0) {
      $.ajax({
        url: '/getCollections',
        error: function(code) {
          console.log(code);
        },
        type : "GET",
        dataType: 'json',
        success: function(cData) {
          for (var d in cData) {
            $.ajax({
              url: '/collections/'+cData[d],
              type : "GET",
              error: function(code) {
                console.log(code);
              },
              dataType: 'text',
              success: function(data) {
                try {
                  game.locals["stamps"].data.defaults.push(JSON.parse(data));
                }
                catch (err) {

                }
                game.locals["stamps"].update();
              }
            });
          }
        }
      });
    }
    app.attr("board", scope.board);
    app.attr("tile", scope.tile);
    game.locals["stamps"].addApp(app);
    return $("<div>");
  }
  var data = obj.data;

  var stampDiv = $("<div>");
  stampDiv.addClass("flexcolumn flex");
  stampDiv.css("border-width", "2px");

  var board = game.entities.data[app.attr("board")];

  var stampWrap = $("<div>").appendTo(stampDiv);
  stampWrap.addClass("flexrow flex");

  var content = $("<div>").appendTo(stampWrap);
  content.addClass("flexcolumn fit-y");

  var contentHeader = $("<div>").appendTo(content);
  contentHeader.addClass("background alttext lpadding flexmiddle");
  contentHeader.css("font-size", "1.2em");

  contentHeader.append("<text>Collections</text>");

  var setList = $("<div>").appendTo(content);
  setList.addClass("flexcolumn flex");

  for (var i in data.defaults) {
    var set = $("<div>").appendTo(setList);
    set.addClass("smooth outline hover2 flexrow spadding");

    if (i == scope.selected && !scope.custom) {
      set.addClass("highlight alttext");
    }
    if (i > 0) {
      set.append("<b class='flex flexmiddle'>"+data.defaults[i].name+"</b>");
    }
    else {
      set.append("<b class='flex middle'>"+data.defaults[i].name+"</b>");
    }

    set.attr("index", i);
    set.click(function(){
      app.attr("set", $(this).attr("index"));
      app.removeAttr("custom");
      obj.update();
      layout.coverlay("select-stamps");
    });
  }

  for (var i in data.sets) {
    var set = $("<div>").appendTo(setList);
    set.addClass("smooth outline hover2 flexrow spadding");
    if (i == scope.selected && scope.custom) {
      set.addClass("highlight alttext");
    }
    if (i > 0) {
      set.append("<b class='flex flexmiddle'>"+data.sets[i].name+"</b>");
    }
    else {
      set.append("<b class='flex flexmiddle'>"+data.sets[i].name+"</b>");
    }

    set.attr("index", i);
    set.click(function(){
      app.attr("set", $(this).attr("index"));
      app.attr("custom", "true");
      obj.update();
      layout.coverlay("select-stamps");
    });
    if (i != 0) {
      var del = genIcon("remove").appendTo(set);
      del.addClass("background lrpadding outline alttext");
      del.attr("index", i);
      del.attr("title", "Delete Collection");
      del.addClass("destroy");
      del.click(function(){
        data.sets.splice($(this).attr("index"));
        obj.sync("storeCollection");
      });
    }
  }
  var doScale;
  if (!scope.viewOnly) {
    setList.addClass("outlinebottom");

    var subOptions = $("<div>").appendTo(content);
    subOptions.addClass("flexcolumn flexmiddle foreground alttext padding subtitle");

    var checkWrap = $("<div>").appendTo(subOptions);
    checkWrap.addClass("flexmiddle");

    var doScale = genInput({
      type : "checkbox",
      parent : checkWrap,
    });
    doScale.prop("checked", true);
    doScale.css("margin-top", "0");

    checkWrap.append("Scale to Grid Size");

    var newCollection = genIcon("plus", "New Collection")//.appendTo(subOptions);
    newCollection.click(function(){
      ui_prompt({
        target : $(this),
        inputs : {
          "Collection Name" : ""
        },
        click : function(ev, inputs){
          data.sets.push({name : inputs["Collection Name"].val(), stamps : [], sheets : {}});
          obj.update();
        }
      })
    });

    if (scope.custom) {
      var addStamp = genIcon("plus", "Add Sheet").appendTo(subOptions);
      addStamp.click(function(){
        ui_prompt({
          target : $(this),
          inputs : {
            "Name" : "",
            "URL" : "",
            "Padding" : {type : "number", value : 0},
            "Grid Width" : {type : "number", value : 32},
            "Grid Height" : {type : "number", value : 32},
          },
          click : function(ev, inputs) {
            if (inputs["URL"].val() && inputs["Name"].val()) {
              data.sets[scope.selected].sheets[inputs["Name"].val()] = {};
              var imgData = data.sets[scope.selected].sheets[inputs["Name"].val()];
              imgData.p = inputs["Padding"].val();
              imgData.gW = inputs["Grid Width"].val();
              imgData.gH = inputs["Grid Height"].val();
              if (imgData.i == inputs["URL"].val()) {
                obj.sync("storeCollection");
              }
              else {
                imgData.i = inputs["URL"].val();
                var img = $("<img>").appendTo(addStamp);
                img.attr("src", imgData.i);
                img.bind("load", function(){
                  imgData.w = $(this).width();
                  imgData.h = $(this).height();
                  imgData.p = inputs["Padding"].val();
                  imgData.gW = inputs["Grid Width"].val();
                  imgData.gH = inputs["Grid Height"].val();
                  obj.sync("storeCollection");
                });
              }
            }
          }
        });
      });
    }
  }

  var listWrapper = $("<div>").appendTo(stampWrap);
  listWrapper.addClass("flexcolumn flex");
  var target = data.defaults;
  if (scope.custom) {
    target = data.sets;
  }
  if (target[scope.selected]) {
    if (target[scope.selected].legal) {
      var license = $("<div class='background alttext flexmiddle fit-x lrpadding'><a "+((target[scope.selected].legal.href != null)?("href='"+target[scope.selected].legal.href+"' target='_blank'"):(""))+">"+(target[scope.selected].legal.name || "License")+"</a></div>").appendTo(listWrapper);
      license.attr("title", "License");
      if (target[scope.selected].legal.license) {
        license.click(function(){
          var content = $("<div>");
          if (target[scope.selected].legal.html) {
            content.css("width", "30vw");
            content.css("height", "40vh");
            setTimeout(function(){
              var newFrame = $("<iframe>").appendTo(content);
              newFrame.attr("width", content.width());
              newFrame.attr("height", content.height());
              newFrame.attr("sandbox", "");
              newFrame.css("border", "none");
              newFrame.css("outline", "none");

              var str = target[scope.selected].legal.license;
              str = replaceAll(str, "href=", "nolinks=");
              str = replaceAll(str, "iframe", "div");

              newFrame.contents().find('html').html(str);
            }, 10);
          }
          else {
            content = $("<textarea>");
            content.css("border", "none");
            content.css("disabled", "true");
            content.css("width", "30vw");
            content.css("height", "40vh");
            content.text(target[scope.selected].legal.license);
          }
          var pop = ui_popOut({
            target : $(this),
            id : "license",
          }, content);
        });
      }
    }

    var stampList = $("<div>").appendTo(listWrapper);
    stampList.addClass("flexrow flexaround flexwrap flex lpadding scroll-y");

    if (!layout.mobile) {
      stampList.on("dragover", function(ev) {
        ev.preventDefault();
        ev.stopPropagation();
        if (!$("#"+app.attr("id")+"-drag-overlay").length) {
          var olay = layout.overlay({
            target : app,
            id : app.attr("id")+"-drag-overlay",
            style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
          });
          olay.addClass("flexcolumn flexmiddle alttext");
          olay.css("font-size", "2em");
          olay.append("<b>Drop to Create</b>");
        }
      });

      stampList.on('drop', function(ev){
        ev.preventDefault();
        ev.stopPropagation();
        var dt = ev.originalEvent.dataTransfer;
        if (dt.getData("Text")) {
          var imgVal = dt.getData("Text");
          var img = $("<img>").appendTo(app);
          img.attr("src", dt.getData("Text"));
          if (imgVal) {
            img.bind("load", function(){
              ui_prompt({
                target : stampList,
                inputs : {"Name" : ""},
                click : function(ev, inputs){
                  if (inputs["Name"].val() && inputs["Name"].val().trim()) {
                    obj.target[scope.selected].sheets[inputs["Name"].val().trim()] = {
                      p : 0,
                      gW : 32,
                      gH : 32,
                      i : imgVal,
                      w : img[0].naturalWidth,
                      h : img[0].naturalHeight,
                      nW : img[0].naturalWidth,
                      nH : img[0].naturalHeight
                    };
                    obj.update();
                  }
                }
              });
              img.hide();
              layout.coverlay(app.attr("id")+"-drag-overlay");
            });
          }
        }
      });
      stampList.on("dragleave", function(ev) {
        ev.preventDefault();
        ev.stopPropagation();
        layout.coverlay(app.attr("id")+"-drag-overlay");
      });
      stampList.mouseout(function(){
        layout.coverlay(app.attr("id")+"-drag-overlay");
      });
    }

    for (var i in target[scope.selected].sheets) {
      var urls = target[scope.selected].sheets;
      var imgWrap = $("<div>").appendTo(stampList);
      imgWrap.addClass("outline smooth flexcolumn lmargin flex hover2");
      imgWrap.attr("key", i);
      imgWrap.css("min-width", "70px");
      imgWrap.css("min-height", "70px");
      imgWrap.css("padding", "2px");
      imgWrap.css("overflow", "hidden");
      imgWrap.append("<div class='outlinebottom flexmiddle'><b>"+i+"</b></div>");
      imgWrap.click(function(){
        var newSheet = duplicate(urls[$(this).attr("key")]);
        newSheet.legal = target[scope.selected].legal;
        if (doScale.prop("checked") && board.data.gridW && board.data.gridH) {
          var scaleX = board.data.gridW/newSheet.gW;
          var scaleY = board.data.gridH/newSheet.gH;
          newSheet.nW = (newSheet.nW || newSheet.w);
          newSheet.nH = (newSheet.nH || newSheet.h);
          newSheet.w = (newSheet.w) * scaleX;
          newSheet.h = (newSheet.h) * scaleY;
          newSheet.gW = newSheet.gW * scaleX;
          newSheet.gH =  newSheet.gH * scaleY;
          if (newSheet.objs) {
            for (var i=0; i<newSheet.objs.length; i++) {
              var tileData = newSheet.objs[i];
              tileData.w = (tileData.w) * scaleX;
              tileData.h = (tileData.h) * scaleY;
            }
          }
        }
        board.data.sheets.push(newSheet);
        board.sync("updateAsset");
      });
      var sheet = $("<div>").appendTo(imgWrap);
      sheet.addClass("flex");
      sheet.css("background-image", "url('"+ urls[i].i +"')");
      sheet.css("background-repeat", "no-repeat");
      sheet.css("background-position", "center");
      sheet.css("background-size", "contain");

      if (scope.custom) {
        sheet.addClass("outlinebottom");

        var optionsBar = $("<div>").appendTo(imgWrap);
        optionsBar.addClass("flexaround smooth");

        var edit = genIcon("pencil").appendTo(optionsBar);
        edit.addClass("lrpadding");
        edit.attr("index", i);
        edit.click(function(ev){
          var imgData = urls[$(this).attr("index")];
          ui_prompt({
            target : $(this),
            inputs : {
              "URL" : imgData.i,
              "Padding" : {type : "number", value : imgData.p},
              "Grid Width" : {type : "number", value : imgData.gW},
              "Grid Height" : {type : "number", value : imgData.gH},
            },
            click : function(ev, inputs) {
              imgData.p = inputs["Padding"].val();
              imgData.gW = inputs["Grid Width"].val();
              imgData.gH = inputs["Grid Height"].val();
              if (imgData.i == inputs["URL"].val()) {
                obj.sync("storeCollection");
              }
              else {
                imgData.i = inputs["URL"].val();
                var img = $("<img>").appendTo(edit);
                img.attr("src", imgData.i);
                img.bind("load", function(){
                  imgData.w = $(this).width();
                  imgData.h = $(this).height();
                  imgData.p = inputs["Padding"].val();
                  imgData.gW = inputs["Grid Width"].val();
                  imgData.gH = inputs["Grid Height"].val();
                  obj.sync("storeCollection");
                });
              }
            }
          });
          ev.preventDefault();
          ev.stopPropagation();
        });

        var del = genIcon("trash").appendTo(optionsBar);
        del.addClass("lrpadding");
        del.attr("index", i);
        del.addClass("destroy");
        del.click(function(ev){
          delete urls[$(this).attr("index")];
          obj.sync("storeCollection");
          ev.preventDefault();
          ev.stopPropagation();
        });
      }
    }

    stampDiv.append("<div class='flexmiddle subtitle'><i>By using these tiles you accept to their license and terms (if applicable)</i></div>");
  }
  return stampDiv;
});

sync.render("ui_calendar", function(obj, app, scope) {
  scope = scope || {calendar : Number(app.attr("calendar") || 0), month : (Number(app.attr("month")) || null)};
  obj.data.calendars = obj.data.calendars || [
    {
      name : "Standard Calendar",
      months : [
        {name : "January", days : 31},
        {name : "February", days : 28},
        {name : "March", days : 31},
        {name : "April", days : 30},
        {name : "May", days : 31},
        {name : "June", days : 30},
        {name : "July", days : 31},
        {name : "August", days : 31},
        {name : "September", days : 30},
        {name : "October", days : 31},
        {name : "November", days : 30},
        {name : "December", days : 31},
      ],
      days : ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      units : 365,
      events : {},
      weather : {},
      day : 0
    },
  ];


  var div = $("<div>");
  div.addClass("flexcolumn fit-xy");

  var calendars = $("<div>").appendTo(div);
  calendars.addClass("flexrow fit-x");
  for (var i in obj.data.calendars) {
    var baseCalendar = $("<div>").appendTo(calendars);
    baseCalendar.addClass("subtitle alttext bold smooth padding flexmiddle hover2");
    baseCalendar.attr("index", i);
    baseCalendar.text(obj.data.calendars[i].name);
    if (scope.calendar == i) {
      baseCalendar.addClass("highlight");
    }
    else {
      baseCalendar.addClass("background");
    }
    baseCalendar.click(function(ev){
      app.attr("calendar", $(this).attr("index"));
      obj.update();
    });
    baseCalendar.contextmenu(function(ev){
      var calendar = $(this).attr("index");


      var actionsList = [
        {
          name : "Rename",
          click : function(ev, ui){
            ui_prompt({
              target : ui,
              inputs : {
                "Name" : obj.data.calendars[calendar].name
              },
              click : function(ev, inputs) {
                obj.data.calendars[calendar].name = inputs["Name"].val();
                if (obj == game.state) {
                  obj.sync("updateState");
                }
                else {
                  if (obj == game.state) {
                    obj.sync("updateState");
                  }
                  else {
                    obj.update();
                  }
                }
              }
            });
          }
        },
        {
          name : "Set day offset",
          click : function(ev, ui){
            ui_prompt({
              target : ui,
              inputs : {
                "Offset" : obj.data.calendars[calendar].offset
              },
              click : function(ev, inputs) {
                obj.data.calendars[calendar].offset = Number(inputs["Offset"].val() || 0);
                if (obj == game.state) {
                  obj.sync("updateState");
                }
                else {
                  obj.update();
                }
              }
            });
          }
        },
        {
          name : "Delete",
          submenu : [
            {
              name : "Confirm",
              click : function(ev, inputs) {
                obj.data.calendars.splice(calendar, 1);
                app.removeAttr("calendar");
                if (obj == game.state) {
                  obj.sync("updateState");
                }
                else {
                  obj.update();
                }
              }
            }
          ]
        }
      ];

      ui_dropMenu($(this), actionsList, {id : "rename"});
      return false;
    });
  }

  var baseCalendar = $("<div>").appendTo(calendars);
  baseCalendar.addClass("bold lrpadding flexmiddle");
  baseCalendar.append(genIcon("plus"));
  baseCalendar.click(function(){
    obj.data.calendars.push(
      {
        name : "Standard Calendar",
        months : [
          {name : "January", days : 31},
          {name : "February", days : 28},
          {name : "March", days : 31},
          {name : "April", days : 30},
          {name : "May", days : 31},
          {name : "June", days : 30},
          {name : "July", days : 31},
          {name : "August", days : 31},
          {name : "September", days : 30},
          {name : "October", days : 31},
          {name : "November", days : 30},
          {name : "December", days : 31},
        ],
        days : ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        units : 365,
        events : {},
        weather : {},
        day : 1
      }
    );
    if (obj == game.state) {
      obj.sync("updateState");
    }
    else {
      obj.update();
    }
  });

  var config = $("<div>").appendTo(div);
  config.addClass("flexrow fit-x");

  for (var k in obj.data.calendars[scope.calendar].months) {
    var highlight = $("<button>").appendTo(config);
    highlight.addClass("flexmiddle flex spadding subtitle");
    highlight.attr("month", k);
    highlight.text(obj.data.calendars[scope.calendar].months[k].name);

    if ((scope.month || 0) == k) {
      highlight.addClass("highlight alttext");
      highlight.click(function(){
        var month = $(this).attr("month");
        var calendar = Number(scope.calendar);
        var actionsList = [
          {
            name : "Change Month",
            click : function(ev, ui){
              ui_prompt({
                target : ui,
                id : "change-month",
                inputs : {
                  "Name" : obj.data.calendars[calendar].months[month].name,
                  "Days" : obj.data.calendars[calendar].months[month].days
                },
                click : function(ev, inputs) {
                  obj.data.calendars[calendar].months[month].name = inputs["Name"].val();
                  obj.data.calendars[calendar].months[month].days = inputs["Days"].val();
                  if (obj == game.state) {
                    obj.sync("updateState");
                  }
                  else {
                    obj.update();
                  }
                }
              });
            }
          },
          {
            name : "Add new Month",
            click : function(ev, ui){
              obj.data.calendars[calendar].months.push({name : "New Month", days : 30});
              app.attr("month", obj.data.calendars[calendar].months.length-1);
              if (obj == game.state) {
                obj.sync("updateState");
              }
              else {
                obj.update();
              }
            }
          },
          {
            name : "Remove Month",
            click : function(ev, ui){
              obj.data.calendars[calendar].months.splice(month, 1);
              if (obj == game.state) {
                obj.sync("updateState");
              }
              else {
                obj.update();
              }
            }
          }
        ];

        ui_dropMenu($(this), actionsList, {id : "generate-weather"});
      });
    }
    else {
      highlight.click(function(){
        app.attr("month", $(this).attr("month"));
        obj.update();
      });
    }
  }

  var rightOption = $("<div>").appendTo(config);
  rightOption.addClass("flexrow flexmiddle");

  var yearView = $("<button>");//.appendTo(rightOption);
  yearView.append("Year");

  var monthView = $("<button>");//.appendTo(rightOption);
  monthView.append("Month");

  var weekData = $("<div>").appendTo(div);
  weekData.addClass("flexrow fit-x");
  weekData.css("width", "800px");

  var weekDays = obj.data.calendars[scope.calendar].days.length;

  for (var i=0; i<weekDays; i++) {
    var dayWrap = $("<div>").appendTo(weekData);
    dayWrap.addClass("flexrow flex spadding flexmiddle background smooth");

    var day = genInput({
      parent : dayWrap,
      classes : "lrmargin middle outline fit-x line alttext",
      value : obj.data.calendars[scope.calendar].days[i],
      day : i
    });
    day.change(function(){
      obj.data.calendars[scope.calendar].days[$(this).attr("day")] = $(this).val();
      if (obj == game.state) {
        obj.sync("updateState");
      }
      else {
        obj.update();
      }
    });
    day.contextmenu(function(){
      var day = $(this).attr("day");
      var actionsList = [
        {
          name : "Add Day",
          click : function(){
            obj.data.calendars[scope.calendar].days.push("");
            if (obj == game.state) {
              obj.sync("updateState");
            }
            else {
              obj.update();
            }
          }
        },
        {
          name : "Remove Day",
          click : function(){
            obj.data.calendars[scope.calendar].days.splice(day, 1);
            if (obj == game.state) {
              obj.sync("updateState");
            }
            else {
              obj.update();
            }
          }
        }
      ];

      ui_dropMenu($(this), actionsList, {id : "add-day"});
      return false;
    });
  }

  var tableWrap = $("<div>").appendTo(div);
  tableWrap.addClass("flex");
  tableWrap.css("position", "relative");
  tableWrap.css("overflow", "auto");
  tableWrap.attr("_lastScrollTop", app.attr("_lastScrollTop"));
  tableWrap.attr("_lastScrollLeft", app.attr("_lastScrollLeft"));
  tableWrap.scroll(function(){
    app.attr("_lastScrollTop", $(this).scrollTop());
    app.attr("_lastScrollLeft", $(this).scrollLeft());
  });

  var table = $("<div>").appendTo(tableWrap);
  table.css("width", "800px");

  var week = $("<div>").appendTo(table);
  week.addClass("flexrow fit-x");

  var daysCount = duplicate(obj.data.calendars[scope.calendar].units);
  var presentDay = duplicate(obj.data.calendars[scope.calendar].day);
  var week;

  var monthOverride;
  var offset = obj.data.calendars[scope.calendar].offset || 0;
  for (var j=0; j<obj.data.calendars[scope.calendar].months.length; j++) {
    monthOverride = j;
    var monthData = obj.data.calendars[scope.calendar].months[j];
    monthData.days = Number(monthData.days);
    if ((scope.month == j) || (scope.month == null && (presentDay <= monthData.days))) {
      for (var i=0; i<Math.ceil((monthData.days+offset)/weekDays)*weekDays; i++) {
        if (i % weekDays == 0) {
          week = $("<div>").appendTo(table);
          week.addClass("flexrow fit-x");
        }

        var currentDay = obj.data.calendars[scope.calendar].units-daysCount+i-offset+1;

        var day = $("<div>").appendTo(week);
        day.addClass("flexcolumn outline flex");
        day.css("position", "relative");
        day.css("min-height", "100px");
        day.attr("calendar", scope.calendar);
        day.attr("day", currentDay);
        day.css("cursor", "pointer");

        day.click(function(ev) {
          var calendar = $(this).attr("calendar");
          var day = $(this).attr("day");
          var actionsList = [
            {
              name : "Add Event",
              click : function(ev, ui){
                ui_prompt({
                  target : app,
                  id : "add-text",
                  inputs : {
                    "Text" : $("<textarea>").css("min-height", "100px").css("min-width", "100%"),
                  },
                  click : function(ev, inputs){
                    if (inputs["Text"].val() && inputs["Text"].val().trim()) {
                      obj.data.calendars[scope.calendar].events[day] = obj.data.calendars[scope.calendar].events[day] || [];
                      obj.data.calendars[scope.calendar].events[day].push({name : inputs["Text"].val()});
                    }

                    if (obj == game.state) {
                      obj.sync("updateState");
                    }
                    else {
                      obj.update();
                    }
                    layout.coverlay("add-asset");
                  }
                });
              }
            },
            {
              name : "Add Link",
              click : function(){
                var eventData = {};
                var content = sync.render("ui_assetPicker")(obj, app, {
                  category : "c",
                  hideCreate : true,
                  select : function(ev, ui, ent, options, entities){
                    obj.data.calendars[scope.calendar].events[day] = obj.data.calendars[scope.calendar].events[day] || [];
                    obj.data.calendars[scope.calendar].events[day].push({ent : ent.id()});

                    if (obj == game.state) {
                      obj.sync("updateState");
                    }
                    else {
                      obj.update();
                    }
                    layout.coverlay("add-asset");
                  }
                });
                var pop = ui_popOut({
                  target : $("body"),
                  prompt : true,
                  id : "add-asset",
                  style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
                }, content);
                pop.resizable();
              }
            }
          ];

          ui_dropMenu($(this), actionsList, {id : "drop"});

          ev.stopPropagation();
          return false;
        });

        if ((i >= offset) && (i < monthData.days + offset)) {
          var dayNumberRow = $("<div>").appendTo(day);
          dayNumberRow.addClass("flexrow fit-x inactive");
          dayNumberRow.click(function(ev) {
            ev.stopPropagation();
            return false;
          });

          var tempObj = sync.dummyObj();
          tempObj.data = {calendar : scope.calendar || 0, day : currentDay, setting : obj.data.calendars[scope.calendar].weather[currentDay] || {}};

          var setting = sync.newApp("ui_setting").appendTo(dayNumberRow);
          setting.addClass("flex spadding flexrow");
          setting.attr("supressHover", true);
          setting.attr("size", "18px");

          tempObj.addApp(setting);
          tempObj.listen["change"] = function(oObj, rObj, target){
            obj.data.calendars[oObj.data.calendar].weather[oObj.data.day] = duplicate(oObj.data.setting);
            return true;
          };

          var dayNumber = $("<div>").appendTo(dayNumberRow);
          dayNumber.addClass("lrpadding smooth hover2 flexmiddle");
          dayNumber.attr("day", currentDay);
          dayNumber.append("<text>"+(i-offset+1)+"</text>");
          if (i < presentDay-1) {
            day.addClass("inactive");
          }
          else if (i == presentDay-1) {
            dayNumber.addClass("highlight alttext");
          }
          dayNumber.click(function(){
            var day = $(this).attr("day");
            obj.data.calendars[scope.calendar].day = day;
            if (obj == game.state) {
              obj.sync("updateState");
            }
            else {
              obj.update();
            }
          });

          if (obj.data.calendars[scope.calendar].events[currentDay]) {
            for (var k=0; k<obj.data.calendars[scope.calendar].events[currentDay].length; k++) {
              var eventData = obj.data.calendars[scope.calendar].events[currentDay][k];
              if (eventData) {
                var eventBar = $("<div>").appendTo(day);
                eventBar.addClass("flexcolumn lrpadding subtitle");
                eventBar.css("cursor", "text");
                eventBar.attr("calendar", scope.calendar);
                eventBar.attr("day", currentDay);
                eventBar.attr("event", k);
                eventBar.contextmenu(function(ev){
                  var calendar = $(this).attr("calendar");
                  var day = $(this).attr("day");
                  var eventData = obj.data.calendars[scope.calendar].events[$(this).attr("day")][$(this).attr("event")];
                  var events = obj.data.calendars[scope.calendar].events[$(this).attr("day")];
                  var eventID = $(this).attr("event");
                  var actionsList = [];
                  actionsList.push({
                    name : "Add",
                    submenu : [
                      {
                        name : "Event",
                        click : function(ev, ui){
                          ui_prompt({
                            target : app,
                            id : "add-text",
                            inputs : {
                              "Text" : $("<textarea>").css("min-height", "100px").css("min-width", "100%"),
                            },
                            click : function(ev, inputs){
                              if (inputs["Text"].val() && inputs["Text"].val().trim()) {
                                obj.data.calendars[scope.calendar].events[day] = obj.data.calendars[scope.calendar].events[day] || [];
                                obj.data.calendars[scope.calendar].events[day].push({name : inputs["Text"].val()});
                              }

                              if (obj == game.state) {
                                obj.sync("updateState");
                              }
                              else {
                                obj.update();
                              }
                              layout.coverlay("add-asset");
                            }
                          });
                        }
                      },
                      {
                        name : "Link",
                        click : function(){
                          var eventData = {};
                          var content = sync.render("ui_assetPicker")(obj, app, {
                            category : "c",
                            hideCreate : true,
                            select : function(ev, ui, ent, options, entities){
                              obj.data.calendars[scope.calendar].events[day] = obj.data.calendars[scope.calendar].events[day] || [];
                              obj.data.calendars[scope.calendar].events[day].push({ent : ent.id()});
                              if (obj == game.state) {
                                obj.sync("updateState");
                              }
                              else {
                                obj.update();
                              }
                              layout.coverlay("add-asset");
                            }
                          });
                          var pop = ui_popOut({
                            target : $("body"),
                            prompt : true,
                            id : "add-asset",
                            style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
                          }, content);
                          pop.resizable();
                        }
                      }
                    ]
                  });
                  actionsList.push({
                    name : "Color",
                    submenu : [
                      {
                        icon : "tint",
                        style : {"background-color" : "rgba(34,34,34,1)", color : "transparent"},
                        click : function() {
                          eventData.c = "rgba(34,34,34,1)";
                          eventData.tc = "white";
                          if (obj == game.state) {
                            obj.sync("updateState");
                          }
                          else {
                            obj.update();
                          }
                        }
                      },
                      {
                        icon : "tint",
                        style : {"background-color" : "rgba(187,0,0,1)", color : "transparent"},
                        click : function() {
                          eventData.c = "rgba(187,0,0,1)";
                          eventData.tc = "white";
                          if (obj == game.state) {
                            obj.sync("updateState");
                          }
                          else {
                            obj.update();
                          }
                        }
                      },
                      {
                        icon : "tint",
                        style : {"background-color" : "rgba(255,153,0,1)", color : "transparent"},
                        click : function() {
                          eventData.c = "rgba(255,153,0,1)";
                          if (obj == game.state) {
                            obj.sync("updateState");
                          }
                          else {
                            obj.update();
                          }
                        }
                      },
                      {
                        icon : "tint",
                        style : {"background-color" : "rgba(255,240,0,1)", color : "transparent"},
                        click : function() {
                          eventData.c = "rgba(255,240,0,1)";
                          if (obj == game.state) {
                            obj.sync("updateState");
                          }
                          else {
                            obj.update();
                          }
                        }
                      },
                      {
                        icon : "tint",
                        style : {"background-color" : "rgba(0,187,0,1)", color : "transparent"},
                        click : function() {
                          eventData.c = "rgba(0,187,0,1)";
                          delete eventData.tc;
                          if (obj == game.state) {
                            obj.sync("updateState");
                          }
                          else {
                            obj.update();
                          }
                        }
                      },
                      {
                        icon : "tint",
                        style : {"background-color" : "rgba(0,115,230,1)", color : "transparent"},
                        click : function() {
                          eventData.c = "rgba(0,115,230,1)";
                          eventData.tc = "white";
                          if (obj == game.state) {
                            obj.sync("updateState");
                          }
                          else {
                            obj.update();
                          }
                        }
                      },
                      {
                        icon : "tint",
                        style : {"background-color" : "rgba(176,0,187,1)", color : "transparent"},
                        click : function() {
                          eventData.c = "rgba(176,0,187,1)";
                          eventData.tc = "white";
                          if (obj == game.state) {
                            obj.sync("updateState");
                          }
                          else {
                            obj.update();
                          }
                        }
                      },
                      {
                        icon : "tint",
                        style : {"background-color" : "rgba(255,115,255,1)", color : "transparent"},
                        click : function() {
                          eventData.c = "rgba(255,115,255,1)";
                          eventData.tc = "white";
                          if (obj == game.state) {
                            obj.sync("updateState");
                          }
                          else {
                            obj.update();
                          }
                        }
                      },
                      {
                        icon : "tint",
                        style : {"background-color" : "rgba(255,255,255,1)", color : "transparent"},
                        click : function() {
                          delete eventData.c;
                          delete eventData.tc;
                          if (obj == game.state) {
                            obj.sync("updateState");
                          }
                          else {
                            obj.update();
                          }
                        }
                      },
                    ]
                  });
                  if (eventData.ent) {
                    actionsList.push({
                      name : "Change Link",
                      click : function(){
                        var content = sync.render("ui_assetPicker")(obj, app, {
                          category : "c",
                          hideCreate : true,
                          select : function(ev, ui, ent, options, entities){
                            eventData.ent = ent.id();
                            if (obj == game.state) {
                              obj.sync("updateState");
                            }
                            else {
                              obj.update();
                            }
                            layout.coverlay("add-asset");
                          }
                        });
                        var pop = ui_popOut({
                          target : $("body"),
                          prompt : true,
                          id : "add-asset",
                          style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
                        }, content);
                        pop.resizable();
                      }
                    });
                    actionsList.push({
                      name : "Detach Link",
                      click : function(){
                        delete eventData.ent;
                        if (obj == game.state) {
                          obj.sync("updateState");
                        }
                        else {
                          obj.update();
                        }
                      }
                    });
                  }
                  actionsList.push({
                    name : "Remove",
                    click : function(){
                      events.splice(eventID, 1);
                      if (obj == game.state) {
                        obj.sync("updateState");
                      }
                      else {
                        obj.update();
                      }
                    }
                  });
                  ui_dropMenu($(this), actionsList, {id : "drop"});

                  ev.stopPropagation();
                  return false;
                });
                eventBar.click(function(ev){
                  ev.stopPropagation();
                  return false;
                });

                var ent = getEnt(eventData.ent);
                if (eventData.ent) {
                  eventBar.addClass("underline flexmiddle");

                  if (ent) {
                    var link = genIcon(assetTypes[ent.data._t].i, eventData.name || sync.rawVal(ent.data.info.name)).appendTo(eventBar);
                    link.addClass("link lrpadding smooth");
                    link.attr("index", eventData.ent);
                    link.css("background-color", eventData.c);
                    link.css("color", eventData.tc);
                    link.click(function(ev){
                      var index = $(this).attr("index");
                      var ent = getEnt(index);
                      if (ent) {
                        assetTypes[ent.data._t].preview(ent, $(this));
                      }
                      ev.stopPropagation();
                      return false;
                    });
                  }
                }
                else if (eventData.name) {
                  var p = $("<p>").appendTo(eventBar);
                  p.addClass("link lrpadding smooth");
                  p.css("background-color", eventData.c);
                  p.css("color", eventData.tc);
                  p.css("margin", "0");
                  p.text(eventData.name);
                  p.click(function(ev){
                    $($(this).parent().children()[1]).css("height", $(this).height() + 10);
                    $(this).hide();
                    $($(this).parent().children()[1]).show();
                    $($(this).parent().children()[1]).focus();
                    ev.stopPropagation();
                  });

                  var text = $("<textarea>").appendTo(eventBar);
                  text.addClass("flexrow flexwrap bold fit-x");
                  text.attr("calendar", 0);
                  text.attr("day", currentDay);
                  text.attr("event", k);
                  text.attr("maxlength", "100");
                  text.css("outline", "none");
                  text.css("background-color", eventData.c || "transparent");
                  text.css("color", eventData.tc);
                  text.css("box-shadow", "none");
                  text.css("border", "none");
                  text.css("min-height", "60px");
                  text.text(eventData.name);
                  text.click(function(ev){
                    ev.stopPropagation();
                    return false;
                  });
                  text.blur(function(){
                    $(this).parent().children().show();
                    $(this).hide();
                  });
                  text.change(function(){
                    var val = String($(this).val());
                    if (val.trim()) {
                      obj.data.calendars[scope.calendar].events[$(this).attr("day")][$(this).attr("event")].name = val.trim();
                    }
                    else {
                      obj.data.calendars[scope.calendar].events[$(this).attr("day")].splice($(this).attr("event"), 1);
                    }
                    if (obj == game.state) {
                      obj.sync("updateState");
                    }
                    else {
                      obj.update();
                    }
                  });
                  text.hide();
                }
              }
              else {
                var eventBar = $("<div>").appendTo(day);
                eventBar.addClass("flexrow flexwrap lrpadding subtitle");
                eventBar.text(obj.data.calendars[scope.calendar].events[currentDay].name);
              }
            }
          }
        }
        else {
          day.css("border-color", "transparent");
        }
      }
      break;
    }
    daysCount -= monthData.days;
    presentDay -= monthData.days;
    offset = (weekDays-Math.abs((monthData.days+offset) % weekDays)) % weekDays;
  }
  if (scope.month == null) {
    scope.month = monthOverride;
  }

  return div;
});


sync.render("ui_setting", function(obj, app, scope) {
  scope = scope || {viewOnly : app.attr("viewOnly") == "true", supressHover : app.attr("supressHover") == "true", size : app.attr("size"), width : app.attr("width"), height : app.attr("height")};
  obj.data.setting = obj.data.setting || {};

  function changeTime(){
    if (obj != game.state) {
      return false;
    }
    var applied = false;
    $(".application[ui-name='ui_board']").each(function(){
      if (!applied && $(this).attr("displayApp") != null) {
        applied = true;
        var ent = getEnt($(this).attr("index"));
        if (ent && ent.data && ent.data._t == "b" && hasSecurity(getCookie("UserID"), "Rights", ent.data)) {
          var local = $(this).attr("local") == "true";
          var data = ent.data;
          if (obj.data.setting.time == "Night" || obj.data.setting.time == "Full Moon") {
            data.options.filter = ent.data.options.filter || {
              brightness : 65,
            };
            ent.data.options.filter.brightness = 65;
            if (!local) {
              ent.sync("updateAsset");
            }
            else {
              ent.update();
            }
          }
          else if (obj.data.setting.time == "Sunrise" || obj.data.setting.time == "Dawn") {
            data.options.filter = ent.data.options.filter || {
              brightness : 85,
            };
            ent.data.options.filter.brightness = 85;
            if (!local) {
              ent.sync("updateAsset");
            }
            else {
              ent.update();
            }
          }
          else if (obj.data.setting.time == "Sunset" || obj.data.setting.time == "Dusk") {
            data.options.filter = ent.data.options.filter || {
              brightness : 75,
            };
            ent.data.options.filter.brightness = 75;
            if (!local) {
              ent.sync("updateAsset");
            }
            else {
              ent.update();
            }
          }
          else {
            data.options.filter = ent.data.options.filter || {};
            delete data.options.filter.brightness;
            if (!local) {
              ent.sync("updateAsset");
            }
            else {
              ent.update();
            }
          }
        }
      }
    });
  }

  function changeWeather(){
    if (obj != game.state) {
      return false;
    }
    var applied = false;
    $(".application[ui-name='ui_board']").each(function(){
      if (!applied && $(this).attr("displayApp") != null) {
        applied = true;
        var ent = getEnt($(this).attr("index"));
        if (ent && ent.data && ent.data._t == "b" && hasSecurity(getCookie("UserID"), "Rights", ent.data)) {
          var local = $(this).attr("local") == "true";
          var data = ent.data;
          if (obj.data.setting.weather == "Snowy") {
            data.options.weather = "snow";
            if (!local) {
              ent.sync("updateAsset");
            }
            else {
              ent.update();
            }
          }
          else if (obj.data.setting.weather == "Light Rain") {
            data.options.weather = "rain";
            if (!local) {
              ent.sync("updateAsset");
            }
            else {
              ent.update();
            }
          }
          else if (obj.data.setting.weather == "Rain") {
            data.options.weather = "rain mix";
            if (!local) {
              ent.sync("updateAsset");
            }
            else {
              ent.update();
            }
          }
          else if (obj.data.setting.weather == "Heavy Rain") {
            data.options.weather = "downpour";
            if (!local) {
              ent.sync("updateAsset");
            }
            else {
              ent.update();
            }
          }
          else {
            delete data.options.weather;
            if (!local) {
              ent.sync("updateAsset");
            }
            else {
              ent.update();
            }
          }
        }
      }
    });
  }

  var div = $("<div>");
  div.addClass("flexrow");
  if (!scope.supressHover) {
    div.hover(function(){
      obj.data.setting = obj.data.setting || {};

      var content = $("<div>");
      content.addClass("flexcolumn");

      var images = $("<div>").appendTo(content);
      images.addClass("flexrow flexaround");

      var img = $("<img>").appendTo(images);
      img.attr("src", util.settings.time[obj.data.setting.time]);
      img.attr("width", scope.width || "100px");
      img.attr("height", scope.height || "100px");
      if (!obj.data.setting.time) {
        img.css("opacity", "0");
      }

      var img = $("<img>").appendTo(images);
      img.attr("src", util.settings.weather[obj.data.setting.weather]);
      img.attr("width", scope.width || "100px");
      img.attr("height", scope.height || "100px");
      if (!obj.data.setting.weather) {
        img.css("opacity", "0");
      }

      var img = $("<img>").appendTo(images);
      img.attr("src", util.settings.temp[obj.data.setting.temp]);
      img.attr("width", scope.width || "100px");
      img.attr("height", scope.height || "100px");
      if (!obj.data.setting.temp) {
        img.css("opacity", "0");
      }

      var text = $("<div>").appendTo(content);
      text.addClass("flexrow flexaround");

      text.append("<b class='flex middle'>"+(obj.data.setting.time || "None")+"</b>");
      text.append("<b class='flex middle'>"+(obj.data.setting.weather || "None")+"</b>");
      text.append("<b class='flex middle'>"+(obj.data.setting.temp || "None")+"</b>");

      var pop = ui_popOut({
        target : $(this),
        id : "setting-report",
        align : app.attr("alignpop") || "top",
        title : $("<a class='subtitle' href='https://creativecommons.org/licenses/by/3.0/' target='_blank'>Icons by Yun Liu</a>").css("pointer-events", "auto"),
        noCss : true,
      }, content).addClass("white").css("pointer-events", "none");
    },
    function(){
      if ($("#setting-report").hasClass("white")) {
        layout.coverlay("setting-report");
      }
    });
  }

  var size = scope.size || "18px";
  if (!scope.size && game.state != obj) {
    size = "64px";
  }

  var time = $("<div>").appendTo(div);
  time.addClass("white smooth");
  time.attr("title", obj.data.setting.time || "Click to assign, right click to randomize");
  time.css("width", size);
  time.css("height", size);
  time.css("background-image", "url('"+util.settings.time[obj.data.setting.time]+"')");
  time.css("background-size", "cover");
  time.css("background-position", "center");

  var weather = $("<div>").appendTo(div);
  weather.addClass("white smooth lrmargin");
  weather.attr("title", obj.data.setting.weather || "Click to assign, right click to randomize");
  weather.css("width", size);
  weather.css("height", size);
  weather.css("background-image", "url('"+util.settings.weather[obj.data.setting.weather]+"')");
  weather.css("background-size", "cover");
  weather.css("background-position", "center");

  var temp = $("<div>").appendTo(div);
  temp.addClass("white smooth");
  temp.attr("title", obj.data.setting.temp || "Click to assign, right click to randomize");
  temp.css("width", size);
  temp.css("height", size);
  temp.css("background-image", "url('"+util.settings.temp[obj.data.setting.temp]+"')");
  temp.css("background-size", "cover");
  temp.css("background-position", "center");

  if (hasSecurity(getCookie("UserID"), "Assistant Master") && !scope.viewOnly) {
    time.addClass("hover2");
    time.contextmenu(function(){
      var keys = Object.keys(util.settings.time);
      keys.push(null);

      obj.data.setting = obj.data.setting || {};
      obj.data.setting.time = keys[Math.floor(Math.random()*keys.length)];

      changeTime();

      if (obj == game.state) {
        obj.sync("updateState");
      }
      else {
        obj.update();
      }
      return false;
    });
    time.click(function(){
      var actionList = [];
      for (var i in util.settings.time) {
        actionList.push(
          {
            title : i,
            icon : "tint",
            attr : {title : i, value : util.settings.time[i]},
            style : {"color" : "transparent", "background-image" : "url('"+util.settings.time[i]+"')", "background-size" : "cover", "background-position" : "center"},
            click : function(ev, ui){
              obj.data.setting = obj.data.setting || {};
              obj.data.setting.time = ui.attr("title");

              changeTime();

              if (obj == game.state) {
                obj.sync("updateState");
              }
              else {
                obj.update();
              }
            }
          },
        );
      }

      actionList.push({
        title : "None",
        icon : "tint",
        style : {"color" : "transparent"},
        click : function(ev, ui){
          obj.data.setting = obj.data.setting || {};
          delete obj.data.setting.time;

          changeTime();
          if (obj == game.state) {
            obj.sync("updateState");
          }
          else {
            obj.update();
          }
        }
      });

      ui_dropMenu($(this), actionList, {id : "setting-report", hideClose : true, align : "bottom", style : {"font-size" : "1.6em"}});
    });

    weather.addClass("hover2");
    weather.contextmenu(function(){
      var keys = Object.keys(util.settings.weather);
      keys.push(null);

      obj.data.setting = obj.data.setting || {};
      obj.data.setting.weather = keys[Math.floor(Math.random()*keys.length)];

      changeWeather();

      if (obj == game.state) {
        obj.sync("updateState");
      }
      else {
        obj.update();
      }
      return false;
    });
    weather.click(function(){
      var actionList = [];
      for (var i in util.settings.weather) {
        actionList.push(
          {
            title : i,
            icon : "tint",
            attr : {title : i, value : util.settings.weather[i]},
            style : {"color" : "transparent", "background-image" : "url('"+util.settings.weather[i]+"')", "background-size" : "cover", "background-position" : "center"},
            click : function(ev, ui){
              obj.data.setting = obj.data.setting || {};
              obj.data.setting.weather = ui.attr("title");

              changeWeather();

              if (obj == game.state) {
                obj.sync("updateState");
              }
              else {
                obj.update();
              }
            }
          },
        );
      }

      actionList.push({
        title : "None",
        icon : "tint",
        style : {"color" : "transparent"},
        click : function(ev, ui){
          obj.data.setting = obj.data.setting || {};
          delete obj.data.setting.weather;

          changeWeather();

          if (obj == game.state) {
            obj.sync("updateState");
          }
          else {
            obj.update();
          }
        }
      });

      ui_dropMenu($(this), actionList, {id : "setting-report", hideClose : true, align : "bottom", style : {"font-size" : "1.6em"}});
    });

    temp.addClass("hover2");
    temp.contextmenu(function(){
      var keys = Object.keys(util.settings.temp);
      keys.push(null);

      obj.data.setting = obj.data.setting || {};
      obj.data.setting.temp = keys[Math.floor(Math.random()*keys.length)];
      if (obj == game.state) {
        obj.sync("updateState");
      }
      else {
        obj.update();
      }
      return false;
    });
    temp.click(function(){
      var actionList = [];
      for (var i in util.settings.temp) {
        actionList.push(
          {
            title : i,
            icon : "tint",
            attr : {title : i, value : util.settings.temp[i]},
            style : {"color" : "transparent", "background-image" : "url('"+util.settings.temp[i]+"')", "background-size" : "cover", "background-position" : "center"},
            click : function(ev, ui){
              obj.data.setting = obj.data.setting || {};
              obj.data.setting.temp = ui.attr("title");
              if (obj == game.state) {
                obj.sync("updateState");
              }
              else {
                obj.update();
              }
            }
          },
        );
      }

      actionList.push({
        title : "None",
        icon : "tint",
        style : {"color" : "transparent"},
        click : function(ev, ui){
          obj.data.setting = obj.data.setting || {};
          delete obj.data.setting.temp;
          if (obj == game.state) {
            obj.sync("updateState");
          }
          else {
            obj.update();
          }
        }
      });

      ui_dropMenu($(this), actionList, {id : "setting-report", hideClose : true, align : "bottom", style : {"font-size" : "1.6em"}});
    });
  }

  return div;
});

sync.render("ui_sheet", function(obj, app, scope) {
  var boardData = obj.data;

  if (app.attr("targetapp")) {
    app = $("#"+app.attr("targetapp"));
  }

  scope = scope || {local : app.attr("local") == "true", index : app.attr("index"), hideOptions : app.attr("hideoptions") == "true", source : app.attr("source") == "true"};
  var data = boardData.sheets[scope.index];

  if (data.objs == null || data.objs.length == 0) {
    scope.source = true;
  }

  var div = $("<div>");
  div.addClass("flexcolumn fit-xy");
  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("flexrow flexbetween background boxinshadow");

  var button = $("<button>").appendTo(optionsBar);
  button.addClass("subtitle");
  button.append("Show Atlas");
  button.click(function(){
    if (scope.source) {
      app.removeAttr("source");
    }
    else {
      app.attr("source", "true");
    }
    obj.update();
  });

  if (scope.source) {
    button.addClass("highlight alttext");

    var moveToCollection = genIcon("cloud-upload", "Add Sheet to Collection");//.appendTo(optionsBar);
    moveToCollection.addClass("alttext");
    moveToCollection.attr("title", "Add to Collection");
    moveToCollection.css("color", "white");
    moveToCollection.click(function(){
      var content = $("<div>");
      var newApp = sync.newApp("ui_boardStamps", null, {});
      for (var setID in game.locals["stamps"].data.sets) {
        var set = $("<div>").appendTo(content);
        set.addClass("hover2 outline");
        set.attr("id", setID);
        set.append("<b>"+game.locals["stamps"].data.sets[setID].name+"</b>");
        set.click(function(){
          var setID = $(this).attr("id");
          ui_prompt({
            target : $(this),
            inputs : {"Name" : ""},
            id : "prompt",
            click : function(ev, inputs) {
              game.locals["stamps"].data.sets[setID].sheets[inputs["Name"].val()] = boardData.sheets[scope.index];
              game.locals["stamps"].update();
              layout.coverlay("prompt");
              layout.coverlay("move-sheet-to-collection");
            }
          });
        });
      }
      var pop = ui_popOut({
        target : $(this),
        id : "move-sheet-to-collection"
      }, content);
    });


    var moveToCollection = genIcon("unchecked", "Save Object").appendTo(optionsBar);
    moveToCollection.addClass("alttext");
    moveToCollection.css("color", "white");
    moveToCollection.attr("title", "Save Selection as Object");
    moveToCollection.click(function(){
      data.objs = data.objs || [];
      var cont = true;
      for (var i in data.objs) {
        if (JSON.stringify(data.objs[i]) == JSON.stringify(floatingTile)) {
          cont = false;
          break;
        }
      }
      if (floatingTile) {
        if (cont) {
          data.objs.push(duplicate(floatingTile));

          sendAlert({text : "Object Saved"});

          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        }
        else {
          sendAlert({text : "Duplicate detected"});
        }
      }
      else {
        sendAlert({text : "No Tile"});
      }
    });

    var controls;

    var hide = genIcon("cog").appendTo(optionsBar);
    hide.addClass("alttext lrmargin");
    hide.css("color", "white");
    hide.click(function(){
      if (app.attr("hideoptions") == "true") {
        app.removeAttr("hideoptions");
        controls.show();
      }
      else {
        app.attr("hideoptions", true);
        controls.hide();
      }
    });

    var sheetContainer = $("<div>").appendTo(div);
    sheetContainer.css("min-height", "20vh");
    sheetContainer.css("flex", "1");
    sheetContainer.css("position", "relative");
    sheetContainer.css("overflow", "auto");
    sheetContainer.attr("_lastScrollTop", app.attr("_lastScrollTop_sheet"));
    sheetContainer.attr("_lastScrollLeft", app.attr("_lastScrollLeft_sheet"));

    var sheetContent = $("<div>").appendTo(sheetContainer);
    sheetContent.css("position", "absolute");

    if (data.i) {
      sheetContent.css("width", data.w);
      sheetContent.css("height", data.h);
      sheetContent.css("background-image", "url('"+data.i+"')");
      sheetContent.css("background-size", "100% 100%");
      sheetContent.css("background-repeat", "no-repeat");
    }
    var tilePlate = $("<div>").appendTo(div);
    tilePlate.addClass("flexmiddle");

    var xGrid = Math.ceil(data.w/(data.gW + data.p));
    var yGrid = Math.ceil(data.h/(data.gH + data.p));

    if (data.w && data.h && data.gW && data.gH) {
      sheetContent.selectable({
        start : function(ev, ui) {
          $("#sheet-selection").remove();
          var xPos = ev.pageX;
          var yPos = ev.pageY;
          var offset = sheetContent.offset();
          xPos = xPos - offset.left;
          yPos = yPos - offset.top;

          xPos = xPos + sheetContent.scrollLeft();
          yPos = yPos + sheetContent.scrollTop();
          sheetContent.attr("start-x", xPos);
          sheetContent.attr("start-y", yPos);
          $(ui.helper).css("pointer-events", "none");
        },
        stop: function(ev, ui) {
          $(ui.helper).css("pointer-events", "none");
          var sX = sheetContent.attr("start-x");
          var sY = sheetContent.attr("start-y");
          var eX = ev.pageX;
          var eY = ev.pageY;
          var offset = sheetContent.offset();
          eX = eX - offset.left;
          eY = eY - offset.top;

          eX = eX + sheetContent.scrollLeft();
          eY = eY + sheetContent.scrollTop();
          if (eX < sX) {
            sX = eX;
            eX = sheetContent.attr("start-x");
          }
          if (eY < sY) {
            sY = eY;
            eY = sheetContent.attr("start-y");
          }
          var gridX = Math.max(Math.floor(sX/(data.gW + data.p)),0);
          var gridY = Math.max(Math.floor(sY/(data.gH + data.p)),0);
          var gridW = Math.ceil(eX/(data.gW + data.p))-gridX;
          var gridH = Math.ceil(eY/(data.gH + data.p))-gridY;

          var tileHighlight = $("<div>").appendTo(sheetContent);
          tileHighlight.addClass("sheet-hover");
          tileHighlight.attr("id", "sheet-selection");
          tileHighlight.css("position", "absolute");
          tileHighlight.css("left", gridX * (data.gW + data.p));
          tileHighlight.css("top", gridY * (data.gH + data.p));
          tileHighlight.css("width", gridW * (data.gW + data.p));
          tileHighlight.css("height", gridH * (data.gH + data.p));
          tileHighlight.attr("sIndex", scope.index);
          tileHighlight.attr("tile", gridX + xGrid * gridY);
          tileHighlight.attr("board", obj.id());
          tileHighlight.attr("gridW", gridW);
          tileHighlight.attr("gridH", gridH);
          tileHighlight.contextmenu(function(){
            floatingTile = null;
            $(this).remove();
            return false;
          })
          floatingTile = {
            s : scope.index,
            i : gridX + xGrid * gridY,
            board : obj.id(),
            gW : gridW,
            gH : gridH,
            w : gridW * (data.gW + data.p),
            h : gridH * (data.gH + data.p),
          }

          app.attr("_lastScrollTop_sheet", sheetContainer.scrollTop());
          app.attr("_lastScrollLeft_sheet", sheetContainer.scrollLeft());
        }
      });
      sheetContent.contextmenu(function(){
        floatingTile = null;
        obj.update();
        return false;
      });
    }
  }
  else {

    var checkWrap = $("<div>").appendTo(optionsBar);
    checkWrap.addClass("flexmiddle alttext subtitle lrmargin");

    var checkbox = genInput({
      type : "checkbox",
      parent : checkWrap,
      style : {"margin" : "0"}
    }).addClass("random-rotation-check");
    if (randomRot) {
      checkbox.prop("checked", true);
    }
    checkbox.change(function(){
      if ($(this).prop("checked") == true) {
        randomRot = true;
      }
      else {
        randomRot = false;
      }
    });
    $("<b>Random Rotation</b>").appendTo(checkWrap);


    var sheetContainer = $("<div>").appendTo(div);
    sheetContainer.addClass("flex flexcolumn");
    sheetContainer.css("overflow", "auto");
    sheetContainer.attr("_lastScrollTop", app.attr("_lastScrollTop_sheet"));
    sheetContainer.attr("_lastScrollLeft", app.attr("_lastScrollLeft_sheet"));
    var search = genInput({
      //parent : sheetContainer,
      classes : "fit-x",
      placeholder : "Search"
    });

    var tileList = $("<div>").appendTo(sheetContainer);
    tileList.addClass("fit-x flexrow flexwrap");

    if (hasSecurity(getCookie("UserID"), "Rights")) {
      tileList.sortable({
        filter : ".inventoryContent",
        update : function(ev, ui) {
          var newIndex;
          var count = 0;
          $(ui.item).attr("ignore", true);
          tileList.children().each(function(){
            if ($(this).attr("ignore")){
              newIndex = count;
            }
            count += 1;
          });
          var old = data.objs.splice($(ui.item).attr("index"), 1);
          util.insert(data.objs, newIndex, old[0]);
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        }
      });
    }
    console.log(data.objs);
    for (var i=0; i<data.objs.length; i++) {

    }
    for (var i=0; i<data.objs.length; i++) {
      var tileData = data.objs[i];

      var canvasWrap = $("<div>").appendTo(tileList);
      canvasWrap.addClass("hover2 outline smooth");
      canvasWrap.attr("index", i);
      canvasWrap.css("position", "relative");
      canvasWrap.css("overflow", "hidden");
      canvasWrap.css("width", 64);
      canvasWrap.css("height", 64);
      canvasWrap.css("margin", "0.25em");
      canvasWrap.click(function(){
        if (checkbox.prop("checked")) {
          randomRot = true;
        }
        tileList.children().removeClass("highlight");
        sendAlert({text : "Tile Selected"});
        floatingTile = duplicate(data.objs[$(this).attr("index")]);
        floatingTile.sheet = scope.index;
        $(this).addClass("highlight");
      });
      canvasWrap.contextmenu(function(){
        var index = $(this).attr("index");
        var actionsList = [
          {
            name : "Remove",
            click : function(){
              data.objs.splice(index, 1);
              if (!scope.local) {
                obj.sync("updateAsset");
              }
              else {
                obj.update();
              }
            }
          },
        ];

        ui_dropMenu($(this), actionsList, {id : "tile-option"});
        return false;
      });

      var img = $("<canvas>").appendTo(canvasWrap);
      img.attr("width", 64);
      img.attr("height", 64);
      img.css("position", "absolute");
      img.css("pointer-events", "none");

      var sheetData = obj.data.sheets[tileData.s || scope.index];
      var tileW = sheetData.gW + sheetData.p;
      var tileH = sheetData.gH + sheetData.p;
      var xGrid = Math.ceil(sheetData.w/(tileW));
      var yGrid = Math.ceil(sheetData.h/(tileH));

      var aspectW = 1;
      var aspectH = 1;
      if (sheetData.nW && sheetData.nH) {
        aspectW = sheetData.w/sheetData.nW;
        aspectH = sheetData.h/sheetData.nH;
      }

      var sX = (tileData.i % xGrid) * tileW;
      var sY = Math.floor(tileData.i / xGrid) * tileH;

      var w = (tileData.gW * (data.gridW || 64));
      var h = (tileData.gH * (data.gridH || 64));
      var sW = (tileData.gW || 1) * sheetData.gW + ((tileData.gW || 1)-1) * sheetData.p;
      var sH = (tileData.gH || 1) * sheetData.gH + ((tileData.gH || 1)-1) * sheetData.p;

      var isHex = obj.data.options && obj.data.options.hex;

      var dummyCanvas = $("<canvas>");
      dummyCanvas.attr("width", Math.max(w,h));
      dummyCanvas.attr("height", Math.max(w,h));

      if (tileData.t && (w >= (data.gridW || w) && h >= (data.gridH || h)) && !(isHex)) {
        var tileX = (tileData.gW || 1) * sheetData.gW + ((tileData.gW || 1)-1) * sheetData.p;
        var tileY = (tileData.gH || 1) * sheetData.gH + ((tileData.gH || 1)-1) * sheetData.p;
        var gridX = Math.floor((w || obj.data.gridW)/tileX);
        var gridY = Math.floor((h || obj.data.gridH)/tileY);
        var width = (tileX || w || obj.data.gridW);
        var height = (tileY || h || obj.data.gridH);
        for (var x=0; x<gridX; x++) {
          for (var y=0; y<gridY; y++) {
            dummyCanvas.drawImage({
              source : sheetData.i,
              x : (x * width),
              y : (y * height),
              width : width,
              height : height,
              sWidth: tileX,
              sHeight: tileY,
              sx: sX, sy: sY,
              fromCenter : false,
              rotate : tileData.r || 0,
            });
          }
        }
      }
      else {
        if (isHex) {
          dummyCanvas.drawLine({
            mask : true,
            strokeStyle: 'rgba(0,0,0,0)',
            strokeWidth: 1,
            x1: (tileData.x)-1, y1: (tileData.y + (h || obj.data.gridH)/2),
            x2: (tileData.x + (w || obj.data.gridW) * 4/16), y2: (tileData.y)-1,
            x3: (tileData.x + (w || obj.data.gridW) * 12/16), y3: (tileData.y)-1,
            x4: (tileData.x + (w || obj.data.gridW))+1, y4: (tileData.y + (h || obj.data.gridH)/2),
            x5: (tileData.x + (w || obj.data.gridW) * 12/16), y5: (tileData.y + (h || obj.data.gridH))+1,
            x6: (tileData.x + (w || obj.data.gridW) * 4/16), y6: (tileData.y + (h || obj.data.gridH))+1,
            x7: (tileData.x)-1, y7: (tileData.y + (h || obj.data.gridH)/2),
          }).drawImage({
            source : sheetData.i,
            width : (w || obj.data.gridW),
            height : (h || obj.data.gridH),
            sWidth: (tileData.gW || 1) * sheetData.gW + ((tileData.gW || 1)-1) * sheetData.p,
            sHeight: (tileData.gH || 1) * sheetData.gH + ((tileData.gH || 1)-1) * sheetData.p,
            sx: sX, sy: sY,
            fromCenter: false,
            rotate : tileData.r || 0,
          }).restoreCanvas();
        }
        else {
          dummyCanvas.drawRect({
            fillStyle : "rgba(235,235,228,0.4)",
            x : Math.max(h-w, 0)/2, y : Math.max(w-h, 0)/2,
            width : w,
            height : h,
            fromCenter : false,
          });
          dummyCanvas.drawImage({
            source : sheetData.i,
            x : Math.max(h-w, 0)/2, y : Math.max(w-h, 0)/2,
            width : w,
            height : h,
            sWidth: sW / aspectW,
            sHeight: sH / aspectH,
            sx: sX / aspectW, sy: sY / aspectH,
            fromCenter: false,
            rotate : tileData.r || 0,
          });
        }
      }
      img.drawImage({
        source : dummyCanvas[0],
        layer : true,
        width : 64, height : 64,
        strokeStyle: "rgba(0,0,0,0)",
        strokeWidth: 4,
        fromCenter : false,
      });
    }
  }

  controls = $("<div>").appendTo(div);
  controls.addClass("subtitle");


  var url = $("<button>");
  url.addClass("background alttext");
  url.append("Select Image");
  url.click(function(){
    var imgList = sync.render("ui_filePicker")(obj, app, {
      filter : "img",
      change : function(ev, ui, val){
        var imgVal = val;
        var img = $("<img>").appendTo(sheetContent);
        img.attr("src",val);
        padding.attr("disabled", "true");
        width.attr("disabled", "true");
        height.attr("disabled", "true");
        img.bind("load", function(){
          data.w = $(this).width();
          data.h = $(this).height();
          data.nW = $(this)[0].naturalWidth;
          data.nH = $(this)[0].naturalHeight;
          data.i = imgVal;
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        });
        layout.coverlay("icons-picker");
      }
    });

    var pop = ui_popOut({
      target : $(this),
      prompt : true,
      id : "icons-picker",
      align : "top",
      style : {"width" : assetTypes["filePicker"].width, "height" : assetTypes["filePicker"].height}
    }, imgList);
    pop.resizable();
  });

  var padding = genInput({
    placeholder : "Grid Padding",
    value : data.p,
  });
  padding.change(function(){
    data.p = parseInt($(this).val());
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });
  var whcontrols = $("<div>")
  whcontrols.addClass("flexrow");
  var width = genInput({
    parent : whcontrols,
    placeholder : "Grid Width",
    value : data.gW,
  });
  width.change(function(){
    data.gW = parseInt($(this).val());
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });

  var height = genInput({
    parent : whcontrols,
    placeholder : "Grid Height",
    value : data.gH,
  });
  height.change(function(){
    data.gH = parseInt($(this).val());
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });

  var iwhcontrols = $("<div>")
  iwhcontrols.addClass("flexrow");
  var width = genInput({
    parent : iwhcontrols,
    placeholder : "Image Width",
    value : data.w,
  });
  width.change(function(){
    data.w = parseInt($(this).val());
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });

  var height = genInput({
    parent : iwhcontrols,
    placeholder : "Image Height",
    value : data.h,
  });
  height.change(function(){
    data.h = parseInt($(this).val());
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });

  var controlForm = ui_controlForm({
    inputs : {
      "Source(URL)" : url,
      "Source (W/H)" : iwhcontrols,
      "Tile Spacing" : padding,
      "Tile (W/H)" : whcontrols,
    }
  }).appendTo(controls);

  if (scope.hideOptions) {
    controls.hide();
  }
  return div;
});

sync.render("ui_boardSheets", function(obj, app, scope) {
  var data = obj.data;
  scope = scope || {local : app.attr("local") == "true"};

  var div = $("<div>");
  div.addClass("flexcolumn flex");
  div.css("position", "relative");

  if (!layout.mobile) {
    div.on("dragover", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      if (!$("#"+app.attr("id")+"-drag-overlay").length) {
        var olay = layout.overlay({
          target : app,
          id : app.attr("id")+"-drag-overlay",
          style : {"background-color" : "rgba(0,0,0,0.5)", "pointer-events" : "none"}
        });
        olay.addClass("flexcolumn flexmiddle alttext");
        olay.css("font-size", "2em");
        olay.append("<b>Drop to Create</b>");
      }
    });

    div.on('drop', function(ev){
      ev.preventDefault();
      ev.stopPropagation();
      var dt = ev.originalEvent.dataTransfer;
      if (dt.getData("Text")) {
        var imgVal = dt.getData("Text");
        var img = $("<img>").appendTo(app);
        img.attr("src", dt.getData("Text"));
        if (imgVal) {
          img.bind("load", function(){
            obj.data.sheets.push({
              p : 0,
              gW : data.gridW || 64,
              gH : data.gridH || 64,
              i : imgVal,
              w : $(this)[0].naturalWidth,
              h : $(this)[0].naturalHeight,
              nW : $(this)[0].naturalWidth,
              nH : $(this)[0].naturalHeight,
            });
            obj.update();
            layout.coverlay(app.attr("id")+"-drag-overlay");
          });
        }
      }
    });
    div.on("dragleave", function(ev) {
      ev.preventDefault();
      ev.stopPropagation();
      layout.coverlay(app.attr("id")+"-drag-overlay");
    });
    div.mouseout(function(){
      layout.coverlay(app.attr("id")+"-drag-overlay");
    });
  }

  var listWrap = $("<div>").appendTo(div);
  listWrap.addClass("flex");
  listWrap.css("position", "relative");
  listWrap.css("overflow", "auto");

  var optionsBar = $("<div>").appendTo(div);
  optionsBar.addClass("flexaround foreground alttext subtitle");

  var create = genIcon("plus", "New").appendTo(optionsBar);
  create.attr("title", "Create Tile Sheet");
  create.click(function(){
    obj.data.sheets.push({p : 0, gW : data.gridW || 64, gH : data.gridH || 64});
    obj.update();
  });

  var create = genIcon("cloud-download", "Load").appendTo(optionsBar);
  create.attr("title", "Load Tile Sheet");
  create.click(function(){
    var newApp = sync.newApp("ui_boardStamps", null, {tile : true, board : obj.id()});

    var pop = ui_popOut({
      target : $("body"),
      id : "load-tiles",
      style : {"width" : "400px", height : "600px"}
    }, newApp);
    pop.resizable();
  });

  var list = $("<div>").appendTo(listWrap);
  list.addClass("flexrow flexwrap fit-x");
  list.css("position", "absolute");
  list.sortable({
    update : function(ev, ui){
      var newOrder = [];
      $(ui.item).attr("ignore", true);
      list.children().each(function(){
        newOrder.push(obj.data.sheets[$(this).attr("index")]);
      });
      obj.data.sheets = newOrder;
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    }
  });

  for (var i in data.sheets) {
    var sheetContainer = $("<div>").appendTo(list);
    sheetContainer.addClass("outline white smooth");
    sheetContainer.attr("index", i);

    var optionsBar = $("<div>").appendTo(sheetContainer);
    optionsBar.addClass("flexaround outlinebottom");

    var del = genIcon("trash").appendTo(optionsBar);
    del.attr("index", i);
    del.attr("title", "Delete Tile Sheet");
    del.click(function(){
      var index = $(this).attr("index");
      ui_prompt({
        target : $(this),
        confirm : "Delete Sheet",
        click : function() {
          for (var lid in data.layers) {
            var layerData = data.layers[lid];
            var removeList = {};
            for (var key in layerData.t) {
              //cleanup what references the sheet
              var decorData = layerData.t[key];
              if (decorData.s == index) {
                removeList[key] = true;
              }
            }
            removeList = Object.keys(removeList);
            for (var i=removeList.length-1; i>=0; i--) {
              obj.data.layers[lid].t.splice(removeList[i],1);
            }
          }
          obj.data.sheets.splice(index, 1);
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        }
      });
    });

    var sheetPlate = $("<div>").appendTo(sheetContainer);
    sheetPlate.addClass("hover2 flexmiddle");
    sheetPlate.css("padding", "0.5em");
    sheetPlate.attr("index", i);

    var sheet = $("<div>").appendTo(sheetPlate);
    sheet.css("width", "4em");
    sheet.css("height", "4em");
    sheet.css("position", "relative");
    sheet.css("background-image", "url('"+ data.sheets[i].i +"')");
    sheet.css("background-repeat", "no-repeat");
    sheet.css("background-size", "contain");
    sheet.css("background-position", "center");

    sheetPlate.click(function(){
      var index = $(this).attr("index");

      var newApp = sync.newApp("ui_sheet");
      newApp.attr("index", $(this).attr("index"));

      if (data.sheets[index].i) {
        newApp.attr("hideOptions", true);
      }
      if (scope.local) {
        newApp.attr("local", "true");
      }
      obj.addApp(newApp);
      var popout = ui_popOut({
        target : $("body"),
        id : "sheet-"+index+"-display",
        dragThickness : "0.5em",
        align : "bottom",
        minimize : true,
        title : "sheet",
        style : {"width" : "400px", "height" : "600px"}
      }, newApp);
      popout.addClass("board-"+app.attr("board")+"-sheet-controls");
      popout.resizable();
    });
  }

  if (list.children().length == 0) {
    var loadSheet = $("<div>").appendTo(list);
    loadSheet.addClass("flexmiddle outline smooth fit-xy hover2 bold");
    loadSheet.append("<text style='font-size : 1.6em;'>Load in some sheets to get started</text>");
    loadSheet.click(function(){
      var newApp = sync.newApp("ui_boardStamps", null, {tile : true, board : obj.id()});

      var pop = ui_popOut({
        target : app,
        id : "load-tiles",
        align : "left",
        style : {"width" : "400px", height : "300px"}
      }, newApp);
      pop.resizable();
    });
  }

  return div;
});

sync.render("ui_textEdit", function(obj, app, scope){
  scope = scope || {}

  var board = getEnt($("#"+app.attr("targetApp")).attr("index"));

  var data = obj.data;
  obj.data.label = obj.data.label || {
    text : "",
    style : {
      fontFamily: "Arial",
      fontSize : 26,
      fill: "white",
      stroke: "transparent",
      strokeThickness: 0,
      dropShadow: true,
      dropShadowBlur: 3,
      dropShadowDistance : 0,
    }
  };
  var style = obj.data.label.style;
  var hasRights = hasSecurity(getCookie("UserID"), "Rights", data) || hasSecurity(getCookie("UserID"), "Game Master");

  var content = $("<div>");
  content.addClass("flexcolumn");

  var textWrap = $("<div>").appendTo(content);
  textWrap.addClass("flexrow");

  var text = genInput({
    parent : textWrap,
    classes : "flex middle size3",
    placeholder : "Enter Text Here",
    value : obj.data.label.text,
    style : {"color" : "#333"}
  });
  text.change(function(){
    game.locals["drawing"].data.label.text = $(this).val();
  });


  var weightWrap = $("<div>").appendTo(content);
  weightWrap.addClass("flexrow flexaround flexwrap size2");

  var textWrap = $("<div>").appendTo(weightWrap);
  textWrap.addClass("flexrow flexmiddle");

  var col = genIcon("", "Font Size").appendTo(textWrap);
  col.addClass("lrpadding lrmargin");

  var size = genInput({
    parent : textWrap,
    type : "number",
    classes : "lrmargin middle",
    min : 8,
    value : style.fontSize || 26,
    style : {"width" : "70px", color : "#333"}
  });
  size.change(function(){
    game.locals["drawing"].data.label.style.fontSize = Number($(this).val());
  });

  var textWrap = $("<div>").appendTo(weightWrap);
  textWrap.addClass("flexrow");

  var col = genIcon("", "Font").appendTo(textWrap);
  col.addClass("lrpadding lrmargin");

  var select = $("<select>").appendTo(textWrap);
  select.css("color", "#333");
  select.css("width", "130px");
  for (var i in util.fonts) {
    var option = $("<option>").appendTo(select);
    option.attr("value", util.fonts[i]);
    option.text(util.fonts[i]);
    if (style.fontFamily == util.fonts[i]) {
      option.attr("selected", true);
    }
  }
  select.change(function(){
    obj.data.label.style.fontFamily = $(this).val();
  });

  var alignWrap = $("<div>")//.appendTo(weightWrap);
  alignWrap.addClass("lrpadding lrmargin")
  var left = genIcon("align-left").appendTo(alignWrap);
  var center = genIcon("align-center").appendTo(alignWrap);
  var right = genIcon("align-right").appendTo(alignWrap);

  var colorWrap = $("<div>").appendTo(content);
  colorWrap.addClass("flexrow flexbetween lrpadding lrmargin");

  var optionWrap = $("<div>").appendTo(colorWrap);
  optionWrap.addClass("flexcolumn");

  var col = genIcon("text-background", "Color").appendTo(optionWrap);
  col.click(function(){
    colorPicker.empty();
    optionWrap.children().removeClass("highlight");
    $(this).addClass("highlight");
    var primaryCol = sync.render("ui_colorPicker")(obj, app, {
      hideColor : true,
      custom : false,
      colors : [
        "rgb(180, 0, 0)",
        "rgb(180, 7, 0)",
        "rgb(180, 65, 0)",
        "rgb(180, 88, 0)",
        "rgb(180, 122, 0)",
        "rgb(180, 130, 0)",
        "rgb(172, 130, 0)",
        "rgb(115, 130, 0)",
        "rgb(57, 130, 0)",
        "rgb(0, 130, 0)",
        "rgb(0, 13, 7)",
        "rgb(0, 13, 65)",
        "rgb(0, 13, 122)",
        "rgb(0, 13, 130)",
        "rgb(0, 172, 130)",
        "rgb(0, 115, 130)",
        "rgb(0, 57, 130)",
        "rgb(0, 0, 130)",
        "rgb(7, 0, 130)",
        "rgb(65, 0, 130)",
        "rgb(122, 0, 130)",
        "rgb(180, 0, 130)",
        "rgb(180, 0, 122)",
        "rgb(180, 0, 65)",
        "rgb(180, 0, 7)",
        "rgb(230, 0, 0)",
        "rgb(230, 57, 0)",
        "rgb(230, 115, 0)",
        "rgb(230, 138, 0)",
        "rgb(230, 172, 0)",
        "rgb(230, 230, 0)",
        "rgb(172, 230, 0)",
        "rgb(115, 230, 0)",
        "rgb(57, 230, 0)",
        "rgb(0, 230, 0)",
        "rgb(0, 230, 57)",
        "rgb(0, 230, 115)",
        "rgb(0, 230, 172)",
        "rgb(0, 230, 230)",
        "rgb(0, 172, 230)",
        "rgb(0, 115, 230)",
        "rgb(0, 57, 230)",
        "rgb(0, 0, 230)",
        "rgb(57, 0, 230)",
        "rgb(115, 0, 230)",
        "rgb(172, 0, 230)",
        "rgb(230, 0, 230)",
        "rgb(230, 0, 172)",
        "rgb(230, 0, 115)",
        "rgb(230, 0, 57)",
        "rgba(230, 0, 0, 0.5)",
        "rgba(230, 57, 0, 0.5)",
        "rgba(230, 115, 0, 0.5)",
        "rgba(230, 138, 0, 0.5)",
        "rgba(230, 172, 0, 0.5)",
        "rgba(230, 230, 0, 0.5)",
        "rgba(172, 230, 0, 0.5)",
        "rgba(115, 230, 0, 0.5)",
        "rgba(57, 230, 0, 0.5)",
        "rgba(0, 230, 0, 0.5)",
        "rgba(0, 230, 57, 0.5)",
        "rgba(0, 230, 115, 0.5)",
        "rgba(0, 230, 172, 0.5)",
        "rgba(0, 230, 230, 0.5)",
        "rgba(0, 172, 230, 0.5)",
        "rgba(0, 115, 230, 0.5)",
        "rgba(0, 57, 230, 0.5)",
        "rgba(0, 0, 230, 0.5)",
        "rgba(57, 0, 230, 0.5)",
        "rgba(115, 0, 230, 0.5)",
        "rgba(172, 0, 230, 0.5)",
        "rgba(230, 0, 230, 0.5)",
        "rgba(230, 0, 172, 0.5)",
        "rgba(230, 0, 115, 0.5)",
        "rgba(230, 0, 57, 0.5)",
        "rgba(0,0,0,0)",
        "rgba(34,34,34,0.5)",
        "rgba(155,155,155,0.5)",
        "rgba(255,255,255,0.5)",
        "rgba(255,255,255,1)",
        "rgba(155,155,155,1)",
        "rgba(34,34,34,1)",
      ],
      colorChange : function(ev, ui, value){
        obj.data.label.style.fill = value;
      }
    }).appendTo(colorPicker);

  });

  var out = genIcon("unchecked", "Outline").appendTo(optionWrap);
  out.click(function(){
    colorPicker.empty();
    optionWrap.children().removeClass("highlight");
    $(this).addClass("highlight");

    var primaryCol = sync.render("ui_colorPicker")(obj, app, {
      hideColor : true,
      custom : false,
      colors : [
        "rgb(180, 0, 0)",
        "rgb(180, 7, 0)",
        "rgb(180, 65, 0)",
        "rgb(180, 88, 0)",
        "rgb(180, 122, 0)",
        "rgb(180, 130, 0)",
        "rgb(172, 130, 0)",
        "rgb(115, 130, 0)",
        "rgb(57, 130, 0)",
        "rgb(0, 130, 0)",
        "rgb(0, 13, 7)",
        "rgb(0, 13, 65)",
        "rgb(0, 13, 122)",
        "rgb(0, 13, 130)",
        "rgb(0, 172, 130)",
        "rgb(0, 115, 130)",
        "rgb(0, 57, 130)",
        "rgb(0, 0, 130)",
        "rgb(7, 0, 130)",
        "rgb(65, 0, 130)",
        "rgb(122, 0, 130)",
        "rgb(180, 0, 130)",
        "rgb(180, 0, 122)",
        "rgb(180, 0, 65)",
        "rgb(180, 0, 7)",
        "rgb(230, 0, 0)",
        "rgb(230, 57, 0)",
        "rgb(230, 115, 0)",
        "rgb(230, 138, 0)",
        "rgb(230, 172, 0)",
        "rgb(230, 230, 0)",
        "rgb(172, 230, 0)",
        "rgb(115, 230, 0)",
        "rgb(57, 230, 0)",
        "rgb(0, 230, 0)",
        "rgb(0, 230, 57)",
        "rgb(0, 230, 115)",
        "rgb(0, 230, 172)",
        "rgb(0, 230, 230)",
        "rgb(0, 172, 230)",
        "rgb(0, 115, 230)",
        "rgb(0, 57, 230)",
        "rgb(0, 0, 230)",
        "rgb(57, 0, 230)",
        "rgb(115, 0, 230)",
        "rgb(172, 0, 230)",
        "rgb(230, 0, 230)",
        "rgb(230, 0, 172)",
        "rgb(230, 0, 115)",
        "rgb(230, 0, 57)",
        "rgba(230, 0, 0, 0.5)",
        "rgba(230, 57, 0, 0.5)",
        "rgba(230, 115, 0, 0.5)",
        "rgba(230, 138, 0, 0.5)",
        "rgba(230, 172, 0, 0.5)",
        "rgba(230, 230, 0, 0.5)",
        "rgba(172, 230, 0, 0.5)",
        "rgba(115, 230, 0, 0.5)",
        "rgba(57, 230, 0, 0.5)",
        "rgba(0, 230, 0, 0.5)",
        "rgba(0, 230, 57, 0.5)",
        "rgba(0, 230, 115, 0.5)",
        "rgba(0, 230, 172, 0.5)",
        "rgba(0, 230, 230, 0.5)",
        "rgba(0, 172, 230, 0.5)",
        "rgba(0, 115, 230, 0.5)",
        "rgba(0, 57, 230, 0.5)",
        "rgba(0, 0, 230, 0.5)",
        "rgba(57, 0, 230, 0.5)",
        "rgba(115, 0, 230, 0.5)",
        "rgba(172, 0, 230, 0.5)",
        "rgba(230, 0, 230, 0.5)",
        "rgba(230, 0, 172, 0.5)",
        "rgba(230, 0, 115, 0.5)",
        "rgba(230, 0, 57, 0.5)",
        "rgba(0,0,0,0)",
        "rgba(34,34,34,0.5)",
        "rgba(155,155,155,0.5)",
        "rgba(255,255,255,0.5)",
        "rgba(255,255,255,1)",
        "rgba(155,155,155,1)",
        "rgba(34,34,34,1)",
      ],
      colorChange : function(ev, ui, value){
        obj.data.label.style.stroke = value;
      }
    }).appendTo(colorPicker);
  });

  var shade = genIcon("text-color", "Shadow").appendTo(optionWrap);
  shade.click(function(){
    colorPicker.empty();
    optionWrap.children().removeClass("highlight");
    $(this).addClass("highlight");

    var primaryCol = sync.render("ui_colorPicker")(obj, app, {
      hideColor : true,
      custom : false,
      colors : [
        "rgb(180, 0, 0)",
        "rgb(180, 7, 0)",
        "rgb(180, 65, 0)",
        "rgb(180, 88, 0)",
        "rgb(180, 122, 0)",
        "rgb(180, 130, 0)",
        "rgb(172, 130, 0)",
        "rgb(115, 130, 0)",
        "rgb(57, 130, 0)",
        "rgb(0, 130, 0)",
        "rgb(0, 13, 7)",
        "rgb(0, 13, 65)",
        "rgb(0, 13, 122)",
        "rgb(0, 13, 130)",
        "rgb(0, 172, 130)",
        "rgb(0, 115, 130)",
        "rgb(0, 57, 130)",
        "rgb(0, 0, 130)",
        "rgb(7, 0, 130)",
        "rgb(65, 0, 130)",
        "rgb(122, 0, 130)",
        "rgb(180, 0, 130)",
        "rgb(180, 0, 122)",
        "rgb(180, 0, 65)",
        "rgb(180, 0, 7)",
        "rgb(230, 0, 0)",
        "rgb(230, 57, 0)",
        "rgb(230, 115, 0)",
        "rgb(230, 138, 0)",
        "rgb(230, 172, 0)",
        "rgb(230, 230, 0)",
        "rgb(172, 230, 0)",
        "rgb(115, 230, 0)",
        "rgb(57, 230, 0)",
        "rgb(0, 230, 0)",
        "rgb(0, 230, 57)",
        "rgb(0, 230, 115)",
        "rgb(0, 230, 172)",
        "rgb(0, 230, 230)",
        "rgb(0, 172, 230)",
        "rgb(0, 115, 230)",
        "rgb(0, 57, 230)",
        "rgb(0, 0, 230)",
        "rgb(57, 0, 230)",
        "rgb(115, 0, 230)",
        "rgb(172, 0, 230)",
        "rgb(230, 0, 230)",
        "rgb(230, 0, 172)",
        "rgb(230, 0, 115)",
        "rgb(230, 0, 57)",
        "rgba(230, 0, 0, 0.5)",
        "rgba(230, 57, 0, 0.5)",
        "rgba(230, 115, 0, 0.5)",
        "rgba(230, 138, 0, 0.5)",
        "rgba(230, 172, 0, 0.5)",
        "rgba(230, 230, 0, 0.5)",
        "rgba(172, 230, 0, 0.5)",
        "rgba(115, 230, 0, 0.5)",
        "rgba(57, 230, 0, 0.5)",
        "rgba(0, 230, 0, 0.5)",
        "rgba(0, 230, 57, 0.5)",
        "rgba(0, 230, 115, 0.5)",
        "rgba(0, 230, 172, 0.5)",
        "rgba(0, 230, 230, 0.5)",
        "rgba(0, 172, 230, 0.5)",
        "rgba(0, 115, 230, 0.5)",
        "rgba(0, 57, 230, 0.5)",
        "rgba(0, 0, 230, 0.5)",
        "rgba(57, 0, 230, 0.5)",
        "rgba(115, 0, 230, 0.5)",
        "rgba(172, 0, 230, 0.5)",
        "rgba(230, 0, 230, 0.5)",
        "rgba(230, 0, 172, 0.5)",
        "rgba(230, 0, 115, 0.5)",
        "rgba(230, 0, 57, 0.5)",
        "rgba(0,0,0,0)",
        "rgba(34,34,34,0.5)",
        "rgba(155,155,155,0.5)",
        "rgba(255,255,255,0.5)",
        "rgba(255,255,255,1)",
        "rgba(155,155,155,1)",
        "rgba(34,34,34,1)",
      ],
      colorChange : function(ev, ui, value){
        obj.data.label.style.dropShadowColor = value;
      }
    }).appendTo(colorPicker);
  });

  var colorPicker = $("<div>").appendTo(colorWrap);
  colorPicker.addClass("lrpadding lrmargin");
  colorPicker.css("font-size", "0.6em");

  /*function colorWrap(fn) {
    var optionList = [];
    var submenu = [
      "rgba(34,34,34,1)",
      "rgba(187,0,0,1)",
      "rgba(255,153,0,1)",
      "rgba(255,240,0,1)",
      "rgba(0,187,0,1)",
      "rgba(0,115,230,1)",
      "rgba(176,0,187,1)",
      "rgba(255,115,255,1)",
      "rgba(255,255,255,1)",
    ];
    for (var i in submenu) {
      optionList.push({
        icon : "tint",
        style : {"background-color" : submenu[i], "color" : "transparent"},
        click : function(ev, ui){
          fn(ui.css("background-color"));
        },
      });
    }
    optionList.push({
      icon : "tint",
      style : {"background-image" : "url('/content/checkered.png')", "color" : "transparent"},
      click : function(ev, ui){
        fn(null);
      },
    });
    optionList.push({
      icon : "cog",
      click : function(){
        var primaryCol = sync.render("ui_colorPicker")(obj, app, {
          hideColor : true,
          custom : true,
          colorChange : function(ev, ui, value){
            fn(value);
          }
        });

        ui_popOut({
          target : colorColumn,
          align : "right",
          id : "piece-color",
        }, primaryCol);
      },
    });
    return optionList;
  }

  var colorColumn = $("<div>").appendTo(content);
  colorColumn.addClass("flexrow white smooth outline");
  colorColumn.css("text-shadow", "none");
  colorColumn.css("color", "#333");
  function buildColorOptions() {
    colorColumn.empty();
    var primary = genIcon("text-background").appendTo(colorColumn);
    primary.attr("title", "Text Fill");
    primary.css("color", obj.data.label.pri || "#333");
    primary.click(function(){
      var actionsList = colorWrap(
        function(value) {
          obj.data.label.pri = value;
          primary.css("color", obj.data.label.pri || "#333");
          updateLabel();
        }
      );

      ui_dropMenu($(this), actionsList, {"id" : "font", hideClose : true});
    });

    var secondary = genIcon("text-color").appendTo(colorColumn);
    secondary.attr("title", "Text Outline");
    secondary.css("color", obj.data.label.sec || "#333");
    secondary.click(function(){
      var actionsList = colorWrap(
        function(value) {
          if (value) {
            obj.data.label.bold = 1;
          }
          else {
            delete obj.data.label.bold;
          }
          obj.data.label.sec = value;
          secondary.css("color", obj.data.label.sec || "#333");
          updateLabel();
        }
      );

      ui_dropMenu($(this), actionsList, {"id" : "font", hideClose : true});
    });

    var shadow = genIcon("text-color").appendTo(colorColumn);
    shadow.attr("title", "text shadow");
    shadow.css("color", "transparent");
    shadow.css("text-shadow", "0em 0em 8px " + obj.data.label.shadowColor || "transparent");
    shadow.click(function(){
      var actionsList = colorWrap(
        function(value) {
          obj.data.label.shadowColor = value;
          shadow.css("text-shadow", "0em 0em 8px " + obj.data.label.shadowColor || "transparent");
          updateLabel();
        }
      );

      ui_dropMenu($(this), actionsList, {"id" : "font", hideClose : true});
    });

    var boxColor = genIcon("unchecked").appendTo(colorColumn);
    boxColor.attr("title", "box color");
    boxColor.css("color", obj.data.label.box || "#333");
    boxColor.click(function(){
      var actionsList = colorWrap(
        function(value) {
          obj.data.label.padding = obj.data.label.padding || 4;
          obj.data.label.box = value;
          boxColor.css("color", value || "#333");
          updateLabel();
        }
      );

      ui_dropMenu($(this), actionsList, {"id" : "font", hideClose : true});
    });

    var fill = $("<div>").appendTo(colorColumn);
    fill.addClass("flex");

    var textSize = genIcon("text-size").appendTo(colorColumn);
    textSize.attr("title", "text-size");
    textSize.click(function(){
      var actionsList = [];

      var sizes = [
        8,
        10,
        12,
        14,
        16,
        24,
        36,
        48,
        56,
        108
      ]

      for (var i in sizes) {
        actionsList.push({
          name : sizes[i] + "px",
          attr : {size : i},
          click : function(ev, ui){
            obj.data.label.fontSize = sizes[ui.attr("size")];
            updateLabel();
          }
        })
      }

      ui_dropMenu($(this), actionsList, {"id" : "font"});
    });

    var font = genIcon("font").appendTo(colorColumn);
    font.attr("title", "Font Selection");
    font.click(function(){
      var actionsList = [];

      var fonts = util.fonts;

      for (var i in fonts) {
        actionsList.push({
          name : fonts[i],
          attr : {font : i},
          click : function(ev, ui){
            obj.data.label.fontFamily = fonts[ui.attr("font")];
            updateLabel();
          }
        })
      }

      ui_dropMenu($(this), actionsList, {"id" : "font"});
    });

    var fill = $("<div>").appendTo(colorColumn);
    fill.addClass("flex");

    var alignLeft = genIcon("align-left").appendTo(colorColumn);
    alignLeft.attr("title", "Align Left");
    alignLeft.click(function(){
      obj.data.label.align = "left";
      updateLabel();
    });

    var alignCenter = genIcon("align-center").appendTo(colorColumn);
    alignCenter.attr("title", "Align Center");
    alignCenter.click(function(){
      delete obj.data.label.align;
      updateLabel();
    });

    var alignRight = genIcon("align-right").appendTo(colorColumn);
    alignRight.attr("title", "Align Right");
    alignRight.click(function(){
      obj.data.label.align = "right";
      updateLabel();
    });

    var fill = $("<div>").appendTo(colorColumn);
    fill.addClass("flex");

    var clear = genIcon("refresh").appendTo(colorColumn);
    clear.attr("title", "Clear settings");
    clear.click(function(){
      obj.data.label = {
        fontSize : 24,
        shadowBlur : 10,
        shadowColor : "black",
        fontFamily : "Arial",
        align : "center",
        bold : 0,
        pri : "white",
      };
      text.val("");
      buildColorOptions();
      updateLabel();
    });
  }
  buildColorOptions();
  var wrap = $("<div>").appendTo(content);
  wrap.addClass("flexrow");

  var text = $("<textarea>").appendTo(wrap);
  text.attr("placeholder", "Text (Macro)");
  text.addClass("flex");
  text.css("color", "#333");
  text.css("text-shadow", "none");
  text.val(obj.data.label.text);
  text.keyup(function(){
    obj.data.label.text = $(this).val();
  });*/

  return content;
});

sync.render("ui_tileEdit", function(obj, app, scope){
  scope = scope || {
    layer : app.attr("layer"),
    tile : app.attr("tile"),
    local : app.attr("local") == "true",
  };
  var div = $("<div>");

  var tileData = obj.data.layers[scope.layer].t[scope.tile];

  if (tileData) {
    var positions = $("<div>");
    positions.addClass("flexrow");

    var misc = $("<div>");
    misc.addClass("fit-x flexaround");
    misc.css("font-size", "1.2em");

    var tiledDiv = $("<div>").appendTo(misc);
    tiledDiv.addClass("flexmiddle lrpadding");

    var tiled = genInput({
      parent : tiledDiv,
      type : "checkbox"
    }).css("margin", "0").addClass("lrpadding");
    if (tileData.t) {
      tiled.prop("checked", true);
    }

    tiledDiv.append("<b class='lrpadding'>Tiled</b>");

    var pin = genIcon("pushpin").appendTo(misc);
    pin.addClass("flex flexmiddle");
    pin.attr("title", "Piece can only be interacted by double clicking on it");
    if (tileData.l) {
      pin.addClass("smooth highlight outline alttext");
    }
    pin.click(function(){
      tileData.l = !tileData.l;
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });

    var del = genIcon("trash").appendTo(misc);
    del.addClass("flex flexmiddle");
    del.attr("title", "Delete this Tile");
    del.click(function(){
      ui_prompt({
        target : $(this),
        confirm : "Delete Tile",
        click : function(ev, inputs){
          obj.data.layers[scope.layer].t.splice(scope.tile, 1);
          layout.coverlay("tile-popout-"+obj.id()+"-"+scope.layer+"-"+scope.tile);
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        }
      });
    });

    var xPos = genInput({
      parent : positions,
      type : "number",
      min : 0,
      placeholder : "xPos",
      value : tileData.x,
      style : {"width" : "50px"},
    });

    var yPos = genInput({
      parent : positions,
      type : "number",
      min : 0,
      placeholder : "yPos",
      value : tileData.y,
      style : {"width" : "50px"},
    });

    var sizes = $("<div>");
    sizes.addClass("flexrow");

    var wPos = genInput({
      parent : sizes,
      type : "number",
      min : 16,
      placeholder : "width",
      value : tileData.w,
      style : {"width" : "50px"},
    });

    var hPos = genInput({
      parent : sizes,
      type : "number",
      min : 16,
      placeholder : "height",
      value : tileData.h,
      style : {"width" : "50px"},
    });

    var controls = ui_controlForm({
      inputs : {
        "" : misc,
        "Position(X,Y)" : positions,
        "Size(W,H)" : sizes,
        "Rotation" : tileData.r
      },
      click : function(ev, inputs) {
        tileData.t = (tiled.prop("checked") == true);
        tileData.x = Number(xPos.val());
        tileData.y = Number(yPos.val());
        tileData.w = Number(wPos.val());
        tileData.h = Number(hPos.val());
        tileData.r = Number(inputs["Rotation"].val());
        if (hasSecurity(getCookie("UserID"), "Rights", obj.data)) {
          if (!scope.local) {
            obj.sync("updateAsset");
          }
          else {
            obj.update();
          }
        }
        layout.coverlay("tile-popout-"+obj.id()+"-"+scope.layer+"-"+scope.tile);
      }
    }).appendTo(div);
  }
  else {
    div.append("<b>Tile not Found</b>");
  }

  return div;
});

sync.render("ui_triggerBuilder", function(obj, app, scope){
  scope = scope || {
    board : app.attr("board"),
    layer : app.attr("layer"),
    piece : app.attr("piece"),
  };

  var board = getEnt(scope.board);
  var pieceData = board.data.layers[scope.layer].p[scope.piece];

  var data = obj.data;

  var div = $("<div>");
  div.addClass("flexcolumn");

  var row = $("<div>").appendTo(div);
  row.addClass("flexrow flexaround");

  var collDiv = $("<div>").appendTo(row);
  collDiv.addClass("flexcolumn flex spadding");

  var effectDiv = $("<div>").appendTo(div);
  effectDiv.addClass("flexcolumn");

  var effectTgt = $("<div>").appendTo(effectDiv);
  effectTgt.addClass("flexrow flex spadding");

  effectTgt.append("<b>Event Type</b>");

  var effect = $("<select>").appendTo(effectTgt);
  effect.addClass("smooth lrmargin flex");
  //effect.append("<option value='0'>Resolve Macro</option>");
  for (var i in util.events) {
    effect.append("<option value="+i+">"+util.events[i].name+"</option>");
  }
  effect.change(function(){
    obj.data.e = $(this).val();
    if (util.events[obj.data.e]) {
      util.events[obj.data.e].load(obj, app, scope, $(this).val());
    }
    obj.update();
  });
  effect.children().each(function(){
    if ($(this).attr("value") == data.e) {
      $(this).attr("selected", true);
    }
  });
  if (util.events[data.e]) {
    util.events[data.e].interface(obj, app, scope, board, pieceData).appendTo(effectDiv);
  }

  return div;
});

boardApi.createObject = function(options, obj, app, scope) {
  var data = obj.data;
  var layer = options.layer;
  var type = options.type;
  var index = options.index;
  var objectData = options.data;
  if (!objectData && layer != null && type != null && index != null) {
    objectData = obj.data.layers[layer][type][index];
  }

  var objectWrap = new PIXI.Container();
  objectWrap.lookup = {layer : layer, type : type, index : index};

  var object = new PIXI.Container();
  objectWrap.addChild(object);

  var objectSelected = new PIXI.Container();
  objectSelected.visible = false;
  objectWrap.addChild(objectSelected);

  var outline = new PIXI.Graphics();
  var rotateHandle = new PIXI.Graphics();
  objectSelected.addChild(outline);
  objectSelected.addChild(rotateHandle);

  var handles = {
    t : {cursor : "n-resize"},
    tr : {cursor : "ne-resize"},
    r : {cursor : "e-resize"},
    br : {cursor : "be-resize"},
    b : {cursor : "b-resize"},
    bl : {cursor : "bl-resize"},
    l : {cursor : "l-resize"},
    tl : {cursor : "nl-resize"},
  };

  for (var i in handles) {
    var handleData = handles[i];
    var dragHandle = new PIXI.Graphics();
    objectSelected.addChild(dragHandle);
    dragHandle.interactive = true;
    dragHandle.buttonMode = true;
    dragHandle.cursor = handleData.cursor;
    dragHandle.axis = i;

    dragHandle.on("mouseover", function(ev){
      var layer = objectWrap.lookup.layer;
      var type = objectWrap.lookup.type;
      var index = objectWrap.lookup.index;
      var clickPos = this.toGlobal({x : this.x, y : this.y});

      var minX = Number.POSITIVE_INFINITY;
      var minY = Number.POSITIVE_INFINITY;
      var maxX = Number.NEGATIVE_INFINITY;
      var maxY = Number.NEGATIVE_INFINITY;

      var width = objectSelected.width;
      var height = objectSelected.height;

      var handlePos = {
        tr : {cursor : "ne-resize", x : width-6, y : -5},
        r : {cursor : "e-resize", x : width-6, y : height/2-6},
        br : {cursor : "se-resize", x : width-6, y : height-6},
        b : {cursor : "s-resize", x : width/2-5, y : height-6},
        bl : {cursor : "sw-resize", x : -5, y : height-6},
        l : {cursor : "w-resize", x : -5, y : height/2-6},
        tl : {cursor : "nw-resize", x : -5, y : -5},
        t : {cursor : "n-resize", x : width/2-5, y : -5},
      };
      var pData = obj.data.layers[layer][type][index];
      var keysOrigin = ["tr", "r", "br", "b", "bl", "l", "tl", "t"];
      var keys = ["tr", "r", "br", "b", "bl", "l", "tl", "t"];
      var offset = Math.floor(pData.r/45);
      for (var i=0;i<offset;i++) {
        keys.push(keys.splice(0,1)[0]);
      }
      for (var i in keys) {
        handles[keysOrigin[i]].cursor = handlePos[keys[i]].cursor;
        //handles[keysOrigin[i]].axis = keys[i];
      }

      //handles[choiceHandle].cursor = handlePos[j].cursor;
      //handles[choiceHandle].axis = j;
    });
    dragHandle.on("mousedown", function(ev){
      var key = ev.data.originalEvent.keyCode || ev.data.originalEvent.which;
      if (key == 1) {
        var layer = objectWrap.lookup.layer;
        var type = objectWrap.lookup.type;
        var index = objectWrap.lookup.index;
        var pieceData = obj.data.layers[layer][type][index];

        var axis = this.axis;
        function resize(ev, round) {
          var pData = obj.data.layers[layer][type][index];
          var zoom = Number(app.attr("zoom"))/100;
          var xPos = pData.x;
          var yPos = pData.y;
          var w = pData.w;
          var h = pData.h;

          var finalX;
          var finalY;
          var finalW;
          var finalH;

          var startX = boardApi.dragging.pageX;
          var startY = boardApi.dragging.pageY;
          var endX = ev.pageX;
          var endY = ev.pageY;

          var r = (pData.r || 0)/180 * (Math.PI);
          var dist = Math.sqrt((endX-startX)*(endX-startX)+(endY-startY)*(endY-startY));

          var changeX = Math.cos(r)*dist;
          var changeY = Math.sin(r)*dist;
          if (axis.match("l")) {
            var focal = objectSelected.toLocal({x : ev.pageX + w, y : ev.pageY + h});
            finalW = (w/zoom + (w/zoom-focal.x))*zoom;
            finalX = xPos + (w-finalW/zoom);
          }
          else if (axis.match("r")) {
            var focal = objectSelected.toLocal({x : ev.pageX, y : ev.pageY});
            finalW = focal.x;
          }
          if (axis.match("b")) {
            var focal = objectSelected.toLocal({x : ev.pageX, y : ev.pageY});
            finalH = focal.y;
          }
          else if (axis.match("t")) {
            var focal = objectSelected.toLocal({x : ev.pageX + w, y : ev.pageY + h});
            finalH = h/zoom + (h/zoom-focal.y)*zoom;
            finalY = yPos + (h-finalH)/zoom;
          }

          if (finalX == null) {
            finalX = xPos;
          }
          if (finalY == null) {
            finalY = yPos;
          }
          if (finalW == null) {
            finalW = w;
          }
          if (finalH == null) {
            finalH = h;
          }

          if (round && data.gridW && data.gridH) {
            finalX = Math.round(finalX/data.gridW) * data.gridW + data.gridX || 0;
            finalY = Math.round(finalY/data.gridH) * data.gridH + data.gridY || 0;
            finalW = Math.round(finalW/data.gridW) * data.gridW;
            finalH = Math.round(finalH/data.gridH) * data.gridH;
          }
          else {
            finalX = Math.round(finalX * 10) / 10;
            finalY = Math.round(finalY * 10) / 10;
            finalW = Math.round(finalW * 10) / 10;
            finalH = Math.round(finalH * 10) / 10;
          }

          return {w : Math.abs(finalW), h : Math.abs(finalH), x : finalX, y : finalY};
        }
        boardApi.newDragEvent({
          startX : pieceData.x,
          startY : pieceData.y,
          startW : pieceData.w,
          startH : pieceData.h,
          pageX : ev.data.originalEvent.pageX,
          pageY : ev.data.originalEvent.pageY,
          startObject : objectData,
          move : function(ev){
            var result = resize(ev);
            boardApi.dragging.startObject.x = result.x || boardApi.dragging.startObject.x;
            boardApi.dragging.startObject.y = result.y || boardApi.dragging.startObject.y;
            boardApi.dragging.startObject.w = result.w || boardApi.dragging.startObject.w;
            boardApi.dragging.startObject.h = result.h || boardApi.dragging.startObject.h;
            objectWrap.update(boardApi.dragging.startObject);
          },
          end : function(ev){
            var result = resize(ev, !_down[16]);
            var layer = objectWrap.lookup.layer;
            var type = objectWrap.lookup.type;
            var index = objectWrap.lookup.index;
            var pData = obj.data.layers[layer][type][index];
            pData.x = result.x || pData.x;
            pData.y = result.y || pData.y;
            pData.w = result.w || pData.w;
            pData.h = result.h || pData.h;
            objectWrap.update(pData);
            setTimeout(function(){
              objectWrap.update(pData);
              if (objectWrap.resize) {
                objectWrap.resize(ev);
              }
            }, 10);
            delete boardApi.dragging;
          }
        }, ev);
      }
      boardApi.objectClick = true;
    });
    handles[i] = dragHandle;
  }
  object.on("mouseover", function(ev){
    if ((objectWrap.canSelect && !objectWrap.canSelect(ev)) || (objectWrap.canInteract && !objectWrap.canInteract(ev))) {
      rotateHandle.visible = false;
      object.cursor = "";
    }
    else {
      rotateHandle.visible = true;
      object.cursor == "pointer";
    }
  });
  objectWrap.select = function(){
    var layer = objectWrap.lookup.layer;
    var type = objectWrap.lookup.type;
    var index = objectWrap.lookup.index;
    if (!objectWrap.canSelect || objectWrap.canSelect()) {
      objectSelected.visible = true;
      boardApi.selections[obj.id()+"-"+layer+"-"+type+"-"+index] = {
        layer : layer,
        index : index,
        type : type,
        board : obj.id(),
        app : app.attr("id"),
        wrap : objectWrap,
        image : object,
        selected : objectSelected
      };
    }
  }
  objectWrap.unselect = function(){
    var layer = objectWrap.lookup.layer;
    var type = objectWrap.lookup.type;
    var index = objectWrap.lookup.index;
    objectSelected.visible = false;
    delete boardApi.selections[obj.id()+"-"+layer+"-"+type+"-"+index];
  }
  object.on("mousedown", function(ev){
    var layer = objectWrap.lookup.layer;
    var type = objectWrap.lookup.type;
    var index = objectWrap.lookup.index;

    if (objectWrap.canSelect && !objectWrap.canSelect(ev)) {
      return;
    }

    var key = ev.data.originalEvent.keyCode || ev.data.originalEvent.which;
    if (key == 1) {
      objectWrap.update();
      if (!_down[16] && !boardApi.objectClick) {
        if (Object.keys(boardApi.selections).length <= 1) {
          for (var id in boardApi.selections) {
            boardApi.selections[id].selected.visible = false;
            delete boardApi.selections[id];
          }
        }
      }
      if (objectSelected.visible && _down[16]) {
        objectWrap.unselect();
      }
      else {
        objectWrap.select();
      }

      if (objectWrap.canInteract && !objectWrap.canInteract(ev)) {
        boardApi.newDragEvent({
          move : function(ev){},
          end : function(ev){delete boardApi.dragging},
        });
        return;
      }
      if (!boardApi.dragging) {
        var pData;
        if (layer != null && type != null && index != null) {
          pData = obj.data.layers[layer][type][index];
        }
        var offset = ev.data.getLocalPosition(objectWrap);
        var ent = getEnt(pData.eID);
        var context = sync.defaultContext();
        if (ent && ent.data) {
          context[ent.data._t] = duplicate(ent.data);
        }

        boardApi.newDragEvent({
          offsetX : offset.x,
          offsetY : offset.y,
          move : function(ev){
            if (!objectWrap.canChange || objectWrap.canChange(ev)) {
              var layer = objectWrap.lookup.layer;
              var type = objectWrap.lookup.type;
              var index = objectWrap.lookup.index;
              var stage = boardApi.apps[app.attr("id")].stage;
              var pData = obj.data.layers[layer][type][index];
              var focal = stage.toLocal({x : ev.pageX, y : ev.pageY});

              var deltaX = focal.x-objectWrap.x-boardApi.dragging.offsetX;
              var deltaY = focal.y-objectWrap.y-boardApi.dragging.offsetY;

              if (Math.abs(deltaX) >= 1 || Math.abs(deltaY) >= 1) {
                boardApi.dragging.dragged = true;
                layout.coverlay($(".piece-quick-edit"));
              }

              for (var key in boardApi.selections) {
                if (boardApi.selections[key].type == type) {
                  if (!boardApi.selections[key].wrap.canChange || boardApi.selections[key].wrap.canChange()) {
                    boardApi.selections[key].wrap.x += deltaX;
                    boardApi.selections[key].wrap.y += deltaY;
                  }
                  else {
                    boardApi.selections[key].wrap.unselect();
                  }
                }
              }
              // disabled until more optimized solution can be found
              if (false && boardApi.fog[obj.id()] && boardApi.fog[obj.id()].length < 800 && obj.data.options.fog) {
                if (type == "p" && pData.eID && hasSecurity(getCookie("UserID"), "Visible", getEnt(pData.eID).data)) {
                  var range;
                  if (pData.eID && pData.o && pData.o.Sight) {
                    var auraData = pData.o.Sight;
                    range = boardApi.scale(sync.eval(auraData.d, context), obj, true);
                  }
                  boardApi.apps[app.attr("id")].views[layer+"-"+type+"-"+index] = boardApi.buildDynamicFog(obj, app, objectWrap.x + pData.w/2, objectWrap.y + pData.h/2, range);
                  boardApi.rebuildDynamicFog(obj, app);
                }
              }
            }
          },
          end : function(ev){
            var layer = objectWrap.lookup.layer;
            var type = objectWrap.lookup.type;
            var index = objectWrap.lookup.index;
            var stage = boardApi.apps[app.attr("id")].stage;
            var pData = obj.data.layers[layer][type][index];
            if (!pData) {
              delete boardApi.dragging;
              return;
            }
            var isHex = obj.data.options && obj.data.options.hex;
            var focal = stage.toLocal({x : ev.pageX, y : ev.pageY});

            var offsetX = boardApi.dragging.offsetX;
            var offsetY = boardApi.dragging.offsetY;
            if (data.gridW) {
              offsetX = boardApi.dragging.offsetX%(data.gridW);
            }
            if (data.gridH) {
              offsetY = boardApi.dragging.offsetY%(data.gridH);
            }

            var finalX = objectWrap.x+offsetX;
            var finalY = objectWrap.y+offsetY;
            var now = Date.now();
            if (!boardApi.dragging.dragged || (objectWrap.canChange && !objectWrap.canChange(ev))) {
              if (!object._doubleClicked) {
                if (objectWrap.onclick) {
                  objectWrap.onclick(ev);
                }
                object._doubleClicked = now;
              }
              else {
                if (object._doubleClicked && object._doubleClicked + 650 >= now && objectWrap.dblclick) {
                  objectWrap.dblclick(ev);
                }
                if (object._doubleClicked + 650 < now && objectWrap.onclick) {
                  objectWrap.onclick(ev);
                }
                delete object._doubleClicked;
              }
            }
            else if (Math.abs(finalX-pData.x) > 1 && Math.abs(finalY-pData.y) > 1) {
              if (!_down[16] && data.gridW && data.gridH) {
                if (isHex) {
                  var xGrid = Math.floor((finalX - (data.gridX || 0))/(data.gridW * 0.75));
                  var yGrid;

                  finalX = (xGrid * data.gridW + (data.gridX || 0) - (xGrid * data.gridW + (data.gridX || 0))/4);
                  if (xGrid % 2) {
                    yGrid = Math.floor((finalY - (data.gridY || 0) - data.gridH/2)/data.gridH);
                    finalY = (yGrid * data.gridH + (data.gridY || 0) + data.gridH/2);
                  }
                  else {
                    yGrid = Math.floor((finalY - (data.gridY || 0))/data.gridH);
                    finalY = (yGrid * data.gridH + (data.gridY || 0));
                  }
                }
                else {
                  var xGrid = Math.floor((finalX - (data.gridX || 0))/data.gridW);
                  var yGrid = Math.floor((finalY - (data.gridY || 0))/data.gridH);
                  finalX = (xGrid * data.gridW + (data.gridX || 0));
                  finalY = (yGrid * data.gridH + (data.gridY || 0));
                }
              }
              else {
                finalX -= offsetX;
                finalY -= offsetY;
              }

              var deltaX = pData.x - finalX;
              var deltaY = pData.y - finalY;
              // changed
              for (var key in boardApi.selections) {
                var selectData = boardApi.selections[key];
                if (selectData.type == type) {
                  obj.data.layers[selectData.layer][selectData.type][selectData.index].x -= deltaX;
                  obj.data.layers[selectData.layer][selectData.type][selectData.index].y -= deltaY;
                  selectData.wrap.x = obj.data.layers[selectData.layer][selectData.type][selectData.index].x;
                  selectData.wrap.y = obj.data.layers[selectData.layer][selectData.type][selectData.index].y;
                  if (selectData.wrap.move) {
                    selectData.wrap.move(ev, deltaX, deltaY);
                  }
                  var pieceData = obj.data.layers[selectData.layer][selectData.type][selectData.index];
                  if (boardApi.fog[obj.id()] && boardApi.fog[obj.id()].length) {
                    if (selectData.type == "p" && pieceData.eID) {
                      var ent = getEnt(pieceData.eID);
                      var userID = app.attr("UserID") || getCookie("UserID");
                      var hasRights = hasSecurity(userID, "Rights", obj.data) || hasSecurity(userID, "Game Master");
                      if (ent && ent.data._t == "c" && (hasRights || hasSecurity(userID, "Visible", ent.data))) {
                        var range;
                        if (pieceData.eID && pieceData.o && pieceData.o.Sight) {
                          var auraData = pieceData.o.Sight;
                          range = boardApi.scale(sync.eval(auraData.d, context), obj, true);
                        }
                        boardApi.apps[app.attr("id")].views[selectData.layer+"-"+selectData.type+"-"+selectData.index] = boardApi.buildDynamicFog(obj, app, selectData.wrap.x + pieceData.w/2, selectData.wrap.y + pieceData.h/2, range);
                        boardApi.rebuildDynamicFog(obj, app);
                      }
                    }
                  }
                }
              }
            }
            delete boardApi.dragging;
          }
        }, ev);
      }
    }
    boardApi.objectClick = true;
  });
  object.on("mouseup", function(ev){});
  object.on("mouseupoutside", function(ev){});
  rotateHandle.on("mousedown", function(ev){
    layout.coverlay($(".piece-quick-edit"));
    var key = ev.data.originalEvent.keyCode || ev.data.originalEvent.which;
    if (key == 1) {
      boardApi.newDragEvent({
        move : function(ev){
          var xPos = ev.pageX;
          var yPos = ev.pageY;

          for (var key in boardApi.selections) {
            var selectData = boardApi.selections[key];
            var focal = selectData.image.toGlobal({x : selectData.selected.width/2-5, y : selectData.selected.height/2});

            var angle = Math.atan2(focal.y - yPos, focal.x - xPos);
            selectData.image.rotation = angle - Math.PI / 2;
            selectData.selected.rotation = angle - Math.PI / 2;
          }
        },
        end : function(ev){
          var xPos = ev.pageX;
          var yPos = ev.pageY;

          for (var key in boardApi.selections) {
            var selectData = boardApi.selections[key];
            var focal = selectData.image.toGlobal({x : selectData.selected.width/2-5, y : selectData.selected.height/2});

            var angle = Math.atan2(focal.y - yPos, focal.x - xPos);
            if (!_down[16]) {
              angle = Math.round((angle/Math.PI * 180) / 45) * 45 * Math.PI / 180
            }
            selectData.image.rotation = angle - Math.PI / 2;
            selectData.selected.rotation = angle - Math.PI / 2;

            var newData = obj.data.layers[selectData.layer][selectData.type][selectData.index];
            newData.r = (angle * 180/Math.PI + 270)%360;
            if (selectData.wrap.rotate) {
              selectData.wrap.rotate(ev);
            }
            selectData.wrap.update();
          }

          delete boardApi.dragging;
        }
      }, ev);
    }
    boardApi.objectClick = true;
  });


  objectWrap.update = function(objectData) {
    var layer = objectWrap.lookup.layer;
    var type = objectWrap.lookup.type;
    var index = objectWrap.lookup.index;
    if (!objectData && layer != null && type != null && index != null) {
      objectData = obj.data.layers[layer][type][index];
    }
    if (objectData) {
      var width = objectData.w;
      var height = objectData.h;

      objectWrap.x = objectData.x;
      objectWrap.y = objectData.y;

      object.x = objectData.w/2;
      object.y = objectData.h/2;
      object.pivot.x = objectData.w/2;
      object.pivot.y = objectData.h/2;
      object.rotation = (objectData.r || 0)/180 * (Math.PI);
      if (layer != null && type != null && index != null && (!objectData.v || !objectData.l || app.attr("layer") == layer)) {
        object.hitArea = new PIXI.Rectangle(0, 0, objectData.w, objectData.h);
        object.interactive = true;
        object.buttonMode = true;
      }
      else {
        object.hitArea = new PIXI.Rectangle(0, 0, 0, 0);
      }

      objectSelected.rotation = (objectData.r || 0)/180 * (Math.PI);

      objectSelected.x = objectData.w/2;
      objectSelected.y = objectData.h/2;
      objectSelected.pivot.x = objectData.w/2;
      objectSelected.pivot.y = objectData.h/2;

      outline.clear();
      outline.beginFill(0x000000, 0);
      outline.lineStyle(4, 0xFF8a42, 1);
      outline.drawRect(0, 0, objectData.w, objectData.h);
      outline.endFill();

      var zoom = Number(app.attr("zoom"))/100;
      rotateHandle.clear();
      rotateHandle.beginFill(0xFFFFFF);
      rotateHandle.lineStyle(2/zoom, 0xFF0000, 0.5);
      rotateHandle.drawCircle(8/zoom, 0, 8/zoom);
      rotateHandle.endFill();
      rotateHandle.x = objectData.w/2 - 6/zoom;
      rotateHandle.y = -25/zoom;
      rotateHandle.width = 13/zoom;
      rotateHandle.height = 13/zoom;
      rotateHandle.interactive = true;
      rotateHandle.buttonMode = true;

      var size = Math.min(11,width/3)/zoom;
      var handlePos = {
        tr : {cursor : "ne-resize", x : width-size/2, y : -size/2},
        r : {cursor : "e-resize", x : width-size/2, y : height/2-size/2},
        br : {cursor : "se-resize", x : width-size/2, y : height-size/2},
        b : {cursor : "s-resize", x : width/2-size/2, y : height-size/2},
        bl : {cursor : "sw-resize", x : -size/2, y : height-size/2},
        l : {cursor : "w-resize", x : -size/2, y : height/2-size/2},
        tl : {cursor : "nw-resize", x : -size/2, y : -size/2},
        t : {cursor : "n-resize", x : width/2-size/2, y : -size/2},
      };

      for (var i in handlePos) {
        var dragHandle = handles[i];
        dragHandle.x = handlePos[i].x;
        dragHandle.y = handlePos[i].y;
        dragHandle.clear();
        dragHandle.beginFill(0xFFFFFF);
        dragHandle.lineStyle(1/zoom, 0xFF0000, 0.5);
        dragHandle.drawRoundedRect(0, 0, size, size, 2);
        dragHandle.endFill();
        dragHandle.cursor = handlePos[i].cursor;
        if (objectData.r || (objectData.lookup && objectData.lookup.type == "d") || !hasSecurity(getCookie("UserID"), "Rights", obj.data)) {
          dragHandle.visible = false;
        }
        else {
          var zoom = Number(app.attr("zoom"))/100;
          if (zoom != 1 && (i != "r" && i != "br" && i != "b")) {
            dragHandle.visible = false;
          }
          else {
            dragHandle.visible = true;
          }
        }
      }
      if (objectWrap.rebuild) {
        objectWrap.rebuild(objectData);
      }
    }
  }
  objectWrap.animate = function(endData, startData, time) {
    var time = time || 1;
    if (boardApi.apps[app.attr("id")] && boardApi.apps[app.attr("id")].stage) {
      if (objectWrap.animating) {
        objectWrap.update();
        boardApi.apps[app.attr("id")].ticker.remove(objectWrap.animating);
      }
      if (!objectWrap.start) {
        if (startData) {
          objectWrap.start = startData;
        }
        else {
          var layer = objectWrap.lookup.layer;
          var type = objectWrap.lookup.type;
          var index = objectWrap.lookup.index;
          objectWrap.start = duplicate(obj.data.layers[layer][type][index]);
          objectWrap.start.x = objectWrap.x;
          objectWrap.start.y = objectWrap.y;
        }
      }
      if (!endData) {
        var layer = objectWrap.lookup.layer;
        var type = objectWrap.lookup.type;
        var index = objectWrap.lookup.index;
        endData = obj.data.layers[layer][type][index];
      }
      // sanitize the data;
      objectWrap.start.x = objectWrap.start.x || 0;
      objectWrap.start.y = objectWrap.start.y || 0;
      objectWrap.start.w = objectWrap.start.w || 0;
      objectWrap.start.h = objectWrap.start.h || 0;
      objectWrap.start.r = objectWrap.start.r || 0;

      var endData = duplicate(endData);
      endData.x = (endData.x!=null)?(endData.x):(objectWrap.start.x);
      endData.y = (endData.y!=null)?(endData.y):(objectWrap.start.y);
      endData.w = (endData.w!=null)?(endData.w):(objectWrap.start.w);
      endData.h = (endData.h!=null)?(endData.h):(objectWrap.start.h);
      endData.r = (endData.r!=null)?(endData.r):(objectWrap.start.r);

      objectWrap.force = Date.now() + time * 1000;
      objectWrap.duration = time;
      objectWrap.end = endData;
      objectWrap.animating = function(delta) {
        if (objectWrap.animating) {
          var sX = objectWrap.start.x;
          var sY = objectWrap.start.y;
          var sW = objectWrap.start.w;
          var sH = objectWrap.start.h;
          var sR = objectWrap.start.r;
          var eX = objectWrap.end.x;
          var eY = objectWrap.end.y;
          var eW = objectWrap.end.w;
          var eH = objectWrap.end.h;
          var eR = objectWrap.end.r;
          var vel = {
            x : (endData.x-objectWrap.start.x),
            y : (endData.y-objectWrap.start.y),
            w : (endData.w-objectWrap.start.w),
            h : (endData.h-objectWrap.start.h),
            r : endData.r-objectWrap.start.r,
          };

          var diff = endData.r-objectWrap.start.r;
          var change = Math.min(360-Math.abs(diff), Math.abs(diff));
          if (change <= 180) {
            if (diff >= 0) {
              vel.r = change;
            }
            else {
              vel.r = change*-1;
            }
          }
          else {
            vel.r = (change-180);
          }

          var now = Date.now();
          if ((objectWrap.force && objectWrap.force > now)) {
            var percentage = Math.max((objectWrap.force-now)/1000/time, 0);
            objectWrap.start.x = objectWrap.end.x - vel.x * percentage;
            objectWrap.start.y = objectWrap.end.y - vel.y * percentage;
            objectWrap.start.w = objectWrap.end.w - vel.w * percentage;
            objectWrap.start.h = objectWrap.end.h - vel.h * percentage;
            objectWrap.start.r = objectWrap.end.r - vel.r * percentage;
            objectWrap.update(objectWrap.start);
          }
          if (objectWrap.force <= now) {
            // finish the animation
            objectWrap.update(objectWrap.end);
            boardApi.apps[app.attr("id")].ticker.remove(objectWrap.animating);
            delete objectWrap.force;
            delete objectWrap.end;
            delete objectWrap.duration;
            delete objectWrap.start;
            delete objectWrap.animating;
          }
        }
      }
      boardApi.apps[app.attr("id")].ticker.add(objectWrap.animating);
    }
  }
  objectWrap.update(options.objectData);
  return objectWrap;
}

boardApi.createDrawing = function(options, obj, app, scope) {
  var data = obj.data;
  var isHex = data.options && data.options.hex;
  var hasGrid = data.gridW && data.gridW;
  var objectData = options.data;
  options.type = "d";

  var layer = options.layer;
  var type = options.type;
  var index = options.index;

  var pieceWrap = boardApi.createObject(options, obj, app, scope);
  pieceWrap.lookup = {layer : layer, type : type, index : index};

  pieceWrap.canSelect = function(ev){
    return pieceWrap.canInteract(ev);
  }

  pieceWrap.canInteract = function(ev){
    if (!pieceWrap.lookup) {return false;}
    var layer = pieceWrap.lookup.layer;
    var type = pieceWrap.lookup.type;
    var index = pieceWrap.lookup.index;
    var objectData = obj.data.layers[layer][type][index];
    var hasRights = hasSecurity(getCookie("UserID"), "Rights", obj.data) || hasSecurity(getCookie("UserID"), "Game Master");
    if (game.locals["drawing"] && game.locals["drawing"].data && game.locals["drawing"].data.drawing) {
      return false;
    }
    if (app.attr("background")) {
      return false;
    }
    if ((hasRights || objectData.uID == getCookie("UserID")) && app.attr("layer") == layer ) {
      return true;
    }
    return false;
  }
  pieceWrap.resize = function(ev){
    if (!pieceWrap.lookup) {return false;}
    var layer = pieceWrap.lookup.layer;
    var type = pieceWrap.lookup.type;
    var index = pieceWrap.lookup.index;
    var objectData = obj.data.layers[layer][type][index];
    var hasRights = hasSecurity(getCookie("UserID"), "Rights", obj.data) || hasSecurity(getCookie("UserID"), "Game Master");

    if ((hasRights || objectData.uID == getCookie("UserID")) && !floatingTile) {
      runCommand("boardMove", {id : obj.id(), layer : layer, type : type, index : index, data : objectData});
      return true;
    }
    return false;
  }
  pieceWrap.rotate = function(ev){
    if (!pieceWrap.lookup) {return false;}
    var layer = pieceWrap.lookup.layer;
    var type = pieceWrap.lookup.type;
    var index = pieceWrap.lookup.index;
    var objectData = obj.data.layers[layer][type][index];
    var hasRights = hasSecurity(getCookie("UserID"), "Rights", obj.data) || hasSecurity(getCookie("UserID"), "Game Master");

    if ((hasRights || objectData.uID == getCookie("UserID")) && !floatingTile) {
      runCommand("boardMove", {id : obj.id(), layer : layer, type : type, index : index, data : objectData});
      return true;
    }
    return false;
  }
  pieceWrap.move = function(ev){
    if (!pieceWrap.lookup) {return false;}
    var layer = pieceWrap.lookup.layer;
    var type = pieceWrap.lookup.type;
    var index = pieceWrap.lookup.index;
    var objectData = obj.data.layers[layer][type][index];
    var hasRights = hasSecurity(getCookie("UserID"), "Rights", obj.data) || hasSecurity(getCookie("UserID"), "Game Master");
    if ((hasRights || objectData.uID == getCookie("UserID")) && !floatingTile) {
      runCommand("boardMove", {id : obj.id(), layer : layer, type : type, index : index, data : objectData});
      return true;
    }
    return false;
  }

  var piece = pieceWrap.children[0];
  var pieceSelected = pieceWrap.children[1];
  var outline = pieceSelected.children[0];

  pieceWrap.rebuild = function(objectData) {
    var layer = pieceWrap.lookup.layer;
    var type = pieceWrap.lookup.type;
    var index = pieceWrap.lookup.index;
    if (!objectData && layer != null && index != null) {
      objectData = obj.data.layers[layer][type][index];
    }

    var x = objectData.x;
    var y = objectData.y;
    var width = Math.max(10, objectData.w);
    var height = Math.max(10, objectData.h);

    var recreate = false;
    if (piece.children && piece.children.length && piece.children[0]) {
      if (piece.children[0].drawing != objectData.drawing) {
        piece.children[0].destroy(true);
        recreate = true;
      }
    }
    else {
      recreate = true;
    }

    var token;
    if (objectData.drawing == "free") {
      if (recreate) {
        token = new PIXI.Sprite.fromImage(objectData.i);
        piece.addChild(token);
      }
      else {
        token = piece.children[0];
      }
      token.width = width;
      token.height = height;
    }
    else if (objectData.drawing == "box") {
      if (objectData.i) {
        var mask;
        if (recreate) {
          var text = new PIXI.Texture.fromImage(objectData.i);
          token = new PIXI.TilingSprite(text, objectData.w, objectData.h);
          token.drawing = objectData.drawing;
          piece.addChild(token);

          mask = new PIXI.Graphics();
          piece.addChild(mask);
        }
        else {
          token = piece.children[0];
          mask = piece.children[1];
        }

        mask.clear();
        mask.beginFill(util.RGB_HEX(objectData.c1), util.RGB_ALPHA(objectData.c1));
        mask.lineStyle(objectData.ls || 2, util.RGB_HEX(objectData.c2), util.RGB_ALPHA(objectData.c2));
        mask.drawRect(0, 0, objectData.w, objectData.h);
        mask.endFill();
        mask.w = width;
        mask.h = height;
        token.mask = mask;
      }
      else {
        if (recreate) {
          token = new PIXI.Graphics();
          piece.addChild(token);
        }
        else {
          token = piece.children[0];
        }
        token.clear();
        token.beginFill(util.RGB_HEX(objectData.c1), util.RGB_ALPHA(objectData.c1));
        token.lineStyle(objectData.ls || 2, util.RGB_HEX(objectData.c2), util.RGB_ALPHA(objectData.c2));
        token.drawRect(0, 0, objectData.w, objectData.h);
        token.endFill();
        token.w = width;
        token.h = height;
      }
    }
    else if (objectData.drawing == "line") {
      if (recreate) {
        token = new PIXI.Graphics();
        piece.addChild(token);
      }
      else {
        token = piece.children[0];
      }
      token.clear();
      token.lineStyle(objectData.ls || 3, util.RGB_HEX(objectData.c1 || objectData.c2), util.RGB_ALPHA(objectData.c1 || objectData.c2));
      token.moveTo(objectData.x1, objectData.y1);
      token.lineTo(objectData.x2, objectData.y2);
    }
    else if (objectData.drawing == "circle") {
      if (objectData.i) {
        var mask;
        if (recreate) {
          var text = new PIXI.Texture.fromImage(objectData.i);
          token = new PIXI.TilingSprite(text, objectData.w, objectData.h);
          token.drawing = objectData.drawing;
          piece.addChild(token);

          mask = new PIXI.Graphics();
          token.mask = mask;
          piece.addChild(mask);
        }
        else {
          token = piece.children[0];
          mask = piece.children[1];
        }

        mask.clear();
        mask.lineStyle(objectData.ls || 3, util.RGB_HEX(objectData.c2), util.RGB_ALPHA(objectData.c2));
        mask.beginFill(util.RGB_HEX(objectData.c1), util.RGB_ALPHA(objectData.c1));
        mask.drawCircle(objectData.radius,objectData.radius,objectData.radius);
        mask.endFill();
      }
      else {
        if (recreate) {
          token = new PIXI.Graphics();
          piece.addChild(token);
        }
        else {
          token = piece.children[0];
        }
        token.clear();
        token.lineStyle(objectData.ls || 3, util.RGB_HEX(objectData.c2), util.RGB_ALPHA(objectData.c2));
        token.beginFill(util.RGB_HEX(objectData.c1), util.RGB_ALPHA(objectData.c1));
        token.drawCircle(objectData.radius,objectData.radius,objectData.radius);
        token.endFill();
      }
    }
    else if (objectData.drawing == "text") {
      if (recreate) {
        token = new PIXI.Text(null, new PIXI.TextStyle(objectData.style || boardApi.fonts.default));
        piece.addChild(token);
      }
      else {
        token = piece.children[0];
      }
      if (JSON.stringify(token.style) != JSON.stringify(objectData.style)) {
        token.style = objectData.style;
        token.dirty = true;
      }
      token.text = objectData.text;
    }
    else if (objectData.drawing == "region") {
      if (objectData.i) {
        var mask;
        if (recreate) {
          var text = new PIXI.Texture.fromImage(objectData.i);
          token = new PIXI.TilingSprite(text, objectData.w, objectData.h);
          token.drawing = objectData.drawing;
          piece.addChild(token);

          mask = new PIXI.Graphics();
          piece.addChild(mask);
        }
        else {
          token = piece.children[0];
          mask = piece.children[1];
        }

        mask.clear();
        mask.beginFill(util.RGB_HEX(objectData.c1), util.RGB_ALPHA(objectData.c1));
        mask.lineStyle(objectData.ls || 3, util.RGB_HEX(objectData.c1), util.RGB_ALPHA(objectData.c1));
        mask.moveTo(objectData.regions[0].x-objectData.x, objectData.regions[0].y-objectData.y);
        for (var i=1; i<objectData.regions.length; i++) {
          var regionData = objectData.regions[i];
          mask.lineTo(objectData.regions[i].x-objectData.x, objectData.regions[i].y-objectData.y);
        }
        mask.lineTo(objectData.regions[0].x-objectData.x, objectData.regions[0].y-objectData.y);
        mask.closePath();
        mask.endFill();
        token.mask = mask;
      }
      else {
        if (recreate) {
          token = new PIXI.Graphics();
          piece.addChild(token);
        }
        else {
          token = piece.children[0];
        }
        token.clear();
        token.beginFill(util.RGB_HEX(objectData.c1), util.RGB_ALPHA(objectData.c1));
        token.lineStyle(objectData.ls || 3, util.RGB_HEX(objectData.c1), util.RGB_ALPHA(objectData.c1));
        token.moveTo(objectData.regions[0].x-objectData.x, objectData.regions[0].y-objectData.y);
        for (var i=1; i<objectData.regions.length; i++) {
          var regionData = objectData.regions[i];
          token.lineTo(objectData.regions[i].x-objectData.x, objectData.regions[i].y-objectData.y);
        }
        token.lineTo(objectData.regions[0].x-objectData.x, objectData.regions[0].y-objectData.y);
        token.closePath();
        token.endFill();
      }
    }
  }
  pieceWrap.update(options.data);
  return pieceWrap;
}

boardApi.createTile = function(options, obj, app, scope){
  var data = obj.data;
  var isHex = data.options && data.options.hex;
  var hasGrid = data.gridW && data.gridW;

  options.type = "t";

  var layer = options.layer;
  var type = options.type;
  var index = options.index;

  var pieceWrap = boardApi.createObject(options, obj, app, scope);
  pieceWrap.lookup = {layer : layer, type : type, index : index};
  pieceWrap.tileData = duplicate(options.data);

  pieceWrap.canSelect = function(ev){
    return pieceWrap.canInteract(ev);
  }

  pieceWrap.canInteract = function(ev){
    if (!pieceWrap.lookup || pieceWrap.lookup.layer == null || pieceWrap.lookup.type == null || pieceWrap.lookup.index == null) {return false;}
    var layer = pieceWrap.lookup.layer;
    var type = pieceWrap.lookup.type;
    var index = pieceWrap.lookup.index;
    var objectData = obj.data.layers[layer][type][index];
    var hasRights = hasSecurity(getCookie("UserID"), "Rights", obj.data) || hasSecurity(getCookie("UserID"), "Game Master");
    if (game.locals["drawing"] && game.locals["drawing"].data && game.locals["drawing"].data.drawing) {
      return false;
    }
    if (hasRights && app.attr("background") && !floatingTile) {
      return true;
    }
    return false;
  }

  pieceWrap.resize = function(){
    pieceWrap.rebuild(null, true);
  }

  var piece = pieceWrap.children[0];
  var pieceSelected = pieceWrap.children[1];
  var outline = pieceSelected.children[0];

  pieceWrap.rebuild = function(tileData, rebuild) {
    var layer = pieceWrap.lookup.layer;
    var type = pieceWrap.lookup.type;
    var index = pieceWrap.lookup.index;
    if (!tileData && layer != null && index != null) {
      tileData = obj.data.layers[layer].t[index];
    }
    var x = tileData.x;
    var y = tileData.y;
    var width = Math.max(10, tileData.w);
    var height = Math.max(10, tileData.h);
    if (rebuild || !piece.children || piece.children.length == 0) {
      for (var i in piece.children) {
        piece.children[i].visible = false;
      }

      var sheetData = data.sheets[tileData.s];
      if (sheetData) {
        var tileW = sheetData.gW + sheetData.p;
        var tileH = sheetData.gH + sheetData.p;
        var xGrid = Math.ceil(sheetData.w/(tileW));
        var yGrid = Math.ceil(sheetData.h/(tileH));

        var aspectW = 1;
        var aspectH = 1;
        if (sheetData.nW && sheetData.nH) {
          aspectW = sheetData.w/sheetData.nW;
          aspectH = sheetData.h/sheetData.nH;
        }
        var sX = (tileData.i % xGrid) * tileW / aspectW;
        var sY = Math.floor(tileData.i / xGrid) * tileH / aspectH;
        var sW = Math.min(((tileData.gW || 1) * sheetData.gW + ((tileData.gW || 1)-1) * sheetData.p) / aspectW, sheetData.w);
        var sH = Math.min(((tileData.gH || 1) * sheetData.gH + ((tileData.gH || 1)-1) * sheetData.p) / aspectH, sheetData.h);

        var texture = new PIXI.Texture(PIXI.loader.resources[sheetData.i].texture);
        if (sX + sW > texture.baseTexture.width) {
          sW = sW - ((sX + sW)-texture.baseTexture.width);
        }
        if ((sY + sH) > texture.baseTexture.height) {
          sH = sH - ((sY + sH)-texture.baseTexture.height);
        }
        texture.frame = new PIXI.Rectangle(sX, sY, sW, sH);

        if (tileData.t && (width >= (data.gridW || width) && height >= (data.gridH || height)) && !(isHex)) {
          piece.width = width;
          piece.height = height;
          var tileX = (tileData.gW || 1) * sheetData.gW + ((tileData.gW || 1)-1) * sheetData.p;
          var tileY = (tileData.gH || 1) * sheetData.gH + ((tileData.gH || 1)-1) * sheetData.p;
          var gridX = Math.floor((width || data.gridW)/tileX);
          var gridY = Math.floor((height || data.gridH)/tileY);
          var widthT = (tileX || width || data.gridW);
          var heightT = (tileY || height || data.gridH);
          for (var x=0; x<gridX; x++) {
            for (var y=0; y<gridY; y++) {
              var token = new PIXI.Sprite(texture);
              token.x = (x * widthT);
              token.y = (y * heightT);
              token.width = tileX;
              token.height = tileY;

              piece.addChild(token);
            }
          }
        }
        else {
          var token = new PIXI.Sprite(texture);
          token.scale.x = width/sW;
          token.scale.y = height/sH;
          piece.x = width/2;
          piece.y = height/2;
          piece.width = width;
          piece.height = height;
          piece.pivot.x = width/2;
          piece.pivot.y = height/2;

          piece.addChild(token);
        }
        for (var i in piece.children) {
          if (!piece.children[i].visible) {
            piece.children[i].destroy();
          }
        }
      }
    }
  }
  pieceWrap.update(options.data);
  return pieceWrap;
}

boardApi.drawShape = function(objectData, stand, lineStyle, isHex){
  if (objectData.d == null || objectData.d == 0) {
    var sX = 0;
    var sY = 0;
    if (isHex) {
      stand.beginFill(util.RGB_HEX(objectData.c), util.RGB_ALPHA(objectData.c));
      stand.moveTo(sX + 0, sY + objectData.h/2);
      stand.lineTo(sX + objectData.w * 1/4, sY + 0);
      stand.lineTo(sX + objectData.w * 3/4, sY + 0);
      stand.lineTo(sX + objectData.w-0, sY + objectData.h/2);
      stand.lineTo(sX + objectData.w * 3/4, sY + objectData.h-0);
      stand.lineTo(sX + objectData.w * 1/4, sY + objectData.h-0);
      stand.lineTo(sX + 0, sY + objectData.h/2);
      stand.endFill();
    }
    else {
      stand.beginFill(util.RGB_HEX(objectData.c), util.RGB_ALPHA(objectData.c));
      stand.lineStyle(2, 0x000000, (lineStyle)?(0.4):(0));
      stand.drawRect(1, 1, objectData.w-1, objectData.h-1);
      stand.endFill();
    }
  }
  else if (objectData.d == 1) {
    stand.beginFill(util.RGB_HEX(objectData.c), util.RGB_ALPHA(objectData.c));
    stand.lineStyle(2, 0x000000, (lineStyle)?(0.4):(0));
    stand.drawRoundedRect(1, 1, objectData.w-1, objectData.h-1, Math.min(objectData.w, objectData.h)*0.1);
    stand.endFill();
  }
  else if (objectData.d == 2) {
    stand.beginFill(util.RGB_HEX(objectData.c), util.RGB_ALPHA(objectData.c));
    stand.lineStyle(2, 0x000000, (lineStyle)?(0.4):(0));
    stand.drawEllipse(objectData.w/2-1, objectData.h/2-1, objectData.w/2-1, objectData.h/2-1);
    stand.endFill();
  }
  else if (objectData.d == 3) {
    var path = [
      0, 0,
      objectData.w, 0,
      objectData.w/2, objectData.h,
      0, 0
    ];
    stand.beginFill(util.RGB_HEX(objectData.c), util.RGB_ALPHA(objectData.c));
    stand.lineStyle(2, 0x000000, (lineStyle)?(0.4):(0));
    stand.drawPolygon(path);
    stand.endFill();
  }
  else if (objectData.d == 4) {
    var path = [
      objectData.w/2, 0,
      0, objectData.h,
      objectData.w, objectData.h,
      objectData.w/2, 0
    ];
    stand.beginFill(util.RGB_HEX(objectData.c), util.RGB_ALPHA(objectData.c));
    stand.lineStyle(2, 0x000000, (lineStyle)?(0.4):(0));
    stand.drawPolygon(path);
    stand.endFill();
  }
  else if (objectData.d == 5) {
    stand.beginFill(util.RGB_HEX(objectData.c), util.RGB_ALPHA(objectData.c));
    stand.lineStyle(2, 0x000000, (lineStyle)?(0.4):(0));
    stand.drawStar(objectData.w/2,objectData.h/2,5,objectData.w/2,objectData.w/4);
    stand.endFill();
  }
  else if (objectData.d == 6) {
    var path = [
      objectData.w/2, 0,
      objectData.w, objectData.h * 2/5,
      objectData.w * 4/5, objectData.h,
      objectData.w * 1/5, objectData.h,
      0, objectData.h * 2/5,
      objectData.w/2, 0,
    ];
    stand.beginFill(util.RGB_HEX(objectData.c), util.RGB_ALPHA(objectData.c));
    stand.lineStyle(2, 0x000000, (lineStyle)?(0.4):(0));
    stand.drawPolygon(path);
    stand.endFill();
  }
  else if (objectData.d == 7) {
    var path = [
      objectData.w * 5/7, 0,
      objectData.w, objectData.h * 3/6,
      objectData.w * 5/7, objectData.h,
      objectData.w * 2/7, objectData.h,
      0, objectData.h * 3/6,
      objectData.w * 2/7, 0,
      objectData.w * 5/7, 0,
    ];
    stand.beginFill(util.RGB_HEX(objectData.c), util.RGB_ALPHA(objectData.c));
    stand.lineStyle(2, 0x000000, (lineStyle)?(0.4):(0));
    stand.drawPolygon(path);
    stand.endFill();
  }
  else if (objectData.d == 9) {
    var path = [
      objectData.w * 4/6, 0,
      objectData.w, objectData.h * 2/6,
      objectData.w, objectData.h * 4/6,
      objectData.w * 4/6, objectData.h,
      objectData.w * 2/6, objectData.h,
      0, objectData.h * 4/6,
      0, objectData.h * 2/6,
      objectData.w * 2/6, 0,
      objectData.w * 4/6, 0,
    ];
    stand.beginFill(util.RGB_HEX(objectData.c), util.RGB_ALPHA(objectData.c));
    stand.lineStyle(2, 0x000000, (lineStyle)?(0.4):(0));
    stand.drawPolygon(path);
    stand.endFill();
  }
}

boardApi.createPiece = function(options, obj, app, scope){
  if (options.data == null) {
    console.error("null value");
  }
  var data = obj.data;
  var isHex = data.options && data.options.hex;
  var hasGrid = data.gridW && data.gridW;
  var objectData = options.data;
  options.type = "p";

  var layer = options.layer;
  var type = options.type;
  var index = options.index;

  var pieceWrap = boardApi.createObject(options, obj, app, scope);
  pieceWrap.lookup = {layer : layer, type : type, index : index};
  pieceWrap.canSelect = function(){
    var layer = pieceWrap.lookup.layer;
    var type = pieceWrap.lookup.type;
    var index = pieceWrap.lookup.index;
    var objectData = obj.data.layers[layer].p[index];
    var hasRights = hasSecurity(getCookie("UserID"), "Rights", obj.data) || hasSecurity(getCookie("UserID"), "Game Master");
    if (_down[17] || (objectData.l && app.attr("layer") != layer)) {
      return false;
    }

    if (objectData.eID || hasRights) {
      return true;
    }
    return false;
  };

  pieceWrap.canInteract = function(ev){
    if (!pieceWrap.lookup) {return false;}
    var layer = pieceWrap.lookup.layer;
    var type = pieceWrap.lookup.type;
    var index = pieceWrap.lookup.index;
    var objectData = obj.data.layers[layer].p[index];
    var hasRights = hasSecurity(getCookie("UserID"), "Rights", obj.data) || hasSecurity(getCookie("UserID"), "Game Master");
    if (_down[17] || (objectData.l && app.attr("layer") != layer)) {
      return false;
    }
    if (game.locals["drawing"] && game.locals["drawing"].data && game.locals["drawing"].data.drawing) {
      return false;
    }

    if (app.attr("background")) {
      return false;
    }

    if (objectData.l && app.attr("layer") != layer) {
      return false;
    }

    if (hasRights) {
      return true;
    }
    var ent = getEnt(objectData.eID);
    if ((hasSecurity(getCookie("UserID"), "Rights", obj.data) || (ent && (ent.data._t == "b" || hasSecurity(getCookie("UserID"), "Rights", ent.data)))) && !floatingTile) {
      return true;
    }

    return false;
  }
  pieceWrap.canChange = function(){
    if (!pieceWrap.lookup) {return false;}
    var layer = pieceWrap.lookup.layer;
    var type = pieceWrap.lookup.type;
    var index = pieceWrap.lookup.index;
    var objectData = obj.data.layers[layer].p[index];
    var hasRights = hasSecurity(getCookie("UserID"), "Rights", obj.data) || hasSecurity(getCookie("UserID"), "Game Master");

    if (game.locals["drawing"] && game.locals["drawing"].data && game.locals["drawing"].data.drawing) {
      return false;
    }

    if (app.attr("background")) {
      return false;
    }

    if (objectData.l && app.attr("layer") != layer) {
      return false;
    }

    if (hasRights) {
      return true;
    }
    var ent = getEnt(objectData.eID);
    if ((hasSecurity(getCookie("UserID"), "Rights", obj.data) || (ent && hasSecurity(getCookie("UserID"), "Rights", ent.data))) && !floatingTile) {
      return true;
    }

    return false;
  }

  pieceWrap.resize = function(ev){
    if (!pieceWrap.lookup) {return false;}
    var layer = pieceWrap.lookup.layer;
    var type = pieceWrap.lookup.type;
    var index = pieceWrap.lookup.index;
    var objectData = obj.data.layers[layer].p[index];
    var ent = getEnt(objectData.eID);
    if ((hasSecurity(getCookie("UserID"), "Rights", obj.data) || (ent && hasSecurity(getCookie("UserID"), "Rights", ent.data))) && !floatingTile) {
      runCommand("boardMove", {id : obj.id(), layer : layer, type : type, index : index, data : objectData});
      return true;
    }
    return false;
  }
  pieceWrap.rotate = function(ev){
    if (!pieceWrap.lookup) {return false;}
    var layer = pieceWrap.lookup.layer;
    var type = pieceWrap.lookup.type;
    var index = pieceWrap.lookup.index;
    var objectData = obj.data.layers[layer].p[index];
    var ent = getEnt(objectData.eID);
    if ((hasSecurity(getCookie("UserID"), "Rights", obj.data) || (ent && hasSecurity(getCookie("UserID"), "Rights", ent.data))) && !floatingTile) {
      runCommand("boardMove", {id : obj.id(), layer : layer, type : type, index : index, data : objectData});
      return true;
    }
    return false;
  }
  pieceWrap.move = function(ev, deltaX, deltaY){
    if (!pieceWrap.lookup) {return false;}
    var layer = pieceWrap.lookup.layer;
    var type = pieceWrap.lookup.type;
    var index = pieceWrap.lookup.index;
    var objectData = obj.data.layers[layer].p[index];
    var ent = getEnt(objectData.eID);
    if ((hasSecurity(getCookie("UserID"), "Rights", obj.data) || (ent && hasSecurity(getCookie("UserID"), "Rights", ent.data))) && !floatingTile) {
      if (!hasSecurity(getCookie("UserID"), "Rights", obj.data) && !obj.data.options.noCollide && obj.data.options.fog) {
        var endX = objectData.x + objectData.w/2;
        var endY = objectData.y + objectData.h/2;

        var startX = endX + deltaX;
        var startY = endY + deltaY;
        var moveDist = util.dist(startX, endX, startY, endY);

        var fog = duplicate(boardApi.fog[obj.id()]);
        fog.splice(0,8); // get rid of the boundries
        for (var i in fog) {
          if (util.intersectLine(fog[i].x1, fog[i].y1, fog[i].x2, fog[i].y2, startX, startY, endX, endY)) {
            if (!$("#wall-warning").length) {
              sendAlert({text : "You can't move through walls!", id : "wall-warning"});
            }
            obj.data.layers[layer].p[index].x = startX - objectData.w/2;
            obj.data.layers[layer].p[index].y = startY - objectData.h/2;
            pieceWrap.update();

            runCommand("boardMove", {id : obj.id(), layer : layer, type : type, index : index, data : duplicate(obj.data.layers[layer].p[index])});
            return false;
          }
        }
      }

      if (Object.keys(boardApi.triggers.cache[obj.id()]).length && objectData && !objectData.e) {
        var oldX = objectData.x + deltaX;
        var oldY = objectData.y + deltaY;

        var midX = objectData.x + objectData.w/2;
        var midY = objectData.y + objectData.h/2;

        var ctx = sync.defaultContext();
        ctx[obj.data._t] = {layers : {}};
        for (var lid in obj.data.layers) {
          ctx[obj.data._t].layers[lid] = {h : obj.data.layers[lid].h};
        }
        for (var k in boardApi.triggers.cache[obj.id()]) {
          var triggered = [];
          var tP = boardApi.triggers.cache[obj.id()][k];
          if ((tP.layer != layer || tP.index != index) && obj.data.layers[tP.layer]) {
            tP = obj.data.layers[tP.layer].p[tP.index];
            if (tP) {
              if (tP.e.t > 1) {
                if (tP.e.t == 2 && (tP.x < midX && tP.x + tP.w > midX && tP.y < midY && tP.y + tP.h > midY)) { // pressure plate
                  triggered.push(duplicate(boardApi.triggers.cache[obj.id()][k]));
                }
                else if ((tP.e.t == 3)) { // trip wire
                  if (!(tP.x < oldX + objectData.w/2 && tP.x + tP.w > oldX + objectData.w/2 && tP.y < oldY + objectData.h/2 && tP.y + tP.h > oldY + objectData.h/2)) {
                    if (util.intersectBox(oldX + objectData.w/2, oldY + objectData.h/2, midX, midY, tP.x, tP.y, tP.w, tP.h)) {
                      triggered.push(duplicate(boardApi.triggers.cache[obj.id()][k]));
                    }
                  }
                }
              }
              if (triggered.length) {
                var tLayer = boardApi.triggers.cache[obj.id()][k].layer;
                var tIndex = boardApi.triggers.cache[obj.id()][k].index;
                boardApi.triggers.flush[obj.id()][tLayer+"-"+tIndex] = function(k) {
                  var tP = boardApi.triggers.cache[obj.id()][k];
                  if (obj.data.layers[tP.layer]) {
                    tP = obj.data.layers[tP.layer].p[tP.index];
                    if (tP) {
                      for (var cID in tP.e.calc) {
                        var calcData = tP.e.calc[cID];
                        if (calcData) {
                          if (!calcData.cond || sync.eval(calcData.cond, ctx)) {
                            if (util.events[calcData.e] && util.events[calcData.e].fire) { // equation
                              util.events[calcData.e].fire(obj, app, calcData, tP, ctx);
                            }
                            else {
                              var val = sync.eval(calcData.eq, ctx);
                              var target = sync.traverse(obj.data, calcData.target);
                              if (target instanceof Object) {
                                sync.rawVal(target, val);
                              }
                              else {
                                sync.traverse(obj.data, calcData.target, val);
                              }
                              if (calcData.target.match("layers\.")) {
                                boardApi.updateLayer(calcData.target.split(".")[1], null, obj);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      runCommand("boardMove", {id : obj.id(), layer : layer, type : type, index : index, data : objectData});
      return true;
    }
    return false;
  }
  pieceWrap.onclick = function(ev) {
    var layer = pieceWrap.lookup.layer;
    var type = pieceWrap.lookup.type;
    var index = pieceWrap.lookup.index;
    var pieceData = obj.data.layers[layer].p[index];

    var point = pieceWrap.toGlobal({x : pieceSelected.width/2-5, y : 0});
    var ent = getEnt(pieceData.eID);
    if (Object.keys(boardApi.selections).length == 1 && $(".piece-quick-edit").length == 1 && $(".piece-quick-edit-app").attr("idstr") == obj.id()+"-"+layer+"-p-"+index) {
      if (!game.locals["drawing"] || !game.locals["drawing"].data || game.locals["drawing"].data.target != app.attr("id") || !game.locals["drawing"].data.drawing) {
        if (!pieceData.eID) {
          var content = sync.render("ui_assetPicker")(obj, app, {
            rights : "Visible",
            select : function(ev, ui, ent, options){
              obj.data.layers[layer].p[index].eID = ent.id();
              if (ent.data.info && ent.data.info.img) {
                if (ent.data.info.img.min) {
                  obj.data.layers[layer].p[index].i = ent.data.info.img.min;
                }
              }
              layout.coverlay("add-asset");
              runCommand("boardMove", {id : obj.id(), layer : layer, type : "p", index : index, data : obj.data.layers[layer].p[index]});
              boardApi.updateObject(layer, "p", index, obj);
              ev.stopPropagation();
              ev.preventDefault();
            }
          });
          var popOut = ui_popOut({
            target : $("body"),
            prompt : true,
            id : "add-asset",
            title : "Change Link",
            style : {"width" : assetTypes["assetPicker"].width, "height" : assetTypes["assetPicker"].height}
          }, content);
          popOut.resizable();
        }
        else if (ent && ent.data && hasSecurity(getCookie("UserID"), "Rights", ent.data)) {
          assetTypes[ent.data._t].preview(ent, $(".piece-quick-edit"));
          layout.coverlay($(".piece-quick-edit"));
        }
      }
      return;
    }
    if ($(".piece-quick-edit").length == 0 || $(".piece-quick-edit-app").attr("layer") != layer || $(".piece-quick-edit-app").attr("piece") != index || $(".piece-quick-edit-app").attr("board") != obj.id()) {
      if ((pieceWrap.canChange && !pieceWrap.canChange(ev)) || (Object.keys(boardApi.selections).length == 1 && Object.keys(boardApi.selections)[0] == obj.id()+"-"+layer+"-p-"+index)) {
        if (game.locals["pieceBuilding"] && game.locals["pieceBuilding"].data) {
          if (hasSecurity(getCookie("UserID"), "Rights", obj.data)) {
            game.locals["pieceBuilding"].data.layer = layer;
            game.locals["pieceBuilding"].data.piece = index;
            game.locals["pieceBuilding"].update();
          }
        }
        //boardApi.drawThreats(board, true);
        //board.drawLayers();
        layout.coverlay($(".piece-quick-edit"));

        var content = sync.newApp("ui_pieceQuickEdit");
        content.addClass("piece-quick-edit-app");
        content.attr("board", obj.id());
        content.attr("layer", layer);
        content.attr("piece", index);
        content.attr("idstr", obj.id()+"-"+layer+"-p-"+index);
        content.attr("zoom", app.attr("zoom"));
        content.attr("targetApp", app.attr("id"));
        content.css("outline", "none");
        obj.addApp(content);

        var popout = ui_popOut({
          target : app,
          id : "piece-popout-"+obj.id()+"-"+layer+"-"+index,
          noCss : true,
          hideclose : true,
        }, content);
        popout.draggable("destroy");
        popout.addClass("piece-quick-edit");
        popout.css("border", "none");
        popout.css("box-shadow", "none");
        popout.css("pointer-events", "none");
        var left = point.x-Number(popout.outerWidth())/2;
        var top = point.y;
        if (pieceData.e) {
          top = top - 35;
        }
        else if (ent && ent.data._t == "b") {
          top = top - 20;
        }
        else {
          top = top - 15;
        }
        popout.offset({
          left : Math.max(Math.min(left, $(window).outerWidth()-popout.width()),0),
          top : Math.max(Math.min(top, $(window).outerHeight()-popout.height()),0)
        });

        //scope.layer = layer;
        //app.attr("layer", scope.layer);
      }
    }
    if (hasSecurity(getCookie("UserID"), "Rights", data) || (pieceData.eID && ent && hasSecurity(getCookie("UserID"), "Rights", ent.data))) {
      if (!app.attr("creating") || (_down["16"] && _down["18"])) {
        if ((_down["16"] && _down["18"])) {
          if (ent && ent.data["_t"] == "b") {
            game.state.data.tabs = game.state.data.tabs || [];
            var tabs = game.state.data.tabs;
            var active;
            for (var i in tabs) {
              if (ent.id() == tabs[i].index) {
                active = i;
                break;
              }
            }
            if (!active) {
              active = tabs.length;
              game.state.data.tabs.push({index : pieceData.eID, ui : "ui_board"});
              app.removeAttr("zoom");
              for (var i in game.state._apps) {
                if ($("#"+game.state._apps[i]).length) {
                  $("#"+game.state._apps[i]).attr("tab", active);
                }
              }
              game.state.sync("updateState");
            }
            else {
              app.removeAttr("zoom");
              for (var i in game.state._apps) {
                if ($("#"+game.state._apps[i]).length) {
                  $("#"+game.state._apps[i]).attr("tab", active);
                }
              }
              game.state.update();
            }
          }
          else if (ent) {
            var popout = assetTypes[ent.data._t].summary(ent, app, null, null, true);
          }
          else if (pieceData.e) {
            var ctx = sync.defaultContext();
            ctx[obj.data._t] = {layers : {}};
            for (var lid in obj.data.layers) {
              ctx[obj.data._t].layers[lid] = {h : obj.data.layers[lid].h};
            }

            for (var cID in pieceData.e.calc) {
              var calcData = pieceData.e.calc[cID];
              if (calcData) {
                if (!calcData.cond || sync.eval(calcData.cond, ctx)) {
                  var val = sync.eval(calcData.eq, ctx);
                  var target = sync.traverse(obj.data, calcData.target);
                  if (target instanceof Object) {
                    sync.rawVal(target, val);
                  }
                  else {
                    sync.traverse(obj.data, calcData.target, val);
                  }
                  if (calcData.target.match("layers\.")) {
                    boardApi.updateLayer(calcData.target.split(".")[1], {r : true}, obj);
                  }
                }
              }
            }
          }
          layout.coverlay($(".piece-quick-edit"));
        }
      }
    }
  }

  var piece = pieceWrap.children[0];
  var pieceSelected = pieceWrap.children[1];
  var outline = pieceSelected.children[0];

  var stand = new PIXI.Graphics();
  piece.addChild(stand);

  var healthbar = new PIXI.Graphics();
  pieceWrap.addChild(healthbar);

  var title = new PIXI.Text("", new PIXI.TextStyle({
    fontFamily: "Arial",
    fontSize: 12,
    fontWeight: "bold",
    fill: "white",
    stroke: 'black',
    align : "center",
    strokeThickness: 3,
    dropShadow: true,
    dropShadowColor: "rgba(0,0,0,0.2)",
    dropShadowAngle : 0.01,
    dropShadowDistance : 0,
    dropShadowBlur: 2,
    wordWrap: true,
    wordWrapWidth: objectData.w,
  }));
  pieceWrap.addChild(title);

  var statusEffects = new PIXI.Container();
  pieceWrap.addChild(statusEffects);

  pieceWrap.rebuild = function(objectData, rebuild) {
    var layer = pieceWrap.lookup.layer;
    var type = pieceWrap.lookup.type;
    var index = pieceWrap.lookup.index;
    var isHex = obj.data.options && obj.data.options.hex;

    if (!objectData && layer != null && index != null) {
      objectData = obj.data.layers[layer].p[index];
    }

    var x = objectData.x;
    var y = objectData.y;
    var width = Math.max(10, objectData.w);
    var height = Math.max(10, objectData.h);

    var lineStyle = true;
    if (objectData.i) {
      lineStyle = false;
    }
    stand.clear();
    boardApi.drawShape(objectData, stand, lineStyle, isHex);

    var recreate = false;
    if (piece.children && piece.children.length && piece.children[1]) {
      if (piece.children[1].i != objectData.i || piece.children[1].eID != objectData.eID) {
        piece.children[1].destroy(true);
        if (piece.children[2]) {
          piece.children[2].destroy(true);
        }
        recreate = true;
      }
    }
    else {
      recreate = true;
    }

    var token;
    if (recreate) {
      if (objectData.i) {
        objectData.i = String(objectData.i);
        if (objectData.i[0] != "/" && layout.webclient) {
          objectData.i = "";
        }
        var resource = PIXI.loader.resources[objectData.i];
        if (objectData.i && objectData.i.trim() && objectData.i.match(".mp4") || objectData.i.match(".webm") || objectData.i.match(".ogg")) {
          var videoText = PIXI.Texture.fromVideoUrl(objectData.i);
          videoText.baseTexture.source.loop = 1;
          videoText.baseTexture.source.volume = 0;

          token = new PIXI.Sprite(videoText);
          token.i = objectData.i;
        }
        else if (objectData.i && objectData.i.trim() && objectData.i.match(".gif") && false) {
          if (resource && resource.gifFrames && resource.gifFrames.length) {
            token = new PIXI.extras.AnimatedSprite(resource.gifFrames);
            token.animationSpeed = 0.2;
            token.i = objectData.i;
            token.gotoAndPlay(Math.round(Math.random() * resource.gifFrames.length - 1));
          }
          else if (!resource) {
            var getFrames = function(r){
              var frames           = [];
              var gif              = new GIF(new Uint8Array(r.data));
              var gifFrames        = gif.decompressFrames(true);
              var gifWidth         = gifFrames[0].dims.width;
              var gifHeight        = gifFrames[0].dims.height;
              var gifCanvas        = document.createElement('canvas');
              var gifCtx           = gifCanvas.getContext('2d');
              var gifImageData     = gifCtx.createImageData(gifWidth, gifHeight);
              gifCanvas.width  = gifWidth * gifFrames.length;
              gifCanvas.height = gifHeight;
              var gifSpriteSheet = new PIXI.BaseTexture.fromCanvas(gifCanvas);
              gifFrames.map(function(f, i){
                gifImageData.data.set(f.patch);
                gifCtx.putImageData(gifImageData, i * gifWidth, 0);
              }).map(function(f, i){
                frames.push(new PIXI.Texture(gifSpriteSheet, new PIXI.Rectangle(i * gifWidth, 0, gifWidth, gifHeight)));
              });
              if (Math.floor(Math.log2(gifWidth)) != Math.ceil(Math.log2(gifWidth)) || Math.floor(Math.log2(gifHeight)) != Math.ceil(Math.log2(gifHeight))) {
                sendAlert({text : ".gif size must be a power of 2"});
                return [];
              }
              else {
                return frames;
              }
            };
            var onLoad = function(loader, res){
              Object.keys(res).forEach(function(k){
                if (res[k].extension == "gif" && res[k].data && !res[k].gifFrames) {
                   res[k].gifFrames = getFrames(res[k]);
                 }
              });
              obj.update();
            };

            PIXI.loaders.Resource.setExtensionLoadType('gif', PIXI.loaders.Resource.LOAD_TYPE.XHR);
            PIXI.loaders.Resource.setExtensionXhrType('gif', PIXI.loaders.Resource.XHR_RESPONSE_TYPE.BUFFER);
            PIXI.loader.add(objectData.i).load(onLoad);

            token = new PIXI.Sprite.fromImage(objectData.i);
            token.i = objectData.i;
          }
          else {
            token = new PIXI.Sprite.fromImage(objectData.i);
          }
        }
        else {
          token = new PIXI.Sprite.fromImage(objectData.i);
        }
        token.x = objectData.w/2;
        token.y = objectData.h/2;
        token.width = objectData.w * (objectData.ts || 1);
        token.height = objectData.h * (objectData.ts || 1);
        token.anchor.x = 0.5;
        token.anchor.y = 0.5;
        token.i = objectData.i;
        token.eID = duplicate(objectData.eID);
        piece.addChild(token);
      }
      else if (objectData.eID) {
        var ent = getEnt(objectData.eID);
        if (ent) {
          var img = sync.rawVal(ent.data.info.img);
          if (ent.data._t == "c") {
            img = img || "/content/icons/blankchar.png";
          }
          else {
            img = "";
          }
          if (img[0] == "/") {
            token = new PIXI.Sprite.fromImage(img);
            if (ent.data._t == "c") {
              //token.mask = stand;
            }
            token.x = objectData.w/2;
            token.y = objectData.h/2;
            token.width = objectData.w;
            token.height = objectData.h;
            token.anchor.x = 0.5;
            token.anchor.y = 0.5;
            token.i = objectData.i;
            token.eID = duplicate(objectData.eID);
            piece.addChild(token);

            var mask = new PIXI.Graphics();
            boardApi.drawShape(objectData, mask, lineStyle, isHex);
            piece.addChild(mask);
            token.mask = mask;
          }
        }
      }
    }
    else if (piece.children && piece.children.length && piece.children[1]){
      piece.children[1].x = objectData.w/2;
      piece.children[1].y = objectData.h/2;
      if (objectData.i) {
        piece.children[1].width = objectData.w * (objectData.ts || 1);
        piece.children[1].height = objectData.h * (objectData.ts || 1);
      }
      else {
        piece.children[1].width = objectData.w;
        piece.children[1].height = objectData.h;
      }
      if (piece.children[1].mask) {
        piece.children[1].mask.clear();
        boardApi.drawShape(objectData, piece.children[1].mask, lineStyle, isHex);
      }
    }

    var showHP = false;
    var percentage;
    var hpHeight = 0;
    if (objectData.eID) {
      var ent = getEnt(objectData.eID);
      if (ent && ent.data && ent.data._t == "c") {
        boardApi.entListen(objectData.eID);
        if (!objectData.hp || objectData.hpb) {
          if (!obj.data.options.hpMode || obj.data.options.hpMode == 1 && (ent && ent.data && hasSecurity(getCookie("UserID"), "Visible", ent.data))) {
            var count = 0;
            healthbar.clear();
            if (!objectData.hpb) {
              var path;
              var boxed;
              var color;
              var hpStuff;
              if (game.templates.display.sheet && game.templates.display.sheet.health) {
                hpStuff = game.templates.display.sheet.health;
              }
              else if (game.templates.build && game.templates.display && game.templates.display.actors && game.templates.display.actors[ent.data._type]) {
                hpStuff = game.templates.display.actors[ent.data._type].health;
              }

              if (hpStuff instanceof Object) {
                path = hpStuff.target;
                boxed = hpStuff.boxed;
                color = hpStuff.color;
              }
              else {
                path = hpStuff;
              }
              if (path) {
                percentage = sync.traverse(ent.data, path);
                if (percentage instanceof Object && percentage.max) {
                  percentage = Math.min(Math.max(Number(percentage.current)/Number(percentage.max), 0), 1);

                  if (!objectData.hp) {
                    hpHeight = 6*Math.min(Math.max(Math.floor(objectData.h/64),1),3);
                    var endHP = percentage;
                    if (pieceWrap.force) {
                      var timePerc = Math.min((Date.now()-pieceWrap.force)/1000/pieceWrap.duration, 0);
                      percentage = endHP + (endHP-(healthbar.last || percentage))* timePerc;
                    }
                    showHP = "rgb("+(200-Math.ceil(200 * percentage))+","+(Math.ceil(200 * percentage))+",0)";

                    if (boxed) {
                      var healthEnt = sync.traverse(ent.data, path);
                      var limit = Math.min(healthEnt.max || healthEnt.current, 15);
                      var width = (objectData.w-4);
                      for (var i=0; i<limit; i++) {
                        healthbar.beginFill(0x333333, 0.5);
                        healthbar.lineStyle(1,0x333333, 0.5);
                        healthbar.drawRect(1 + ((2+width)/limit) * i, 0, width/limit-1, hpHeight);
                        healthbar.endFill();
                        if (i < healthEnt.current) {
                          healthbar.beginFill(util.RGB_HEX(color || ("rgb("+(200-Math.ceil(200 * percentage))+","+(Math.ceil(200 * percentage))+",0)")), 0.7);
                          healthbar.drawRect(1 + ((2+width)/limit) * i, 0, width/limit-1, hpHeight);
                          healthbar.endFill();
                        }
                      }
                    }
                    else {
                      healthbar.beginFill(0x333333, 0.5);
                      healthbar.lineStyle(1,0x333333, 0.5);
                      healthbar.drawRect(1, 0, (objectData.w-4), hpHeight);
                      healthbar.endFill();
                      healthbar.beginFill(util.RGB_HEX(color || ("rgb("+(200-Math.ceil(200 * percentage))+","+(Math.ceil(200 * percentage))+",0)")), 0.7);
                      healthbar.drawRect(1, 0, (objectData.w-4)*percentage, hpHeight);
                      healthbar.endFill();
                    }

                    healthbar.last = percentage;

                    count++;
                  }
                }
              }
            }
            else {
              for (var key in objectData.hpb) {
                if (!objectData.hp) {
                  hpHeight = 6*Math.min(Math.max(Math.floor(objectData.h/64),1),3);
                  showHP = true;
                  var percentage = Math.min(Math.max(Number(ent.data.counters[key].current)/Number(ent.data.counters[key].max), 0), 1);
                  if (game.templates.display.sheet && ("counters."+key) == game.templates.display.sheet.health) {
                    var endHP = percentage;
                    healthbar.beginFill(0x333333, 0.5);
                    healthbar.lineStyle(1,0x333333, 0.5);
                    healthbar.drawRect(1, 0, (objectData.w-4), hpHeight);
                    healthbar.endFill();
                    healthbar.beginFill(util.RGB_HEX("rgb("+(200-Math.ceil(200 * percentage))+","+(Math.ceil(200 * percentage))+",0)"), 0.7);
                    healthbar.drawRect(1, 0, (objectData.w-4)*percentage, hpHeight);
                    healthbar.endFill();
                  }
                  else {
                    if (objectData.hpb[key].b && ent.data.counters[key].current <= 15) {
                      var limit = Math.min(ent.data.counters[key].max || ent.data.counters[key].current, 15);
                      var width = (objectData.w-4);
                      for (var i=0; i<limit; i++) {
                        healthbar.beginFill(0x333333, 0.5);
                        healthbar.lineStyle(1,0x333333, 0.5);
                        healthbar.drawRect(1 + ((2+width)/limit) * i, hpHeight + (2 + 3) * count + 4, width/limit-1, 3);
                        healthbar.endFill();
                        if (i < ent.data.counters[key].current) {
                          healthbar.beginFill(util.RGB_HEX(objectData.hpb[key].c), 0.7);
                          healthbar.drawRect(1 + ((2+width)/limit) * i, hpHeight + (2 + 3) * count + 4, width/limit-1, 3);
                          healthbar.endFill();
                        }
                      }
                    }
                    else {
                      healthbar.beginFill(0x333333, 0.5);
                      healthbar.lineStyle(1,0x333333, 0.5);
                      healthbar.drawRect(1, hpHeight + (2 + 3) * count + 4, (objectData.w-4), 3);
                      healthbar.endFill();
                      healthbar.beginFill(util.RGB_HEX(objectData.hpb[key].c), 0.7);
                      healthbar.drawRect(1, hpHeight + (2 + 3) * count + 4, (objectData.w-4)*percentage, 3);
                      healthbar.endFill();
                    }

                    count++;
                  }
                }
              }
            }
            healthbar.x = 1;
            healthbar.y = objectData.h-2-hpHeight;
            healthbar.visible = true;
          }
        }
      }
    }
    if (!showHP) {
      healthbar.visible = false;
    }
    if (objectData.rpg) {
      for (var i=0; i<objectData.rpg.length; i++) {
        var found = false;
        for (var key=0; key<statusEffects.children.length; key++) {
          if (statusEffects.children[key].img == objectData.rpg[i]) {
            found = true;
          }
        }
        if (!found) {
          var effect = new PIXI.Sprite.fromImage(objectData.rpg[i]);
          effect.width = 20;
          effect.height = 20;
          effect.img = objectData.rpg[i];
          statusEffects.addChild(effect);
        }
      }
      for (var key=statusEffects.children.length-1; key>=0; key--) {
        statusEffects.children[key].x = objectData.w-key * 20-20;
        statusEffects.children[key].y = 0;
        if (!util.contains(objectData.rpg, statusEffects.children[key].img)) {
          statusEffects.removeChild(statusEffects.children[key]);
        }
      }
    }
    else {
      statusEffects.removeChildren();
    }

    if (objectData.t) {
      title.anchor.x = 0.5;
      title.anchor.y = 0.5;
      title.x = objectData.w/2;
      title.y = (objectData.eID == null)?(objectData.h/2):(objectData.h + 10);
      title.text = objectData.t;
      if (title.text != objectData.t) {
        title.text = objectData.t;
        title.dirty = true;
      }
      title.visible = true;
    }
    else {
      title.visible = false;
    }
    if (objectData.v) {
      var ent = getEnt(objectData.eID);
      if ((ent && ent.data && hasSecurity(getCookie("UserID"), "Visible", ent.data)) || hasSecurity(getCookie("UserID"), "Rights", obj.data)) {
        pieceWrap.alpha = 0.5;
      }
      else {
        pieceWrap.alpha = 0;
      }
    }
    else {
      pieceWrap.alpha = 1;
    }
    if ((objectData.e || boardApi.triggers.cache[obj.id()][layer+"-"+index]) && layer != null && index != null) {
      if (!objectData.e) {
        delete boardApi.triggers.cache[obj.id()][layer+"-"+index];
      }
      else {
        boardApi.triggers.cache[obj.id()][layer+"-"+index] = {layer : layer, index : index};
      }
    }
  }
  pieceWrap.update(options.data);
  return pieceWrap;
}

boardApi.createWall = function(options, obj, app, scope) {
  var data = obj.data;
  var isHex = data.options && data.options.hex;
  var hasGrid = data.gridW && data.gridW;
  var objectData = options.data;
  options.type = "w";

  var layer = options.layer;
  var type = options.type;
  var index = options.index;

  var piece = new PIXI.Container();
  piece.lookup = {layer : layer, type : type, index : index};

  piece.canInteract = function(ev){
    return false;
  }

  piece.select = function(){
    var layer = piece.lookup.layer;
    var type = piece.lookup.type;
    var index = piece.lookup.index;
    if (!piece.canChange || piece.canChange()) {
      token.selected = true;
      if (obj.data.layers[layer] && obj.data.layers[layer][type][index]) {
        piece.update();
      }
      boardApi.selections[obj.id()+"-"+layer+"-"+type+"-"+index] = {
        layer : layer,
        index : index,
        type : type,
        board : obj.id(),
        app : app.attr("id"),
        wrap : piece,
        image : piece,
        selected : piece
      };
    }
  }
  piece.unselect = function(){
    var layer = piece.lookup.layer;
    var type = piece.lookup.type;
    var index = piece.lookup.index;
    token.selected = false;
    if (obj.data.layers[layer] && obj.data.layers[layer][type][index]) {
      piece.update();
    }
    delete boardApi.selections[obj.id()+"-"+layer+"-"+type+"-"+index];
  }

  var token = new PIXI.Graphics();
  piece.addChild(token);

  var handle1 = new PIXI.Container();
  piece.addChild(handle1);

  piece.move = function(ev, deltaX, deltaY){
    boardApi.rebuildFogData(obj, app);
    boardApi.rebuildDynamicFog(obj, app);
    var layer = piece.lookup.layer;
    var type = piece.lookup.type;
    var index = piece.lookup.index;
    if ((objectData.e || boardApi.triggers.cache[obj.id()][layer+"-"+index]) && layer != null && index != null) {
      if (!objectData.e) {
        delete boardApi.triggers.cache[obj.id()][layer+"-"+index];
      }
      else {
        boardApi.triggers.cache[obj.id()][layer+"-"+index] = {layer : layer, index : index};
      }
    }
  }

  var circle = new PIXI.Graphics();
  circle.beginFill(0xFFFFFF);
  circle.lineStyle(1, 0x000000, 1);
  circle.drawCircle(0, 0, 4);
  circle.endFill();
  handle1.addChild(circle);
  handle1.width = 8;
  handle1.height = 8;
  handle1.hitArea = new PIXI.Rectangle(-4, -4, 8, 8);
  handle1.interactive = true;
  handle1.buttonMode = true;
  handle1.cursor = "pointer";
  handle1.mousedown = function(ev){
    var key = ev.data.originalEvent.keyCode || ev.data.originalEvent.which;
    if (key == 1) {
      if (!boardApi.dragging) {
        if (game.locals["drawing"] && game.locals["drawing"].data && game.locals["drawing"].data.drawing && game.locals["drawing"].data.fog) {
          var layer = piece.lookup.layer;
          var type = piece.lookup.type;
          var index = piece.lookup.index;
          var pData = obj.data.layers[layer][type][index];
          boardApi.startX = pData.x1;
          boardApi.startY = pData.y1;
        }
        else {
          var stage = boardApi.apps[app.attr("id")].stage;
          var offset = ev.data.getLocalPosition(stage);
          boardApi.newDragEvent({
            startX : offset.x,
            startY : offset.y,
            move : function(ev){
              var layer = piece.lookup.layer;
              var type = piece.lookup.type;
              var index = piece.lookup.index;
              var stage = boardApi.apps[app.attr("id")].stage;
              var pData = obj.data.layers[layer][type][index];
              var focal = stage.toLocal({x : ev.pageX, y : ev.pageY});

              var deltaX = focal.x;
              var deltaY = focal.y;

              if (Math.abs(deltaX) >= 1 || Math.abs(deltaY) >= 1) {
                boardApi.dragging.dragged = true;
                layout.coverlay($(".piece-quick-edit"));
              }
              pData.x1 = focal.x;
              pData.y1 = focal.y;
              if (piece.move) {
                piece.move(ev);
              }
              piece.update();
            },
            end : function(ev){
              var layer = piece.lookup.layer;
              var type = piece.lookup.type;
              var index = piece.lookup.index;
              var stage = boardApi.apps[app.attr("id")].stage;
              var pData = obj.data.layers[layer][type][index];
              var original = stage.toLocal({x : ev.pageX, y : ev.pageY});
              var focal = stage.toLocal({x : ev.pageX, y : ev.pageY});

              if (!_down[16] && data.gridW && data.gridH) {
                var xGrid = Math.round((focal.x - (data.gridX || 0))/data.gridW);
                var yGrid = Math.round((focal.y - (data.gridY || 0))/data.gridH);
                var gridInc = data.gridW;

                if (game.locals["drawing"] && game.locals["drawing"].data && game.locals["drawing"].data.gridInc) {
                  gridInc = game.locals["drawing"].data.gridInc;
                  xGrid = Math.round((focal.x-(data.gridX || 0)) / gridInc);
                  yGrid = Math.round((focal.y-(data.gridY || 0)) / gridInc);
                }
                focal.x = (xGrid * gridInc + (data.gridX || 0));
                focal.y = (yGrid * gridInc + (data.gridY || 0));
                if (_down[18]) {
                  var distX = focal.x-original.x;
                  var distY = focal.y-original.y;

                  focal.x = (xGrid * gridInc + (data.gridX || 0));
                  focal.y = (yGrid * gridInc + (data.gridY || 0));

                  if (Math.abs(distX) < Math.abs(distY)) {
                    if (distY > 0) {
                      focal.y -= gridInc/2;
                    }
                    else {
                      focal.y += gridInc/2;
                    }
                  }
                  else {
                    if (distX > 0) {
                      focal.x -= gridInc/2;
                    }
                    else {
                      focal.x += gridInc/2;
                    }
                  }
                }
              }
              pData.x1 = focal.x;
              pData.y1 = focal.y;
              if (util.dist(pData.x2, pData.x1, pData.y2, pData.y1) < 4 && util.dist(pData.x1, original.x, pData.y1, original.y) < 6) {
                boardApi.destroyObject(layer, type, index, obj);
              }
              else {
                if (piece.move) {
                  piece.move(ev);
                }
                piece.update();
                runCommand("boardMove", {id : obj.id(), layer : layer, type : type, index : index, data : pData});
              }
              delete boardApi.dragging;
            }
          });
        }
      }
    }
  };

  var handle2 = new PIXI.Container();
  piece.addChild(handle2);

  var circle = new PIXI.Graphics();
  circle.beginFill(0xFFFFFF);
  circle.lineStyle(1, 0x000000, 1);
  circle.drawCircle(0, 0, 4);
  circle.endFill();
  handle2.addChild(circle);
  handle2.width = 8;
  handle2.height = 8;
  handle2.hitArea = new PIXI.Rectangle(-4, -4, 8, 8);
  handle2.interactive = true;
  handle2.buttonMode = true;
  handle2.cursor = "pointer";
  handle2.mousedown = function(ev){
    var key = ev.data.originalEvent.keyCode || ev.data.originalEvent.which;
    if (!boardApi.dragging) {
      if (game.locals["drawing"] && game.locals["drawing"].data && game.locals["drawing"].data.drawing && game.locals["drawing"].data.fog) {
        var layer = piece.lookup.layer;
        var type = piece.lookup.type;
        var index = piece.lookup.index;
        var pData = obj.data.layers[layer][type][index];
        boardApi.startX = pData.x2;
        boardApi.startY = pData.y2;
      }
      else {
        var stage = boardApi.apps[app.attr("id")].stage;
        var offset = ev.data.getLocalPosition(stage);
        boardApi.newDragEvent({
          startX : offset.x,
          startY : offset.y,
          move : function(ev){
            var layer = piece.lookup.layer;
            var type = piece.lookup.type;
            var index = piece.lookup.index;
            var stage = boardApi.apps[app.attr("id")].stage;
            var pData = obj.data.layers[layer][type][index];
            var focal = stage.toLocal({x : ev.pageX, y : ev.pageY});

            var deltaX = focal.x;
            var deltaY = focal.y;

            if (Math.abs(deltaX) >= 1 || Math.abs(deltaY) >= 1) {
              boardApi.dragging.dragged = true;
              layout.coverlay($(".piece-quick-edit"));
            }
            pData.x2 = focal.x;
            pData.y2 = focal.y;
            if (piece.move) {
              piece.move(ev);
            }
            piece.update();
          },
          end : function(ev){
            var layer = piece.lookup.layer;
            var type = piece.lookup.type;
            var index = piece.lookup.index;
            var stage = boardApi.apps[app.attr("id")].stage;
            var pData = obj.data.layers[layer][type][index];
            var original = stage.toLocal({x : ev.pageX, y : ev.pageY});
            var focal = stage.toLocal({x : ev.pageX, y : ev.pageY});

            if (!_down[16] && data.gridW && data.gridH) {
              var xGrid = Math.round((focal.x - (data.gridX || 0))/data.gridW);
              var yGrid = Math.round((focal.y - (data.gridY || 0))/data.gridH);
              var gridInc = data.gridW;

              if (game.locals["drawing"] && game.locals["drawing"].data && game.locals["drawing"].data.gridInc) {
                gridInc = game.locals["drawing"].data.gridInc;
                xGrid = Math.round((focal.x-(data.gridX || 0)) / gridInc);
                yGrid = Math.round((focal.y-(data.gridY || 0)) / gridInc);
              }

              focal.x = (xGrid * gridInc + (data.gridX || 0));
              focal.y = (yGrid * gridInc + (data.gridY || 0));

              if (_down[18]) {
                var distX = focal.x-original.x;
                var distY = focal.y-original.y;

                focal.x = (xGrid * gridInc + (data.gridX || 0));
                focal.y = (yGrid * gridInc + (data.gridY || 0));

                if (Math.abs(distX) < Math.abs(distY)) {
                  if (distY > 0) {
                    focal.y -= gridInc/2;
                  }
                  else {
                    focal.y += gridInc/2;
                  }
                }
                else {
                  if (distX > 0) {
                    focal.x -= gridInc/2;
                  }
                  else {
                    focal.x += gridInc/2;
                  }
                }
              }
            }
            pData.x2 = focal.x;
            pData.y2 = focal.y;
            if (util.dist(pData.x2, pData.x1, pData.y2, pData.y1) < 4 && util.dist(pData.x2, original.x, pData.y2, original.y) < 6) {
              boardApi.destroyObject(layer, type, index, obj);
            }
            else {
              if (piece.move) {
                piece.move(ev);
              }
              piece.update();
              runCommand("boardMove", {id : obj.id(), layer : layer, type : type, index : index, data : pData});
            }
            delete boardApi.dragging;
          }
        });
      }
    }
  };

  piece.update = function(objectData) {
    var layer = piece.lookup.layer;
    var type = piece.lookup.type;
    var index = piece.lookup.index;
    if (!objectData && layer != null && index != null) {
      objectData = obj.data.layers[layer][type][index];
    }
    var userID = app.attr("UserID") || getCookie("UserID");
    var hasRights = hasSecurity(userID, "Rights", obj.data) || hasSecurity(userID, "Game Master");

    var zoom = Number(app.attr("zoom"))/100;
    var x = Math.min(objectData.x1, objectData.x2);
    var y = Math.min(objectData.y1, objectData.y2);
    var w = Math.max(objectData.x1, objectData.x2);
    var h = Math.max(objectData.y1, objectData.y2);

    piece.x = x;
    piece.y = y;
    piece.pivot.x = 0;
    piece.pivot.y = 0;

    token.clear();
    if (token.selected) {
      token.lineStyle(4, 0xFF8a42, 1);
    }
    else {
      token.lineStyle(3, 0x000000, 1);
    }
    token.moveTo(objectData.x1-x, objectData.y1-y);
    token.lineTo(objectData.x2-x, objectData.y2-y);
    token.lineStyle(1, 0xFFFFFF, 1);
    token.moveTo(objectData.x1-x, objectData.y1-y);
    token.lineTo(objectData.x2-x, objectData.y2-y);

    handle1.x = objectData.x1-x;
    handle1.y = objectData.y1-y;

    handle2.x = objectData.x2-x;
    handle2.y = objectData.y2-y;

    if (hasRights) {
      piece.visible = true;
    }
    else {
      piece.visible = false;
    }
  }
  piece.update(options.data);
  return piece;
}

boardApi.rebuildFogData = function(obj, app) {
  var application = boardApi.apps[app.attr("id")];
  var data = obj.data;
  var userID = app.attr("UserID") || getCookie("UserID");
  var hasRights = hasSecurity(userID, "Rights", data) || hasSecurity(userID, "Game Master");
  boardApi.fog[obj.id()] = [];
  var startingFog = [
    {x1 : 0, y1 : data.h, x2 : 0, y2 : 0},
    {x1 : 0, y1 : 0, x2 : data.w, y2 : 0},

    {x1 : data.w, y1 : 0, x2 : data.w, y2 : data.h},
    {x1 : data.w, y1 : data.h, x2 : 0, y2 : data.h},
  ];
  var finalFog = [];
  for (var key in startingFog) {
    var fogData = startingFog[key];
    finalFog.push({x : fogData.x1, y : fogData.y1, x1 : fogData.x1, y1 : fogData.y1, x2 : fogData.x2, y2 : fogData.y2});
    finalFog.push({x : fogData.x2, y : fogData.y2, x1 : fogData.x1, y1 : fogData.y1, x2 : fogData.x2, y2 : fogData.y2});
  }
  var dynamic = false;
  for (var lid in obj.data.layers) {
    var layerData = obj.data.layers[lid];

    if (!layerData.h) {
      for (var i in layerData.w) {
        dynamic = true;
        var wallData = layerData.w[i];
        finalFog.push({x : wallData.x1, y : wallData.y1, x1 : wallData.x1, y1 : wallData.y1, x2 : wallData.x2, y2 : wallData.y2});
        finalFog.push({x : wallData.x2, y : wallData.y2, x1 : wallData.x1, y1 : wallData.y1, x2 : wallData.x2, y2 : wallData.y2});
      }
    }
  }

  // rebuild all application caches
  boardApi.fog[obj.id()] = finalFog;
  for (var key in application.views) {
    if (key != "self") {
      var split = key.split("-");
      if (split && split.length == 3 && obj.data.layers[split[0]] && obj.data.layers[split[0]][split[1]] && obj.data.layers[split[0]][split[1]][split[2]]) {
        var pieceData = obj.data.layers[split[0]][split[1]][split[2]];
        var range = null;
        if (pieceData.eID && pieceData.o && pieceData.o.Sight) {
          var ent = getEnt(pieceData.eID);
          var context = sync.defaultContext();
          if (ent && ent.data) {
            context[ent.data._t] = duplicate(ent.data);
          }
          var auraData = pieceData.o.Sight;
          range = boardApi.scale(sync.eval(auraData.d, context), obj, true);
        }
        application.views[key] = boardApi.buildDynamicFog(obj, app, pieceData.x + pieceData.w/2, pieceData.y + pieceData.h/2, range);
      }
      else if (application.views[key]) {
        application.views[key].destroy(true);
        delete application.views[key];
      }
    }
  }
}

boardApi.rebuildDynamicFog = function(obj, app, x, y) {
  var returnFill;
  var application = boardApi.apps[app.attr("id")];
  if (application && application.board == obj.id()) {
    var stage = application.stage;
    var fogCont = stage.children[4];
    application.renderer.render(boardApi.apps[app.attr("id")].fogCache.background, application.opaqueRender, false, null, false);
    application.renderer.render(boardApi.apps[app.attr("id")].fogCache.map, application.opaqueRender, false, null, false);
    application.renderer.render(boardApi.apps[app.attr("id")].fogCache.fog, application.fogRender, false, null, false);
    var explored = new PIXI.Sprite(boardApi.apps[app.attr("id")].expRender);
    explored.alpha = 0.5;
    application.renderer.render(explored, application.opaqueRender, false, null, false);

    if (boardApi.fog[obj.id()] && boardApi.fog[obj.id()].length) {
      if (x != null || y != null) {
        var fogFill = boardApi.buildDynamicFog(obj, app, x, y);
        application.renderer.render(fogFill, application.fogRender, false, null, false);
        returnFill = fogFill;
      }
      for (var key in application.views) {
        if (key == "self") {
          var selfX = application.views["self"].x;
          var selfY = application.views["self"].y;
          if (selfX != null && selfY != null) {
            var fogFill = boardApi.buildDynamicFog(obj, app, selfX, selfY);
            application.renderer.render(fogFill, application.fogRender, false, null, false);
          }
        }
        else {
          // sanity check
          var split = key.split("-");
          if (split && split.length == 3) {
            if (obj.data.layers[split[0]] && obj.data.layers[split[0]][split[1]] && obj.data.layers[split[0]][split[1]][split[2]]) {
              application.renderer.render(application.views[key], application.fogRender, false, null, false);
            }
            else if (application.views[key]) {
              application.views[key].destroy(true);
              delete application.views[key];
            }
          }
          else if (application.views[key]) {
            application.views[key].destroy(true);
            delete application.views[key];
          }
        }
      }
    }
    fogCont.alpha = 1;

    return returnFill;
  }
}

boardApi.buildDynamicFog = function(obj, app, x, y, range) {
  var x = x + 0.0001;
  var y = y + 0.0001;

  var data = obj.data;
  var hasGrid = data.gridW && data.gridW;
  var userID = app.attr("UserID") || getCookie("UserID");
  var hasRights = hasSecurity(userID, "Rights", data) || hasSecurity(userID, "Game Master");
  var zoom = Number(app.attr("zoom"))/100;

  var dupeFillCont = new PIXI.Container();

  var dupeFill = new PIXI.Graphics();
  dupeFillCont.addChild(dupeFill);

  /*var spriteFillCont = new PIXI.Container();

  var spriteFill = new PIXI.Graphics();
  spriteFillCont.addChild(spriteFill);*/

  var fogFillCont = new PIXI.Container();
  if (range == null) {
    return fogFillCont;
  }
  var fogFill = new PIXI.Graphics();
  fogFillCont.addChild(fogFill);
  /*if (data.options && data.options.fog) {
    fogFill.beginFill(0xFFFFFF, 1);
    if (hasGrid) {
      fogFill.drawRect(0, 0, Math.ceil(obj.data.w/data.gridW)*data.gridW + (data.gridX || 0), Math.ceil(obj.data.h/data.gridH)*data.gridH + (data.gridY || 0));
    }
    else {
      fogFill.drawRect(0, 0, obj.data.w, obj.data.h);
    }
    fogFill.endFill();
  }*/

  var fog = duplicate(boardApi.fog[obj.id()]);
  var points = [];

  function fireRay(x1, y1, x2, y2, r1x, r1y) {
    var startInt = util.intersectRay(x1, x2, y1, y2, x, y, r1x, r1y);
    var startDist = Number.POSITIVE_INFINITY;
    if (startInt) {
      startDist = util.dist(startInt[0], x, startInt[1], y);
    }
    for (var j=0; j<fog.length; j++) {
      var cD = fog[j];
      if (j != i) {
        // check the starting point
        var cRS = util.intersectRay(cD.x1, cD.x2, cD.y1, cD.y2, x, y, r1x, r1y);
        if (cRS) { // there is another intersection
          var cDS = util.dist(cRS[0], x, cRS[1], y);
          //fogFill.drawCircle(cDS[0], cDS[1], 2);
          //fogFill.lineStyle(2, 0xAA000A, 1);
          // check to see if the other intesection is closer
          if (startDist > cDS) {
            startInt = cRS;
            startDist = cDS;
          }
        }
      }
    }
    if (startInt) {
      var rX = startInt[0]-x;
      var rY = startInt[1]-y;

      var ang = Math.atan2(rY, rX) + Math.PI/2;

      points.push({x : startInt[0], y : startInt[1], ang : ang});
    }
  }
  var delay = 0;
  for (var i=0; i<fog.length; i++) {
    var fogData = fog[i];

    var x1 = fogData.x1;
    var y1 = fogData.y1;

    var x2 = fogData.x2;
    var y2 = fogData.y2;

    var r1x = fogData.x-x;
    var r1y = fogData.y-y;

    // fire one to the left and right slightly
    fireRay(x1, y1, x2, y2, r1x-0.1, r1y+0.1);

    fireRay(x1, y1, x2, y2, r1x, r1y);

    fireRay(x1, y1, x2, y2, r1x+0.1, r1y-0.1);
  }

  // sort the intersection points
  var dupeCheck = {};

  points.sort(function(a,b){
    return b.ang-a.ang;
  });

  dupeFill.lineStyle(1, 0x000000, 1);
  dupeFill.beginFill(0x000000, 1);

  fogFill.lineStyle(1, 0x000000, 1);
  fogFill.beginFill(0x000000, 1);

  /*spriteFill.lineStyle(1, 0x000000, 1);
  spriteFill.beginFill(0x000000, 1);*/

  for (var i=0; i<points.length; i++) {
    if (i == 0) {
      fogFill.moveTo(points[i].x, points[i].y);
      dupeFill.moveTo(points[i].x, points[i].y);
      //spriteFill.moveTo(points[i].x, points[i].y);
    }
    else {
      fogFill.lineTo(points[i].x, points[i].y);
      dupeFill.lineTo(points[i].x, points[i].y);
      //spriteFill.lineTo(points[i].x, points[i].y);
    }
  }
  fogFill.closePath();
  dupeFill.closePath();
  //spriteFill.closePath();

  /*var sprite = new PIXI.Sprite.fromImage("/content/circle-gradient.png");
  sprite.x = x;
  sprite.y = y;
  sprite.anchor.x = 0.5;
  sprite.anchor.y = 0.5;
  sprite.width = range*2.1+2;
  sprite.height = range*2.1+2;
  sprite.mask = spriteFill;*/

  if (range != null) {
    var mask = new PIXI.Graphics();
    mask.x = x;
    mask.y = y;
    mask.lineStyle(3, 0x000000, 0.6);
    mask.drawCircle(0, 0, range);
    mask.lineStyle(0, 0x000000, 0);
    mask.beginFill(1, 0x000000, 1);
    mask.drawCircle(0, 0, range);
    mask.endFill();

    fogFillCont.mask = mask;
    fogFillCont.addChild(mask);

    var dupeMask = new PIXI.Graphics();
    dupeMask.x = x;
    dupeMask.y = y;
    dupeMask.lineStyle(3, 0x000000, 0.6);
    dupeMask.drawCircle(0, 0, range);
    dupeMask.lineStyle(0, 0x000000, 0);
    dupeMask.beginFill(1, 0x000000, 1);
    dupeMask.drawCircle(0, 0, range);
    dupeMask.endFill();

    dupeFillCont.mask = dupeMask;
    dupeFillCont.addChild(dupeMask);
    if (app.attr("UserID") || !hasSecurity(getCookie("UserID"), "Visible", obj.data)) {
      boardApi.apps[app.attr("id")].renderer.render(dupeFillCont, boardApi.apps[app.attr("id")].expRender, false, null, false);
    }

    /*spriteFillCont.addChild(sprite);
    spriteFillCont.addChild(spriteFill);

    fogFillCont.addChild(spriteFillCont);*/
  }

  return fogFillCont;
}

boardApi.rebuildFog = function(obj, app) {
  var data = obj.data;
  var hasGrid = data.gridW && data.gridW;
  var application = boardApi.apps[app.attr("id")];
  var userID = app.attr("UserID") || getCookie("UserID");
  var hasRights = hasSecurity(userID, "Rights", data) || hasSecurity(userID, "Game Master");
  if (application && application.board == obj.id()) {
    var fogFill = boardApi.apps[app.attr("id")].fogCache.fog;
    fogFill.clear();
    if (data.options && data.options.fog) {
      fogFill.beginFill(0xFFFFFF, 1);
      if (hasGrid) {
        fogFill.drawRect(0, 0, Math.ceil(obj.data.w/data.gridW)*data.gridW + (data.gridX || 0), Math.ceil(obj.data.h/data.gridH)*data.gridH + (data.gridY || 0));
      }
      else {
        fogFill.drawRect(0, 0, obj.data.w, obj.data.h);
      }
      fogFill.endFill();
    }

    for (var lid in data.layers) {
      var layerData = data.layers[lid];
      var playerVision = app.attr("UserID") && !layerData.h && (!layerData._s || layerData._s.default == 1);
      var layerVisible = !layerData.h && (hasRights || hasSecurity(userID, "Visible", layerData));
      layerVisible = layerVisible || (lid == app.attr("layer"));

      for (var index in layerData.p) {
        var pieceData = layerData.p[index];
        if (boardApi.apps[app.attr("id")].views[lid+"-p-"+index]) {
          boardApi.apps[app.attr("id")].views[lid+"-p-"+index].destroy(true);
          delete boardApi.apps[app.attr("id")].views[lid+"-p-"+index];
        }
        if (pieceData.eID) {
          var ent = getEnt(pieceData.eID);
          if (ent && ent.data && ent.data._t == "c" && hasSecurity(userID, "Visible", ent.data)) {
            var range = null;
            if (pieceData.o && pieceData.o.Sight) {
              var context = sync.defaultContext();
              if (ent && ent.data) {
                context[ent.data._t] = duplicate(ent.data);
              }
              var auraData = pieceData.o.Sight;
              range = boardApi.scale(sync.eval(auraData.d, context), obj, true);
            }
            boardApi.apps[app.attr("id")].views[lid+"-p-"+index] = boardApi.buildDynamicFog(obj, app, pieceData.x + pieceData.w/2, pieceData.y + pieceData.h/2, range);
          }
        }
      }

      if (playerVision || (!app.attr("UserID") && layerVisible)) {
        var reveal = layerData.r;
        for (var rID in reveal) {
          if (reveal[rID].f) {
            fogFill.beginFill(0xFFFFFF, 1);
          }
          else {
            fogFill.beginFill(0, 1);
          }
          fogFill.drawRect(reveal[rID].x, reveal[rID].y, reveal[rID].w || reveal[rID].width, reveal[rID].h || reveal[rID].height);
          fogFill.endFill();
        }
      }
    }

    if (!app.attr("UserID") && hasRights) {
      boardApi.apps[app.attr("id")].fogCache.fogCont.alpha = Math.min(0.8, util.RGB_ALPHA(data.c));
      boardApi.apps[app.attr("id")].opaqueRender.alpha = 0;
    }
    else {
      boardApi.apps[app.attr("id")].fogCache.fogCont.alpha = Math.min(1, util.RGB_ALPHA(data.c));
      boardApi.apps[app.attr("id")].opaqueRender.alpha = 1;
    }
    boardApi.rebuildFogData(obj, app);
    // redraw fog from w.e position you are at
    boardApi.rebuildDynamicFog(obj, app);
  }
}

boardApi.buildPath = function(obj, sX, sY, eX, eY, color) {
  var data = obj.data;

  var gridWidth = data.gridW;
  var gridHeight = data.gridH;

  var isHex = data.options && data.options.hex;
  var hasGrid = data.gridW && data.gridW;

  // draw Squares
  var a = sX-eX;
  var b = sY-eY;
  var slope = a/b;

  var startX = Math.floor((sX - (data.gridX || 0))/data.gridW);
  var startY = Math.floor((sY - (data.gridY || 0))/data.gridH);

  var endX = Math.floor((eX - (data.gridX || 0))/data.gridW);
  var endY = Math.floor((eY - (data.gridY || 0))/data.gridH);

  slope = (startY - endY)/(startX - endX);
  //trace the path
  var mW = (Math.abs(eX-sX))*data.gridW;
  var mH = (Math.abs(eY-sY))*data.gridH;
  var measureSize = Math.max(mW, mH);

  var dummyCanvas = new PIXI.Container();
  dummyCanvas.width = measureSize;
  dummyCanvas.height = measureSize;

  var offsetX = Math.min(startX, endX);
  var offsetY = Math.min(startY, endY);
  if (Math.abs(slope) < 1) {
    var squares = 0;
    var loopStart = startX;
    var loopEnd = endX+1;
    if (startX > endX) {
      loopStart = endX;
      loopEnd = startX+1;
    }

    for (var x=loopStart; x<loopEnd; x++) {
      var y = startY + Math.floor((x - startX) * slope);

      rect.beginFill(util.RGB_HEX(color), util.RGB_ALPHA(color));
      rect.lineStyle(4, 0x000000, 0.4);
      rect.drawRect((x - offsetX) * data.gridW, (y - offsetY) * data.gridH, data.gridW, data.gridH);
      rect.endFill();

      squares++;
    }
  }
  else {
    var squares = 0;
    var loopStart = startY;
    var loopEnd = endY+1;
    if (startY > endY) {
      loopStart = endY;
      loopEnd = startY+1;
    }
    for (var y=loopStart; y<loopEnd; y++) {
      var x = startX + Math.floor((y - startY) / slope);

      var rect = new PIXI.Graphics();
      rect.x = (x - offsetX) * data.gridW;
      rect.y = (y - offsetY) * data.gridH;
      rect.width = data.gridW;
      rect.height = data.gridH;
      rect.beginFill(util.RGB_HEX(color), util.RGB_ALPHA(color));
      rect.lineStyle(4, 0x000000, 0.4);
      rect.drawRect(0, 0, data.gridW, data.gridH);
      rect.endFill();

      dummyCanvas.addChild(rect);
      squares++;
    }
  }
  dummyCanvas.squares = squares;
  return dummyCanvas;
}

boardApi.drawGrid = function(obj, app, scope){
  var data = obj.data;
  var isHex = data.options && data.options.hex;
  var hasGrid = data.gridW && data.gridW;

  var gridWrap = new PIXI.Graphics();
  gridWrap.x = data.x || 0;
  gridWrap.y = data.y || 0;
  gridWrap.lineStyle(1, util.RGB_HEX(data.gc), util.RGB_ALPHA(data.gc));

  gridWrap.width = data.w;
  gridWrap.height = data.h;

  if (hasGrid) {
    var xGrid = Math.ceil(data.w/(data.gridW));
    var yGrid = Math.ceil(data.h/(data.gridH));

    if (isHex) {
      for (var x=0; x<xGrid; x++) {
        var xPos = (x * data.gridW)/data.gridW;
        for (var y=0; y<yGrid; y++) {
          var yPos = (y * data.gridH)/data.gridH;
          var sX = (xPos * data.gridW + (data.gridX || 0) - (xPos * data.gridW + (data.gridX || 0))/4) + data.gridX;
          var sY;
          if (x % 2) {
            sY = (yPos * data.gridH + (data.gridY || 0) + data.gridH/2) + data.gridY;
          }
          else {
            sY = (yPos * data.gridH + (data.gridY || 0)) + data.gridY;
          }

          gridWrap.moveTo(sX + 0, sY + data.gridH/2);
          gridWrap.lineTo(sX + data.gridW * 1/4, sY + 0);
          gridWrap.lineTo(sX + data.gridW * 3/4, sY + 0);
          gridWrap.lineTo(sX + data.gridW-0, sY + data.gridH/2);
          gridWrap.lineTo(sX + data.gridW * 3/4, sY + data.gridH-0);
          gridWrap.lineTo(sX + data.gridW * 1/4, sY + data.gridH-0);
          gridWrap.lineTo(sX + 0, sY + data.gridH/2);
        }
      }
    }
    else {
      for (var y=0; y<yGrid; y++) {
        gridWrap.moveTo(0 + (data.gridX || 0), Math.max(y * (data.gridH), 0) + (data.gridY || 0));
        gridWrap.lineTo(Math.ceil((xGrid) * data.gridW) + (data.gridX || 0), Math.max(y * (data.gridH), 0) + (data.gridY || 0));
      }

      for (var x=0; x<xGrid; x++) {
        gridWrap.moveTo(Math.max(x * (data.gridW), 0) + (data.gridX || 0), 0 + (data.gridY || 0));
        gridWrap.lineTo(Math.max(x * (data.gridW), 0) + (data.gridX || 0), Math.ceil((yGrid) * data.gridH) + (data.gridY || 0));
      }

      gridWrap.moveTo(0 + (data.gridX || 0), Math.max((yGrid) * (data.gridH), 0) + (data.gridY || 0));
      gridWrap.lineTo(Math.ceil((xGrid) * data.gridW) + (data.gridX || 0), Math.max((yGrid) * (data.gridH), 0) + (data.gridY || 0));

      gridWrap.moveTo(Math.max((xGrid) * (data.gridW), 0) + (data.gridX || 0), 0 + (data.gridY || 0));
      gridWrap.lineTo(Math.max((xGrid) * (data.gridW), 0) + (data.gridX || 0), Math.ceil((yGrid) * data.gridH) + (data.gridY || 0));
    }
  }

  return gridWrap;
}

boardApi.menu = {}


function buildHotKey(desc, name, controls){
  var hotkeyDiv = $("<div>");
  hotkeyDiv.addClass("flexrow flexbetween");
  hotkeyDiv.css("margin-bottom","5px");
  if (name) {
    var icon = $("<div>").appendTo(hotkeyDiv);
    icon.addClass("flexmiddle alttext lrmargin");
    icon.css("background-size", "contain");
    icon.css("background-repeat", "no-repeat");
    icon.css("background-position", "center");
    icon.css("font-size", "1.2em");
    icon.css("font-weight", "nonrmal");
    icon.append(genIcon({raw : true, icon : name}));
    hotkeyDiv.append("<div class='flexmiddle lrmargin'><b class='alttext'>=</b></div>");
  }

  var controlDiv = $("<div>").appendTo(hotkeyDiv);
  controlDiv.addClass("flex flexrow");

  var combos = controls.split("+");
  for (var j in combos) {
    var control = combos[j].trim();
    var icon = $("<div>").appendTo(controlDiv);
    icon.css("background-size", "contain");
    icon.css("background-repeat", "no-repeat");
    icon.css("background-position", "center");
    var plusstr = "+";
    if (control == "mright") {
      icon.css("background-image", "url('/content/mouse_right.png')");
      icon.css("width", "1.8em");
      icon.css("height", "1.8em");
    }
    else if (control == "mleft") {
      icon.css("background-image", "url('/content/mouse_left.png')");
      icon.css("width", "1.8em");
      icon.css("height", "1.8em");
    }
    else if (control == "middle") {
      icon.css("background-image", "url('/content/mouse_middle.png')");
      icon.css("width", "1.8em");
      icon.css("height", "1.8em");
    }
    else if (control == "mouse") {
      icon.css("background-image", "url('/content/mouse.png')");
      icon.css("width", "1.8em");
      icon.css("height", "1.8em");
    }
    else if (control == "arrow-left") {
      icon.addClass("flexmiddle hardoutline spadding");
      icon.css("background-color", "white");
      icon.append(genIcon({raw : true, icon : "arrow-left"}));
    }
    else if (control == "arrow-up") {
      icon.addClass("flexmiddle hardoutline spadding");
      icon.css("background-color", "white");
      icon.append(genIcon({raw : true, icon : "arrow-up"}));
    }
    else if (control == "arrow-right") {
      icon.addClass("flexmiddle hardoutline spadding");
      icon.css("background-color", "white");
      icon.append(genIcon({raw : true, icon : "arrow-right"}));
    }
    else if (control == "arrow-down") {
      icon.addClass("flexmiddle hardoutline spadding");
      icon.css("background-color", "white");
      icon.append(genIcon({raw : true, icon : "arrow-down"}));
    }
    else {
      icon.addClass("flexmiddle lrpadding");
      icon.css("background-color", "white");
      icon.css("font-weight", "bolder");
      icon.css("color", "#333");
      icon.css("border-radius","2px");
      icon.css("text-shadow", "none");
      icon.text(control);
    }
    if (j < combos.length-1) {
      controlDiv.append("<b class='alttext lrmargin flexmiddle'>"+plusstr+"</b>");
    }
  }
  hotkeyDiv.attr("title", desc);
  hotkeyDiv.tooltip({
    container: 'body',
    placement: 'right'
  });
  return hotkeyDiv;
}

boardApi.buildMenu = function(obj, app, scope, opaque) {
  var data = obj.data;

  var stage = boardApi.apps[app.attr("id")].stage;
  var userID = app.attr("userID") || getCookie("UserID");
  var hasRights = hasSecurity(userID, "Rights", data) || hasSecurity(userID, "Game Master");
  var gridWidth = data.gridW;
  var gridHeight = data.gridH;
  var isHex = data.options && data.options.hex;
  var hasGrid = data.gridW && data.gridW;
  var zoom = Number(app.attr("zoom")) / 100 || 1;
  var scrollLeft = 0;
  var scrollTop = 0;
  var portWidth = app.attr("divWidth");
  var portHeight = app.attr("divHeight");

  var newMenu = $("<div>");
  newMenu.addClass("flexrow padding");
  newMenu.attr("id", app.attr("id")+"-menu-"+obj.id());
  newMenu.css("position", "absolute");
  newMenu.css("left", "8%");
  newMenu.css("bottom", "8%");
  newMenu.css("max-width", "84%");

  if (!opaque) {
    newMenu.css("opacity", "0.15");
    newMenu.css("transition", "opacity 0.1s");
    newMenu.css("pointer-events", "none");
  }

  var optionsBar = $("<div>").appendTo(newMenu);
  optionsBar.addClass("flexcolumn boardMenu");
  optionsBar.css("width", "175px");
  optionsBar.css("pointer-events", "auto");
  optionsBar.css("text-align", "left");
  optionsBar.hover(function(){
    newMenu.css("opacity", "1.0");
  },
  function(){
    newMenu.css("opacity", "0.15");
  });
  optionsBar.mousedown(function(ev){
    _mouseupCleanup(ev);
    ev.stopPropagation();
  });

  var menuContainer = $("<div>");
  menuContainer.appendTo(newMenu);
  menuContainer.addClass("flexcolumn flex");
  menuContainer.attr("id", app.attr("id")+"-menuContent-"+obj.id());
  menuContainer.css("pointer-events", "none");
  menuContainer.append("<div class='flex'></div>");

  var menuContent = $("<div>");

  function rebuildMenu() {
    menuContainer.empty();
    menuContainer.append("<div class='flex'></div>");
    menuContent.css("min-height", "");
    if (app.attr("creating")) {
      if (!game.locals["pieceBuilding"]) {
        game.locals["pieceBuilding"] = sync.obj();
        game.locals["pieceBuilding"].data = {};
      }
      game.locals["pieceBuilding"].data.target = app.attr("id");
      game.locals["pieceBuilding"].data.pieceData = game.locals["pieceBuilding"].data.pieceData || {};

      menuContent = sync.newApp("ui_pieceBuilder").appendTo(menuContainer);
      menuContent.addClass("smooth padding boardMenu");
      menuContent.attr("target", obj.id());
      menuContent.attr("targetApp", app.attr("id"));
      menuContent.css("pointer-events", "auto");
      menuContent.css("overflow", "hidden");
      menuContent.css("min-height", "230px");
      menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
      if (game.locals["pieceBuilding"].data.layer && game.locals["pieceBuilding"].data.piece) {
        menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
        menuContent.css("transition", "background 2.0s");
      }
      menuContent.hover(function(){
        newMenu.css("opacity", "1.0");
        menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
      },
      function(){
        newMenu.css("opacity", "0.15");
        menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
      });
      menuContent.mousedown(function(ev){
        _mouseupCleanup(ev);
        ev.stopPropagation();
      });

      menuContent.addClass("fit-x");
      menuContent.css("font-size", "1.0em");
      game.locals["pieceBuilding"].addApp(menuContent);
    }
    else {
      $("#asset-manager-board-"+obj.id()).remove();
    }
    if (app.attr("drawing")) {
      menuContent = sync.newApp("ui_drawingControls").appendTo(menuContainer);
      menuContent.addClass("smooth padding boardMenu");
      menuContent.attr("target", obj.id());
      menuContent.attr("targetApp", app.attr("id"));
      menuContent.css("pointer-events", "auto");
      menuContent.css("overflow", "hidden");
      menuContent.css("min-height", "230px");
      menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
      menuContent.css("transition", "background 2.0s");
      menuContent.hover(function(){
        newMenu.css("opacity", "1.0");
        menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
      },
      function(){
        newMenu.css("opacity", "0.15");
        menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
      });
      menuContent.mousedown(function(ev){
        _mouseupCleanup(ev);
        ev.stopPropagation();
      });

      if (!game.locals["drawing"]) {
        game.locals["drawing"] = sync.obj();
        game.locals["drawing"].data = {};
      }
      game.locals["drawing"].data.target = app.attr("id");

      menuContent.addClass("alttext fit-x");
      menuContent.css("font-size", "1.4em");

      game.locals["drawing"].addApp(menuContent);
    }

    if (app.attr("configuring") && hasRights) {
      if (app.attr("background") && app.attr("configuring") == "background") {
        menuContent = sync.render("ui_layerOptions")(obj, app, scope).appendTo(menuContainer);
        menuContent.addClass("smooth padding boardMenu");
        menuContent.css("pointer-events", "auto");
        menuContent.css("overflow", "hidden");
        menuContent.css("min-height", "200px");
        menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
        menuContent.css("transition", "background 2.0s");
        menuContent.hover(function(){
          newMenu.css("opacity", "1.0");
          menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
        },
        function(){
          newMenu.css("opacity", "0.15");
          menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
        });
        menuContent.mousedown(function(ev){
          _mouseupCleanup(ev);
          ev.stopPropagation();
        });
        menuContent.addClass("alttext fit-x");
        menuContent.css("font-size", "1.6em");
      }
      else {
        if (app.attr("configuring") == "background") {
          menuContent = sync.render("ui_mapBackground")(obj, app, scope).appendTo(menuContainer);
          menuContent.addClass("padding alttext");
          menuContent.css("font-size", "1.6em");
        }
        else if (app.attr("configuring") == "grid") {
          menuContent = sync.render("ui_mapGrid")(obj, app, scope).appendTo(menuContainer);
          menuContent.addClass("padding alttext");
          menuContent.css("font-size", "1.6em");
        }
        else if (app.attr("configuring") == "manage") {
          menuContent = sync.render("ui_boardEditor")(obj, app, scope).appendTo(menuContainer);
          menuContent.addClass("padding");
        }
        else {
          menuContent = sync.render("ui_mapOptions")(obj, app, scope).appendTo(menuContainer);
          menuContent.addClass("padding alttext");
          menuContent.css("font-size", "1.6em");
        }
        menuContent.addClass("smooth boardMenu fit-x");
        menuContent.css("pointer-events", "auto");
        menuContent.css("overflow", "hidden");
        menuContent.css("min-height", "230px");
        menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
        menuContent.css("transition", "background 2.0s");
        menuContent.hover(function(){
          newMenu.css("opacity", "1.0");
          menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
        },
        function(){
          newMenu.css("opacity", "0.15");
          menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
        });
        menuContent.mousedown(function(ev){
          _mouseupCleanup(ev);
          ev.stopPropagation();
        });
      }
    }

    if (app.attr("background") == "true" && !app.attr("configuring") && hasRights) {
      menuContent = sync.newApp("ui_easySheets").appendTo(menuContainer);
      menuContent.addClass("boardMenu");
      menuContent.attr("target", obj.id());
      menuContent.attr("targetApp", app.attr("id"));
      menuContent.css("pointer-events", "auto");
      menuContent.css("overflow", "hidden");
      menuContent.css("min-height", "260px");
      menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
      menuContent.css("transition", "background 2.0s");
      menuContent.hover(function(){
        newMenu.css("opacity", "1.0");
        menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
      },
      function(){
        newMenu.css("opacity", "0.15");
        menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
      });
      menuContent.mousedown(function(ev){
        _mouseupCleanup(ev);
        ev.stopPropagation();
      });
      var newObj = sync.dummyObj();
      newObj.data = {};
      newObj.addApp(menuContent);
    }
    if (menuContainer.children().length <= 1) {
      menuContent = $("<div>").appendTo(menuContainer);
      menuContent.addClass("boardMenu flexcolumn smooth lrmargin");
      menuContent.css("pointer-events", "auto");
      menuContent.css("overflow", "hidden");
      menuContent.hover(function(){
        newMenu.css("opacity", "1.0");
      },
      function(){
        newMenu.css("opacity", "0.15");
      });
      menuContent.mousedown(function(ev){
        _mouseupCleanup(ev);
        ev.stopPropagation();
      });
      if (!layout.mobile) {
        var hints = $("<div>").appendTo(menuContent);
        hints.addClass("flexcolumn flexmiddle alttext subtitle");
        hints.css("align-items","flex-start");
        buildHotKey("Map Menu","list-alt", "mright").appendTo(hints);
        buildHotKey("Ping/Beacon", "hand-up", "mleft + mleft").appendTo(hints);
        buildHotKey("Move around", "move", "mright + mouse").appendTo(hints);
        buildHotKey("Select", "resize-full", "mleft + mouse").appendTo(hints);
        buildHotKey("Measure","resize-horizontal", "Ctrl + mleft").appendTo(hints);
      }
    }
  }
  rebuildMenu();

  function rebuildOptions() {
    optionsBar.empty();
    var option = $("<highlight>").appendTo(optionsBar);
    option.addClass("flexrow hover2 fit-x alttext flexmiddle");
    option.css("font-size", "1.4em");
    option.css("-webkit-text-stroke-color", "white");
    option.css("-webkit-text-stroke-width", "1px");
    option.css("-webkit-text-fill-color", "white");

    var nameInput = genInput({
      parent : option,
      classes : "line smooth subtitle middle flex",
      disabled : !hasRights,
      value : sync.rawVal(data.info.name) || "[No Name]",
      style : {"width" : "300px", "background" : "rgb(33,46,55)"}
    });

    if (nameInput.val() && nameInput.val().length > 15) {
      option.css("font-size", "1.2em");
    }

    nameInput.change(function(){
      sync.rawVal(obj.data.info.name, $(this).val() || "[No Name]");
      if (!scope.local) {
        obj.sync("updateAsset");
      }
      else {
        obj.update();
      }
    });
    nameInput.blur(function(){
      name.show();
      nameInput.hide();
    });
    nameInput.hide();
    nameInput.click(function(ev) {
      ev.stopPropagation();
    });

    var name = $("<b>").appendTo(option);
    name.addClass("underline");
    name.text(sync.rawVal(data.info.name) || "[No Name]");

    if (hasRights) {
      name.attr("title", "Rename Map");
      option.click(function(){
        name.hide();
        nameInput.show();
        nameInput.focus();
      });
    }

    var newZoomWrap = $("<div>").appendTo(optionsBar);
    newZoomWrap.addClass("alttext fit-x");
    newZoomWrap.css("font-size", "1.4em");

    var zoomContainer = $("<div>").appendTo(newZoomWrap);
    zoomContainer.addClass("flexrow flexmiddle fit-x");

    var zoomRange = genInput({
      classes : "flex large",
      parent : zoomContainer,
      type : "range",
      min : 40,
      max : 200,
      step : 1,
    }, 1);
    zoomRange.val(100);
    zoomRange.css("height", "14px");
    zoomRange.attr("id", app.attr("id")+"-zoom-range-"+obj.id());
    zoomRange.val(zoom * 100);
    zoomRange.bind("input", function(){
      var lastZoom = zoom;

      layout.coverlay($(".piece-quick-edit"));
      app.attr("zoom", Number($(this).val()));

      zoom = $(this).val()/100;

      stage.dZoom = zoom;

      zoomIn.attr("title", $(this).val()+"%");
      //boardApi.drawCursors(board, true);
    });
    zoomRange.contextmenu(function(){
      zoomRange.val(data.vZ || 100);
      zoomRange.change();
      return false;
    });
    zoomRange.change(function(){
      var lastZoom = zoom;

      layout.coverlay($(".piece-quick-edit"));
      app.attr("zoom", Number($(this).val()));

      zoom = $(this).val()/100;

      stage.dZoom = zoom;

      for (var key in boardApi.selections) {
        if (boardApi.selections[key].app == app.attr("id")) {
          boardApi.selections[key].wrap.update();
        }
      }

      zoomIn.attr("title", $(this).val()+"%");
      //boardApi.drawCursors(board, true);
      if (lastZoom == 0.4 && $(this).val() == 40) {
        var ent = getEnt(obj.data.options.zoomAsset);
        if (ent && ent.data && ent.data._t == "b") {
          game.state.data.tabs = game.state.data.tabs || [];
          var tabs = game.state.data.tabs;
          var active;
          for (var i in tabs) {
            if (ent.id() == tabs[i].index) {
              active = i;
              break;
            }
          }
          app.attr("zoom", 100);
          app.removeAttr("scrollLeft");
          app.removeAttr("scrollTop");

          for (var lid in ent.data.layers) {
            var layerData = ent.data.layers[lid];
            for (var pid in layerData.p) {
              if (obj.id() == layerData.p[pid].eID) {
                app.attr("scrollLeft", (layerData.p[pid].x + layerData.p[pid].w/2 - app.width()/2)*-1);
                app.attr("scrollTop", (layerData.p[pid].y + layerData.p[pid].h/2 - app.height()/2)*-1);
                break;
              }
            }
          }

          if (!active) {
            active = tabs.length;
            game.state.data.tabs.push({index : ent.id(), ui : "ui_board"});
            for (var i in game.state._apps) {
              if ($("#"+game.state._apps[i]).length) {
                $("#"+game.state._apps[i]).attr("tab", active);
              }
            }
            game.state.sync("updateState");
          }
          else {
            for (var i in game.state._apps) {
              if ($("#"+game.state._apps[i]).length) {
                $("#"+game.state._apps[i]).attr("tab", active);
              }
            }
            game.state.update();
          }
        }
      }
      else if (lastZoom = 2 && $(this).val() == 200) {
        var selections = null;
        for (var key in boardApi.selections) {
          if (boardApi.selections[key].app == app.attr("id")) {
            if (!selections) {
              selections = selections || {};
            }
            selections[key] = boardApi.selections[key];
          }
        }
        if (selections && Object.keys(selections).length == 1) {
          var selectData = selections[Object.keys(selections)[0]];
          if (selectData.type == "p" && selectData.board == obj.id()) {
            var pieceData = obj.data.layers[selectData.layer][selectData.type][selectData.index];
            var ent = getEnt(pieceData.eID);
            if (ent && ent.data && ent.data._t == "b") {
              game.state.data.tabs = game.state.data.tabs || [];
              var tabs = game.state.data.tabs;
              var active;
              for (var i in tabs) {
                if (ent.id() == tabs[i].index) {
                  active = i;
                  break;
                }
              }
              app.removeAttr("zoom");
              app.removeAttr("scrollLeft");
              app.removeAttr("scrollTop");
              if (!active) {
                active = tabs.length;
                game.state.data.tabs.push({index : ent.id(), ui : "ui_board"});
                for (var i in game.state._apps) {
                  if ($("#"+game.state._apps[i]).length) {
                    $("#"+game.state._apps[i]).attr("tab", active);
                  }
                }
                game.state.sync("updateState");
              }
              else {
                for (var i in game.state._apps) {
                  if ($("#"+game.state._apps[i]).length) {
                    $("#"+game.state._apps[i]).attr("tab", active);
                  }
                }
                game.state.update();
              }
            }
          }
        }
      }
    });


    var zoomIn = genIcon("search").appendTo(zoomContainer);
    zoomIn.addClass("lrpadding");
    zoomIn.attr("title", "Set Manual Zoom");
    zoomIn.click(function(){
      ui_prompt({
        target : $(this),
        inputs : {"Set Zoom" : {placeholder : zoomIn.attr("title") || Math.round(zoom*100) + "%", type : "number", step : 5, min : 25, max : 500}},
        click : function(ev, inputs){
          if (inputs["Set Zoom"].val()) {
            zoomRange.attr("max", "500");
            zoomRange.attr("min", "10");
            zoomRange.val(inputs["Set Zoom"].val());
            zoomRange.change();
            zoomRange.attr("max", "200");
            zoomRange.attr("min", "40");
          }
        }
      });
    });
    if (!layout.mobile) {
      if (hasRights) {
        var option = $("<div>").appendTo(optionsBar);
        option.addClass("alttext hover2 fit-x spadding option outline smooth");
        option.css("font-size", "1.2em");
        if (app.attr("background")) {
          option.addClass("flexmiddle");
          option.text("Layer");
        }
        else {
          option.text("Background");
        }
        if (app.attr("configuring") == "background") {
          option.addClass("highlight");
        }
        else {
          option.addClass("background");
        }
        option.click(function(){
          if (game.locals["drawing"]) {
            delete game.locals["drawing"].data.drawing;
          }
          app.removeAttr("creating");
          app.removeAttr("drawing");
          if (app.attr("configuring") == "background") {
            app.removeAttr("configuring");
          }
          else {
            app.attr("configuring", "background");
          }
          optionsBar.find(".option").addClass("background");
          optionsBar.find(".option").removeClass("highlight");
          if (app.attr("configuring") == "background") {
            $(this).addClass("highlight");
            $(this).removeClass("background");
          }
          else {
            $(this).addClass("background");
            $(this).removeClass("highlight");
          }
          rebuildMenu();
        });
      }

      if (!game.locals["drawing"]) {
        game.locals["drawing"] = sync.obj();
        game.locals["drawing"].data = {};
      }
      if ((app.attr("background") != "true") && hasRights) {
        var option = $("<div>");//.appendTo(optionsBar);
        option.addClass("alttext hover2 fit-x spadding option outline smooth");
        option.css("font-size", "1.2em");
        option.text("Create");
        if (app.attr("creating")) {
          option.addClass("highlight");
        }
        else {
          option.addClass("background");
        }
        option.click(function(){
          if (game.locals["drawing"]) {
            delete game.locals["drawing"].data.drawing;
          }
          app.removeAttr("drawing");
          app.removeAttr("configuring");
          if (game.locals["pieceBuilding"]) {
            delete game.locals["pieceBuilding"].data.layer;
            delete game.locals["pieceBuilding"].data.piece;
          }

          if (app.attr("creating")) {
            app.removeAttr("creating");
          }
          else {
            app.attr("creating", "true");
          }
          optionsBar.find(".option").addClass("background");
          optionsBar.find(".option").removeClass("highlight");
          if (app.attr("creating")) {
            $(this).addClass("highlight");
            $(this).removeClass("background");
          }
          else {
            $(this).addClass("background");
            $(this).removeClass("highlight");
          }
          rebuildMenu();
        });
      }
      if ((app.attr("background") != "true") && ((!scope.local && (data.options && data.options.freeDraw)) || hasRights)) {
        var optionDraw = $("<div>").appendTo(optionsBar);
        optionDraw.addClass("alttext hover2 fit-x spadding option outline smooth");
        optionDraw.css("font-size", "1.2em");
        optionDraw.text("Draw");
        if (app.attr("drawing") && !game.locals["drawing"].data.fog) {
          optionDraw.addClass("highlight");
        }
        else {
          optionDraw.addClass("background");
        }
        optionDraw.click(function(){
          if (game.locals["drawing"]) {
            delete game.locals["drawing"].data.drawing;
          }
          app.removeAttr("creating");
          app.removeAttr("configuring");
          if (app.attr("drawing") && !game.locals["drawing"].data.fog) {
            app.removeAttr("drawing");
          }
          else {
            app.attr("drawing", "true");
            delete game.locals["drawing"].data.fog;
          }
          optionsBar.find(".option").addClass("background");
          optionsBar.find(".option").removeClass("highlight");
          if (app.attr("drawing")) {
            $(this).addClass("highlight");
            $(this).removeClass("background");
            game.locals["drawing"].data.drawing = "line";
          }
          else {
            $(this).addClass("background");
            $(this).removeClass("highlight");
          }
          rebuildMenu();
        });

        if (hasRights) {
          var option = $("<div>").appendTo(optionsBar);
          option.addClass("alttext hover2 fit-x spadding option outline smooth");
          option.css("font-size", "1.2em");
          option.text("Fog of War");
          if (app.attr("drawing") && game.locals["drawing"].data.fog) {
            option.addClass("highlight");
          }
          else {
            option.addClass("background");
          }
          option.click(function(){
            if (game.locals["drawing"]) {
              delete game.locals["drawing"].data.drawing;
            }
            app.removeAttr("creating");
            app.removeAttr("configuring");
            if (app.attr("drawing") && game.locals["drawing"].data.fog) {
              app.removeAttr("drawing");
            }
            else {
              app.attr("drawing", "true");
              game.locals["drawing"].data.fog = true;
            }
            optionsBar.find(".option").addClass("background");
            optionsBar.find(".option").removeClass("highlight");
            if (app.attr("drawing")) {
              $(this).addClass("highlight");
              $(this).removeClass("background");
            }
            else {
              $(this).addClass("background");
              $(this).removeClass("highlight");
            }
            rebuildMenu();
          });
        }
      }
      if (hasRights && !app.attr("background")) {
        var option = $("<div>").appendTo(optionsBar);
        option.addClass("alttext hover2 fit-x spadding option outline smooth");
        option.css("font-size", "1.2em");
        option.text("Map Builder");
        if (app.attr("menuContent")) {
          option.addClass("highlight");
        }
        else {
          option.addClass("background");
        }
        option.click(function(){
          if (game.locals["drawing"]) {
            delete game.locals["drawing"].data.drawing;
          }
          app.removeAttr("drawing");
          app.removeAttr("creating");
          app.removeAttr("configuring");
          app.attr("background", "true");
          rebuildMenu();
          rebuildOptions();
        });
      }

      if (app.attr("background") == "true") {
        var option = $("<div>").appendTo(optionsBar);
        option.addClass("alttext highlight hover2 fit-x spadding flexmiddle");
        option.css("font-size", "1.2em");
        option.text("Exit Builder");
        option.click(function(){
          app.removeAttr("background");
          app.removeAttr("drawing");
          app.removeAttr("creating");
          app.removeAttr("configuring");
          if (boardApi.saveChanges(obj, true)) {
            app.removeAttr("local");
          }
          floatingTile = null;
          rebuildOptions();
          rebuildMenu();
        });
      }
    }

    var iconBar = $("<div>").appendTo(optionsBar);
    iconBar.addClass("flexrow flexbetween flexwrap spadding");
    iconBar.css("background", "rgba(0,0,0,0.8)");

    var iconBar = $("<div>").appendTo(optionsBar);
    iconBar.addClass("flexrow flexbetween spadding");
    iconBar.css("background", "rgba(0,0,0,0.8)");

    if ((!scope.local && (data.options && data.options.cursorToggle)) || hasRights) {
      if (app.attr("background") != "true") {
        var option = genIcon("hand-up").appendTo(iconBar);
        option.addClass("hover2 flexmiddle");
        option.attr("title", "Hide your Cursor");
        if (app.attr("hideCursor") == "true") {
          option.removeClass("highlight");
          option.addClass("dull");
          option.attr("title", "Show your Cursor");
        }
        else {
          option.addClass("alttext");
        }
        option.click(function(){
          if (app.attr("hideCursor") == "true") {
            $(this).removeClass("dull");
            $(this).addClass("alttext");
            app.removeAttr("hideCursor");
            $(this).attr("title", "Hide your Cursor");
          }
          else {
            app.attr("hideCursor", "true");
            $(this).removeClass("alttext");
            $(this).addClass("dull");
            $(this).attr("title", "Show your Cursor");
            if (!scope.local) {
              runCommand("updateBoardCursor", {id : obj.id(), data : {x : 0, y : 0, v : true}});
            }
          }
        });
      }
      else {
        runCommand("updateBoardCursor", {id : obj.id(), data : {x : 0, y : 0, v : true}});
      }
    }

    var option = genIcon("screenshot").appendTo(iconBar);
    option.addClass("hover2 alttext flexmiddle");
    option.attr("title", "Center To Default View");
    option.click(function(){
      var portWidth = Number(app.attr("divWidth") || 0);
      var portHeight = Number(app.attr("divHeight") || 0);
      boardApi.scrollTo(app, obj.data.vX || 0 + portWidth/2, obj.data.vY || 0 + portHeight/2);
    });

    if (hasRights && !app.attr("background")) {
      var option = $("<div>").appendTo(iconBar);
      option.addClass("alttext hover2 flexmiddle subtitle option alttext spadding outline smooth");
      option.text("Options");
      if (app.attr("configuring") == "advanced") {
        option.addClass("highlight");
      }
      else {
        option.addClass("background");
      }
      option.click(function(){
        if (game.locals["drawing"]) {
          delete game.locals["drawing"].data.drawing;
        }
        app.removeAttr("creating");
        app.removeAttr("drawing");
        if (app.attr("configuring") == "advanced") {
          app.removeAttr("configuring");
        }
        else {
          app.attr("configuring", "advanced");
        }
        optionsBar.find(".option").addClass("background");
        optionsBar.find(".option").removeClass("highlight");
        if (app.attr("configuring") == "advanced") {
          $(this).addClass("highlight");
          $(this).removeClass("background");
        }
        else {
          $(this).addClass("background");
          $(this).removeClass("highlight");
        }
        rebuildMenu();
      });
    }

    if (hasSecurity(getCookie("UserID"), "Assistant Master") && app.attr("background") != "true") {
      var option = $("<a>").appendTo(iconBar);
      option.attr("href", "http://localhost:"+getCookie("PrivatePort")+"/join?select=true");
      option.attr("target", "_");

      if (!app.attr("UserID") && hasRights) {
        option.addClass("hover2 flexmiddle subtitle");
        option.append("<text class='background flexmiddle alttext spadding smooth outline'>Player Vision</text>");
      }
      else {
        option.addClass("hover2 flexmiddle subtitle");
        option.append("<text class='highlight flexmiddle alttext spadding smooth outline'>Player Vision</text>");
      }
    }

    if (hasRights) {
      var layerWrap = $("<div>").appendTo(optionsBar);
      layerWrap.addClass("flexrow alttext fit-x subtitle padding smooth");
      layerWrap.css("background", "rgba(0,0,0,0.8)");

      var layerBar = $("<div>").appendTo(layerWrap);
      layerBar.addClass("flexrow flex fit-x");

      var option = $("<div>").appendTo(layerBar);
      option.addClass("alttext hover2 subtitle option alttext flexmiddle outline smooth lrpadding");
      option.text("Manage");
      if (app.attr("configuring") == "manage") {
        option.addClass("highlight");
      }
      else {
        option.addClass("background");
      }
      option.click(function(){
        if (game.locals["drawing"]) {
          delete game.locals["drawing"].data.drawing;
        }
        app.removeAttr("creating");
        app.removeAttr("drawing");
        if (app.attr("configuring") == "manage") {
          app.removeAttr("configuring");
        }
        else {
          app.attr("configuring", "manage");
        }
        optionsBar.find(".option").addClass("background");
        optionsBar.find(".option").removeClass("highlight");
        if (app.attr("configuring") == "manage") {
          $(this).addClass("highlight");
          $(this).removeClass("background");
        }
        else {
          $(this).addClass("background");
          $(this).removeClass("highlight");
        }
        rebuildMenu();
      });

      var select = $("<select>").appendTo(layerBar);
      select.addClass("smooth fit-x subtitle lrmargin");
      select.attr("Layer", "Current Layer");
      select.css("color", "#333");
      if (data.layers && data.layers[scope.layer]  && data.layers[scope.layer]._s && (data.layers[scope.layer]._s.default != 1 && data.layers[scope.layer]._s.default != null)) {
        select.addClass("inactive");
      }
      for (var key in data.layers) {
        var option = $("<option val='"+key+"'>"+data.layers[key].n+"</option>").appendTo(select);
        if (key == scope.layer) {
          if (data.layers[scope.layer]._s && (data.layers[scope.layer]._s.default != 1 && data.layers[scope.layer]._s.default != null)) {
            option.text(option.text()+"(GM Only)");
          }
          option.attr("selected", "selected");
        }
      }
      select.change(function(){
        var newLayer = $(this).find("option:selected").attr("val");
        app.attr("layer", newLayer);
        scope.layer = newLayer;
        if (data.layers[scope.layer].h) {
          visible.changeIcon("eye-close");
          visible.attr("title", "Layer Currently Hidden");
        }
        else {
          visible.changeIcon("eye-open");
          visible.attr("title", "Layer Currently Visible");
        }
        boardApi.revealLayers(obj, app);
      });

      var visible = genIcon("eye-open");
      visible.appendTo(layerBar);
      visible.attr("title", "Layer Currently Visible");

      if (data.layers[scope.layer].h) {
        visible.changeIcon("eye-close");
        visible.attr("title", "Layer Currently Hidden");
      }
      visible.click(function(){
        obj.data.layers[scope.layer].h = !obj.data.layers[scope.layer].h;
        if (data.layers[scope.layer].h) {
          visible.changeIcon("eye-close");
          visible.attr("title", "Layer Currently Hidden");
        }
        else {
          visible.changeIcon("eye-open");
          visible.attr("title", "Layer Currently Visible");
        }
        boardApi.updateLayer(scope.layer, null, obj);
        boardApi.revealLayers(obj, app);
      });
    }
  }
  rebuildOptions();

  return newMenu;
}

boardApi.buildMenu = function(obj, app, scope, opaque) {
  var data = obj.data;

  var stage = boardApi.apps[app.attr("id")].stage;
  var userID = app.attr("userID") || getCookie("UserID");
  var hasRights = hasSecurity(userID, "Rights", data) || hasSecurity(userID, "Game Master");
  var gridWidth = data.gridW;
  var gridHeight = data.gridH;
  var isHex = data.options && data.options.hex;
  var hasGrid = data.gridW && data.gridW;
  var zoom = Number(app.attr("zoom")) / 100 || 1;
  var scrollLeft = 0;
  var scrollTop = 0;
  var portWidth = app.attr("divWidth");
  var portHeight = app.attr("divHeight");

  var newMenu = $("<div>");
  newMenu.addClass("flexrow padding");
  newMenu.attr("id", app.attr("id")+"-menu-"+obj.id());
  newMenu.css("position", "absolute");
  newMenu.css("left", (app.attr("menuX") || "0")+"px");
  newMenu.css("top", (app.attr("menuY") || "30")+"px");
  newMenu.css("max-width", "84%");
  newMenu.css("pointer-events", "none");
  if (!opaque) {
    newMenu.css("opacity", "0.15");
    newMenu.css("transition", "opacity 0.1s");
  }
  newMenu.hover(function(){
    newMenu.css("opacity", "1.0");
  },
  function(){
    newMenu.css("opacity", "0.15");
  });

  var optionsBar = $("<div>").appendTo(newMenu);


  var option = $("<div>").appendTo(optionsBar);
  option.addClass("flexrow fit-x alttext size4");
  option.css("background-color", "rgba(0,0,0,0.8)")
  option.css("pointer-events", "auto");

  var nameInput = genInput({
    parent : option,
    classes : "line smooth subtitle middle flex",
    disabled : !hasRights,
    value : sync.rawVal(data.info.name) || "[No Name]",
    style : {"background" : "rgb(33,46,55)"}
  });

  if (nameInput.val() && nameInput.val().length > 15) {
    option.css("font-size", "1.2em");
  }

  nameInput.change(function(){
    sync.rawVal(obj.data.info.name, $(this).val() || "[No Name]");
    if (!scope.local) {
      obj.sync("updateAsset");
    }
    else {
      obj.update();
    }
  });
  nameInput.blur(function(){
    name.show();
    nameInput.hide();
  });
  nameInput.hide();
  nameInput.click(function(ev) {
    ev.stopPropagation();
  });

  var name = $("<b>").appendTo(option);
  name.addClass("flex flexmiddle");
  name.text(sync.rawVal(data.info.name) || "[No Name]");

  if (hasRights) {
    name.addClass("hover2")
    name.attr("title", "Rename Map");
    name.click(function(){
      name.hide();
      nameInput.show();
      nameInput.focus();
    });
  }

  var dragHandle = genIcon({icon : "move", raw : true}).appendTo(option);
  dragHandle.addClass("handle lrpadding dull link");
  dragHandle.css("font-size", "0.6em");
  dragHandle.css("pointer-events", "auto");

  newMenu.draggable({handle : ".handle", containment : "parent", drag : function(ev, ui){app.attr("menuX", ui.position.left); app.attr("menuY", ui.position.top);}});

  var newZoomWrap = $("<div>").appendTo(optionsBar);
  newZoomWrap.addClass("alttext fit-x size3 lrpadding");
  newZoomWrap.css("background-color", "rgba(0,0,0,0.8)")
  newZoomWrap.css("pointer-events", "auto");

  if (hasRights) {
    var layerBar = $("<div>").appendTo(newZoomWrap);
    layerBar.addClass("flexrow flex");

    if (hasSecurity(getCookie("UserID"), "Assistant Master") && app.attr("background") != "true") {
      var option = $("<a>").appendTo(layerBar);
      option.attr("href", "http://localhost:"+getCookie("PrivatePort")+"/join?select=true");
      option.attr("target", "_");
      option.addClass("background flexmiddle alttext spadding smooth outline hover2 flexmiddle subtitle");
      option.append("<text class='subtitle'>Player Vision</text>");
    }


    var select = $("<select>").appendTo(layerBar);
    select.addClass("smooth flex subtitle lrmargin");
    select.attr("Layer", "Current Layer");
    select.css("color", "#333");
    if (data.layers && data.layers[scope.layer]  && data.layers[scope.layer]._s && (data.layers[scope.layer]._s.default != 1 && data.layers[scope.layer]._s.default != null)) {
      select.addClass("inactive");
    }
    for (var key in data.layers) {
      var option = $("<option val='"+key+"'>"+data.layers[key].n+"</option>").appendTo(select);
      if (key == scope.layer) {
        if (data.layers[scope.layer]._s && (data.layers[scope.layer]._s.default != 1 && data.layers[scope.layer]._s.default != null)) {
          option.text(option.text()+"(GM Only)");
        }
        option.attr("selected", "selected");
      }
    }
    select.change(function(){
      var newLayer = $(this).find("option:selected").attr("val");
      app.attr("layer", newLayer);
      scope.layer = newLayer;
      if (data.layers[scope.layer].h) {
        visible.changeIcon("eye-close");
        visible.attr("title", "Layer Currently Hidden");
      }
      else {
        visible.changeIcon("eye-open");
        visible.attr("title", "Layer Currently Visible");
      }
      boardApi.revealLayers(obj, app);
    });

    var visible = genIcon("eye-open");
    visible.appendTo(layerBar);
    visible.attr("title", "Layer Currently Visible");

    if (data.layers[scope.layer].h) {
      visible.changeIcon("eye-close");
      visible.attr("title", "Layer Currently Hidden");
    }
    visible.click(function(){
      obj.data.layers[scope.layer].h = !obj.data.layers[scope.layer].h;
      if (data.layers[scope.layer].h) {
        visible.changeIcon("eye-close");
        visible.attr("title", "Layer Currently Hidden");
      }
      else {
        visible.changeIcon("eye-open");
        visible.attr("title", "Layer Currently Visible");
      }
      boardApi.updateLayer(scope.layer, null, obj);
      boardApi.revealLayers(obj, app);
    });
  }


  var zoomContainer = $("<div>").appendTo(newZoomWrap);
  zoomContainer.addClass("flexrow flexmiddle fit-x");

  var zoomRange = genInput({
    classes : "flex large",
    parent : zoomContainer,
    type : "range",
    min : 40,
    max : 200,
    step : 1,
  }, 1);
  zoomRange.val(100);
  zoomRange.css("height", "14px");
  zoomRange.attr("id", app.attr("id")+"-zoom-range-"+obj.id());
  zoomRange.val(zoom * 100);
  zoomRange.bind("input", function(){
    var lastZoom = zoom;

    layout.coverlay($(".piece-quick-edit"));
    app.attr("zoom", Number($(this).val()));

    zoom = $(this).val()/100;

    stage.dZoom = zoom;

    zoomIn.attr("title", $(this).val()+"%");
    //boardApi.drawCursors(board, true);
  });
  zoomRange.contextmenu(function(){
    zoomRange.val(data.vZ || 100);
    zoomRange.change();
    return false;
  });
  zoomRange.change(function(){
    var lastZoom = zoom;

    layout.coverlay($(".piece-quick-edit"));
    app.attr("zoom", Number($(this).val()));

    zoom = $(this).val()/100;

    stage.dZoom = zoom;

    for (var key in boardApi.selections) {
      if (boardApi.selections[key].app == app.attr("id")) {
        boardApi.selections[key].wrap.update();
      }
    }

    zoomIn.attr("title", $(this).val()+"%");
    //boardApi.drawCursors(board, true);
    if (lastZoom == 0.4 && $(this).val() == 40) {
      var ent = getEnt(obj.data.options.zoomAsset);
      if (ent && ent.data && ent.data._t == "b") {
        game.state.data.tabs = game.state.data.tabs || [];
        var tabs = game.state.data.tabs;
        var active;
        for (var i in tabs) {
          if (ent.id() == tabs[i].index) {
            active = i;
            break;
          }
        }
        app.attr("zoom", 100);
        app.removeAttr("scrollLeft");
        app.removeAttr("scrollTop");

        for (var lid in ent.data.layers) {
          var layerData = ent.data.layers[lid];
          for (var pid in layerData.p) {
            if (obj.id() == layerData.p[pid].eID) {
              app.attr("scrollLeft", (layerData.p[pid].x + layerData.p[pid].w/2 - app.width()/2)*-1);
              app.attr("scrollTop", (layerData.p[pid].y + layerData.p[pid].h/2 - app.height()/2)*-1);
              break;
            }
          }
        }

        if (!active) {
          active = tabs.length;
          game.state.data.tabs.push({index : ent.id(), ui : "ui_board"});
          for (var i in game.state._apps) {
            if ($("#"+game.state._apps[i]).length) {
              $("#"+game.state._apps[i]).attr("tab", active);
            }
          }
          game.state.sync("updateState");
        }
        else {
          for (var i in game.state._apps) {
            if ($("#"+game.state._apps[i]).length) {
              $("#"+game.state._apps[i]).attr("tab", active);
            }
          }
          game.state.update();
        }
      }
    }
    else if (lastZoom = 2 && $(this).val() == 200) {
      var selections = null;
      for (var key in boardApi.selections) {
        if (boardApi.selections[key].app == app.attr("id")) {
          if (!selections) {
            selections = selections || {};
          }
          selections[key] = boardApi.selections[key];
        }
      }
      if (selections && Object.keys(selections).length == 1) {
        var selectData = selections[Object.keys(selections)[0]];
        if (selectData.type == "p" && selectData.board == obj.id()) {
          var pieceData = obj.data.layers[selectData.layer][selectData.type][selectData.index];
          var ent = getEnt(pieceData.eID);
          if (ent && ent.data && ent.data._t == "b") {
            game.state.data.tabs = game.state.data.tabs || [];
            var tabs = game.state.data.tabs;
            var active;
            for (var i in tabs) {
              if (ent.id() == tabs[i].index) {
                active = i;
                break;
              }
            }
            app.removeAttr("zoom");
            app.removeAttr("scrollLeft");
            app.removeAttr("scrollTop");
            if (!active) {
              active = tabs.length;
              game.state.data.tabs.push({index : ent.id(), ui : "ui_board"});
              for (var i in game.state._apps) {
                if ($("#"+game.state._apps[i]).length) {
                  $("#"+game.state._apps[i]).attr("tab", active);
                }
              }
              game.state.sync("updateState");
            }
            else {
              for (var i in game.state._apps) {
                if ($("#"+game.state._apps[i]).length) {
                  $("#"+game.state._apps[i]).attr("tab", active);
                }
              }
              game.state.update();
            }
          }
        }
      }
    }
  });


  var zoomIn = genIcon("search").appendTo(zoomContainer);
  zoomIn.addClass("lrpadding");
  zoomIn.attr("title", "Set Manual Zoom");
  zoomIn.click(function(){
    ui_prompt({
      target : $(this),
      inputs : {"Set Zoom" : {placeholder : zoomIn.attr("title") || Math.round(zoom*100) + "%", type : "number", step : 5, min : 25, max : 500}},
      click : function(ev, inputs){
        if (inputs["Set Zoom"].val()) {
          zoomRange.attr("max", "500");
          zoomRange.attr("min", "10");
          zoomRange.val(inputs["Set Zoom"].val());
          zoomRange.change();
          zoomRange.attr("max", "200");
          zoomRange.attr("min", "40");
        }
      }
    });
  });


  var option = genIcon("screenshot").appendTo(zoomContainer);
  option.addClass("alttext lrmargin");
  option.attr("title", "Center To Default View");
  option.click(function(){
    var portWidth = Number(app.attr("divWidth") || 0);
    var portHeight = Number(app.attr("divHeight") || 0);
    boardApi.scrollTo(app, obj.data.vX * -1 || 0 + portWidth/2, obj.data.vY * -1 || 0 + portHeight/2);
  });

  if ((!scope.local && (data.options && data.options.cursorToggle)) || hasRights) {
    if (app.attr("background") != "true") {
      var option = genIcon("hand-up").appendTo(zoomContainer);
      option.addClass("flexmiddle");
      option.attr("title", "Hide your Cursor");
      if (app.attr("hideCursor") == "true") {
        option.removeClass("highlight");
        option.addClass("dull");
        option.attr("title", "Show your Cursor");
      }
      else {
        option.addClass("alttext");
      }
      option.click(function(){
        if (app.attr("hideCursor") == "true") {
          $(this).removeClass("dull");
          $(this).addClass("alttext");
          app.removeAttr("hideCursor");
          $(this).attr("title", "Hide your Cursor");
        }
        else {
          app.attr("hideCursor", "true");
          $(this).removeClass("alttext");
          $(this).addClass("dull");
          $(this).attr("title", "Show your Cursor");
          if (!scope.local) {
            runCommand("updateBoardCursor", {id : obj.id(), data : {x : 0, y : 0, v : true}});
          }
        }
      });
    }
    else {
      runCommand("updateBoardCursor", {id : obj.id(), data : {x : 0, y : 0, v : true}});
    }
  }


  var menuListWrap = $("<div>").appendTo(optionsBar);
  menuListWrap.addClass("flexrow smooth");

  var menuList = $("<div>").appendTo(menuListWrap);
  menuList.addClass("flexcolumn subtitle foreground outline");
  menuList.css("pointer-events", "auto");

  var menuContent = $("<div>").appendTo(menuListWrap);
  menuContent.addClass("alttext flexcolumn");
  menuContent.css("width", "250px");
  menuContent.css("pointer-events", "none");

  function buildMenuOption(name, icon){
    var wrap = $("<div>");
    wrap.addClass("flexcolumn flexmiddle spadding outlinebottom hover2 boardMenu");
    wrap.css("min-width", "60px");

    var icon = genIcon(icon).appendTo(wrap);
    icon.addClass("size3");

    var title = $("<div>").appendTo(wrap);
    title.addClass("subtitle");
    title.css("white-space", "nowrap")
    title.text(name);

    wrap.click(function(){
      if (game.locals["drawing"]) {
        delete game.locals["drawing"].data.drawing;
      }
      newMenu.find(".boardMenu").removeClass("highlight alttext").addClass("background dull");

      menuContent.empty();
      if (app.attr("menuOption") != name) {
        if (boardApi.menus[app.attr("menuOption")] && boardApi.menus[app.attr("menuOption")].cleanup) {
          boardApi.menus[app.attr("menuOption")].cleanup(obj, app, scope);
        }
        app.attr("menuOption", name);
        if (boardApi.menus[name].setup) {
          boardApi.menus[name].setup(obj, app, scope);
        }
        wrap.removeClass("background dull");
        wrap.addClass("highlight alttext");
        menuContent.append(boardApi.menus[name].menu(obj, app, scope).css("pointer-events", "auto"));
        menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
      }
      else {
        app.removeAttr("menuOption");
        menuContent.css("background", "");
        if (boardApi.menus[name] && boardApi.menus[name].cleanup) {
          boardApi.menus[name].cleanup(obj, app, scope);
        }
      }
    });

    if (app.attr("menuOption") == name) {
      wrap.addClass("highlight alttext");
      menuContent.empty();
      menuContent.append(boardApi.menus[name].menu(obj, app, scope).css("pointer-events", "auto"));
      menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
    }
    else {
      wrap.addClass("background dull");
    }

    return wrap;
  }

  if (!layout.mobile) {
    var hints = $("<div>").appendTo(menuContent);
    hints.addClass("flexrow flexbetween fit-xy alttext subtitle");

    var hints = $("<div>").appendTo(hints);
    hints.addClass("flexrow flexmiddle lrpadding");
    hints.css("background-color", "rgba(0,0,0,0.8)");
    hints.css("pointer-events", "auto");

    var hints = $("<div>").appendTo(hints);
    hints.addClass("flexcolumn flexmiddle");
    hints.css("align-items","flex-start");

    buildHotKey("Map Menu","list-alt", "mright").appendTo(hints);
    buildHotKey("Ping/Beacon", "hand-up", "mleft + mleft").appendTo(hints);
    buildHotKey("Move around", "move", "mright + mouse").appendTo(hints);
    buildHotKey("Select", "resize-full", "mleft + mouse").appendTo(hints);
    buildHotKey("Measure","resize-horizontal", "Ctrl + mleft").appendTo(hints);
  }

  for (var key in boardApi.menus) {
    var menuOption = buildMenuOption(key, boardApi.menus[key].icon);
    if ((hasRights && !boardApi.menus[key].hide) || (boardApi.menus[key].hide instanceof Function && boardApi.menus[key].hide(obj, app, scope))) {
      menuOption.appendTo(menuList);
      menuOption.mousedown(function(ev){
        _mouseupCleanup(ev);
        ev.stopPropagation();
      });
    }
  }
  menuOption.removeClass("outlinebottom");

  return newMenu;
}

sync.render("ui_boardMenuLeft", function(obj, app, scope){
  var data = obj.data;
  var stage = boardApi.apps[app.attr("id")].stage;
  var userID = app.attr("userID") || getCookie("UserID");
  var hasRights = hasSecurity(userID, "Rights", data) || hasSecurity(userID, "Game Master");
  var gridWidth = data.gridW;
  var gridHeight = data.gridH;
  var isHex = data.options && data.options.hex;
  var hasGrid = data.gridW && data.gridW;
  var zoom = Number(app.attr("zoom")) / 100 || 1;
  var scrollLeft = 0;
  var scrollTop = 0;
  var portWidth = app.attr("divWidth");
  var portHeight = app.attr("divHeight");

  $("#left-content").css("background", "");
  $("#left-menu").css("min-width", "");
  $("#left-menu").css("width", "");
  
  var menuListWrap = $("<div>");
  menuListWrap.addClass("flexrow flex smooth");
  menuListWrap.attr("id", app.attr("id")+"-menu-"+obj.id());
  menuListWrap.css("pointer-events", "none");

  var menuList = $("<div>").appendTo(menuListWrap);
  menuList.addClass("flexcolumn subtitle foreground outline");
  menuList.css("pointer-events", "auto");

  var menuContent = $("<div>").appendTo(menuListWrap);
  menuContent.addClass("alttext flexcolumn flex");
  menuContent.css("pointer-events", "none");

  function buildMenuOption(name, icon){
    var wrap = $("<div>");
    wrap.addClass("flexcolumn flexmiddle spadding outlinebottom hover2 boardMenu");
    wrap.css("min-width", "60px");

    var icon = genIcon(icon).appendTo(wrap);
    icon.addClass("size3");

    var title = $("<div>").appendTo(wrap);
    title.addClass("subtitle");
    title.css("white-space", "nowrap")
    title.text(name);

    wrap.click(function(){
      if (game.locals["drawing"]) {
        delete game.locals["drawing"].data.drawing;
      }
      menuListWrap.find(".boardMenu").removeClass("highlight alttext").addClass("background dull");

      menuContent.empty();
      if (app.attr("menuOption") != name) {
        if (boardApi.menus[app.attr("menuOption")] && boardApi.menus[app.attr("menuOption")].cleanup) {
          boardApi.menus[app.attr("menuOption")].cleanup(obj, app, scope);
        }
        app.attr("menuOption", name);
        $("#left-menu").css("min-width", "300px");
        $("#left-menu").css("width", $("#nav-div").width());
        if (boardApi.menus[name].setup) {
          boardApi.menus[name].setup(obj, app, scope);
        }
        wrap.removeClass("background dull");
        wrap.addClass("highlight alttext");
        menuContent.append(boardApi.menus[name].menu(obj, app, scope).css("pointer-events", "auto"));
        menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
      }
      else {
        $("#left-menu").css("min-width", "");
        $("#left-menu").css("width", "");
        app.removeAttr("menuOption");
        menuContent.css("background", "");
        if (boardApi.menus[name] && boardApi.menus[name].cleanup) {
          boardApi.menus[name].cleanup(obj, app, scope);
        }
      }
    });

    if (app.attr("menuOption") == name) {
      wrap.addClass("highlight alttext");
      menuContent.empty();
      $("#left-menu").css("min-width", "300px");
      $("#left-menu").css("width", $("#nav-div").width());

      menuContent.append(boardApi.menus[name].menu(obj, app, scope).css("pointer-events", "auto"));
      menuContent.css("background", "radial-gradient(rgba(34,34,34,1.0), rgba(0,0,0,1.0))");
    }
    else {
      wrap.addClass("background dull");
    }

    return wrap;
  }
  
  for (var key in boardApi.menus) {
    var menuOption = buildMenuOption(key, boardApi.menus[key].icon);
    if ((hasRights && !boardApi.menus[key].hide) || (boardApi.menus[key].hide instanceof Function && boardApi.menus[key].hide(obj, app, scope))) {
      menuOption.appendTo(menuList);
    }
  }
  menuOption.removeClass("outlinebottom");

  return menuListWrap;
});

boardApi.buildMenu = function(obj, app, scope, opaque) {
  var data = obj.data;

  var stage = boardApi.apps[app.attr("id")].stage;
  var userID = app.attr("userID") || getCookie("UserID");
  var hasRights = hasSecurity(userID, "Rights", data) || hasSecurity(userID, "Game Master");
  var gridWidth = data.gridW;
  var gridHeight = data.gridH;
  var isHex = data.options && data.options.hex;
  var hasGrid = data.gridW && data.gridW;
  var zoom = Number(app.attr("zoom")) / 100 || 1;
  var scrollLeft = 0;
  var scrollTop = 0;
  var portWidth = app.attr("divWidth");
  var portHeight = app.attr("divHeight");

  var newMenu = $("<div>");
  newMenu.addClass("flexrow padding");
  newMenu.css("position", "absolute");
  newMenu.css("right", "50%");
  newMenu.css("bottom", "5%");
  newMenu.attr("id", app.attr("id")+"-menuu-"+obj.id());

  var optionsBar = $("<div>").appendTo(newMenu);
  optionsBar.addClass("flexcolumn flexmiddle");

  var hamburWrap = $("<div>").appendTo(optionsBar);
  hamburWrap.addClass("flexcolumn flexmiddle round foreground hover2");
  hamburWrap.css("width", "40px");
  hamburWrap.css("height", "40px");

  hamburWrap.click(function(){
    if ($("#"+app.attr("id")+"-menu-"+obj.id()).length) {
      $("#left-content").empty();
      util.dockHide($("#left-menu"));
    }
    else {
      util.dockReveal($("#main-nav"));
      $("#left-content").empty();
      var menu = sync.render("ui_boardMenuLeft")(obj, app, scope).appendTo("#left-content");
      util.dockReveal($("#left-menu"));
    }
  });

  var options = genIcon({icon : "menu-hamburger", raw : true}).appendTo(hamburWrap);
  options.addClass("alttext flexmiddle size6");
  options.css("color", "white");
  
  if (hasRights) {
    var layerBar = $("<div>").appendTo(optionsBar);
    layerBar.addClass("flexrow flex");

    if (hasSecurity(getCookie("UserID"), "Assistant Master") && app.attr("background") != "true") {
      var option = $("<a>").appendTo(layerBar);
      option.attr("href", "http://localhost:"+getCookie("PrivatePort")+"/join?select=true");
      option.attr("target", "_");
      option.addClass("background flexmiddle alttext spadding smooth outline hover2 flexmiddle subtitle");
      option.append("<text class='subtitle'>Player Vision</text>");
    }


    var select = $("<select>").appendTo(layerBar);
    select.addClass("smooth flex subtitle lrmargin");
    select.attr("Layer", "Current Layer");
    select.css("color", "#333");
    if (data.layers && data.layers[scope.layer]  && data.layers[scope.layer]._s && (data.layers[scope.layer]._s.default != 1 && data.layers[scope.layer]._s.default != null)) {
      select.addClass("inactive");
    }
    for (var key in data.layers) {
      var option = $("<option val='"+key+"'>"+data.layers[key].n+"</option>").appendTo(select);
      if (key == scope.layer) {
        if (data.layers[scope.layer]._s && (data.layers[scope.layer]._s.default != 1 && data.layers[scope.layer]._s.default != null)) {
          option.text(option.text()+"(GM Only)");
        }
        option.attr("selected", "selected");
      }
    }
    select.change(function(){
      var newLayer = $(this).find("option:selected").attr("val");
      app.attr("layer", newLayer);
      scope.layer = newLayer;
      if (data.layers[scope.layer].h) {
        visible.changeIcon("eye-close");
        visible.attr("title", "Layer Currently Hidden");
      }
      else {
        visible.changeIcon("eye-open");
        visible.attr("title", "Layer Currently Visible");
      }
      boardApi.revealLayers(obj, app);
    });

    var visible = genIcon("eye-open");
    visible.appendTo(layerBar);
    visible.attr("title", "Layer Currently Visible");

    if (data.layers[scope.layer].h) {
      visible.changeIcon("eye-close");
      visible.attr("title", "Layer Currently Hidden");
    }
    visible.addClass("alttext");
    visible.css("color", "white");
    visible.click(function(){
      obj.data.layers[scope.layer].h = !obj.data.layers[scope.layer].h;
      if (data.layers[scope.layer].h) {
        visible.changeIcon("eye-close");
        visible.attr("title", "Layer Currently Hidden");
      }
      else {
        visible.changeIcon("eye-open");
        visible.attr("title", "Layer Currently Visible");
      }
      boardApi.updateLayer(scope.layer, null, obj);
      boardApi.revealLayers(obj, app);
    });
  }

  var newZoomWrap = $("<div>").appendTo(optionsBar);
  newZoomWrap.addClass("alttext fit-x size3 smargin");
  newZoomWrap.css("pointer-events", "auto");

  var zoomContainer = $("<div>").appendTo(newZoomWrap);
  zoomContainer.addClass("flexrow flexmiddle fit-x");

  var zoomRange = genInput({
    classes : "flex large",
    parent : zoomContainer,
    type : "range",
    min : 40,
    max : 200,
    step : 1,
  }, 1);
  zoomRange.val(100);
  zoomRange.css("height", "14px");
  zoomRange.attr("id", app.attr("id")+"-zoom-range-"+obj.id());
  zoomRange.val(zoom * 100);
  zoomRange.bind("input", function(){
    var lastZoom = zoom;

    layout.coverlay($(".piece-quick-edit"));
    app.attr("zoom", Number($(this).val()));

    zoom = $(this).val()/100;

    stage.dZoom = zoom;

    zoomIn.attr("title", $(this).val()+"%");
    //boardApi.drawCursors(board, true);
  });
  zoomRange.contextmenu(function(){
    zoomRange.val(data.vZ || 100);
    zoomRange.change();
    return false;
  });
  zoomRange.change(function(){
    var lastZoom = zoom;

    layout.coverlay($(".piece-quick-edit"));
    app.attr("zoom", Number($(this).val()));

    zoom = $(this).val()/100;

    stage.dZoom = zoom;

    for (var key in boardApi.selections) {
      if (boardApi.selections[key].app == app.attr("id")) {
        boardApi.selections[key].wrap.update();
      }
    }

    zoomIn.attr("title", $(this).val()+"%");
    //boardApi.drawCursors(board, true);
    if (lastZoom == 0.4 && $(this).val() == 40) {
      var ent = getEnt(obj.data.options.zoomAsset);
      if (ent && ent.data && ent.data._t == "b") {
        game.state.data.tabs = game.state.data.tabs || [];
        var tabs = game.state.data.tabs;
        var active;
        for (var i in tabs) {
          if (ent.id() == tabs[i].index) {
            active = i;
            break;
          }
        }
        app.attr("zoom", 100);
        app.removeAttr("scrollLeft");
        app.removeAttr("scrollTop");

        for (var lid in ent.data.layers) {
          var layerData = ent.data.layers[lid];
          for (var pid in layerData.p) {
            if (obj.id() == layerData.p[pid].eID) {
              app.attr("scrollLeft", (layerData.p[pid].x + layerData.p[pid].w/2 - app.width()/2)*-1);
              app.attr("scrollTop", (layerData.p[pid].y + layerData.p[pid].h/2 - app.height()/2)*-1);
              break;
            }
          }
        }

        if (!active) {
          active = tabs.length;
          game.state.data.tabs.push({index : ent.id(), ui : "ui_board"});
          for (var i in game.state._apps) {
            if ($("#"+game.state._apps[i]).length) {
              $("#"+game.state._apps[i]).attr("tab", active);
            }
          }
          game.state.sync("updateState");
        }
        else {
          for (var i in game.state._apps) {
            if ($("#"+game.state._apps[i]).length) {
              $("#"+game.state._apps[i]).attr("tab", active);
            }
          }
          game.state.update();
        }
      }
    }
    else if (lastZoom = 2 && $(this).val() == 200) {
      var selections = null;
      for (var key in boardApi.selections) {
        if (boardApi.selections[key].app == app.attr("id")) {
          if (!selections) {
            selections = selections || {};
          }
          selections[key] = boardApi.selections[key];
        }
      }
      if (selections && Object.keys(selections).length == 1) {
        var selectData = selections[Object.keys(selections)[0]];
        if (selectData.type == "p" && selectData.board == obj.id()) {
          var pieceData = obj.data.layers[selectData.layer][selectData.type][selectData.index];
          var ent = getEnt(pieceData.eID);
          if (ent && ent.data && ent.data._t == "b") {
            game.state.data.tabs = game.state.data.tabs || [];
            var tabs = game.state.data.tabs;
            var active;
            for (var i in tabs) {
              if (ent.id() == tabs[i].index) {
                active = i;
                break;
              }
            }
            app.removeAttr("zoom");
            app.removeAttr("scrollLeft");
            app.removeAttr("scrollTop");
            if (!active) {
              active = tabs.length;
              game.state.data.tabs.push({index : ent.id(), ui : "ui_board"});
              for (var i in game.state._apps) {
                if ($("#"+game.state._apps[i]).length) {
                  $("#"+game.state._apps[i]).attr("tab", active);
                }
              }
              game.state.sync("updateState");
            }
            else {
              for (var i in game.state._apps) {
                if ($("#"+game.state._apps[i]).length) {
                  $("#"+game.state._apps[i]).attr("tab", active);
                }
              }
              game.state.update();
            }
          }
        }
      }
    }
  });


  var layerBar = $("<div>").appendTo(optionsBar);
  layerBar.addClass("flexrow flexaround size2 fit-x alttext");

  var zoomIn = genIcon("search").appendTo(layerBar);
  zoomIn.addClass("lrpadding");
  zoomIn.attr("title", "Set Manual Zoom");
  zoomIn.click(function(){
    ui_prompt({
      target : $(this),
      inputs : {"Set Zoom" : {placeholder : zoomIn.attr("title") || Math.round(zoom*100) + "%", type : "number", step : 5, min : 25, max : 500}},
      click : function(ev, inputs){
        if (inputs["Set Zoom"].val()) {
          zoomRange.attr("max", "500");
          zoomRange.attr("min", "10");
          zoomRange.val(inputs["Set Zoom"].val());
          zoomRange.change();
          zoomRange.attr("max", "200");
          zoomRange.attr("min", "40");
        }
      }
    });
  });


  var option = genIcon("screenshot").appendTo(layerBar);
  option.addClass("alttext lrmargin");
  option.attr("title", "Center To Default View");
  option.click(function(){
    var portWidth = Number(app.attr("divWidth") || 0);
    var portHeight = Number(app.attr("divHeight") || 0);
    boardApi.scrollTo(app, obj.data.vX * -1 || 0 + portWidth/2, obj.data.vY * -1 || 0 + portHeight/2);
  });

  if ((!scope.local && (data.options && data.options.cursorToggle)) || hasRights) {
    if (app.attr("background") != "true") {
      var option = genIcon("hand-up").appendTo(layerBar);
      option.addClass("flexmiddle");
      option.attr("title", "Hide your Cursor");
      if (app.attr("hideCursor") == "true") {
        option.removeClass("highlight");
        option.addClass("dull");
        option.attr("title", "Show your Cursor");
      }
      else {
        option.addClass("alttext");
      }
      option.click(function(){
        if (app.attr("hideCursor") == "true") {
          $(this).removeClass("dull");
          $(this).addClass("alttext");
          app.removeAttr("hideCursor");
          $(this).attr("title", "Hide your Cursor");
        }
        else {
          app.attr("hideCursor", "true");
          $(this).removeClass("alttext");
          $(this).addClass("dull");
          $(this).attr("title", "Show your Cursor");
          if (!scope.local) {
            runCommand("updateBoardCursor", {id : obj.id(), data : {x : 0, y : 0, v : true}});
          }
        }
      });
    }
    else {
      runCommand("updateBoardCursor", {id : obj.id(), data : {x : 0, y : 0, v : true}});
    }
  }
  setTimeout(function(){
    newMenu.css("right", newMenu.parent().width()/2 - newMenu.width()/2);
  }, 0);
  return newMenu;
}

boardApi.menus = {
  "Background" : {
    icon : "picture",
    menu : function(obj, app, scope){
      app.attr("configuring", "background");
      return sync.render("ui_mapBackground")(obj, app, scope);
    }
  },
  "Draw" : {
    icon : "pencil",
    hide : function(obj, app, scope){
      if ((hasSecurity(getCookie("UserID"), "Rights", obj.data) || hasSecurity(getCookie("UserID"), "Game Master")) || obj.data.options.freeDraw) {
        return true;
      }
      return false;
    },
    menu : function(obj, app, scope){
      var menuContent = sync.newApp("ui_drawingControls");
      menuContent.attr("target", obj.id());
      menuContent.attr("targetApp", app.attr("id"));
      menuContent.css("pointer-events", "auto");

      if (!game.locals["drawing"]) {
        game.locals["drawing"] = sync.obj();
        game.locals["drawing"].data = {};
      }
      game.locals["drawing"].data.fog = false;
      game.locals["drawing"].data.drawing = game.locals["drawing"].data.drawing || "free";
      game.locals["drawing"].data.target = app.attr("id");
      game.locals["drawing"].addApp(menuContent);
      return menuContent;
    }
  },
  "Fog of War" : {
    icon : "cloud",
    menu : function(obj, app, scope){
      var menuContent = sync.newApp("ui_drawingControls");
      menuContent.attr("target", obj.id());
      menuContent.attr("targetApp", app.attr("id"));
      menuContent.css("pointer-events", "auto");

      if (!game.locals["drawing"]) {
        game.locals["drawing"] = sync.obj();
        game.locals["drawing"].data = {};
      }
      game.locals["drawing"].data.fog = true;
      game.locals["drawing"].data.drawing = "line";
      game.locals["drawing"].data.target = app.attr("id");

      game.locals["drawing"].addApp(menuContent);
      return menuContent;
    }
  },
  "Map Builder" : {
    icon : "wrench",
    setup : function(obj, app, scope){
      app.attr("background", "true");
      obj.update();
    },
    cleanup : function(obj, app, scope){
      app.removeAttr("background");
      obj.sync("updateAsset");
    },
    menu : function(obj, app, scope){
      var menuContent = sync.newApp("ui_easySheets");
      menuContent.attr("target", obj.id());
      menuContent.attr("targetApp", app.attr("id"));
      menuContent.css("pointer-events", "auto");


      var newObj = sync.dummyObj();
      newObj.data = {};
      newObj.addApp(menuContent);

      return menuContent;
    }
  },
  "Manage" : {
    icon : "list-alt",
    menu : function(obj, app, scope){
      return sync.render("ui_boardEditor")(obj, app, scope).css("min-height", "300px");
    }
  },
  "Options" : {
    icon : "cog",
    menu : function(obj, app, scope){
      app.attr("configuring", "advanced");

      return sync.render("ui_mapOptions")(obj, app, scope);
    }
  },
  "Build" : {
    hide : true,
    icon : "cog",
    menu : function(obj, app, scope){
      if (!game.locals["pieceBuilding"]) {
        game.locals["pieceBuilding"] = sync.obj();
        game.locals["pieceBuilding"].data = {};
      }
      game.locals["pieceBuilding"].data.target = app.attr("id");
      game.locals["pieceBuilding"].data.pieceData = game.locals["pieceBuilding"].data.pieceData || {};

      var menuContent = sync.newApp("ui_pieceBuilder");
      menuContent.attr("target", obj.id());
      menuContent.attr("targetApp", app.attr("id"));
      menuContent.css("pointer-events", "auto");

      game.locals["pieceBuilding"].addApp(menuContent);

      return menuContent;
    }
  },
}
