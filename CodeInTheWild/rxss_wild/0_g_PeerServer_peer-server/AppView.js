// Generated by CoffeeScript 1.6.3
(function() {
  ' Handles all frontend setup for UI.';
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.AppView = (function(_super) {
    __extends(AppView, _super);

    function AppView() {
      this.getAlternativeServerID = __bind(this.getAlternativeServerID, this);
      this.goToInvalidIDPage = __bind(this.goToInvalidIDPage, this);
      this.goToUnavailableIDPage = __bind(this.goToUnavailableIDPage, this);
      this.goToDatabasePage = __bind(this.goToDatabasePage, this);
      this.goToEditPage = __bind(this.goToEditPage, this);
      this.goToPage = __bind(this.goToPage, this);
      this.renderTopbarButtons = __bind(this.renderTopbarButtons, this);
      this.handleZipFile = __bind(this.handleZipFile, this);
      this.updateConnectionCount = __bind(this.updateConnectionCount, this);
      this.setClientBrowserLink = __bind(this.setClientBrowserLink, this);
      _ref = AppView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AppView.prototype.el = "#client-server";

    AppView.prototype.initialize = function(options) {
      var _this = this;
      this.serverFileCollection = options.serverFileCollection;
      this.routeCollection = options.routeCollection;
      this.userDatabase = options.userDatabase;
      this.serverAge = new ServerAge($(".server-age-wrapper"));
      this.connectionDataView = new ServerConnectionDataView({
        el: $(".server-connection-data-wrapper"),
        model: new ServerConnectionDataModel()
      });
      this.tmplEditPage = Handlebars.templates["edit-page"];
      this.tmplDatabasePage = Handlebars.templates["database-page"];
      this.tmplTopbarButtons = Handlebars.templates["topbar-buttons"];
      this.tmplServerIDMessage = Handlebars.templates["server-id-message"];
      this.routeMap = {
        "edit": this.goToEditPage,
        "database": this.goToDatabasePage
      };
      this.routeDefault = "edit";
      this.routeCurrent = "";
      this.on("setServerID", this.setClientBrowserLink);
      this.on("onUnavailableID", this.goToUnavailableIDPage);
      this.on("onInvalidID", this.goToInvalidIDPage);
      return $(window).on("hashchange", function() {
        return _this.goToPage();
      });
    };

    AppView.prototype.setClientBrowserLink = function(serverID) {
      var link;
      this.serverID = serverID;
      this.goToPage();
      link = window.location.origin + "/connect/" + serverID + "/";
      return this.clientBrowserLink.attr("href", link);
    };

    AppView.prototype.updateConnectionCount = function(count) {
      return this.connectionDataView.model.set("count", count);
    };

    AppView.prototype.handleZipFile = function(file) {
      var reader,
        _this = this;
      reader = new FileReader();
      reader.onload = function(evt) {
        return new ClientServerUnarchiver({
          serverFileCollection: _this.serverFileCollection,
          routeCollection: _this.routeCollection,
          userDatabase: _this.userDatabase,
          contents: evt.target.result
        });
      };
      return reader.readAsArrayBuffer(file);
    };

    AppView.prototype.renderTopbarButtons = function() {
      $(".topbar-buttons").remove();
      $(".topbar").append(this.tmplTopbarButtons);
      this.clientBrowserLink = $(".navbar .browse");
      return this.archiveButton = $(".navbar .archive");
    };

    AppView.prototype.goToPage = function(slug) {
      if (slug) {
        location.hash = "#" + slug;
      } else {
        slug = location.hash.replace("#", "");
      }
      if (!this.routeMap[slug]) {
        slug = this.routeDefault;
      }
      if (slug === this.routeCurrent) {
        return;
      }
      this.routeCurrent = slug;
      return this.routeMap[slug]();
    };

    AppView.prototype.goToEditPage = function() {
      this.renderTopbarButtons();
      $(this.el).html(this.tmplEditPage);
      this.serverFileCollectionView = new ClientServerCollectionView({
        serverFileCollection: this.serverFileCollection,
        routeCollection: this.routeCollection,
        userDatabase: this.userDatabase,
        handleZipFcn: this.handleZipFile
      });
      return this.archiver = new ClientServerArchiver({
        serverName: this.serverID,
        serverFileCollection: this.serverFileCollection,
        routeCollection: this.routeCollection,
        userDatabase: this.userDatabase,
        button: this.archiveButton
      });
    };

    AppView.prototype.goToDatabasePage = function() {
      this.renderTopbarButtons();
      $(this.el).html(this.tmplDatabasePage());
      return this.databaseView = new DatabaseView({
        userDatabase: this.userDatabase
      });
    };

    AppView.prototype.goToUnavailableIDPage = function(desiredServerID) {
      $(".topbar-buttons").remove();
      return $(this.el).html(this.tmplServerIDMessage({
        message: "\"" + desiredServerID + "\" is unavailable.",
        alternativeServerID: this.getAlternativeServerID()
      }));
    };

    AppView.prototype.goToInvalidIDPage = function(desiredServerID) {
      $(".topbar-buttons").remove();
      return $(this.el).html(this.tmplServerIDMessage({
        message: "\"" + desiredServerID + "\" is an invalid server name.",
        alternativeServerID: this.getAlternativeServerID()
      }));
    };

    AppView.prototype.getAlternativeServerID = function() {
      var randomIndex;
      randomIndex = Math.floor(Math.random() * AppView.listOfAnimals.length);
      return AppView.listOfAnimals[randomIndex];
    };

    AppView.listOfAnimals = ["aardvark", "albatross", "alligator", "alpaca", "ant", "anteater", "antelope", "ape", "donkey", "badger", "bat", "bear", "beaver", "bee", "bison", "buffalo", "butterfly", "camel", "caribou", "cat", "caterpillar", "cattle", "cheetah", "chicken", "chinchilla", "clam", "cobra", "coyote", "crab", "crane", "crocodile", "crow", "deer", "dinosaur", "dog", "dogfish", "dolphin", "dove", "dragonfly", "duck", "eagle", "eel", "elephant", "elk", "falcon", "finch", "fish", "flamingo", "fly", "fox", "frog", "gazelle", "gerbil", "panda", "giraffe", "gnat", "goat", "goose", "goldfinch", "goldfish", "grasshopper", "hamster", "hare", "hawk", "hedgehog", "heron", "hornet", "hippo", "horse", "hummingbird", "hyena", "jaguar", "jay", "jellyfish", "kangaroo", "lark", "lemur", "lion", "leopard", "llama", "lyrebird", "magpie", "manatee", "meerkat", "mole", "monkey", "marten", "moose", "mouse", "newt", "narwhal", "mule", "nightingale", "octopus", "otter", "owl", "oyster", "panther", "parrot", "partridge", "pelican", "penguin", "pig", "pigeon", "pony", "porcupine", "porpoise", "quail", "rabbit", "raccoon", "ram", "rat", "raven", "reindeer", "salmon", "salamander", "scorpion", "seal", "shark", "sheep", "shrimp", "snail", "snake", "squid", "squirrel", "starling", "swallow", "swan", "tiger", "turkey", "trout", "turtle", "vulture", "whale", "wolf", "wolverine", "woodpecker", "yak", "zebra"];

    return AppView;

  })(Backbone.View);

}).call(this);
